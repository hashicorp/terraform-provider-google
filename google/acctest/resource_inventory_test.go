// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/acctest/resource_inventory_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package acctest_test

import (
	"strings"
	"testing"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/provider"
)

func TestResourceInventoryMetadataFound(t *testing.T) {
	resources := provider.ResourceMap()

	// Track statistics
	var (
		totalResources     = 0
		missingServicePkg  = 0
		missingServiceName = 0
	)

	// Create a map to store missing resources for summary report
	missingServicePkgResources := make(map[string]bool)
	missingServiceNameResources := make(map[string]bool)

	for resourceType := range resources {
		if strings.HasSuffix(resourceType, "_iam_member") ||
			strings.HasSuffix(resourceType, "_iam_policy") ||
			strings.HasSuffix(resourceType, "_iam_binding") {
			continue
		}
		totalResources++

		// Log each resource being checked
		// t.Logf("Checking metadata for resource: %s", resourceType)

		// Check for service package
		servicePackage := acctest.GetServicePackageForResourceType(resourceType)
		if servicePackage == "unknown" {
			// t.Logf("WARNING: Could not find service package for resource %s: %v", resourceType)
			missingServicePkg++
			missingServicePkgResources[resourceType] = true
		}

		apiServiceName := acctest.GetAPIServiceNameForResource(resourceType)
		// Check for API service name
		if apiServiceName == "unknown" {
			// t.Logf("WARNING: Could not find API service name for resource %s: %v", resourceType)
			missingServiceName++
			missingServiceNameResources[resourceType] = true
		}
		t.Logf(" %s servicePackage: %s apiServiceName: %s", resourceType, servicePackage, apiServiceName)

	}

	// Generate a summary report
	t.Logf("\n--- RESOURCE METADATA TEST SUMMARY ---")
	t.Logf("Total resources checked: %d", totalResources)
	t.Logf("Resources missing service package: %d (%.1f%%)",
		missingServicePkg,
		float64(missingServicePkg)/float64(totalResources)*100)
	t.Logf("Resources missing API service name: %d (%.1f%%)",
		missingServiceName,
		float64(missingServiceName)/float64(totalResources)*100)

	// List resources missing metadata (limited to first 10 for readability)
	if len(missingServicePkgResources) > 0 {
		t.Log("\nResources missing service package (first 10):")
		count := 0
		for res := range missingServicePkgResources {
			t.Logf("  - %s", res)
			count++
			if count >= 10 {
				remaining := len(missingServicePkgResources) - 10
				if remaining > 0 {
					t.Logf("  ... and %d more", remaining)
				}
				break
			}
		}
	}

	if len(missingServiceNameResources) > 0 {
		t.Log("\nResources missing API service name (first 10):")
		count := 0
		for res := range missingServiceNameResources {
			t.Logf("  - %s", res)
			count++
			if count >= 10 {
				remaining := len(missingServiceNameResources) - 10
				if remaining > 0 {
					t.Logf("  ... and %d more", remaining)
				}
				break
			}
		}
	}

	// Decide whether to fail the test based on coverage percentage
	const requiredCoveragePercent = 90.0

	servicePkgCoverage := (float64(totalResources-missingServicePkg) / float64(totalResources)) * 100
	serviceNameCoverage := (float64(totalResources-missingServiceName) / float64(totalResources)) * 100

	if servicePkgCoverage < requiredCoveragePercent {
		t.Errorf("Service package metadata coverage (%.1f%%) is below required threshold (%.1f%%)",
			servicePkgCoverage, requiredCoveragePercent)
	}

	if serviceNameCoverage < requiredCoveragePercent {
		t.Errorf("API service name metadata coverage (%.1f%%) is below required threshold (%.1f%%)",
			serviceNameCoverage, requiredCoveragePercent)
	}
}
