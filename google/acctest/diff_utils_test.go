// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/acctest/diff_utils_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package acctest_test

import (
	"os"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestReformConfigWithProvider(t *testing.T) {

	type testCase struct {
		name             string
		initialConfig    string
		providerToInsert string
		expectedConfig   string
	}

	cases := map[string]testCase{
		"replaces_google_beta_with_local": {
			name: "Replaces 'google-beta' provider with 'google-local'",
			initialConfig: `resource "google_new_resource" {
      provider = google-beta
}`,
			providerToInsert: "google-local",
			expectedConfig: `resource "google_new_resource" {
      provider = google-local
}`,
		},
		"inserts_local_provider_into_empty_config": {
			name: "Inserts 'google-local' provider when no provider block exists",
			initialConfig: `resource "google_alloydb_cluster" "default" {
    location   = "us-central1"
    network_config {
        network = google_compute_network.default.id
    }
}`,
			providerToInsert: "google-local",
			expectedConfig: `resource "google_alloydb_cluster" "default" {
  provider = google-local

    location   = "us-central1"
    network_config {
        network = google_compute_network.default.id
    }
}`,
		},
		"no_change_if_target_provider_already_present": {
			name: "Does not change config if target provider is already present",
			initialConfig: `resource "google_new_resource" {
      provider = google-local
}`,
			providerToInsert: "google-local",
			expectedConfig: `resource "google_new_resource" {
      provider = google-local
}`,
		},
		"inserts_provider_with_other_attributes": {
			name: "Inserts provider into a resource block with other attributes but no existing provider",
			initialConfig: `resource "google_compute_instance" "test" {
  name         = "test-instance"
  machine_type = "e2-medium"
}`,
			providerToInsert: "google-local",
			expectedConfig: `resource "google_compute_instance" "test" {
  provider = google-local

  name         = "test-instance"
  machine_type = "e2-medium"
}`,
		},
	}

	for tn, tc := range cases {
		t.Run(tn, func(t *testing.T) {
			newConfig := acctest.ReformConfigWithProvider(tc.initialConfig, tc.providerToInsert)

			if newConfig != tc.expectedConfig {
				t.Fatalf("Test Case: %s\nExpected config to be reformatted to:\n%q\nbut got:\n%q", tc.name, tc.expectedConfig, newConfig)
			}
			t.Logf("Test Case: %s\nReformed config:\n%s", tc.name, newConfig)
		})
	}
}

func TestInsertDiffSteps(t *testing.T) {

	var dummyCase = resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: `resource "google_new_resource" "original" {
                    provider = google-beta
                }`,
			},
			{
				Config: `resource "google_new_resource" "original" {
                    provider = google-beta
                }`,
			},
			{
				ResourceName:            "google_pubsub_subscription.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"topic"},
			},
			{
				Config: `resource "google_example_widget" "foo" {
					name = "dummy"
					provider = google-beta
				}`,
				Check: resource.ComposeTestCheckFunc(
					func(*terraform.State) error { return nil },
				),
			},
			{
				Config: `provider = "google-local"
						// ... configuration that is expected to cause an error
					`,
				ExpectError: regexp.MustCompile(`"restore_continuous_backup_source": conflicts with restore_backup_source`),
			},
		},
	}
	temp_file, err := os.CreateTemp("", "release_diff_test_output_*.log")
	if err != nil {
		t.Fatalf("Failed to create temp file: %v", err)
	}
	dummyCase = acctest.InsertDiffSteps(dummyCase, temp_file, "google-beta", "google-local")

	// Expected steps after InsertDiffSteps runs.
	// A "diff" step (using 'google-local') is added for each original step containing a Config field,
	// unless the step has ExpectError set.
	var expectedSteps = []resource.TestStep{
		{
			Config: `resource "google_new_resource" "original" {
                    provider = google-beta
                }`,
		},
		{
			Config: `resource "google_new_resource" "original" {
                    provider = google-local
                }`,
			ExpectNonEmptyPlan: false,
			PlanOnly:           true,
		},
		{
			Config: `resource "google_new_resource" "original" {
                    provider = google-beta
                }`,
		},
		{
			Config: `resource "google_new_resource" "original" {
                    provider = google-local
                }`,
			ExpectNonEmptyPlan: false,
			PlanOnly:           true,
		},
		{
			ResourceName: "google_pubsub_subscription.example", // No config, so no diff step added
		},
		{
			Config: `resource "google_example_widget" "foo" {
					name = "dummy"
					provider = google-beta
				}`,
			Check: resource.ComposeTestCheckFunc(
				func(*terraform.State) error { return nil },
			),
		},
		{
			Config: `resource "google_example_widget" "foo" {
					name = "dummy"
					provider = google-local
				}`,
			Check: resource.ComposeTestCheckFunc(
				func(*terraform.State) error { return nil },
			),
			ExpectNonEmptyPlan: false,
			PlanOnly:           true,
		},
		{
			Config: `provider = "google-local"
						// ... configuration that is expected to cause an error
					`, // expect error means we don't do a second step
		},
	}

	if len(dummyCase.Steps) != len(expectedSteps) {
		t.Fatalf("Expected %d steps, but got %d", len(expectedSteps), len(dummyCase.Steps))
	}

	for i, step := range dummyCase.Steps {
		if step.Config != expectedSteps[i].Config {
			t.Fatalf("Expected step %d config to be:\n%q\nbut got:\n%q", i, expectedSteps[i].Config, step.Config)
		}
		if step.PlanOnly != expectedSteps[i].PlanOnly {
			t.Fatalf("Expected step %d to have PlanOnly set to %v, but got %v", i, expectedSteps[i].PlanOnly, step.PlanOnly)
		}
	}

	defer os.Remove(temp_file.Name())
}
