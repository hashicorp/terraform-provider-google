// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccIdentityPlatformProjectDefaultConfig_identityPlatformProjectDefaultConfigExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckIdentityPlatformProjectDefaultConfigDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccIdentityPlatformProjectDefaultConfig_identityPlatformProjectDefaultConfigExample(context),
			},
			{
				ResourceName:      "google_identity_platform_project_default_config.default",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccIdentityPlatformProjectDefaultConfig_identityPlatformProjectDefaultConfigExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_identity_platform_project_default_config" "default" {
    sign_in {
        allow_duplicate_emails = true
       
        anonymous {
            enabled = true
        }
       
        email {
            enabled = true
            password_required = false
        }
       
        phone_number {
            enabled = true
            test_phone_numbers = {
                "+11231231234" = "000000"
            }
        }
    }
}
`, context)
}

func testAccCheckIdentityPlatformProjectDefaultConfigDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_identity_platform_project_default_config" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := googleProviderConfig(t)

			url, err := replaceVarsForTest(config, rs, "{{IdentityPlatformBasePath}}projects/{{project}}/config")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			res, err := sendRequest(config, "GET", billingProject, url, config.userAgent, nil)
			if err != nil {
				return fmt.Errorf("something went wrong trying to get the IdentityPlatformProjectDefaultConfig at %s", url)
			}

			signIn := res["signIn"]
			if signIn == nil {
				return nil
			}

			original := signIn.(map[string]interface{})
			if len(original) == 0 {
				return nil
			}

			transformed := make(map[string]interface{})
			transformed["email"] =
				flattenIdentityPlatformProjectDefaultConfigSignInEmail(original["email"], nil, nil)
			transformed["phone_number"] =
				flattenIdentityPlatformProjectDefaultConfigSignInPhoneNumber(original["phoneNumber"], nil, nil)
			transformed["anonymous"] =
				flattenIdentityPlatformProjectDefaultConfigSignInAnonymous(original["anonymous"], nil, nil)

			if transformed["email"] != nil || transformed["phone_number"] != nil || transformed["anonymous"] != nil {
				return fmt.Errorf("IdentityPlatformProjectDefaultConfig still exists at %s", url)
			}
		}

		return nil
	}
}
