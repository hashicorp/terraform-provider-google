// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform/helper/acctest"
	"github.com/hashicorp/terraform/helper/resource"
)

func TestAccIapWebTypeIamBinding(t *testing.T) {
	t.Parallel()

	org := getTestOrgFromEnv(t)
	pid := acctest.RandomWithPrefix("tf-test")
	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
		"role":          "roles/iap.httpsResourceAccessor",
		"org":           org,
		"pid":           pid,
	}

	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccIapWebTypeIamBinding_basic(context),
			},
			{
				ResourceName:      "google_iap_web_type_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/iap_web/appengine-%s roles/iap.httpsResourceAccessor", pid, pid),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				// Test Iam Binding update
				Config: testAccIapWebTypeIamBinding_update(context),
			},
			{
				ResourceName:      "google_iap_web_type_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/iap_web/appengine-%s roles/iap.httpsResourceAccessor", pid, pid),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccIapWebTypeIamMember(t *testing.T) {
	t.Parallel()

	org := getTestOrgFromEnv(t)
	pid := acctest.RandomWithPrefix("tf-test")
	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
		"role":          "roles/iap.httpsResourceAccessor",
		"org":           org,
		"pid":           pid,
	}

	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAccIapWebTypeIamMember_basic(context),
			},
			{
				ResourceName:      "google_iap_web_type_iam_member.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/iap_web/appengine-%s roles/iap.httpsResourceAccessor user:admin@hashicorptest.com", pid, pid),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccIapWebTypeIamPolicy(t *testing.T) {
	t.Parallel()

	org := getTestOrgFromEnv(t)
	pid := acctest.RandomWithPrefix("tf-test")
	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
		"role":          "roles/iap.httpsResourceAccessor",
		"org":           org,
		"pid":           pid,
	}

	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccIapWebTypeIamPolicy_basic(context),
			},
			{
				ResourceName:      "google_iap_web_type_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/iap_web/appengine-%s", pid, pid),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccIapWebTypeIamMember_basic(context map[string]interface{}) string {
	return Nprintf(`
resource "google_project" "my_project" {
  name       = "tf-test-project"
  project_id = "%{pid}"
  org_id     = "%{org}"
}

resource "google_app_engine_application" "app" {
  project     = "${google_project.my_project.project_id}"
  location_id = "us-central"
}

resource "google_iap_web_type_iam_member" "foo" {
	app_engine_id = google_app_engine_application.app.app_id
	role          = "%{role}"
	member        = "user:admin@hashicorptest.com"
}
`, context)
}

func testAccIapWebTypeIamPolicy_basic(context map[string]interface{}) string {
	return Nprintf(`
data "google_iam_policy" "foo" {
	binding {
		role    = "%{role}"
		members = ["user:admin@hashicorptest.com"]
	}
}

resource "google_project" "my_project" {
  name       = "tf-test-project"
  project_id = "%{pid}"
  org_id     = "%{org}"
}

resource "google_app_engine_application" "app" {
  project     = "${google_project.my_project.project_id}"
  location_id = "us-central"
}

resource "google_iap_web_type_iam_policy" "foo" {
	app_engine_id = google_app_engine_application.app.app_id
	policy_data   = "${data.google_iam_policy.foo.policy_data}"
}
`, context)
}

func testAccIapWebTypeIamBinding_basic(context map[string]interface{}) string {
	return Nprintf(`
resource "google_project" "my_project" {
  name       = "tf-test-project"
  project_id = "%{pid}"
  org_id     = "%{org}"
}

resource "google_app_engine_application" "app" {
  project     = "${google_project.my_project.project_id}"
  location_id = "us-central"
}

resource "google_iap_web_type_iam_binding" "foo" {
	app_engine_id = google_app_engine_application.app.app_id
	role          = "%{role}"
	members       = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAccIapWebTypeIamBinding_update(context map[string]interface{}) string {
	return Nprintf(`
resource "google_project" "my_project" {
  name       = "tf-test-project"
  project_id = "%{pid}"
  org_id     = "%{org}"
}

resource "google_app_engine_application" "app" {
  project     = "${google_project.my_project.project_id}"
  location_id = "us-central"
}

resource "google_iap_web_type_iam_binding" "foo" {
	app_engine_id = google_app_engine_application.app.app_id
	role          = "%{role}"
	members       = ["user:admin@hashicorptest.com", "user:paddy@hashicorp.com"]
}
`, context)
}
