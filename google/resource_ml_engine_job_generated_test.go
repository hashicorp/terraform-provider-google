// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)

func TestAccMLEngineJob_mlJobTrainingExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
	}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckMLEngineJobDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccMLEngineJob_mlJobTrainingExample(context),
			},
			{
				ResourceName:      "google_ml_engine_job.default",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccMLEngineJob_mlJobTrainingExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_ml_engine_job" "default" { {
  job_id = "ml_job_training"
 
  training_input {
    job_dir         = "gs://cloud-samples-data/scikit_learn_job_dir%{random_suffix}"
    package_uris    = ["gs://cloud-samples-data/scikit_learn_job_dir/packages/fd65c711be463b2d1e841325d389b6c557db097c2281d40423c8451579238523/census_training-0.0.0.tar.gz%{random_suffix}"]
    python_module   = "census_training.train"
    python_version  = "2.7"
    region          = "us-central1"
    runtime_version = "1.14"
    scale_tier      = "BASIC"
  }
}
`, context)
}

func TestAccMLEngineJob_mlJobTensorExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
	}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckMLEngineJobDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccMLEngineJob_mlJobTensorExample(context),
			},
			{
				ResourceName:      "google_ml_engine_job.default",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccMLEngineJob_mlJobTensorExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_ml_engine_job" "default" {
  job_id = "ml_job_tesnor"

  training_input {
    job_dir         = "gs://cloud-samples-data/tensorflow_census_training%{random_suffix}"
    package_uris    = [""gs://cloud-samples-data/tensorflow_census_training/packages/aa1821b516689e2b95d2a0dec00302e50314e20e8ee303721ca3f31fd46091e3/preprocessing-1.0.tar.gz%{random_suffix}""]
    args            = ["--train-files=gs://workingnow/data/adult.data.csv", "--eval-files=gs://workingnow/data/adult.test.csv", "--train-steps=1000", "--eval-steps=100"]
    python_module   = "trainer.task"
    region          = "us-central1"
    runtime_version = "1.14"
    scale_tier      = "BASIC"
  }
}
`, context)
}

func TestAccMLEngineJob_mlJobContainerExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
	}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckMLEngineJobDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccMLEngineJob_mlJobContainerExample(context),
			},
			{
				ResourceName:      "google_ml_engine_job.default",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccMLEngineJob_mlJobContainerExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_ml_engine_job" "default" {
  job_id = "ml_job_container"

  training_input {
    master_config {
      image_uri = "gcr.io/test-proj-234209/mnist_pytorch_custom_container:mnist_pytorch_cpu%{random_suffix}"
    }

    args = [
      "--model-dir=gs://aiptrainingbucket/pytorch_model_test4AIP20191105_143006",
      "--epochs=10",
    ]

    region        = "us-east1"
  }
}
`, context)
}

func testAccCheckMLEngineJobDestroy(s *terraform.State) error {
	for name, rs := range s.RootModule().Resources {
		if rs.Type != "google_ml_engine_job" {
			continue
		}
		if strings.HasPrefix(name, "data.") {
			continue
		}

		config := testAccProvider.Meta().(*Config)

		url, err := replaceVarsForTest(config, rs, "{{MLEngineBasePath}}projects/{{project}}/jobs/{{name}}")
		if err != nil {
			return err
		}

		_, err = sendRequest(config, "GET", "", url, nil)
		if err == nil {
			return fmt.Errorf("MLEngineJob still exists at %s", url)
		}
	}

	return nil
}
