// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package beyondcorp_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccBeyondcorpSecurityGateway_beyondcorpSecurityGatewayBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckBeyondcorpSecurityGatewayDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBeyondcorpSecurityGateway_beyondcorpSecurityGatewayBasicExample(context),
			},
			{
				ResourceName:            "google_beyondcorp_security_gateway.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "security_gateway_id"},
			},
		},
	})
}

func testAccBeyondcorpSecurityGateway_beyondcorpSecurityGatewayBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_beyondcorp_security_gateway" "example" {
  security_gateway_id = "default%{random_suffix}"
  display_name = "My Security Gateway resource"
  hubs { region = "us-central1" }
}
`, context)
}

func TestAccBeyondcorpSecurityGateway_beyondcorpSecurityGatewaySpaExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckBeyondcorpSecurityGatewayDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBeyondcorpSecurityGateway_beyondcorpSecurityGatewaySpaExample(context),
			},
			{
				ResourceName:            "google_beyondcorp_security_gateway.example-spa",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "security_gateway_id"},
			},
		},
	})
}

func testAccBeyondcorpSecurityGateway_beyondcorpSecurityGatewaySpaExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_beyondcorp_security_gateway" "example-spa" {
  security_gateway_id = "tf-test-default-spa%{random_suffix}"
  display_name = "My SPA Security Gateway resource"
  proxy_protocol_config {
    allowed_client_headers = ["header1", "header2"]
    contextual_headers {
      user_info {
        output_type = "PROTOBUF"
      }
      group_info {
        output_type = "JSON"
      }
      device_info {
        output_type = "NONE"
      }
      output_type = "NONE"
    }
    metadata_headers = {
      metadata-header1 = "value1"
      metadata-header2 = "value2"
    }
    gateway_identity = "RESOURCE_NAME"
    client_ip = true
  }
  service_discovery {
    api_gateway {
      resource_override {
        path = "/api/v1/routes"
       }
    }
  }
}
`, context)
}

func testAccCheckBeyondcorpSecurityGatewayDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_beyondcorp_security_gateway" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{BeyondcorpBasePath}}projects/{{project}}/locations/{{location}}/securityGateways/{{security_gateway_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("BeyondcorpSecurityGateway still exists at %s", url)
			}
		}

		return nil
	}
}
