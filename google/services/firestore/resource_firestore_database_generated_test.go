// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firestore_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccFirestoreDatabase_firestoreDatabaseExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":              envvar.GetTestProjectFromEnv(),
		"delete_protection_state": "DELETE_PROTECTION_DISABLED",
		"random_suffix":           acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirestoreDatabaseDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreDatabase_firestoreDatabaseExample(context),
			},
			{
				ResourceName:            "google_firestore_database.database",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"deletion_policy", "etag", "project"},
			},
		},
	})
}

func testAccFirestoreDatabase_firestoreDatabaseExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firestore_database" "database" {
  project                           = "%{project_id}"
  name                              = "tf-test-database-id%{random_suffix}"
  location_id                       = "nam5"
  type                              = "FIRESTORE_NATIVE"
  concurrency_mode                  = "OPTIMISTIC"
  app_engine_integration_mode       = "DISABLED"
  point_in_time_recovery_enablement = "POINT_IN_TIME_RECOVERY_ENABLED"
  delete_protection_state           = "%{delete_protection_state}"
  deletion_policy                   = "DELETE"
}
`, context)
}

func TestAccFirestoreDatabase_firestoreCmekDatabaseExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":              envvar.GetTestProjectFromEnv(),
		"delete_protection_state": "DELETE_PROTECTION_DISABLED",
		"random_suffix":           acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirestoreDatabaseDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreDatabase_firestoreCmekDatabaseExample(context),
			},
			{
				ResourceName:            "google_firestore_database.database",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"deletion_policy", "etag", "project"},
			},
		},
	})
}

func testAccFirestoreDatabase_firestoreCmekDatabaseExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_firestore_database" "database" {
  project                           = "%{project_id}"
  name                              = "tf-test-cmek-database-id%{random_suffix}"
  location_id                       = "nam5"
  type                              = "FIRESTORE_NATIVE"
  concurrency_mode                  = "OPTIMISTIC"
  app_engine_integration_mode       = "DISABLED"
  point_in_time_recovery_enablement = "POINT_IN_TIME_RECOVERY_ENABLED"
  delete_protection_state           = "%{delete_protection_state}"
  deletion_policy                   = "DELETE"
  cmek_config {
    kms_key_name                    = google_kms_crypto_key.crypto_key.id
  }

  depends_on = [
    google_kms_crypto_key_iam_binding.firestore_cmek_keyuser
  ]
}

resource "google_kms_crypto_key" "crypto_key" {
  name     = "tf-test-kms-key%{random_suffix}"
  key_ring = google_kms_key_ring.key_ring.id
  purpose  = "ENCRYPT_DECRYPT"
}

resource "google_kms_key_ring" "key_ring" {
  name     = "tf-test-kms-key-ring%{random_suffix}"
  location = "us"
}

resource "google_kms_crypto_key_iam_binding" "firestore_cmek_keyuser" {
  crypto_key_id = google_kms_crypto_key.crypto_key.id
  role          = "roles/cloudkms.cryptoKeyEncrypterDecrypter"

  members = [
    "serviceAccount:service-${data.google_project.project.number}@gcp-sa-firestore.iam.gserviceaccount.com",
  ]
}
`, context)
}

func TestAccFirestoreDatabase_firestoreDatabaseInDatastoreModeExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":              envvar.GetTestProjectFromEnv(),
		"delete_protection_state": "DELETE_PROTECTION_DISABLED",
		"random_suffix":           acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirestoreDatabaseDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreDatabase_firestoreDatabaseInDatastoreModeExample(context),
			},
			{
				ResourceName:            "google_firestore_database.datastore_mode_database",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"deletion_policy", "etag", "project"},
			},
		},
	})
}

func testAccFirestoreDatabase_firestoreDatabaseInDatastoreModeExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firestore_database" "datastore_mode_database" {
  project                           = "%{project_id}"
  name                              = "tf-test-database-id%{random_suffix}"
  location_id                       = "nam5"
  type                              = "DATASTORE_MODE"
  concurrency_mode                  = "OPTIMISTIC"
  app_engine_integration_mode       = "DISABLED"
  point_in_time_recovery_enablement = "POINT_IN_TIME_RECOVERY_ENABLED"
  delete_protection_state           = "%{delete_protection_state}"
  deletion_policy                   = "DELETE"
}
`, context)
}

func TestAccFirestoreDatabase_firestoreCmekDatabaseInDatastoreModeExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":              envvar.GetTestProjectFromEnv(),
		"delete_protection_state": "DELETE_PROTECTION_DISABLED",
		"random_suffix":           acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirestoreDatabaseDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreDatabase_firestoreCmekDatabaseInDatastoreModeExample(context),
			},
			{
				ResourceName:            "google_firestore_database.database",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"deletion_policy", "etag", "project"},
			},
		},
	})
}

func testAccFirestoreDatabase_firestoreCmekDatabaseInDatastoreModeExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_firestore_database" "database" {
  project                           = "%{project_id}"
  name                              = "tf-test-cmek-database-id%{random_suffix}"
  location_id                       = "nam5"
  type                              = "DATASTORE_MODE"
  concurrency_mode                  = "OPTIMISTIC"
  app_engine_integration_mode       = "DISABLED"
  point_in_time_recovery_enablement = "POINT_IN_TIME_RECOVERY_ENABLED"
  delete_protection_state           = "%{delete_protection_state}"
  deletion_policy                   = "DELETE"
  cmek_config {
    kms_key_name                    = google_kms_crypto_key.crypto_key.id
  }

  depends_on = [
    google_kms_crypto_key_iam_binding.firestore_cmek_keyuser
  ]
}

resource "google_kms_crypto_key" "crypto_key" {
  name     = "tf-test-kms-key%{random_suffix}"
  key_ring = google_kms_key_ring.key_ring.id
  purpose  = "ENCRYPT_DECRYPT"
}

resource "google_kms_key_ring" "key_ring" {
  name     = "tf-test-kms-key-ring%{random_suffix}"
  location = "us"
}

resource "google_kms_crypto_key_iam_binding" "firestore_cmek_keyuser" {
  crypto_key_id = google_kms_crypto_key.crypto_key.id
  role          = "roles/cloudkms.cryptoKeyEncrypterDecrypter"

  members = [
    "serviceAccount:service-${data.google_project.project.number}@gcp-sa-firestore.iam.gserviceaccount.com",
  ]
}
`, context)
}

func testAccCheckFirestoreDatabaseDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_firestore_database" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{FirestoreBasePath}}projects/{{project}}/databases/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("FirestoreDatabase still exists at %s", url)
			}
		}

		return nil
	}
}
