// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firestore_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccFirestoreBackupSchedule_firestoreBackupScheduleDailyExample(t *testing.T) {
	t.Parallel()

	randomSuffix := acctest.RandString(t, 10)
	context := make(map[string]interface{})
	context["random_suffix"] = randomSuffix

	envVars := map[string]interface{}{
		"project_id": envvar.GetTestProjectFromEnv(),
	}
	for k, v := range envVars {
		context[k] = v
	}

	overrides := map[string]interface{}{
		"delete_protection_state": "DELETE_PROTECTION_DISABLED",
	}
	for k, v := range overrides {
		context[k] = v
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirestoreBackupScheduleDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreBackupSchedule_firestoreBackupScheduleDailyExample(context),
			},
			{
				ResourceName:            "google_firestore_backup_schedule.daily-backup",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"database"},
			},
			{
				ResourceName:       "google_firestore_backup_schedule.daily-backup",
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
				ImportStateKind:    resource.ImportBlockWithResourceIdentity,
			},
		},
	})
}

func testAccFirestoreBackupSchedule_firestoreBackupScheduleDailyExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firestore_database" "database" {
  project     = "%{project_id}"
  name        = "tf-test-database-id%{random_suffix}"
  location_id = "nam5"
  type        = "FIRESTORE_NATIVE"

  delete_protection_state = "%{delete_protection_state}"
  deletion_policy         = "DELETE"
}

resource "google_firestore_backup_schedule" "daily-backup" {
  project  = "%{project_id}"
  database = google_firestore_database.database.name

  retention = "8467200s" // 14 weeks (maximum possible retention)

  daily_recurrence {}
}
`, context)
}

func TestAccFirestoreBackupSchedule_firestoreBackupScheduleWeeklyExample(t *testing.T) {
	t.Parallel()

	randomSuffix := acctest.RandString(t, 10)
	context := make(map[string]interface{})
	context["random_suffix"] = randomSuffix

	envVars := map[string]interface{}{
		"project_id": envvar.GetTestProjectFromEnv(),
	}
	for k, v := range envVars {
		context[k] = v
	}

	overrides := map[string]interface{}{
		"delete_protection_state": "DELETE_PROTECTION_DISABLED",
	}
	for k, v := range overrides {
		context[k] = v
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirestoreBackupScheduleDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreBackupSchedule_firestoreBackupScheduleWeeklyExample(context),
			},
			{
				ResourceName:            "google_firestore_backup_schedule.weekly-backup",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"database"},
			},
		},
	})
}

func testAccFirestoreBackupSchedule_firestoreBackupScheduleWeeklyExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firestore_database" "database" {
  project     = "%{project_id}"
  name        = "tf-test-database-id%{random_suffix}"
  location_id = "nam5"
  type        = "FIRESTORE_NATIVE"

  delete_protection_state = "%{delete_protection_state}"
  deletion_policy         = "DELETE"
}

resource "google_firestore_backup_schedule" "weekly-backup" {
  project  = "%{project_id}"
  database = google_firestore_database.database.name

  retention = "8467200s" // 14 weeks (maximum possible retention)

  weekly_recurrence {
    day = "SUNDAY"
  }
}
`, context)
}

func testAccCheckFirestoreBackupScheduleDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_firestore_backup_schedule" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{FirestoreBasePath}}projects/{{project}}/databases/{{database}}/backupSchedules/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("FirestoreBackupSchedule still exists at %s", url)
			}
		}

		return nil
	}
}
