// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firestore_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccFirestoreUserCreds_firestoreUserCredsBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirestoreUserCredsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreUserCreds_firestoreUserCredsBasicExample(context),
			},
			{
				ResourceName:            "google_firestore_user_creds.my-user-creds",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"database", "secure_password"},
			},
		},
	})
}

func testAccFirestoreUserCreds_firestoreUserCredsBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firestore_database" "database" {
  project                 = "%{project_id}"
  name                    = "tf-test-database-id-mongodb-compatible%{random_suffix}"
  location_id             = "nam5"
  type                    = "FIRESTORE_NATIVE"
  database_edition        = "ENTERPRISE"

  delete_protection_state = "DELETE_PROTECTION_DISABLED"
  deletion_policy         = "DELETE"
}

resource "google_firestore_user_creds" "my-user-creds" {
  project  = "%{project_id}"
  database = google_firestore_database.database.name
  name     = "my-username"
}
`, context)
}

func TestAccFirestoreUserCreds_firestoreUserCredsWithSecretManagerExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirestoreUserCredsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreUserCreds_firestoreUserCredsWithSecretManagerExample(context),
			},
			{
				ResourceName:            "google_firestore_user_creds.my-user-creds",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"database", "secure_password"},
			},
		},
	})
}

func testAccFirestoreUserCreds_firestoreUserCredsWithSecretManagerExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firestore_database" "database" {
  project                 = "%{project_id}"
  name                    = "tf-test-database-id-mongodb-compatible%{random_suffix}"
  location_id             = "nam5"
  type                    = "FIRESTORE_NATIVE"
  database_edition        = "ENTERPRISE"

  delete_protection_state = "DELETE_PROTECTION_DISABLED"
  deletion_policy         = "DELETE"
}

resource "google_firestore_user_creds" "my-user-creds" {
  project  = "%{project_id}"
  database = google_firestore_database.database.name
  name     = "my-username"
}

resource "google_secret_manager_secret" "my-fs-user-creds-secret" {
  project   = "%{project_id}"
  secret_id = "my-fs-user-creds-secret"

  replication {
    auto {}
  }
}

resource "google_secret_manager_secret_version" "my-fs-user-creds-secret-version" {
  secret      = google_secret_manager_secret.my-fs-user-creds-secret.id
  secret_data = google_firestore_user_creds.my-user-creds.secure_password
}
`, context)
}

func testAccCheckFirestoreUserCredsDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_firestore_user_creds" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{FirestoreBasePath}}projects/{{project}}/databases/{{database}}/userCreds/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("FirestoreUserCreds still exists at %s", url)
			}
		}

		return nil
	}
}
