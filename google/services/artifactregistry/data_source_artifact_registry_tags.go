// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/artifactregistry/data_source_artifact_registry_tags.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package artifactregistry

import (
	"fmt"
	"net/http"
	"net/url"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func DataSourceArtifactRegistryTags() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceArtifactRegistryTagsRead,
		Schema: map[string]*schema.Schema{
			"location": {
				Type:     schema.TypeString,
				Required: true,
			},
			"repository_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"package_name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"filter": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"tags": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"version": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
		},
	}
}

func dataSourceArtifactRegistryTagsRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return err
	}

	basePath, err := tpgresource.ReplaceVars(d, config, "{{ArtifactRegistryBasePath}}")
	if err != nil {
		return fmt.Errorf("Error setting Artifact Registry base path: %s", err)
	}

	resourcePath, err := tpgresource.ReplaceVars(d, config, fmt.Sprintf("projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/packages/{{package_name}}/tags"))
	if err != nil {
		return fmt.Errorf("Error setting resource path: %s", err)
	}

	urlRequest := basePath + resourcePath

	filter := ""
	if v, ok := d.GetOk("filter"); ok {
		filter = v.(string)

		u, err := url.Parse(urlRequest)
		if err != nil {
			return fmt.Errorf("Error parsing URL: %s", err)
		}

		q := u.Query()
		q.Set("filter", filter)
		u.RawQuery = q.Encode()
		urlRequest = u.String()
	}

	headers := make(http.Header)
	tags := make([]map[string]interface{}, 0)
	pageToken := ""

	for {
		u, err := url.Parse(urlRequest)
		if err != nil {
			return fmt.Errorf("Error parsing URL: %s", err)
		}

		q := u.Query()
		if pageToken != "" {
			q.Set("pageToken", pageToken)
		}
		u.RawQuery = q.Encode()

		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "GET",
			RawURL:    u.String(),
			UserAgent: userAgent,
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error listing Artifact Registry tags: %s", err)
		}

		if items, ok := res["tags"].([]interface{}); ok {
			for _, item := range items {
				tag := item.(map[string]interface{})

				annotations := make(map[string]string)
				if anno, ok := tag["annotations"].(map[string]interface{}); ok {
					for k, v := range anno {
						if val, ok := v.(string); ok {
							annotations[k] = val
						}
					}
				}

				getString := func(m map[string]interface{}, key string) string {
					if v, ok := m[key].(string); ok {
						return v
					}
					return ""
				}

				tags = append(tags, map[string]interface{}{
					"name":    getString(tag, "name"),
					"version": getString(tag, "version"),
				})
			}
		}

		if nextToken, ok := res["nextPageToken"].(string); ok && nextToken != "" {
			pageToken = nextToken
		} else {
			break
		}
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error setting project: %s", err)
	}

	if err := d.Set("tags", tags); err != nil {
		return fmt.Errorf("Error setting Artifact Registry tags: %s", err)
	}

	d.SetId(resourcePath)

	return nil
}
