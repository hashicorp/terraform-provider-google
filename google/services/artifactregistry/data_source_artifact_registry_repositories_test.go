// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/artifactregistry/data_source_artifact_registry_repositories_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package artifactregistry_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccDataSourceArtifactRegistryRepositories_basic(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"location":      envvar.GetTestRegionFromEnv(),
		"random_suffix": acctest.RandString(t, 8),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceArtifactRegistryRepositoriesConfig(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.all", "project"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.all", "repositories.0.id"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.all", "repositories.1.id"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.all", "repositories.2.id"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.all", "repositories.0.repository_id"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.all", "repositories.0.format"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.all", "repositories.0.create_time"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.all", "repositories.0.update_time"),
				),
			},
			{
				Config: testAccDataSourceArtifactRegistryRepositoriesConfigWithFilter(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.filtered", "repositories.0.id"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.filtered", "repositories.0.repository_id"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.filtered", "repositories.0.format"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.filtered", "repositories.0.create_time"),
					resource.TestCheckResourceAttrSet("data.google_artifact_registry_repositories.filtered", "repositories.0.update_time"),
				),
			},
		},
	})
}

func testAccDataSourceArtifactRegistryRepositoriesConfig(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_artifact_registry_repository" "repo1" {
  location      = "%{location}"
  repository_id = "tf-test-repo1%{random_suffix}"
  format        = "DOCKER"
  description   = "repo1 desc"
}

resource "google_artifact_registry_repository" "repo2" {
  location      = "%{location}"
  repository_id = "tf-test-repo2%{random_suffix}"
  format        = "DOCKER"
  description   = "repo2 desc"
}

resource "google_artifact_registry_repository" "repo3" {
  location      = "%{location}"
  repository_id = "tf-test-repo3%{random_suffix}"
  format        = "DOCKER"
  description   = "repo3 desc"
}

data "google_artifact_registry_repositories" "all" {
  location = "%{location}"

  depends_on = [
    google_artifact_registry_repository.repo1,
    google_artifact_registry_repository.repo2,
    google_artifact_registry_repository.repo3,
  ]
}
`, context)
}

func testAccDataSourceArtifactRegistryRepositoriesConfigWithFilter(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_artifact_registry_repository" "repo1" {
  location      = "%{location}"
  repository_id = "tf-test-repo1%{random_suffix}"
  format        = "DOCKER"
  description   = "repo1 desc"
}

resource "google_artifact_registry_repository" "repo2" {
  location      = "%{location}"
  repository_id = "tf-test-repo2%{random_suffix}"
  format        = "DOCKER"
  description   = "repo2 desc"
}

resource "google_artifact_registry_repository" "repo3" {
  location      = "%{location}"
  repository_id = "tf-test-repo3%{random_suffix}"
  format        = "DOCKER"
  description   = "repo3 desc"
}

resource "google_artifact_registry_repository" "repo4" {
  location      = "%{location}"
  repository_id = "tf-acc-repo4%{random_suffix}"
  format        = "DOCKER"
  description   = "acc desc"
}

data "google_artifact_registry_repositories" "filtered" {
  location    = "%{location}"
  name_filter = "*acc*"

  depends_on = [
    google_artifact_registry_repository.repo1,
    google_artifact_registry_repository.repo2,
    google_artifact_registry_repository.repo3,
	  google_artifact_registry_repository.repo4,
  ]
}
`, context)
}
