// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package discoveryengine_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDiscoveryEngineRecommendationEngine_discoveryengineRecommendationengineGenericExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDiscoveryEngineRecommendationEngineDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDiscoveryEngineRecommendationEngine_discoveryengineRecommendationengineGenericExample(context),
			},
			{
				ResourceName:            "google_discovery_engine_recommendation_engine.generic",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"common_config", "engine_id", "industry_vertical", "location"},
			},
		},
	})
}

func testAccDiscoveryEngineRecommendationEngine_discoveryengineRecommendationengineGenericExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_discovery_engine_data_store" "generic" {
  location                     = "global"
  data_store_id                = "tf-test-recommendation-datastore-id%{random_suffix}"
  display_name                 = "tf-test-structured-datastore"
  industry_vertical            = "GENERIC"
  content_config               = "NO_CONTENT"
  solution_types               = ["SOLUTION_TYPE_RECOMMENDATION"]
  create_advanced_site_search  = false
  skip_default_schema_creation = false
}
resource "google_discovery_engine_recommendation_engine" "generic" {
  engine_id                    = "tf-test-recommendation-engine-id%{random_suffix}"
  location                     = google_discovery_engine_data_store.generic.location
  display_name                 = "Example Recommendation Engine"
  data_store_ids               = [google_discovery_engine_data_store.generic.data_store_id]
  industry_vertical            = "GENERIC"
  common_config {
    company_name               = "test-company"
  }
}
`, context)
}

func TestAccDiscoveryEngineRecommendationEngine_discoveryengineRecommendationengineMediaExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDiscoveryEngineRecommendationEngineDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDiscoveryEngineRecommendationEngine_discoveryengineRecommendationengineMediaExample(context),
			},
			{
				ResourceName:            "google_discovery_engine_recommendation_engine.media",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"common_config", "engine_id", "industry_vertical", "location"},
			},
		},
	})
}

func testAccDiscoveryEngineRecommendationEngine_discoveryengineRecommendationengineMediaExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_discovery_engine_data_store" "media" {
  location                     = "global"
  data_store_id                = "tf-test-recommendation-datastore-id%{random_suffix}"
  display_name                 = "tf-test-structured-datastore"
  industry_vertical            = "MEDIA"
  content_config               = "NO_CONTENT"
  solution_types               = ["SOLUTION_TYPE_RECOMMENDATION"]
  create_advanced_site_search  = false
  skip_default_schema_creation = false
}
resource "google_discovery_engine_recommendation_engine" "media" {
  engine_id                    = "tf-test-recommendation-engine-id%{random_suffix}"
  location                     = google_discovery_engine_data_store.media.location
  display_name                 = "Example Media Recommendation Engine"
  data_store_ids               = [google_discovery_engine_data_store.media.data_store_id]
  industry_vertical            = "MEDIA"
  media_recommendation_engine_config {
    type                       = "recommended-for-you"
    optimization_objective     = "ctr"
    training_state             = "PAUSED"
    engine_features_config {
        recommended_for_you_config {
            context_event_type = "generic"
        }
    }
  }
  common_config {
    company_name               = "test-company"
  }
}
`, context)
}

func testAccCheckDiscoveryEngineRecommendationEngineDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_discovery_engine_recommendation_engine" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/default_collection/engines/{{engine_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DiscoveryEngineRecommendationEngine still exists at %s", url)
			}
		}

		return nil
	}
}
