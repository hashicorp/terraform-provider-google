// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package discoveryengine_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDiscoveryEngineDataConnector_discoveryengineDataconnectorJiraBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"client_id":     "tf-test-client-id",
		"client_secret": "tf-test-client-secret",
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDiscoveryEngineDataConnectorDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDiscoveryEngineDataConnector_discoveryengineDataconnectorJiraBasicExample(context),
			},
			{
				ResourceName:            "google_discovery_engine_data_connector.jira-basic",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"collection_display_name", "collection_id", "json_params", "location", "params"},
			},
		},
	})
}

func testAccDiscoveryEngineDataConnector_discoveryengineDataconnectorJiraBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_discovery_engine_data_connector" "jira-basic" {
  location                  = "global"
  collection_id             = "tf-test-collection-id%{random_suffix}"
  collection_display_name   = "tf-test-dataconnector-jira"
  data_source             = "jira"
  params = {
      instance_id         = "33db20a3-dc45-4305-a505-d70b68599840"
      instance_uri        = "https://vaissptbots1.atlassian.net/"
      client_secret       = "%{client_secret}"
      client_id           = "%{client_id}"
      refresh_token       = "fill-in-the-blank"
  }
  refresh_interval        = "86400s"
  entities {
      entity_name         = "project"
  }
  entities {
      entity_name         = "issue"
  }
  entities {
      entity_name         = "attachment"
  }
  entities {
      entity_name         = "comment"
  }
  entities {
      entity_name         = "worklog"
  }
  static_ip_enabled       = true
}
`, context)
}

func testAccCheckDiscoveryEngineDataConnectorDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_discovery_engine_data_connector" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DiscoveryEngineDataConnector still exists at %s", url)
			}
		}

		return nil
	}
}
