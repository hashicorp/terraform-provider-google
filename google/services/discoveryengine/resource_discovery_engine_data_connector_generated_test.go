// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package discoveryengine_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDiscoveryEngineDataConnector_discoveryengineDataconnectorServicenowBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDiscoveryEngineDataConnectorDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDiscoveryEngineDataConnector_discoveryengineDataconnectorServicenowBasicExample(context),
			},
			{
				ResourceName:            "google_discovery_engine_data_connector.servicenow-basic",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"auto_run_disabled", "collection_display_name", "collection_id", "incremental_sync_disabled", "json_params", "location", "params", "sync_mode"},
			},
		},
	})
}

func testAccDiscoveryEngineDataConnector_discoveryengineDataconnectorServicenowBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_discovery_engine_data_connector" "servicenow-basic" {
  location                     = "global"
  collection_id                = "tf-test-collection-id%{random_suffix}"
  collection_display_name      = "tf-test-dataconnector-servicenow"
  data_source                  = "servicenow"
  params = {
    auth_type                  = "OAUTH_PASSWORD_GRANT"
    instance_uri               = "https://gcpconnector1.service-now.com/"
    client_id                  = "SECRET_MANAGER_RESOURCE_NAME"
    client_secret              = "SECRET_MANAGER_RESOURCE_NAME"
    static_ip_enabled          = "false"
    user_account               = "connectorsuserqa@google.com"
    password                   = "SECRET_MANAGER_RESOURCE_NAME"
  }
  refresh_interval             = "86400s"
  incremental_refresh_interval = "21600s"
  entities {
    entity_name                = "catalog"
    params                     = jsonencode({
      "inclusion_filters": {
        "knowledgeBaseSysId": [
          "123"
        ]
      }
    })
  }
  entities {
    entity_name                = "incident"
    params                     = jsonencode({
      "inclusion_filters": {
        "knowledgeBaseSysId": [
          "123"
        ]
      }
    })
  }
  entities {
    entity_name                = "knowledge_base"
    params                     = jsonencode({
      "inclusion_filters": {
        "knowledgeBaseSysId": [
          "123"
        ]
      }
    })
  }
  static_ip_enabled            = false
  connector_modes              = ["DATA_INGESTION"]
  sync_mode                    = "PERIODIC"
}
`, context)
}

func testAccCheckDiscoveryEngineDataConnectorDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_discovery_engine_data_connector" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DiscoveryEngineDataConnector still exists at %s", url)
			}
		}

		return nil
	}
}
