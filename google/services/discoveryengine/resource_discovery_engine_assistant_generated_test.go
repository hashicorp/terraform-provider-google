// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package discoveryengine_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDiscoveryEngineAssistant_discoveryengineAssistantBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDiscoveryEngineAssistantDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDiscoveryEngineAssistant_discoveryengineAssistantBasicExample(context),
			},
			{
				ResourceName:            "google_discovery_engine_assistant.basic",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"assistant_id", "collection_id", "engine_id", "location"},
			},
		},
	})
}

func testAccDiscoveryEngineAssistant_discoveryengineAssistantBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_discovery_engine_data_store" "basic" {
  location                      = "global"
  data_store_id                 = "tf-test-example-data-store-id%{random_suffix}"
  display_name                  = "tf-test-structured-datastore"
  industry_vertical             = "GENERIC"
  content_config                = "NO_CONTENT"
  solution_types                = ["SOLUTION_TYPE_SEARCH"]
  create_advanced_site_search   = false
}
resource "google_discovery_engine_search_engine" "basic" {
  location                      = "global"
  collection_id                 = "default_collection"
  engine_id                     = "tf-test-example-engine-id%{random_suffix}"
  display_name                  = "Example Display Name"
  data_store_ids                = [google_discovery_engine_data_store.basic.data_store_id]
  search_engine_config {
  }
}
resource "google_discovery_engine_assistant" "basic" {
  location                      = "global"
  collection_id                 = "default_collection"
  engine_id                     = google_discovery_engine_search_engine.basic.engine_id
  assistant_id                  = "tf-test-example-assistant-id%{random_suffix}"
  display_name                  = "updated-tf-test-Assistant"
  description                   = "Assistant Description"
  generation_config {
    system_instruction {
      additional_system_instruction = "foobar"
    }
    default_language            = "en"
  }
  customer_policy {
    banned_phrases {
      phrase                    = "foo"
      match_type                = "SIMPLE_STRING_MATCH"
      ignore_diacritics         = false
    }
  }
  web_grounding_type            = "WEB_GROUNDING_TYPE_GOOGLE_SEARCH"
}
`, context)
}

func testAccCheckDiscoveryEngineAssistantDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_discovery_engine_assistant" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/assistants/{{assistant_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DiscoveryEngineAssistant still exists at %s", url)
			}
		}

		return nil
	}
}
