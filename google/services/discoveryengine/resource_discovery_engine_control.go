// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/Control.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/errwrap"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.NewDecoder
	_ = json.Marshal
	_ = fmt.Sprintf
	_ = log.Print
	_ = http.Get
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = errwrap.Wrap
	_ = cty.BoolVal
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = validation.All
	_ = structure.ExpandJsonFromString
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ValidateEnum
	_ = googleapi.Error{}
)

func ResourceDiscoveryEngineControl() *schema.Resource {
	return &schema.Resource{
		Create: resourceDiscoveryEngineControlCreate,
		Read:   resourceDiscoveryEngineControlRead,
		Update: resourceDiscoveryEngineControlUpdate,
		Delete: resourceDiscoveryEngineControlDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDiscoveryEngineControlImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"control_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The unique id of the control.`,
			},
			"display_name": {
				Type:     schema.TypeString,
				Required: true,
				Description: `The display name of the control. This field must be a UTF-8 encoded
string with a length limit of 128 characters.`,
			},
			"engine_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The engine to add the control to.`,
			},
			"location": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The geographic location where the data store should reside. The value can
only be one of "global", "us" and "eu".`,
			},
			"solution_type": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidateEnum([]string{"SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH", "SOLUTION_TYPE_CHAT", "SOLUTION_TYPE_GENERATIVE_CHAT"}),
				Description:  `The solution type that the control belongs to. Possible values: ["SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH", "SOLUTION_TYPE_CHAT", "SOLUTION_TYPE_GENERATIVE_CHAT"]`,
			},
			"boost_action": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Changes the returned order of results.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"data_store": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The data store to boost.`,
						},
						"filter": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The filter to apply to the search results.`,
						},
						"fixed_boost": {
							Type:         schema.TypeFloat,
							Optional:     true,
							Description:  `The fixed boost value to apply to the search results. Positive values will increase the relevance of the results, while negative values will decrease the relevance. The value must be between -100 and 100.`,
							ExactlyOneOf: []string{"boost_action.0.fixed_boost", "boost_action.0.interpolation_boost_spec"},
						},
						"interpolation_boost_spec": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The interpolation boost specification to apply to the search results.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"attribute_type": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"NUMERICAL", "FRESHNESS", ""}),
										Description:  `The attribute type to be used to determine the boost amount. Possible values: ["NUMERICAL", "FRESHNESS"]`,
									},
									"control_point": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The control points used to define the curve.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"attribute_value": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The attribute value of the control point.`,
												},
												"boost_amount": {
													Type:     schema.TypeFloat,
													Optional: true,
													Description: `The value between -1 to 1 by which to boost the score if the attributeValue
evaluates to the value specified above.`,
												},
											},
										},
									},
									"field_name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The name of the field whose value will be used to determine the boost amount.`,
									},
									"interpolation_type": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"LINEAR", ""}),
										Description:  `The interpolation type to be applied to connect the control points. Possible values: ["LINEAR"]`,
									},
								},
							},
							ExactlyOneOf: []string{"boost_action.0.fixed_boost", "boost_action.0.interpolation_boost_spec"},
						},
					},
				},
				ExactlyOneOf: []string{"boost_action", "filter_action", "redirect_action", "synonyms_action", "promote_action"},
			},
			"collection_id": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `The collection ID. Currently only accepts "default_collection".`,
				Default:     "default_collection",
			},
			"conditions": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `The conditions under which the control is active.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"active_time_range": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The time range when the condition is active.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"end_time": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The end time of the active time range.`,
									},
									"start_time": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The start time of the active time range.`,
									},
								},
							},
						},
						"query_regex": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The regular expression that the query must match for this condition to be met.`,
						},
						"query_terms": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The query terms that must be present in the search request for this condition to be met.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"full_match": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `If true, the query term must be an exact match. Otherwise, the query term can be a partial match.`,
									},
									"value": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The value of the query term.`,
									},
								},
							},
						},
					},
				},
			},
			"filter_action": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Removes entries from returned results.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"data_store": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The data store to filter.`,
						},
						"filter": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The filter to apply to the search results.`,
						},
					},
				},
				ExactlyOneOf: []string{"boost_action", "filter_action", "redirect_action", "synonyms_action", "promote_action"},
			},
			"promote_action": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Promotes a specified link for a query.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"data_store": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The data store to promote.`,
						},
						"search_link_promotion": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `The search link promotion to apply to the search results.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"title": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The title of the promoted link.`,
									},
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The description of the promoted link.`,
									},
									"document": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The document to promote.`,
									},
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Return promotions for basic site search.`,
									},
									"image_uri": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The image URI of the promoted link.`,
									},
									"uri": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The URI to promote.`,
									},
								},
							},
						},
					},
				},
				ExactlyOneOf: []string{"boost_action", "filter_action", "redirect_action", "synonyms_action", "promote_action"},
			},
			"redirect_action": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Redirects to a specified URI.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"redirect_uri": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The URI to redirect to.`,
						},
					},
				},
				ExactlyOneOf: []string{"boost_action", "filter_action", "redirect_action", "synonyms_action", "promote_action"},
			},
			"synonyms_action": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Associates queries with each other.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"synonyms": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The synonyms to apply to the search results.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
				ExactlyOneOf: []string{"boost_action", "filter_action", "redirect_action", "synonyms_action", "promote_action"},
			},
			"use_cases": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `The use cases that the control is used for. Possible values: ["SEARCH_USE_CASE_SEARCH", "SEARCH_USE_CASE_BROWSE"]`,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: verify.ValidateEnum([]string{"SEARCH_USE_CASE_SEARCH", "SEARCH_USE_CASE_BROWSE"}),
				},
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The unique full resource name of the control. Values are of the format
'projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}/controls/{control_id}'.
This field must be a UTF-8 encoded string with a length limit of 1024
characters.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDiscoveryEngineControlCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandDiscoveryEngineControlDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	solutionTypeProp, err := expandDiscoveryEngineControlSolutionType(d.Get("solution_type"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("solution_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(solutionTypeProp)) && (ok || !reflect.DeepEqual(v, solutionTypeProp)) {
		obj["solutionType"] = solutionTypeProp
	}
	useCasesProp, err := expandDiscoveryEngineControlUseCases(d.Get("use_cases"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("use_cases"); !tpgresource.IsEmptyValue(reflect.ValueOf(useCasesProp)) && (ok || !reflect.DeepEqual(v, useCasesProp)) {
		obj["useCases"] = useCasesProp
	}
	conditionsProp, err := expandDiscoveryEngineControlConditions(d.Get("conditions"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("conditions"); !tpgresource.IsEmptyValue(reflect.ValueOf(conditionsProp)) && (ok || !reflect.DeepEqual(v, conditionsProp)) {
		obj["conditions"] = conditionsProp
	}
	boostActionProp, err := expandDiscoveryEngineControlBoostAction(d.Get("boost_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("boost_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(boostActionProp)) && (ok || !reflect.DeepEqual(v, boostActionProp)) {
		obj["boostAction"] = boostActionProp
	}
	filterActionProp, err := expandDiscoveryEngineControlFilterAction(d.Get("filter_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(filterActionProp)) && (ok || !reflect.DeepEqual(v, filterActionProp)) {
		obj["filterAction"] = filterActionProp
	}
	redirectActionProp, err := expandDiscoveryEngineControlRedirectAction(d.Get("redirect_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("redirect_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(redirectActionProp)) && (ok || !reflect.DeepEqual(v, redirectActionProp)) {
		obj["redirectAction"] = redirectActionProp
	}
	synonymsActionProp, err := expandDiscoveryEngineControlSynonymsAction(d.Get("synonyms_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("synonyms_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(synonymsActionProp)) && (ok || !reflect.DeepEqual(v, synonymsActionProp)) {
		obj["synonymsAction"] = synonymsActionProp
	}
	promoteActionProp, err := expandDiscoveryEngineControlPromoteAction(d.Get("promote_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("promote_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(promoteActionProp)) && (ok || !reflect.DeepEqual(v, promoteActionProp)) {
		obj["promoteAction"] = promoteActionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/controls?controlId={{control_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Control: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Control: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Control: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/controls/{{control_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Control %q: %#v", d.Id(), res)

	return resourceDiscoveryEngineControlRead(d, meta)
}

func resourceDiscoveryEngineControlRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/controls/{{control_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Control: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DiscoveryEngineControl %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}

	if err := d.Set("name", flattenDiscoveryEngineControlName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}
	if err := d.Set("display_name", flattenDiscoveryEngineControlDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}
	if err := d.Set("solution_type", flattenDiscoveryEngineControlSolutionType(res["solutionType"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}
	if err := d.Set("use_cases", flattenDiscoveryEngineControlUseCases(res["useCases"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}
	if err := d.Set("conditions", flattenDiscoveryEngineControlConditions(res["conditions"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}
	if err := d.Set("boost_action", flattenDiscoveryEngineControlBoostAction(res["boostAction"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}
	if err := d.Set("filter_action", flattenDiscoveryEngineControlFilterAction(res["filterAction"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}
	if err := d.Set("redirect_action", flattenDiscoveryEngineControlRedirectAction(res["redirectAction"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}
	if err := d.Set("synonyms_action", flattenDiscoveryEngineControlSynonymsAction(res["synonymsAction"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}
	if err := d.Set("promote_action", flattenDiscoveryEngineControlPromoteAction(res["promoteAction"], d, config)); err != nil {
		return fmt.Errorf("Error reading Control: %s", err)
	}

	return nil
}

func resourceDiscoveryEngineControlUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Control: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandDiscoveryEngineControlDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	useCasesProp, err := expandDiscoveryEngineControlUseCases(d.Get("use_cases"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("use_cases"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, useCasesProp)) {
		obj["useCases"] = useCasesProp
	}
	conditionsProp, err := expandDiscoveryEngineControlConditions(d.Get("conditions"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("conditions"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, conditionsProp)) {
		obj["conditions"] = conditionsProp
	}
	boostActionProp, err := expandDiscoveryEngineControlBoostAction(d.Get("boost_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("boost_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, boostActionProp)) {
		obj["boostAction"] = boostActionProp
	}
	filterActionProp, err := expandDiscoveryEngineControlFilterAction(d.Get("filter_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, filterActionProp)) {
		obj["filterAction"] = filterActionProp
	}
	redirectActionProp, err := expandDiscoveryEngineControlRedirectAction(d.Get("redirect_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("redirect_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, redirectActionProp)) {
		obj["redirectAction"] = redirectActionProp
	}
	synonymsActionProp, err := expandDiscoveryEngineControlSynonymsAction(d.Get("synonyms_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("synonyms_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, synonymsActionProp)) {
		obj["synonymsAction"] = synonymsActionProp
	}
	promoteActionProp, err := expandDiscoveryEngineControlPromoteAction(d.Get("promote_action"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("promote_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, promoteActionProp)) {
		obj["promoteAction"] = promoteActionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/controls/{{control_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Control %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("use_cases") {
		updateMask = append(updateMask, "useCases")
	}

	if d.HasChange("conditions") {
		updateMask = append(updateMask, "conditions")
	}

	if d.HasChange("boost_action") {
		updateMask = append(updateMask, "boost_action.boost",
			"boost_action.filter",
			"boost_action.fixed_boost",
			"boost_action.interpolation_boost_spec")
	}

	if d.HasChange("filter_action") {
		updateMask = append(updateMask, "filter_action.filter")
	}

	if d.HasChange("redirect_action") {
		updateMask = append(updateMask, "redirect_action.redirect_uri")
	}

	if d.HasChange("synonyms_action") {
		updateMask = append(updateMask, "synonyms_action.synonyms")
	}

	if d.HasChange("promote_action") {
		updateMask = append(updateMask, "promoteAction")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Control %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Control %q: %#v", d.Id(), res)
		}

	}

	return resourceDiscoveryEngineControlRead(d, meta)
}

func resourceDiscoveryEngineControlDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Control: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/controls/{{control_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting Control %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Control")
	}

	log.Printf("[DEBUG] Finished deleting Control %q: %#v", d.Id(), res)
	return nil
}

func resourceDiscoveryEngineControlImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/collections/(?P<collection_id>[^/]+)/engines/(?P<engine_id>[^/]+)/controls/(?P<control_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<collection_id>[^/]+)/(?P<engine_id>[^/]+)/(?P<control_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<collection_id>[^/]+)/(?P<engine_id>[^/]+)/(?P<control_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/controls/{{control_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDiscoveryEngineControlName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlSolutionType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlUseCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"query_terms":       flattenDiscoveryEngineControlConditionsQueryTerms(original["queryTerms"], d, config),
			"active_time_range": flattenDiscoveryEngineControlConditionsActiveTimeRange(original["activeTimeRange"], d, config),
			"query_regex":       flattenDiscoveryEngineControlConditionsQueryRegex(original["queryRegex"], d, config),
		})
	}
	return transformed
}
func flattenDiscoveryEngineControlConditionsQueryTerms(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"value":      flattenDiscoveryEngineControlConditionsQueryTermsValue(original["value"], d, config),
			"full_match": flattenDiscoveryEngineControlConditionsQueryTermsFullMatch(original["fullMatch"], d, config),
		})
	}
	return transformed
}
func flattenDiscoveryEngineControlConditionsQueryTermsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlConditionsQueryTermsFullMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlConditionsActiveTimeRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"start_time": flattenDiscoveryEngineControlConditionsActiveTimeRangeStartTime(original["startTime"], d, config),
			"end_time":   flattenDiscoveryEngineControlConditionsActiveTimeRangeEndTime(original["endTime"], d, config),
		})
	}
	return transformed
}
func flattenDiscoveryEngineControlConditionsActiveTimeRangeStartTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlConditionsActiveTimeRangeEndTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlConditionsQueryRegex(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlBoostAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["filter"] =
		flattenDiscoveryEngineControlBoostActionFilter(original["filter"], d, config)
	transformed["data_store"] =
		flattenDiscoveryEngineControlBoostActionDataStore(original["dataStore"], d, config)
	transformed["fixed_boost"] =
		flattenDiscoveryEngineControlBoostActionFixedBoost(original["fixedBoost"], d, config)
	transformed["interpolation_boost_spec"] =
		flattenDiscoveryEngineControlBoostActionInterpolationBoostSpec(original["interpolationBoostSpec"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineControlBoostActionFilter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlBoostActionDataStore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlBoostActionFixedBoost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlBoostActionInterpolationBoostSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["field_name"] =
		flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecFieldName(original["fieldName"], d, config)
	transformed["attribute_type"] =
		flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecAttributeType(original["attributeType"], d, config)
	transformed["interpolation_type"] =
		flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecInterpolationType(original["interpolationType"], d, config)
	transformed["control_point"] =
		flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPoint(original["controlPoint"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecFieldName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecAttributeType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecInterpolationType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["attribute_value"] =
		flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointAttributeValue(original["attributeValue"], d, config)
	transformed["boost_amount"] =
		flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointBoostAmount(original["boostAmount"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointAttributeValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointBoostAmount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlFilterAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["filter"] =
		flattenDiscoveryEngineControlFilterActionFilter(original["filter"], d, config)
	transformed["data_store"] =
		flattenDiscoveryEngineControlFilterActionDataStore(original["dataStore"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineControlFilterActionFilter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlFilterActionDataStore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlRedirectAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["redirect_uri"] =
		flattenDiscoveryEngineControlRedirectActionRedirectUri(original["redirectUri"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineControlRedirectActionRedirectUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlSynonymsAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["synonyms"] =
		flattenDiscoveryEngineControlSynonymsActionSynonyms(original["synonyms"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineControlSynonymsActionSynonyms(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlPromoteAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["data_store"] =
		flattenDiscoveryEngineControlPromoteActionDataStore(original["dataStore"], d, config)
	transformed["search_link_promotion"] =
		flattenDiscoveryEngineControlPromoteActionSearchLinkPromotion(original["searchLinkPromotion"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineControlPromoteActionDataStore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlPromoteActionSearchLinkPromotion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["title"] =
		flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionTitle(original["title"], d, config)
	transformed["uri"] =
		flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionUri(original["uri"], d, config)
	transformed["document"] =
		flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionDocument(original["document"], d, config)
	transformed["description"] =
		flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionDescription(original["description"], d, config)
	transformed["image_uri"] =
		flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionImageUri(original["imageUri"], d, config)
	transformed["enabled"] =
		flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionTitle(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionDocument(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionImageUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineControlPromoteActionSearchLinkPromotionEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDiscoveryEngineControlDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlSolutionType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlUseCases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedQueryTerms, err := expandDiscoveryEngineControlConditionsQueryTerms(original["query_terms"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryTerms); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryTerms"] = transformedQueryTerms
		}

		transformedActiveTimeRange, err := expandDiscoveryEngineControlConditionsActiveTimeRange(original["active_time_range"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedActiveTimeRange); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["activeTimeRange"] = transformedActiveTimeRange
		}

		transformedQueryRegex, err := expandDiscoveryEngineControlConditionsQueryRegex(original["query_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryRegex"] = transformedQueryRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineControlConditionsQueryTerms(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedValue, err := expandDiscoveryEngineControlConditionsQueryTermsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedFullMatch, err := expandDiscoveryEngineControlConditionsQueryTermsFullMatch(original["full_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFullMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["fullMatch"] = transformedFullMatch
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineControlConditionsQueryTermsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditionsQueryTermsFullMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditionsActiveTimeRange(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedStartTime, err := expandDiscoveryEngineControlConditionsActiveTimeRangeStartTime(original["start_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["startTime"] = transformedStartTime
		}

		transformedEndTime, err := expandDiscoveryEngineControlConditionsActiveTimeRangeEndTime(original["end_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEndTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["endTime"] = transformedEndTime
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineControlConditionsActiveTimeRangeStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditionsActiveTimeRangeEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditionsQueryRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilter, err := expandDiscoveryEngineControlBoostActionFilter(original["filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filter"] = transformedFilter
	}

	transformedDataStore, err := expandDiscoveryEngineControlBoostActionDataStore(original["data_store"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStore"] = transformedDataStore
	}

	transformedFixedBoost, err := expandDiscoveryEngineControlBoostActionFixedBoost(original["fixed_boost"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFixedBoost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["fixedBoost"] = transformedFixedBoost
	}

	transformedInterpolationBoostSpec, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpec(original["interpolation_boost_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInterpolationBoostSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["interpolationBoostSpec"] = transformedInterpolationBoostSpec
	}

	return transformed, nil
}

func expandDiscoveryEngineControlBoostActionFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionDataStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionFixedBoost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFieldName, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecFieldName(original["field_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFieldName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["fieldName"] = transformedFieldName
	}

	transformedAttributeType, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecAttributeType(original["attribute_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAttributeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["attributeType"] = transformedAttributeType
	}

	transformedInterpolationType, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecInterpolationType(original["interpolation_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInterpolationType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["interpolationType"] = transformedInterpolationType
	}

	transformedControlPoint, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPoint(original["control_point"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedControlPoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["controlPoint"] = transformedControlPoint
	}

	return transformed, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecFieldName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecAttributeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecInterpolationType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAttributeValue, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointAttributeValue(original["attribute_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAttributeValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["attributeValue"] = transformedAttributeValue
	}

	transformedBoostAmount, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointBoostAmount(original["boost_amount"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBoostAmount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["boostAmount"] = transformedBoostAmount
	}

	return transformed, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointAttributeValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointBoostAmount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlFilterAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilter, err := expandDiscoveryEngineControlFilterActionFilter(original["filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filter"] = transformedFilter
	}

	transformedDataStore, err := expandDiscoveryEngineControlFilterActionDataStore(original["data_store"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStore"] = transformedDataStore
	}

	return transformed, nil
}

func expandDiscoveryEngineControlFilterActionFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlFilterActionDataStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlRedirectAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRedirectUri, err := expandDiscoveryEngineControlRedirectActionRedirectUri(original["redirect_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRedirectUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["redirectUri"] = transformedRedirectUri
	}

	return transformed, nil
}

func expandDiscoveryEngineControlRedirectActionRedirectUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlSynonymsAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSynonyms, err := expandDiscoveryEngineControlSynonymsActionSynonyms(original["synonyms"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSynonyms); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["synonyms"] = transformedSynonyms
	}

	return transformed, nil
}

func expandDiscoveryEngineControlSynonymsActionSynonyms(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDataStore, err := expandDiscoveryEngineControlPromoteActionDataStore(original["data_store"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStore"] = transformedDataStore
	}

	transformedSearchLinkPromotion, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotion(original["search_link_promotion"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSearchLinkPromotion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["searchLinkPromotion"] = transformedSearchLinkPromotion
	}

	return transformed, nil
}

func expandDiscoveryEngineControlPromoteActionDataStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTitle, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionTitle(original["title"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTitle); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["title"] = transformedTitle
	}

	transformedUri, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedDocument, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionDocument(original["document"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocument); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["document"] = transformedDocument
	}

	transformedDescription, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedImageUri, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionImageUri(original["image_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImageUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["imageUri"] = transformedImageUri
	}

	transformedEnabled, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionTitle(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionDocument(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionImageUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
