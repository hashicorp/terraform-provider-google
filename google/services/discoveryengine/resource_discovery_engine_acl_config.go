// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/AclConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceDiscoveryEngineAclConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceDiscoveryEngineAclConfigCreate,
		Read:   resourceDiscoveryEngineAclConfigRead,
		Update: resourceDiscoveryEngineAclConfigUpdate,
		Delete: resourceDiscoveryEngineAclConfigDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDiscoveryEngineAclConfigImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(0 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"location": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The geographic location where the data store should reside. The value can
only be one of "global", "us" and "eu".`,
			},
			"idp_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Identity provider config.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"external_idp_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `External third party identity provider config.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"workforce_pool_name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Workforce pool name: "locations/global/workforcePools/pool_id"`,
									},
								},
							},
						},
						"idp_type": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"GSUITE", "THIRD_PARTY", ""}),
							Description:  `Identity provider type. Possible values: ["GSUITE", "THIRD_PARTY"]`,
						},
					},
				},
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The unique full resource name of the aclConfig. Values are of the format
'projects/{project}/locations/{location}/aclConfig'.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDiscoveryEngineAclConfigCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	idpConfigProp, err := expandDiscoveryEngineAclConfigIdpConfig(d.Get("idp_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("idp_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(idpConfigProp)) && (ok || !reflect.DeepEqual(v, idpConfigProp)) {
		obj["idpConfig"] = idpConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/aclConfig")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new AclConfig: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AclConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating AclConfig: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/aclConfig")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating AclConfig %q: %#v", d.Id(), res)

	return resourceDiscoveryEngineAclConfigRead(d, meta)
}

func resourceDiscoveryEngineAclConfigRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/aclConfig")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AclConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DiscoveryEngineAclConfig %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading AclConfig: %s", err)
	}

	if err := d.Set("name", flattenDiscoveryEngineAclConfigName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading AclConfig: %s", err)
	}
	if err := d.Set("idp_config", flattenDiscoveryEngineAclConfigIdpConfig(res["idpConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading AclConfig: %s", err)
	}

	return nil
}

func resourceDiscoveryEngineAclConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AclConfig: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	idpConfigProp, err := expandDiscoveryEngineAclConfigIdpConfig(d.Get("idp_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("idp_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, idpConfigProp)) {
		obj["idpConfig"] = idpConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/aclConfig")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating AclConfig %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating AclConfig %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating AclConfig %q: %#v", d.Id(), res)
	}

	return resourceDiscoveryEngineAclConfigRead(d, meta)
}

func resourceDiscoveryEngineAclConfigDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] DiscoveryEngine AclConfig resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceDiscoveryEngineAclConfigImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/aclConfig$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)$",
		"^(?P<location>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/aclConfig")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDiscoveryEngineAclConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAclConfigIdpConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["idp_type"] =
		flattenDiscoveryEngineAclConfigIdpConfigIdpType(original["idpType"], d, config)
	transformed["external_idp_config"] =
		flattenDiscoveryEngineAclConfigIdpConfigExternalIdpConfig(original["externalIdpConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineAclConfigIdpConfigIdpType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAclConfigIdpConfigExternalIdpConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["workforce_pool_name"] =
		flattenDiscoveryEngineAclConfigIdpConfigExternalIdpConfigWorkforcePoolName(original["workforcePoolName"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineAclConfigIdpConfigExternalIdpConfigWorkforcePoolName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDiscoveryEngineAclConfigIdpConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIdpType, err := expandDiscoveryEngineAclConfigIdpConfigIdpType(original["idp_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIdpType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["idpType"] = transformedIdpType
	}

	transformedExternalIdpConfig, err := expandDiscoveryEngineAclConfigIdpConfigExternalIdpConfig(original["external_idp_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExternalIdpConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["externalIdpConfig"] = transformedExternalIdpConfig
	}

	return transformed, nil
}

func expandDiscoveryEngineAclConfigIdpConfigIdpType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAclConfigIdpConfigExternalIdpConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedWorkforcePoolName, err := expandDiscoveryEngineAclConfigIdpConfigExternalIdpConfigWorkforcePoolName(original["workforce_pool_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWorkforcePoolName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["workforcePoolName"] = transformedWorkforcePoolName
	}

	return transformed, nil
}

func expandDiscoveryEngineAclConfigIdpConfigExternalIdpConfigWorkforcePoolName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
