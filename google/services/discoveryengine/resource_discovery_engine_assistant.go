// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/Assistant.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceDiscoveryEngineAssistant() *schema.Resource {
	return &schema.Resource{
		Create: resourceDiscoveryEngineAssistantCreate,
		Read:   resourceDiscoveryEngineAssistantRead,
		Update: resourceDiscoveryEngineAssistantUpdate,
		Delete: resourceDiscoveryEngineAssistantDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDiscoveryEngineAssistantImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"assistant_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The unique id of the assistant.`,
			},
			"collection_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The unique id of the collection.`,
			},
			"display_name": {
				Type:     schema.TypeString,
				Required: true,
				Description: `The assistant display name.

It must be a UTF-8 encoded string with a length limit of 128 characters.`,
			},
			"engine_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The unique id of the engine.`,
			},
			"location": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The geographic location where the data store should reside. The value can
only be one of "global", "us" and "eu".`,
			},
			"customer_policy": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Customer policy for the assistant.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"banned_phrases": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `List of banned phrases.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"phrase": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The raw string content to be banned.`,
									},
									"ignore_diacritics": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `If true, diacritical marks (e.g., accents, umlauts) are ignored when
matching banned phrases. For example, "cafe" would match "caf√©".`,
									},
									"match_type": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Match type for the banned phrase.
The supported values: 'SIMPLE_STRING_MATCH', 'WORD_BOUNDARY_STRING_MATCH'.`,
									},
								},
							},
						},
						"model_armor_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Model Armor configuration to be used for sanitizing user prompts and assistant responses.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"response_template": {
										Type:     schema.TypeString,
										Required: true,
										Description: `The resource name of the Model Armor template for sanitizing assistant
responses. Format:
'projects/{project}/locations/{location}/templates/{template_id}'

If not specified, no sanitization will be applied to the assistant
response.`,
									},
									"user_prompt_template": {
										Type:     schema.TypeString,
										Required: true,
										Description: `The resource name of the Model Armor template for sanitizing user
prompts. Format:
'projects/{project}/locations/{location}/templates/{template_id}'

If not specified, no sanitization will be applied to the user prompt.`,
									},
									"failure_mode": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Defines the failure mode for Model Armor sanitization.
The supported values: 'FAIL_OPEN', 'FAIL_CLOSED'.`,
									},
								},
							},
						},
					},
				},
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Description for additional information. Expected to be shown on the
configuration UI, not to the users of the assistant.`,
			},
			"generation_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for the generation of the assistant response.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"default_language": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The default language to use for the generation of the assistant response.
Use an ISO 639-1 language code such as 'en'.
If not specified, the language will be automatically detected.`,
						},
						"system_instruction": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `System instruction, also known as the prompt preamble for LLM calls.
See also https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/system-instructions`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"additional_system_instruction": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Additional system instruction that will be added to the default system instruction.`,
									},
								},
							},
						},
					},
				},
			},
			"web_grounding_type": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The type of web grounding to use.
The supported values: 'WEB_GROUNDING_TYPE_DISABLED', 'WEB_GROUNDING_TYPE_GOOGLE_SEARCH', 'WEB_GROUNDING_TYPE_ENTERPRISE_WEB_SEARCH'.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Resource name of the assistant.
Format:
'projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/assistants/{assistant}'

It must be a UTF-8 encoded string with a length limit of 1024 characters.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDiscoveryEngineAssistantCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandDiscoveryEngineAssistantDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandDiscoveryEngineAssistantDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	generationConfigProp, err := expandDiscoveryEngineAssistantGenerationConfig(d.Get("generation_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("generation_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(generationConfigProp)) && (ok || !reflect.DeepEqual(v, generationConfigProp)) {
		obj["generationConfig"] = generationConfigProp
	}
	customerPolicyProp, err := expandDiscoveryEngineAssistantCustomerPolicy(d.Get("customer_policy"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("customer_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(customerPolicyProp)) && (ok || !reflect.DeepEqual(v, customerPolicyProp)) {
		obj["customerPolicy"] = customerPolicyProp
	}
	webGroundingTypeProp, err := expandDiscoveryEngineAssistantWebGroundingType(d.Get("web_grounding_type"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("web_grounding_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(webGroundingTypeProp)) && (ok || !reflect.DeepEqual(v, webGroundingTypeProp)) {
		obj["webGroundingType"] = webGroundingTypeProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/assistants?assistantId={{assistant_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Assistant: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Assistant: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Assistant: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/assistants/{{assistant_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Assistant %q: %#v", d.Id(), res)

	return resourceDiscoveryEngineAssistantRead(d, meta)
}

func resourceDiscoveryEngineAssistantRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/assistants/{{assistant_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Assistant: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DiscoveryEngineAssistant %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Assistant: %s", err)
	}

	if err := d.Set("name", flattenDiscoveryEngineAssistantName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Assistant: %s", err)
	}
	if err := d.Set("display_name", flattenDiscoveryEngineAssistantDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Assistant: %s", err)
	}
	if err := d.Set("description", flattenDiscoveryEngineAssistantDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading Assistant: %s", err)
	}
	if err := d.Set("generation_config", flattenDiscoveryEngineAssistantGenerationConfig(res["generationConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading Assistant: %s", err)
	}
	if err := d.Set("customer_policy", flattenDiscoveryEngineAssistantCustomerPolicy(res["customerPolicy"], d, config)); err != nil {
		return fmt.Errorf("Error reading Assistant: %s", err)
	}
	if err := d.Set("web_grounding_type", flattenDiscoveryEngineAssistantWebGroundingType(res["webGroundingType"], d, config)); err != nil {
		return fmt.Errorf("Error reading Assistant: %s", err)
	}

	return nil
}

func resourceDiscoveryEngineAssistantUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Assistant: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandDiscoveryEngineAssistantDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandDiscoveryEngineAssistantDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	generationConfigProp, err := expandDiscoveryEngineAssistantGenerationConfig(d.Get("generation_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("generation_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, generationConfigProp)) {
		obj["generationConfig"] = generationConfigProp
	}
	customerPolicyProp, err := expandDiscoveryEngineAssistantCustomerPolicy(d.Get("customer_policy"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("customer_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, customerPolicyProp)) {
		obj["customerPolicy"] = customerPolicyProp
	}
	webGroundingTypeProp, err := expandDiscoveryEngineAssistantWebGroundingType(d.Get("web_grounding_type"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("web_grounding_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, webGroundingTypeProp)) {
		obj["webGroundingType"] = webGroundingTypeProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/assistants/{{assistant_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Assistant %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("generation_config") {
		updateMask = append(updateMask, "generationConfig")
	}

	if d.HasChange("customer_policy") {
		updateMask = append(updateMask, "customerPolicy")
	}

	if d.HasChange("web_grounding_type") {
		updateMask = append(updateMask, "webGroundingType")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Assistant %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Assistant %q: %#v", d.Id(), res)
		}

	}

	return resourceDiscoveryEngineAssistantRead(d, meta)
}

func resourceDiscoveryEngineAssistantDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Assistant: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/assistants/{{assistant_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting Assistant %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Assistant")
	}

	log.Printf("[DEBUG] Finished deleting Assistant %q: %#v", d.Id(), res)
	return nil
}

func resourceDiscoveryEngineAssistantImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/collections/(?P<collection_id>[^/]+)/engines/(?P<engine_id>[^/]+)/assistants/(?P<assistant_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<collection_id>[^/]+)/(?P<engine_id>[^/]+)/(?P<assistant_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<collection_id>[^/]+)/(?P<engine_id>[^/]+)/(?P<assistant_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/assistants/{{assistant_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDiscoveryEngineAssistantName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantGenerationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["system_instruction"] =
		flattenDiscoveryEngineAssistantGenerationConfigSystemInstruction(original["systemInstruction"], d, config)
	transformed["default_language"] =
		flattenDiscoveryEngineAssistantGenerationConfigDefaultLanguage(original["defaultLanguage"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineAssistantGenerationConfigSystemInstruction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["additional_system_instruction"] =
		flattenDiscoveryEngineAssistantGenerationConfigSystemInstructionAdditionalSystemInstruction(original["additionalSystemInstruction"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineAssistantGenerationConfigSystemInstructionAdditionalSystemInstruction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantGenerationConfigDefaultLanguage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantCustomerPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["banned_phrases"] =
		flattenDiscoveryEngineAssistantCustomerPolicyBannedPhrases(original["bannedPhrases"], d, config)
	transformed["model_armor_config"] =
		flattenDiscoveryEngineAssistantCustomerPolicyModelArmorConfig(original["modelArmorConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineAssistantCustomerPolicyBannedPhrases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"phrase":            flattenDiscoveryEngineAssistantCustomerPolicyBannedPhrasesPhrase(original["phrase"], d, config),
			"match_type":        flattenDiscoveryEngineAssistantCustomerPolicyBannedPhrasesMatchType(original["matchType"], d, config),
			"ignore_diacritics": flattenDiscoveryEngineAssistantCustomerPolicyBannedPhrasesIgnoreDiacritics(original["ignoreDiacritics"], d, config),
		})
	}
	return transformed
}
func flattenDiscoveryEngineAssistantCustomerPolicyBannedPhrasesPhrase(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantCustomerPolicyBannedPhrasesMatchType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantCustomerPolicyBannedPhrasesIgnoreDiacritics(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantCustomerPolicyModelArmorConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["user_prompt_template"] =
		flattenDiscoveryEngineAssistantCustomerPolicyModelArmorConfigUserPromptTemplate(original["userPromptTemplate"], d, config)
	transformed["response_template"] =
		flattenDiscoveryEngineAssistantCustomerPolicyModelArmorConfigResponseTemplate(original["responseTemplate"], d, config)
	transformed["failure_mode"] =
		flattenDiscoveryEngineAssistantCustomerPolicyModelArmorConfigFailureMode(original["failureMode"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineAssistantCustomerPolicyModelArmorConfigUserPromptTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantCustomerPolicyModelArmorConfigResponseTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantCustomerPolicyModelArmorConfigFailureMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineAssistantWebGroundingType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDiscoveryEngineAssistantDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantGenerationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSystemInstruction, err := expandDiscoveryEngineAssistantGenerationConfigSystemInstruction(original["system_instruction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSystemInstruction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["systemInstruction"] = transformedSystemInstruction
	}

	transformedDefaultLanguage, err := expandDiscoveryEngineAssistantGenerationConfigDefaultLanguage(original["default_language"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultLanguage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultLanguage"] = transformedDefaultLanguage
	}

	return transformed, nil
}

func expandDiscoveryEngineAssistantGenerationConfigSystemInstruction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdditionalSystemInstruction, err := expandDiscoveryEngineAssistantGenerationConfigSystemInstructionAdditionalSystemInstruction(original["additional_system_instruction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalSystemInstruction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalSystemInstruction"] = transformedAdditionalSystemInstruction
	}

	return transformed, nil
}

func expandDiscoveryEngineAssistantGenerationConfigSystemInstructionAdditionalSystemInstruction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantGenerationConfigDefaultLanguage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBannedPhrases, err := expandDiscoveryEngineAssistantCustomerPolicyBannedPhrases(original["banned_phrases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBannedPhrases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bannedPhrases"] = transformedBannedPhrases
	}

	transformedModelArmorConfig, err := expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfig(original["model_armor_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModelArmorConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["modelArmorConfig"] = transformedModelArmorConfig
	}

	return transformed, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyBannedPhrases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedPhrase, err := expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesPhrase(original["phrase"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPhrase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["phrase"] = transformedPhrase
		}

		transformedMatchType, err := expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesMatchType(original["match_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMatchType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["matchType"] = transformedMatchType
		}

		transformedIgnoreDiacritics, err := expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesIgnoreDiacritics(original["ignore_diacritics"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIgnoreDiacritics); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ignoreDiacritics"] = transformedIgnoreDiacritics
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesPhrase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesMatchType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesIgnoreDiacritics(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUserPromptTemplate, err := expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigUserPromptTemplate(original["user_prompt_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUserPromptTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["userPromptTemplate"] = transformedUserPromptTemplate
	}

	transformedResponseTemplate, err := expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigResponseTemplate(original["response_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResponseTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["responseTemplate"] = transformedResponseTemplate
	}

	transformedFailureMode, err := expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigFailureMode(original["failure_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFailureMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["failureMode"] = transformedFailureMode
	}

	return transformed, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigUserPromptTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigResponseTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigFailureMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantWebGroundingType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
