// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/LicenseConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceDiscoveryEngineLicenseConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceDiscoveryEngineLicenseConfigCreate,
		Read:   resourceDiscoveryEngineLicenseConfigRead,
		Update: resourceDiscoveryEngineLicenseConfigUpdate,
		Delete: resourceDiscoveryEngineLicenseConfigDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDiscoveryEngineLicenseConfigImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(0 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"license_config_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The unique id of the license config.`,
			},
			"license_count": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: `Number of licenses purchased.`,
			},
			"location": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The geographic location where the data store should reside. The value can
only be one of "global", "us" and "eu".`,
			},
			"start_date": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `The start date.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"day": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.`,
						},
						"month": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.`,
						},
						"year": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.`,
						},
					},
				},
			},
			"subscription_term": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: verify.ValidateEnum([]string{"SUBSCRIPTION_TERM_UNSPECIFIED", "SUBSCRIPTION_TERM_ONE_MONTH", "SUBSCRIPTION_TERM_ONE_YEAR", "SUBSCRIPTION_TERM_THREE_YEARS", "SUBSCRIPTION_TERM_THREE_MONTHS", "SUBSCRIPTION_TERM_FOURTEEN_DAYS", "SUBSCRIPTION_TERM_CUSTOM"}),
				Description:  `Subscription term. Possible values: ["SUBSCRIPTION_TERM_UNSPECIFIED", "SUBSCRIPTION_TERM_ONE_MONTH", "SUBSCRIPTION_TERM_ONE_YEAR", "SUBSCRIPTION_TERM_THREE_YEARS", "SUBSCRIPTION_TERM_THREE_MONTHS", "SUBSCRIPTION_TERM_FOURTEEN_DAYS", "SUBSCRIPTION_TERM_CUSTOM"]`,
			},
			"subscription_tier": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: verify.ValidateEnum([]string{"SUBSCRIPTION_TIER_UNSPECIFIED", "SUBSCRIPTION_TIER_SEARCH", "SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT", "SUBSCRIPTION_TIER_NOTEBOOK_LM", "SUBSCRIPTION_TIER_FRONTLINE_WORKER", "SUBSCRIPTION_TIER_AGENTSPACE_STARTER", "SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS", "SUBSCRIPTION_TIER_ENTERPRISE", "SUBSCRIPTION_TIER_EDU", "SUBSCRIPTION_TIER_EDU_PRO"}),
				Description:  `Subscription tier information for the license config. Possible values: ["SUBSCRIPTION_TIER_UNSPECIFIED", "SUBSCRIPTION_TIER_SEARCH", "SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT", "SUBSCRIPTION_TIER_NOTEBOOK_LM", "SUBSCRIPTION_TIER_FRONTLINE_WORKER", "SUBSCRIPTION_TIER_AGENTSPACE_STARTER", "SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS", "SUBSCRIPTION_TIER_ENTERPRISE", "SUBSCRIPTION_TIER_EDU", "SUBSCRIPTION_TIER_EDU_PRO"]`,
			},
			"auto_renew": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Whether the license config should be auto renewed when it reaches the end date.`,
			},
			"end_date": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `The planned end date.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"day": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.`,
						},
						"month": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.`,
						},
						"year": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.`,
						},
					},
				},
			},
			"free_trial": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Whether the license config is for free trial.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The unique full resource name of the license config. Values are of the format
'projects/{project}/locations/{location}/licenseConfigs/{license_config}'.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDiscoveryEngineLicenseConfigCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	licenseCountProp, err := expandDiscoveryEngineLicenseConfigLicenseCount(d.Get("license_count"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("license_count"); !tpgresource.IsEmptyValue(reflect.ValueOf(licenseCountProp)) && (ok || !reflect.DeepEqual(v, licenseCountProp)) {
		obj["licenseCount"] = licenseCountProp
	}
	subscriptionTierProp, err := expandDiscoveryEngineLicenseConfigSubscriptionTier(d.Get("subscription_tier"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("subscription_tier"); !tpgresource.IsEmptyValue(reflect.ValueOf(subscriptionTierProp)) && (ok || !reflect.DeepEqual(v, subscriptionTierProp)) {
		obj["subscriptionTier"] = subscriptionTierProp
	}
	autoRenewProp, err := expandDiscoveryEngineLicenseConfigAutoRenew(d.Get("auto_renew"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("auto_renew"); !tpgresource.IsEmptyValue(reflect.ValueOf(autoRenewProp)) && (ok || !reflect.DeepEqual(v, autoRenewProp)) {
		obj["autoRenew"] = autoRenewProp
	}
	startDateProp, err := expandDiscoveryEngineLicenseConfigStartDate(d.Get("start_date"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("start_date"); !tpgresource.IsEmptyValue(reflect.ValueOf(startDateProp)) && (ok || !reflect.DeepEqual(v, startDateProp)) {
		obj["startDate"] = startDateProp
	}
	endDateProp, err := expandDiscoveryEngineLicenseConfigEndDate(d.Get("end_date"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("end_date"); !tpgresource.IsEmptyValue(reflect.ValueOf(endDateProp)) && (ok || !reflect.DeepEqual(v, endDateProp)) {
		obj["endDate"] = endDateProp
	}
	subscriptionTermProp, err := expandDiscoveryEngineLicenseConfigSubscriptionTerm(d.Get("subscription_term"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("subscription_term"); !tpgresource.IsEmptyValue(reflect.ValueOf(subscriptionTermProp)) && (ok || !reflect.DeepEqual(v, subscriptionTermProp)) {
		obj["subscriptionTerm"] = subscriptionTermProp
	}
	freeTrialProp, err := expandDiscoveryEngineLicenseConfigFreeTrial(d.Get("free_trial"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("free_trial"); !tpgresource.IsEmptyValue(reflect.ValueOf(freeTrialProp)) && (ok || !reflect.DeepEqual(v, freeTrialProp)) {
		obj["freeTrial"] = freeTrialProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/licenseConfigs?licenseConfigId={{license_config_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new LicenseConfig: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LicenseConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating LicenseConfig: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating LicenseConfig %q: %#v", d.Id(), res)

	return resourceDiscoveryEngineLicenseConfigRead(d, meta)
}

func resourceDiscoveryEngineLicenseConfigRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LicenseConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DiscoveryEngineLicenseConfig %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading LicenseConfig: %s", err)
	}

	if err := d.Set("name", flattenDiscoveryEngineLicenseConfigName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading LicenseConfig: %s", err)
	}
	if err := d.Set("license_count", flattenDiscoveryEngineLicenseConfigLicenseCount(res["licenseCount"], d, config)); err != nil {
		return fmt.Errorf("Error reading LicenseConfig: %s", err)
	}
	if err := d.Set("subscription_tier", flattenDiscoveryEngineLicenseConfigSubscriptionTier(res["subscriptionTier"], d, config)); err != nil {
		return fmt.Errorf("Error reading LicenseConfig: %s", err)
	}
	if err := d.Set("auto_renew", flattenDiscoveryEngineLicenseConfigAutoRenew(res["autoRenew"], d, config)); err != nil {
		return fmt.Errorf("Error reading LicenseConfig: %s", err)
	}
	if err := d.Set("start_date", flattenDiscoveryEngineLicenseConfigStartDate(res["startDate"], d, config)); err != nil {
		return fmt.Errorf("Error reading LicenseConfig: %s", err)
	}
	if err := d.Set("end_date", flattenDiscoveryEngineLicenseConfigEndDate(res["endDate"], d, config)); err != nil {
		return fmt.Errorf("Error reading LicenseConfig: %s", err)
	}
	if err := d.Set("subscription_term", flattenDiscoveryEngineLicenseConfigSubscriptionTerm(res["subscriptionTerm"], d, config)); err != nil {
		return fmt.Errorf("Error reading LicenseConfig: %s", err)
	}
	if err := d.Set("free_trial", flattenDiscoveryEngineLicenseConfigFreeTrial(res["freeTrial"], d, config)); err != nil {
		return fmt.Errorf("Error reading LicenseConfig: %s", err)
	}

	return nil
}

func resourceDiscoveryEngineLicenseConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LicenseConfig: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	licenseCountProp, err := expandDiscoveryEngineLicenseConfigLicenseCount(d.Get("license_count"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("license_count"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, licenseCountProp)) {
		obj["licenseCount"] = licenseCountProp
	}
	subscriptionTierProp, err := expandDiscoveryEngineLicenseConfigSubscriptionTier(d.Get("subscription_tier"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("subscription_tier"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, subscriptionTierProp)) {
		obj["subscriptionTier"] = subscriptionTierProp
	}
	autoRenewProp, err := expandDiscoveryEngineLicenseConfigAutoRenew(d.Get("auto_renew"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("auto_renew"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, autoRenewProp)) {
		obj["autoRenew"] = autoRenewProp
	}
	startDateProp, err := expandDiscoveryEngineLicenseConfigStartDate(d.Get("start_date"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("start_date"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, startDateProp)) {
		obj["startDate"] = startDateProp
	}
	endDateProp, err := expandDiscoveryEngineLicenseConfigEndDate(d.Get("end_date"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("end_date"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, endDateProp)) {
		obj["endDate"] = endDateProp
	}
	subscriptionTermProp, err := expandDiscoveryEngineLicenseConfigSubscriptionTerm(d.Get("subscription_term"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("subscription_term"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, subscriptionTermProp)) {
		obj["subscriptionTerm"] = subscriptionTermProp
	}
	freeTrialProp, err := expandDiscoveryEngineLicenseConfigFreeTrial(d.Get("free_trial"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("free_trial"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, freeTrialProp)) {
		obj["freeTrial"] = freeTrialProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating LicenseConfig %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("license_count") {
		updateMask = append(updateMask, "licenseCount")
	}

	if d.HasChange("subscription_tier") {
		updateMask = append(updateMask, "subscriptionTier")
	}

	if d.HasChange("auto_renew") {
		updateMask = append(updateMask, "autoRenew")
	}

	if d.HasChange("start_date") {
		updateMask = append(updateMask, "startDate")
	}

	if d.HasChange("end_date") {
		updateMask = append(updateMask, "endDate")
	}

	if d.HasChange("subscription_term") {
		updateMask = append(updateMask, "subscriptionTerm")
	}

	if d.HasChange("free_trial") {
		updateMask = append(updateMask, "freeTrial")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating LicenseConfig %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating LicenseConfig %q: %#v", d.Id(), res)
		}

	}

	return resourceDiscoveryEngineLicenseConfigRead(d, meta)
}

func resourceDiscoveryEngineLicenseConfigDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] DiscoveryEngine LicenseConfig resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceDiscoveryEngineLicenseConfigImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/licenseConfigs/(?P<license_config_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<license_config_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<license_config_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDiscoveryEngineLicenseConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineLicenseConfigLicenseCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDiscoveryEngineLicenseConfigSubscriptionTier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineLicenseConfigAutoRenew(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineLicenseConfigStartDate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["year"] =
		flattenDiscoveryEngineLicenseConfigStartDateYear(original["year"], d, config)
	transformed["month"] =
		flattenDiscoveryEngineLicenseConfigStartDateMonth(original["month"], d, config)
	transformed["day"] =
		flattenDiscoveryEngineLicenseConfigStartDateDay(original["day"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineLicenseConfigStartDateYear(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDiscoveryEngineLicenseConfigStartDateMonth(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDiscoveryEngineLicenseConfigStartDateDay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDiscoveryEngineLicenseConfigEndDate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["year"] =
		flattenDiscoveryEngineLicenseConfigEndDateYear(original["year"], d, config)
	transformed["month"] =
		flattenDiscoveryEngineLicenseConfigEndDateMonth(original["month"], d, config)
	transformed["day"] =
		flattenDiscoveryEngineLicenseConfigEndDateDay(original["day"], d, config)
	return []interface{}{transformed}
}
func flattenDiscoveryEngineLicenseConfigEndDateYear(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDiscoveryEngineLicenseConfigEndDateMonth(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDiscoveryEngineLicenseConfigEndDateDay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDiscoveryEngineLicenseConfigSubscriptionTerm(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineLicenseConfigFreeTrial(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDiscoveryEngineLicenseConfigLicenseCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigSubscriptionTier(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigAutoRenew(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigStartDate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedYear, err := expandDiscoveryEngineLicenseConfigStartDateYear(original["year"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedYear); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["year"] = transformedYear
	}

	transformedMonth, err := expandDiscoveryEngineLicenseConfigStartDateMonth(original["month"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMonth); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["month"] = transformedMonth
	}

	transformedDay, err := expandDiscoveryEngineLicenseConfigStartDateDay(original["day"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDay); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["day"] = transformedDay
	}

	return transformed, nil
}

func expandDiscoveryEngineLicenseConfigStartDateYear(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigStartDateMonth(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigStartDateDay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigEndDate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedYear, err := expandDiscoveryEngineLicenseConfigEndDateYear(original["year"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedYear); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["year"] = transformedYear
	}

	transformedMonth, err := expandDiscoveryEngineLicenseConfigEndDateMonth(original["month"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMonth); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["month"] = transformedMonth
	}

	transformedDay, err := expandDiscoveryEngineLicenseConfigEndDateDay(original["day"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDay); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["day"] = transformedDay
	}

	return transformed, nil
}

func expandDiscoveryEngineLicenseConfigEndDateYear(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigEndDateMonth(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigEndDateDay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigSubscriptionTerm(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigFreeTrial(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
