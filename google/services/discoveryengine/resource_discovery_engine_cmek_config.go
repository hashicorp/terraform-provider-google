// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/CmekConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceDiscoveryEngineCmekConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceDiscoveryEngineCmekConfigCreate,
		Read:   resourceDiscoveryEngineCmekConfigRead,
		Update: resourceDiscoveryEngineCmekConfigUpdate,
		Delete: resourceDiscoveryEngineCmekConfigDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDiscoveryEngineCmekConfigImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(60 * time.Minute),
			Update: schema.DefaultTimeout(60 * time.Minute),
			Delete: schema.DefaultTimeout(60 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"kms_key": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `KMS key resource name which will be used to encrypt resources
'projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}'.`,
			},
			"location": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The geographic location where the CMEK config should reside. The value can
only be one of "us" and "eu".`,
			},
			"cmek_config_id": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `The unique id of the cmek config.`,
			},
			"set_default": {
				Type:     schema.TypeBool,
				Optional: true,
				ForceNew: true,
				Description: `Set the following CmekConfig as the default to be used for child resources
if one is not specified. The default value is true.`,
				Default: true,
			},
			"single_region_keys": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Single-regional CMEKs that are required for some VAIS features.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"kms_key": {
							Type:     schema.TypeString,
							Required: true,
							Description: `Single-regional kms key resource name which will be used to encrypt
resources
'projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}'.`,
						},
					},
				},
			},
			"is_default": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `The default CmekConfig for the Customer.`,
			},
			"kms_key_version": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `KMS key version resource name which will be used to encrypt resources
'<kms_key>/cryptoKeyVersions/{keyVersion}'.`,
			},
			"last_rotation_timestamp_micros": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The timestamp of the last key rotation.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The unique full resource name of the cmek config. Values are of the format
'projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}'.
This field must be a UTF-8 encoded string with a length limit of 1024
characters.`,
			},
			"notebooklm_state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Whether the NotebookLM Corpus is ready to be used.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The state of the CmekConfig.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDiscoveryEngineCmekConfigCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	kmsKeyProp, err := expandDiscoveryEngineCmekConfigKmsKey(d.Get("kms_key"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("kms_key"); !tpgresource.IsEmptyValue(reflect.ValueOf(kmsKeyProp)) && (ok || !reflect.DeepEqual(v, kmsKeyProp)) {
		obj["kmsKey"] = kmsKeyProp
	}
	singleRegionKeysProp, err := expandDiscoveryEngineCmekConfigSingleRegionKeys(d.Get("single_region_keys"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("single_region_keys"); !tpgresource.IsEmptyValue(reflect.ValueOf(singleRegionKeysProp)) && (ok || !reflect.DeepEqual(v, singleRegionKeysProp)) {
		obj["singleRegionKeys"] = singleRegionKeysProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}?&setDefault={{set_default}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new CmekConfig: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CmekConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating CmekConfig: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = DiscoveryEngineOperationWaitTime(
		config, res, project, "Creating CmekConfig", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create CmekConfig: %s", err)
	}

	log.Printf("[DEBUG] Finished creating CmekConfig %q: %#v", d.Id(), res)

	return resourceDiscoveryEngineCmekConfigRead(d, meta)
}

func resourceDiscoveryEngineCmekConfigRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CmekConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DiscoveryEngineCmekConfig %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading CmekConfig: %s", err)
	}

	if err := d.Set("name", flattenDiscoveryEngineCmekConfigName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading CmekConfig: %s", err)
	}
	if err := d.Set("kms_key", flattenDiscoveryEngineCmekConfigKmsKey(res["kmsKey"], d, config)); err != nil {
		return fmt.Errorf("Error reading CmekConfig: %s", err)
	}
	if err := d.Set("kms_key_version", flattenDiscoveryEngineCmekConfigKmsKeyVersion(res["kmsKeyVersion"], d, config)); err != nil {
		return fmt.Errorf("Error reading CmekConfig: %s", err)
	}
	if err := d.Set("state", flattenDiscoveryEngineCmekConfigState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading CmekConfig: %s", err)
	}
	if err := d.Set("is_default", flattenDiscoveryEngineCmekConfigIsDefault(res["isDefault"], d, config)); err != nil {
		return fmt.Errorf("Error reading CmekConfig: %s", err)
	}
	if err := d.Set("last_rotation_timestamp_micros", flattenDiscoveryEngineCmekConfigLastRotationTimestampMicros(res["lastRotationTimestampMicros"], d, config)); err != nil {
		return fmt.Errorf("Error reading CmekConfig: %s", err)
	}
	if err := d.Set("single_region_keys", flattenDiscoveryEngineCmekConfigSingleRegionKeys(res["singleRegionKeys"], d, config)); err != nil {
		return fmt.Errorf("Error reading CmekConfig: %s", err)
	}
	if err := d.Set("notebooklm_state", flattenDiscoveryEngineCmekConfigNotebooklmState(res["notebooklmState"], d, config)); err != nil {
		return fmt.Errorf("Error reading CmekConfig: %s", err)
	}

	return nil
}

func resourceDiscoveryEngineCmekConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CmekConfig: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	singleRegionKeysProp, err := expandDiscoveryEngineCmekConfigSingleRegionKeys(d.Get("single_region_keys"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("single_region_keys"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, singleRegionKeysProp)) {
		obj["singleRegionKeys"] = singleRegionKeysProp
	}

	obj, err = resourceDiscoveryEngineCmekConfigUpdateEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}?&setDefault={{set_default}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating CmekConfig %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating CmekConfig %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating CmekConfig %q: %#v", d.Id(), res)
	}

	err = DiscoveryEngineOperationWaitTime(
		config, res, project, "Updating CmekConfig", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceDiscoveryEngineCmekConfigRead(d, meta)
}

func resourceDiscoveryEngineCmekConfigDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CmekConfig: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{DiscoveryEngineBasePath}}projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting CmekConfig %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "CmekConfig")
	}

	err = DiscoveryEngineOperationWaitTime(
		config, res, project, "Deleting CmekConfig", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting CmekConfig %q: %#v", d.Id(), res)
	return nil
}

func resourceDiscoveryEngineCmekConfigImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/cmekConfigs/(?P<cmek_config_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<cmek_config_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<cmek_config_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDiscoveryEngineCmekConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineCmekConfigKmsKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineCmekConfigKmsKeyVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineCmekConfigState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineCmekConfigIsDefault(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineCmekConfigLastRotationTimestampMicros(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDiscoveryEngineCmekConfigSingleRegionKeys(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"kms_key": flattenDiscoveryEngineCmekConfigSingleRegionKeysKmsKey(original["kmsKey"], d, config),
		})
	}
	return transformed
}
func flattenDiscoveryEngineCmekConfigSingleRegionKeysKmsKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDiscoveryEngineCmekConfigNotebooklmState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDiscoveryEngineCmekConfigKmsKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineCmekConfigSingleRegionKeys(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKmsKey, err := expandDiscoveryEngineCmekConfigSingleRegionKeysKmsKey(original["kms_key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKmsKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["kmsKey"] = transformedKmsKey
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineCmekConfigSingleRegionKeysKmsKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func resourceDiscoveryEngineCmekConfigUpdateEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	// Always force-send `kms_key` value. This field is immutable and required.
	// In update operation, the immutable value of this field is ignored and not found, generating generating error: "Field \"kms_key_name\" is a required field, but no value is found."
	obj["kmsKey"] = d.Get("kms_key")
	return obj, nil
}
