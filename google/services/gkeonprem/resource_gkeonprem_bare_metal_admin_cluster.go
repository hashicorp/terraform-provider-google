// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package gkeonprem

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceGkeonpremBareMetalAdminCluster() *schema.Resource {
	return &schema.Resource{
		Create: resourceGkeonpremBareMetalAdminClusterCreate,
		Read:   resourceGkeonpremBareMetalAdminClusterRead,
		Update: resourceGkeonpremBareMetalAdminClusterUpdate,
		Delete: resourceGkeonpremBareMetalAdminClusterDelete,

		Importer: &schema.ResourceImporter{
			State: resourceGkeonpremBareMetalAdminClusterImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(60 * time.Minute),
			Update: schema.DefaultTimeout(60 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetAnnotationsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location of the resource.`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The bare metal admin cluster name.`,
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Annotations on the Bare Metal Admin Cluster.
This field has the same restrictions as Kubernetes annotations.
The total size of all keys and values combined is limited to 256k.
Key can have 2 segments: prefix (optional) and name (required),
separated by a slash (/).
Prefix must be a DNS subdomain.
Name must be 63 characters or less, begin and end with alphanumerics,
with dashes (-), underscores (_), dots (.), and alphanumerics between.


**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"bare_metal_version": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `A human readable description of this Bare Metal Admin Cluster.`,
			},
			"cluster_operations": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies the Admin Cluster's observability infrastructure.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enable_application_logs": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).`,
						},
					},
				},
			},
			"control_plane": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies the control plane configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"control_plane_node_pool_config": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Configures the node pool running the control plane. If specified the corresponding NodePool will be created for the cluster's control plane. The NodePool will have the same name and namespace as the cluster.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"node_pool_config": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `The generic configuration for a node pool running the control plane.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"labels": {
													Type:     schema.TypeMap,
													Optional: true,
													Description: `The map of Kubernetes labels (key/value pairs) to be applied to
each node. These will added in addition to any default label(s)
that Kubernetes may apply to the node. In case of conflict in
label keys, the applied set may differ depending on the Kubernetes
version -- it's best to assume the behavior is undefined and
conflicts should be avoided. For more information, including usage
and the valid values, see:
  http://kubernetes.io/v1.1/docs/user-guide/labels.html
An object containing a list of "key": value pairs.
Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.`,
													Elem: &schema.Schema{Type: schema.TypeString},
												},
												"node_configs": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The list of machine addresses in the Bare Metal Node Pool.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"labels": {
																Type:     schema.TypeMap,
																Optional: true,
																Description: `The map of Kubernetes labels (key/value pairs) to be applied to
each node. These will added in addition to any default label(s)
that Kubernetes may apply to the node. In case of conflict in
label keys, the applied set may differ depending on the Kubernetes
version -- it's best to assume the behavior is undefined and
conflicts should be avoided. For more information, including usage
and the valid values, see:
  http://kubernetes.io/v1.1/docs/user-guide/labels.html
An object containing a list of "key": value pairs.
Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.`,
																Elem: &schema.Schema{Type: schema.TypeString},
															},
															"node_ip": {
																Type:     schema.TypeString,
																Optional: true,
																Description: `The default IPv4 address for SSH access and Kubernetes node.
Example: 192.168.0.1`,
															},
														},
													},
												},
												"operating_system": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Specifies the nodes operating system (default: LINUX).`,
												},
												"taints": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The initial taints assigned to nodes of this node pool.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"effect": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: verify.ValidateEnum([]string{"EFFECT_UNSPECIFIED", "PREFER_NO_SCHEDULE", "NO_EXECUTE", ""}),
																Description:  `Specifies the nodes operating system (default: LINUX). Possible values: ["EFFECT_UNSPECIFIED", "PREFER_NO_SCHEDULE", "NO_EXECUTE"]`,
															},
															"key": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Key associated with the effect.`,
															},
															"value": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Value associated with the effect.`,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"api_server_args": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Customizes the default API server args. Only a subset of
customized flags are supported. Please refer to the API server
documentation below to know the exact format:
https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"argument": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The argument name as it appears on the API Server command line please make sure to remove the leading dashes.`,
									},
									"value": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The value of the arg as it will be passed to the API Server command line.`,
									},
								},
							},
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `A human readable description of this Bare Metal Admin Cluster.`,
			},
			"load_balancer": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies the load balancer configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"port_config": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Specifies the load balancer ports.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"control_plane_load_balancer_port": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: `The port that control plane hosted load balancers will listen on.`,
									},
								},
							},
						},
						"vip_config": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Specified the Bare Metal Load Balancer Config`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"control_plane_vip": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The VIP which you previously set aside for the Kubernetes API of this Bare Metal Admin Cluster.`,
									},
								},
							},
						},
						"manual_lb_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `A nested object resource`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Required:    true,
										Description: `Whether manual load balancing is enabled.`,
									},
								},
							},
						},
					},
				},
			},
			"maintenance_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies the workload node configurations.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"maintenance_address_cidr_blocks": {
							Type:     schema.TypeList,
							Required: true,
							Description: `All IPv4 address from these ranges will be placed into maintenance mode.
Nodes in maintenance mode will be cordoned and drained. When both of these
are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set
on the node resource.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
			"network_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Network configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"island_mode_cidr": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `A nested object resource`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"pod_address_cidr_blocks": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"service_address_cidr_blocks": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
							ExactlyOneOf: []string{"network_config.0.island_mode_cidr"},
						},
					},
				},
			},
			"node_access_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies the node access related settings for the bare metal user cluster.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"login_user": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `LoginUser is the user name used to access node machines.
It defaults to "root" if not set.`,
						},
					},
				},
			},
			"node_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies the workload node configurations.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"max_pods_per_node": {
							Type:     schema.TypeInt,
							Optional: true,
							Description: `The maximum number of pods a node can run. The size of the CIDR range
assigned to the node will be derived from this parameter.`,
						},
					},
				},
			},
			"proxy": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies the cluster proxy configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"uri": {
							Type:     schema.TypeString,
							Required: true,
							Description: `Specifies the address of your proxy server.
Examples: http://domain
WARNING: Do not provide credentials in the format
http://(username:password@)domain these will be rejected by the server.`,
						},
						"no_proxy": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `A list of IPs, hostnames, and domains that should skip the proxy.
Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
			"security_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies the security related settings for the Bare Metal User Cluster.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"authorization": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configures user access to the Bare Metal User cluster.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"admin_users": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `Users that will be granted the cluster-admin role on the cluster, providing full access to the cluster.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"username": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The name of the user, e.g. 'my-gcp-id@gmail.com'.`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"storage": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies the cluster storage configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"lvp_node_mounts_config": {
							Type:     schema.TypeList,
							Required: true,
							Description: `Specifies the config for local PersistentVolumes backed
by mounted node disks. These disks need to be formatted and mounted by the
user, which can be done before or after cluster creation.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"path": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The host machine path.`,
									},
									"storage_class": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The StorageClass name that PVs will be created with.`,
									},
								},
							},
						},
						"lvp_share_config": {
							Type:     schema.TypeList,
							Required: true,
							Description: `Specifies the config for local PersistentVolumes backed by
subdirectories in a shared filesystem. These subdirectores are
automatically created during cluster creation.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"lvp_config": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `Defines the machine path and storage class for the LVP Share.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"path": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The host machine path.`,
												},
												"storage_class": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The StorageClass name that PVs will be created with.`,
												},
											},
										},
									},
									"shared_path_pv_count": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: `The number of subdirectories to create under path.`,
									},
								},
							},
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The time the cluster was created, in RFC3339 text format.`,
			},
			"delete_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The time the cluster was deleted, in RFC3339 text format.`,
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"endpoint": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The IP address name of Bare Metal Admin Cluster's API server.`,
			},
			"etag": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `This checksum is computed by the server based on the value of other
fields, and may be sent on update and delete requests to ensure the
client has an up-to-date value before proceeding.
Allows clients to perform consistent read-modify-writes
through optimistic concurrency control.`,
			},
			"fleet": {
				Type:     schema.TypeList,
				Computed: true,
				Description: `Fleet related configuration.
Fleets are a Google Cloud concept for logically organizing clusters,
letting you use and manage multi-cluster capabilities and apply
consistent policies across your systems.
See [Anthos Fleets](https://cloud.google.com/anthos/multicluster-management/fleets) for
more details on Anthos multi-cluster capabilities using Fleets.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"membership": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The name of the managed Hub Membership resource associated to this cluster.
Membership names are formatted as
'projects/<project-number>/locations/<location>/memberships/<cluster-id>'.`,
						},
					},
				},
			},
			"local_name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The object name of the Bare Metal Admin Cluster custom resource on the
associated admin cluster. This field is used to support conflicting
names when enrolling existing clusters to the API. When used as a part of
cluster enrollment, this field will differ from the ID in the resource
name. For new clusters, this field will match the user provided cluster ID
and be visible in the last component of the resource name. It is not
modifiable.
All users should use this name to access their cluster using gkectl or
kubectl and should expect to see the local name when viewing admin
cluster controller logs.`,
			},
			"reconciling": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `If set, there are currently changes in flight to the Bare Metal Admin Cluster.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The current state of this cluster.`,
			},
			"status": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Specifies detailed cluster status.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"conditions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `ResourceConditions provide a standard mechanism for higher-level status reporting from admin cluster controller.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"message": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Human-readable message indicating details about last transition.`,
									},
									"reason": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Machine-readable message indicating details about last transition.`,
									},
									"type": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Type of the condition.
(e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)`,
									},
									"last_transition_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Last time the condition transit from one status to another.`,
									},
									"state": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The lifecycle state of the condition.`,
									},
								},
							},
						},
						"error_message": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `Human-friendly representation of the error message from the admin cluster
controller. The error message can be temporary as the admin cluster
controller creates a cluster or node pool. If the error message persists
for a longer period of time, it can be used to surface error message to
indicate real problems requiring user intervention.`,
						},
					},
				},
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The unique identifier of the Bare Metal Admin Cluster.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The time the cluster was last updated, in RFC3339 text format.`,
			},
			"validation_check": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Specifies the security related settings for the Bare Metal Admin Cluster.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"options": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Options used for the validation check.`,
						},
						"scenario": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The scenario when the preflight checks were run..`,
						},
						"status": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Specifies the detailed validation check status`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"result": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Individual checks which failed as part of the Preflight check execution.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"category": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `The category of the validation.`,
												},
												"description": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `The description of the validation check.`,
												},
												"details": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `Detailed failure information, which might be unformatted.`,
												},
												"options": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `Options used for the validation check.`,
												},
												"reason": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `A human-readable message of the check failure.`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceGkeonpremBareMetalAdminClusterCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandGkeonpremBareMetalAdminClusterDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	bareMetalVersionProp, err := expandGkeonpremBareMetalAdminClusterBareMetalVersion(d.Get("bare_metal_version"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("bare_metal_version"); !tpgresource.IsEmptyValue(reflect.ValueOf(bareMetalVersionProp)) && (ok || !reflect.DeepEqual(v, bareMetalVersionProp)) {
		obj["bareMetalVersion"] = bareMetalVersionProp
	}
	networkConfigProp, err := expandGkeonpremBareMetalAdminClusterNetworkConfig(d.Get("network_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("network_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkConfigProp)) && (ok || !reflect.DeepEqual(v, networkConfigProp)) {
		obj["networkConfig"] = networkConfigProp
	}
	controlPlaneProp, err := expandGkeonpremBareMetalAdminClusterControlPlane(d.Get("control_plane"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("control_plane"); !tpgresource.IsEmptyValue(reflect.ValueOf(controlPlaneProp)) && (ok || !reflect.DeepEqual(v, controlPlaneProp)) {
		obj["controlPlane"] = controlPlaneProp
	}
	loadBalancerProp, err := expandGkeonpremBareMetalAdminClusterLoadBalancer(d.Get("load_balancer"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("load_balancer"); !tpgresource.IsEmptyValue(reflect.ValueOf(loadBalancerProp)) && (ok || !reflect.DeepEqual(v, loadBalancerProp)) {
		obj["loadBalancer"] = loadBalancerProp
	}
	storageProp, err := expandGkeonpremBareMetalAdminClusterStorage(d.Get("storage"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("storage"); !tpgresource.IsEmptyValue(reflect.ValueOf(storageProp)) && (ok || !reflect.DeepEqual(v, storageProp)) {
		obj["storage"] = storageProp
	}
	proxyProp, err := expandGkeonpremBareMetalAdminClusterProxy(d.Get("proxy"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("proxy"); !tpgresource.IsEmptyValue(reflect.ValueOf(proxyProp)) && (ok || !reflect.DeepEqual(v, proxyProp)) {
		obj["proxy"] = proxyProp
	}
	clusterOperationsProp, err := expandGkeonpremBareMetalAdminClusterClusterOperations(d.Get("cluster_operations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("cluster_operations"); !tpgresource.IsEmptyValue(reflect.ValueOf(clusterOperationsProp)) && (ok || !reflect.DeepEqual(v, clusterOperationsProp)) {
		obj["clusterOperations"] = clusterOperationsProp
	}
	maintenanceConfigProp, err := expandGkeonpremBareMetalAdminClusterMaintenanceConfig(d.Get("maintenance_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("maintenance_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(maintenanceConfigProp)) && (ok || !reflect.DeepEqual(v, maintenanceConfigProp)) {
		obj["maintenanceConfig"] = maintenanceConfigProp
	}
	nodeConfigProp, err := expandGkeonpremBareMetalAdminClusterNodeConfig(d.Get("node_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("node_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(nodeConfigProp)) && (ok || !reflect.DeepEqual(v, nodeConfigProp)) {
		obj["nodeConfig"] = nodeConfigProp
	}
	nodeAccessConfigProp, err := expandGkeonpremBareMetalAdminClusterNodeAccessConfig(d.Get("node_access_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("node_access_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(nodeAccessConfigProp)) && (ok || !reflect.DeepEqual(v, nodeAccessConfigProp)) {
		obj["nodeAccessConfig"] = nodeAccessConfigProp
	}
	securityConfigProp, err := expandGkeonpremBareMetalAdminClusterSecurityConfig(d.Get("security_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("security_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(securityConfigProp)) && (ok || !reflect.DeepEqual(v, securityConfigProp)) {
		obj["securityConfig"] = securityConfigProp
	}
	annotationsProp, err := expandGkeonpremBareMetalAdminClusterEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{GkeonpremBasePath}}projects/{{project}}/locations/{{location}}/bareMetalAdminClusters?bare_metal_admin_cluster_id={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new BareMetalAdminCluster: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for BareMetalAdminCluster: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating BareMetalAdminCluster: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/bareMetalAdminClusters/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = GkeonpremOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating BareMetalAdminCluster", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error waiting to create BareMetalAdminCluster: %s", err)
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/bareMetalAdminClusters/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating BareMetalAdminCluster %q: %#v", d.Id(), res)

	return resourceGkeonpremBareMetalAdminClusterRead(d, meta)
}

func resourceGkeonpremBareMetalAdminClusterRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{GkeonpremBasePath}}projects/{{project}}/locations/{{location}}/bareMetalAdminClusters/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for BareMetalAdminCluster: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("GkeonpremBareMetalAdminCluster %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}

	if err := d.Set("description", flattenGkeonpremBareMetalAdminClusterDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("bare_metal_version", flattenGkeonpremBareMetalAdminClusterBareMetalVersion(res["bareMetalVersion"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("uid", flattenGkeonpremBareMetalAdminClusterUid(res["uid"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("state", flattenGkeonpremBareMetalAdminClusterState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("endpoint", flattenGkeonpremBareMetalAdminClusterEndpoint(res["endpoint"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("reconciling", flattenGkeonpremBareMetalAdminClusterReconciling(res["reconciling"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("create_time", flattenGkeonpremBareMetalAdminClusterCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("update_time", flattenGkeonpremBareMetalAdminClusterUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("delete_time", flattenGkeonpremBareMetalAdminClusterDeleteTime(res["deleteTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("local_name", flattenGkeonpremBareMetalAdminClusterLocalName(res["localName"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("etag", flattenGkeonpremBareMetalAdminClusterEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("annotations", flattenGkeonpremBareMetalAdminClusterAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("network_config", flattenGkeonpremBareMetalAdminClusterNetworkConfig(res["networkConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("control_plane", flattenGkeonpremBareMetalAdminClusterControlPlane(res["controlPlane"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("load_balancer", flattenGkeonpremBareMetalAdminClusterLoadBalancer(res["loadBalancer"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("storage", flattenGkeonpremBareMetalAdminClusterStorage(res["storage"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("proxy", flattenGkeonpremBareMetalAdminClusterProxy(res["proxy"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("cluster_operations", flattenGkeonpremBareMetalAdminClusterClusterOperations(res["clusterOperations"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("maintenance_config", flattenGkeonpremBareMetalAdminClusterMaintenanceConfig(res["maintenanceConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("node_config", flattenGkeonpremBareMetalAdminClusterNodeConfig(res["nodeConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("fleet", flattenGkeonpremBareMetalAdminClusterFleet(res["fleet"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("status", flattenGkeonpremBareMetalAdminClusterStatus(res["status"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("validation_check", flattenGkeonpremBareMetalAdminClusterValidationCheck(res["validationCheck"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("node_access_config", flattenGkeonpremBareMetalAdminClusterNodeAccessConfig(res["nodeAccessConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("security_config", flattenGkeonpremBareMetalAdminClusterSecurityConfig(res["securityConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}
	if err := d.Set("effective_annotations", flattenGkeonpremBareMetalAdminClusterEffectiveAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading BareMetalAdminCluster: %s", err)
	}

	return nil
}

func resourceGkeonpremBareMetalAdminClusterUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for BareMetalAdminCluster: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandGkeonpremBareMetalAdminClusterDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	bareMetalVersionProp, err := expandGkeonpremBareMetalAdminClusterBareMetalVersion(d.Get("bare_metal_version"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("bare_metal_version"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, bareMetalVersionProp)) {
		obj["bareMetalVersion"] = bareMetalVersionProp
	}
	networkConfigProp, err := expandGkeonpremBareMetalAdminClusterNetworkConfig(d.Get("network_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("network_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, networkConfigProp)) {
		obj["networkConfig"] = networkConfigProp
	}
	controlPlaneProp, err := expandGkeonpremBareMetalAdminClusterControlPlane(d.Get("control_plane"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("control_plane"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, controlPlaneProp)) {
		obj["controlPlane"] = controlPlaneProp
	}
	loadBalancerProp, err := expandGkeonpremBareMetalAdminClusterLoadBalancer(d.Get("load_balancer"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("load_balancer"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, loadBalancerProp)) {
		obj["loadBalancer"] = loadBalancerProp
	}
	storageProp, err := expandGkeonpremBareMetalAdminClusterStorage(d.Get("storage"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("storage"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, storageProp)) {
		obj["storage"] = storageProp
	}
	proxyProp, err := expandGkeonpremBareMetalAdminClusterProxy(d.Get("proxy"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("proxy"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, proxyProp)) {
		obj["proxy"] = proxyProp
	}
	clusterOperationsProp, err := expandGkeonpremBareMetalAdminClusterClusterOperations(d.Get("cluster_operations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("cluster_operations"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, clusterOperationsProp)) {
		obj["clusterOperations"] = clusterOperationsProp
	}
	maintenanceConfigProp, err := expandGkeonpremBareMetalAdminClusterMaintenanceConfig(d.Get("maintenance_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("maintenance_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, maintenanceConfigProp)) {
		obj["maintenanceConfig"] = maintenanceConfigProp
	}
	nodeConfigProp, err := expandGkeonpremBareMetalAdminClusterNodeConfig(d.Get("node_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("node_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nodeConfigProp)) {
		obj["nodeConfig"] = nodeConfigProp
	}
	nodeAccessConfigProp, err := expandGkeonpremBareMetalAdminClusterNodeAccessConfig(d.Get("node_access_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("node_access_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nodeAccessConfigProp)) {
		obj["nodeAccessConfig"] = nodeAccessConfigProp
	}
	securityConfigProp, err := expandGkeonpremBareMetalAdminClusterSecurityConfig(d.Get("security_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("security_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, securityConfigProp)) {
		obj["securityConfig"] = securityConfigProp
	}
	annotationsProp, err := expandGkeonpremBareMetalAdminClusterEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{GkeonpremBasePath}}projects/{{project}}/locations/{{location}}/bareMetalAdminClusters/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating BareMetalAdminCluster %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("bare_metal_version") {
		updateMask = append(updateMask, "bareMetalVersion")
	}

	if d.HasChange("network_config") {
		updateMask = append(updateMask, "networkConfig")
	}

	if d.HasChange("control_plane") {
		updateMask = append(updateMask, "controlPlane")
	}

	if d.HasChange("load_balancer") {
		updateMask = append(updateMask, "loadBalancer")
	}

	if d.HasChange("storage") {
		updateMask = append(updateMask, "storage")
	}

	if d.HasChange("proxy") {
		updateMask = append(updateMask, "proxy")
	}

	if d.HasChange("cluster_operations") {
		updateMask = append(updateMask, "clusterOperations")
	}

	if d.HasChange("maintenance_config") {
		updateMask = append(updateMask, "maintenanceConfig")
	}

	if d.HasChange("node_config") {
		updateMask = append(updateMask, "nodeConfig")
	}

	if d.HasChange("node_access_config") {
		updateMask = append(updateMask, "nodeAccessConfig")
	}

	if d.HasChange("security_config") {
		updateMask = append(updateMask, "securityConfig")
	}

	if d.HasChange("effective_annotations") {
		updateMask = append(updateMask, "annotations")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
		})

		if err != nil {
			return fmt.Errorf("Error updating BareMetalAdminCluster %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating BareMetalAdminCluster %q: %#v", d.Id(), res)
		}

		err = GkeonpremOperationWaitTime(
			config, res, project, "Updating BareMetalAdminCluster", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceGkeonpremBareMetalAdminClusterRead(d, meta)
}

func resourceGkeonpremBareMetalAdminClusterDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] Gkeonprem BareMetalAdminCluster resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceGkeonpremBareMetalAdminClusterImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/bareMetalAdminClusters/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/bareMetalAdminClusters/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenGkeonpremBareMetalAdminClusterDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterBareMetalVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterReconciling(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterDeleteTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterLocalName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("annotations"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenGkeonpremBareMetalAdminClusterNetworkConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["island_mode_cidr"] =
		flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidr(original["islandModeCidr"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidr(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service_address_cidr_blocks"] =
		flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrServiceAddressCidrBlocks(original["serviceAddressCidrBlocks"], d, config)
	transformed["pod_address_cidr_blocks"] =
		flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrPodAddressCidrBlocks(original["podAddressCidrBlocks"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrServiceAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrPodAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlane(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["control_plane_node_pool_config"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfig(original["controlPlaneNodePoolConfig"], d, config)
	transformed["api_server_args"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgs(original["apiServerArgs"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["node_pool_config"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig(original["nodePoolConfig"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["node_configs"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigs(original["nodeConfigs"], d, config)
	transformed["operating_system"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOperatingSystem(original["operatingSystem"], d, config)
	transformed["taints"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaints(original["taints"], d, config)
	transformed["labels"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigLabels(original["labels"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"node_ip": flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsNodeIp(original["nodeIp"], d, config),
			"labels":  flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsLabels(original["labels"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsNodeIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOperatingSystem(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaints(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"key":    flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsKey(original["key"], d, config),
			"value":  flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsValue(original["value"], d, config),
			"effect": flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsEffect(original["effect"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsEffect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"argument": flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsArgument(original["argument"], d, config),
			"value":    flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsArgument(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterLoadBalancer(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["vip_config"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerVipConfig(original["vipConfig"], d, config)
	transformed["port_config"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerPortConfig(original["portConfig"], d, config)
	transformed["manual_lb_config"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfig(original["manualLbConfig"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterLoadBalancerVipConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["control_plane_vip"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerVipConfigControlPlaneVip(original["controlPlaneVip"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterLoadBalancerVipConfigControlPlaneVip(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterLoadBalancerPortConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["control_plane_load_balancer_port"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerPortConfigControlPlaneLoadBalancerPort(original["controlPlaneLoadBalancerPort"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterLoadBalancerPortConfigControlPlaneLoadBalancerPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStorage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["lvp_share_config"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfig(original["lvpShareConfig"], d, config)
	transformed["lvp_node_mounts_config"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfig(original["lvpNodeMountsConfig"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["lvp_config"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfig(original["lvpConfig"], d, config)
	transformed["shared_path_pv_count"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigSharedPathPvCount(original["sharedPathPvCount"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["path"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigPath(original["path"], d, config)
	transformed["storage_class"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigStorageClass(original["storageClass"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigStorageClass(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigSharedPathPvCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["path"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigPath(original["path"], d, config)
	transformed["storage_class"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigStorageClass(original["storageClass"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigStorageClass(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterProxy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["uri"] =
		flattenGkeonpremBareMetalAdminClusterProxyUri(original["uri"], d, config)
	transformed["no_proxy"] =
		flattenGkeonpremBareMetalAdminClusterProxyNoProxy(original["noProxy"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterProxyUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterProxyNoProxy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterClusterOperations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_application_logs"] =
		flattenGkeonpremBareMetalAdminClusterClusterOperationsEnableApplicationLogs(original["enableApplicationLogs"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterClusterOperationsEnableApplicationLogs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterMaintenanceConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["maintenance_address_cidr_blocks"] =
		flattenGkeonpremBareMetalAdminClusterMaintenanceConfigMaintenanceAddressCidrBlocks(original["maintenanceAddressCidrBlocks"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterMaintenanceConfigMaintenanceAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterNodeConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["max_pods_per_node"] =
		flattenGkeonpremBareMetalAdminClusterNodeConfigMaxPodsPerNode(original["maxPodsPerNode"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterNodeConfigMaxPodsPerNode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremBareMetalAdminClusterFleet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["membership"] =
		flattenGkeonpremBareMetalAdminClusterFleetMembership(original["membership"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterFleetMembership(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["error_message"] =
		flattenGkeonpremBareMetalAdminClusterStatusErrorMessage(original["errorMessage"], d, config)
	transformed["conditions"] =
		flattenGkeonpremBareMetalAdminClusterStatusConditions(original["conditions"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStatusErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type":                 flattenGkeonpremBareMetalAdminClusterStatusConditionsType(original["type"], d, config),
			"reason":               flattenGkeonpremBareMetalAdminClusterStatusConditionsReason(original["reason"], d, config),
			"message":              flattenGkeonpremBareMetalAdminClusterStatusConditionsMessage(original["message"], d, config),
			"last_transition_time": flattenGkeonpremBareMetalAdminClusterStatusConditionsLastTransitionTime(original["lastTransitionTime"], d, config),
			"state":                flattenGkeonpremBareMetalAdminClusterStatusConditionsState(original["state"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterStatusConditionsType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditionsReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditionsMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditionsLastTransitionTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditionsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheck(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["options"] =
		flattenGkeonpremBareMetalAdminClusterValidationCheckOptions(original["options"], d, config)
	transformed["status"] =
		flattenGkeonpremBareMetalAdminClusterValidationCheckStatus(original["status"], d, config)
	transformed["scenario"] =
		flattenGkeonpremBareMetalAdminClusterValidationCheckScenario(original["scenario"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterValidationCheckOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["result"] =
		flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResult(original["result"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResult(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"options":     flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultOptions(original["options"], d, config),
			"description": flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultDescription(original["description"], d, config),
			"category":    flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultCategory(original["category"], d, config),
			"reason":      flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultReason(original["reason"], d, config),
			"details":     flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultDetails(original["details"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultCategory(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckScenario(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterNodeAccessConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["login_user"] =
		flattenGkeonpremBareMetalAdminClusterNodeAccessConfigLoginUser(original["loginUser"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterNodeAccessConfigLoginUser(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterSecurityConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["authorization"] =
		flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorization(original["authorization"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorization(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["admin_users"] =
		flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsers(original["adminUsers"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"username": flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersUsername(original["username"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterEffectiveAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandGkeonpremBareMetalAdminClusterDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterBareMetalVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterNetworkConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIslandModeCidr, err := expandGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidr(original["island_mode_cidr"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIslandModeCidr); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["islandModeCidr"] = transformedIslandModeCidr
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidr(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceAddressCidrBlocks, err := expandGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrServiceAddressCidrBlocks(original["service_address_cidr_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAddressCidrBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAddressCidrBlocks"] = transformedServiceAddressCidrBlocks
	}

	transformedPodAddressCidrBlocks, err := expandGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrPodAddressCidrBlocks(original["pod_address_cidr_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPodAddressCidrBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["podAddressCidrBlocks"] = transformedPodAddressCidrBlocks
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrServiceAddressCidrBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrPodAddressCidrBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlane(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedControlPlaneNodePoolConfig, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfig(original["control_plane_node_pool_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedControlPlaneNodePoolConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["controlPlaneNodePoolConfig"] = transformedControlPlaneNodePoolConfig
	}

	transformedApiServerArgs, err := expandGkeonpremBareMetalAdminClusterControlPlaneApiServerArgs(original["api_server_args"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiServerArgs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiServerArgs"] = transformedApiServerArgs
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNodePoolConfig, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig(original["node_pool_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodePoolConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodePoolConfig"] = transformedNodePoolConfig
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNodeConfigs, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigs(original["node_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodeConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodeConfigs"] = transformedNodeConfigs
	}

	transformedOperatingSystem, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOperatingSystem(original["operating_system"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperatingSystem); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operatingSystem"] = transformedOperatingSystem
	}

	transformedTaints, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaints(original["taints"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTaints); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["taints"] = transformedTaints
	}

	transformedLabels, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigLabels(original["labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["labels"] = transformedLabels
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedNodeIp, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsNodeIp(original["node_ip"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNodeIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["nodeIp"] = transformedNodeIp
		}

		transformedLabels, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsLabels(original["labels"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["labels"] = transformedLabels
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsNodeIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOperatingSystem(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaints(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedValue, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedEffect, err := expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsEffect(original["effect"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEffect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["effect"] = transformedEffect
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsEffect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneApiServerArgs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedArgument, err := expandGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsArgument(original["argument"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedArgument); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["argument"] = transformedArgument
		}

		transformedValue, err := expandGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsArgument(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterLoadBalancer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedVipConfig, err := expandGkeonpremBareMetalAdminClusterLoadBalancerVipConfig(original["vip_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVipConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vipConfig"] = transformedVipConfig
	}

	transformedPortConfig, err := expandGkeonpremBareMetalAdminClusterLoadBalancerPortConfig(original["port_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPortConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["portConfig"] = transformedPortConfig
	}

	transformedManualLbConfig, err := expandGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfig(original["manual_lb_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedManualLbConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["manualLbConfig"] = transformedManualLbConfig
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterLoadBalancerVipConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedControlPlaneVip, err := expandGkeonpremBareMetalAdminClusterLoadBalancerVipConfigControlPlaneVip(original["control_plane_vip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedControlPlaneVip); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["controlPlaneVip"] = transformedControlPlaneVip
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterLoadBalancerVipConfigControlPlaneVip(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterLoadBalancerPortConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedControlPlaneLoadBalancerPort, err := expandGkeonpremBareMetalAdminClusterLoadBalancerPortConfigControlPlaneLoadBalancerPort(original["control_plane_load_balancer_port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedControlPlaneLoadBalancerPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["controlPlaneLoadBalancerPort"] = transformedControlPlaneLoadBalancerPort
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterLoadBalancerPortConfigControlPlaneLoadBalancerPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterStorage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLvpShareConfig, err := expandGkeonpremBareMetalAdminClusterStorageLvpShareConfig(original["lvp_share_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLvpShareConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lvpShareConfig"] = transformedLvpShareConfig
	}

	transformedLvpNodeMountsConfig, err := expandGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfig(original["lvp_node_mounts_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLvpNodeMountsConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lvpNodeMountsConfig"] = transformedLvpNodeMountsConfig
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterStorageLvpShareConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLvpConfig, err := expandGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfig(original["lvp_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLvpConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lvpConfig"] = transformedLvpConfig
	}

	transformedSharedPathPvCount, err := expandGkeonpremBareMetalAdminClusterStorageLvpShareConfigSharedPathPvCount(original["shared_path_pv_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSharedPathPvCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sharedPathPvCount"] = transformedSharedPathPvCount
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPath, err := expandGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigPath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	transformedStorageClass, err := expandGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigStorageClass(original["storage_class"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStorageClass); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["storageClass"] = transformedStorageClass
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigStorageClass(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterStorageLvpShareConfigSharedPathPvCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPath, err := expandGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigPath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	transformedStorageClass, err := expandGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigStorageClass(original["storage_class"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStorageClass); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["storageClass"] = transformedStorageClass
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigStorageClass(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterProxy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandGkeonpremBareMetalAdminClusterProxyUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedNoProxy, err := expandGkeonpremBareMetalAdminClusterProxyNoProxy(original["no_proxy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoProxy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["noProxy"] = transformedNoProxy
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterProxyUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterProxyNoProxy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterClusterOperations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableApplicationLogs, err := expandGkeonpremBareMetalAdminClusterClusterOperationsEnableApplicationLogs(original["enable_application_logs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableApplicationLogs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableApplicationLogs"] = transformedEnableApplicationLogs
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterClusterOperationsEnableApplicationLogs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterMaintenanceConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaintenanceAddressCidrBlocks, err := expandGkeonpremBareMetalAdminClusterMaintenanceConfigMaintenanceAddressCidrBlocks(original["maintenance_address_cidr_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceAddressCidrBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceAddressCidrBlocks"] = transformedMaintenanceAddressCidrBlocks
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterMaintenanceConfigMaintenanceAddressCidrBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterNodeConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaxPodsPerNode, err := expandGkeonpremBareMetalAdminClusterNodeConfigMaxPodsPerNode(original["max_pods_per_node"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxPodsPerNode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxPodsPerNode"] = transformedMaxPodsPerNode
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterNodeConfigMaxPodsPerNode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterNodeAccessConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLoginUser, err := expandGkeonpremBareMetalAdminClusterNodeAccessConfigLoginUser(original["login_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLoginUser); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["loginUser"] = transformedLoginUser
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterNodeAccessConfigLoginUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterSecurityConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAuthorization, err := expandGkeonpremBareMetalAdminClusterSecurityConfigAuthorization(original["authorization"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthorization); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authorization"] = transformedAuthorization
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterSecurityConfigAuthorization(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdminUsers, err := expandGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsers(original["admin_users"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdminUsers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["adminUsers"] = transformedAdminUsers
	}

	return transformed, nil
}

func expandGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedUsername, err := expandGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersUsername(original["username"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["username"] = transformedUsername
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremBareMetalAdminClusterEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
