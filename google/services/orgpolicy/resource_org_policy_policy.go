// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package orgpolicy

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func resourceOrgpolicyPolicyRulesConditionExpressionDiffSuppress(_, old, new string, d *schema.ResourceData) bool {
	oldReplaced := strings.ReplaceAll(strings.ReplaceAll(old, "Labels", "TagId"), "label", "tag")
	newReplaced := strings.ReplaceAll(strings.ReplaceAll(new, "Labels", "TagId"), "label", "tag")
	return oldReplaced == newReplaced
}

func ResourceOrgPolicyPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceOrgPolicyPolicyCreate,
		Read:   resourceOrgPolicyPolicyRead,
		Update: resourceOrgPolicyPolicyUpdate,
		Delete: resourceOrgPolicyPolicyDelete,

		Importer: &schema.ResourceImporter{
			State: resourceOrgPolicyPolicyImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.CompareResourceNames,
				Description:      `Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * 'projects/{project_number}/policies/{constraint_name}' * 'folders/{folder_id}/policies/{constraint_name}' * 'organizations/{organization_id}/policies/{constraint_name}' For example, "projects/123/policies/compute.disableSerialPortAccess". Note: 'projects/{project_id}/policies/{constraint_name}' is also an acceptable name for API requests, but responses will return the name using the equivalent project number.`,
			},
			"parent": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
				Description:      `The parent of the resource.`,
			},
			"dry_run_spec": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"inherit_from_parent": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Determines the inheritance behavior for this policy. If 'inherit_from_parent' is true, policy rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the new root for evaluation. This field can be set only for policies which configure list constraints.`,
						},
						"reset": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Ignores policies set above this resource and restores the 'constraint_default' enforcement behavior of the specific constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, 'rules' must be empty and 'inherit_from_parent' must be set to false.`,
						},
						"rules": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `In policies for boolean constraints, the following requirements apply: - There must be one and only one policy rule where condition is unset. - Boolean policy rules with conditions must set 'enforced' to the opposite of the policy rule without a condition. - During policy evaluation, policy rules with conditions that are true for a target resource take precedence.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"allow_all": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Setting this to '"TRUE"' means that all values are allowed. This field can be set only in Policies for list constraints.`,
									},
									"condition": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `A condition which determines whether this rule is used in the evaluation of the policy. When set, the 'expression' field in the 'Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"description": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.`,
												},
												"expression": {
													Type:             schema.TypeString,
													Optional:         true,
													DiffSuppressFunc: resourceOrgpolicyPolicyRulesConditionExpressionDiffSuppress,
													Description:      `Textual representation of an expression in Common Expression Language syntax.`,
												},
												"location": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.`,
												},
												"title": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.`,
												},
											},
										},
									},
									"deny_all": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Setting this to '"TRUE"' means that all values are denied. This field can be set only in Policies for list constraints.`,
									},
									"enforce": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `If '"TRUE"', then the 'Policy' is enforced. If '"FALSE"', then any configuration is acceptable. This field can be set only in Policies for boolean constraints.`,
									},
									"values": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `List of values to be used for this policy rule. This field can be set only in policies for list constraints.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"allowed_values": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `List of values allowed at this resource.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"denied_values": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `List of values denied at this resource.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
						"etag": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `An opaque tag indicating the current version of the policy, used for concurrency control. This field is ignored if used in a 'CreatePolicy' request. When the policy' is returned from either a 'GetPolicy' or a 'ListPolicies' request, this 'etag' indicates the version of the current policy to use when executing a read-modify-write loop. When the policy is returned from a 'GetEffectivePolicy' request, the 'etag' will be unset.`,
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. The time stamp this was previously updated. This represents the last time a call to 'CreatePolicy' or 'UpdatePolicy' was made for that policy.`,
						},
					},
				},
			},
			"spec": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Basic information about the Organization Policy.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"inherit_from_parent": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Determines the inheritance behavior for this 'Policy'. If 'inherit_from_parent' is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.`,
						},
						"reset": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Ignores policies set above this resource and restores the 'constraint_default' enforcement behavior of the specific 'Constraint' at this resource. This field can be set in policies for either list or boolean constraints. If set, 'rules' must be empty and 'inherit_from_parent' must be set to false.`,
						},
						"rules": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Up to 10 PolicyRules are allowed. In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set 'enforced' to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"allow_all": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Setting this to '"TRUE"' means that all values are allowed. This field can be set only in Policies for list constraints.`,
									},
									"condition": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `A condition which determines whether this rule is used in the evaluation of the policy. When set, the 'expression' field in the 'Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"description": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.`,
												},
												"expression": {
													Type:             schema.TypeString,
													Optional:         true,
													DiffSuppressFunc: resourceOrgpolicyPolicyRulesConditionExpressionDiffSuppress,
													Description:      `Textual representation of an expression in Common Expression Language syntax.`,
												},
												"location": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.`,
												},
												"title": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.`,
												},
											},
										},
									},
									"deny_all": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Setting this to '"TRUE"' means that all values are denied. This field can be set only in Policies for list constraints.`,
									},
									"enforce": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `If '"TRUE"', then the 'Policy' is enforced. If '"FALSE"', then any configuration is acceptable. This field can be set only in Policies for boolean constraints.`,
									},
									"values": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `List of values to be used for this PolicyRule. This field can be set only in Policies for list constraints.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"allowed_values": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `List of values allowed at this resource.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"denied_values": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `List of values denied at this resource.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
						"etag": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `An opaque tag indicating the current version of the 'Policy', used for concurrency control. This field is ignored if used in a 'CreatePolicy' request. When the 'Policy' is returned from either a 'GetPolicy' or a 'ListPolicies' request, this 'etag' indicates the version of the current 'Policy' to use when executing a read-modify-write loop. When the 'Policy' is returned from a 'GetEffectivePolicy' request, the 'etag' will be unset.`,
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. The time stamp this was previously updated. This represents the last time a call to 'CreatePolicy' or 'UpdatePolicy' was made for that 'Policy'.`,
						},
					},
				},
			},
			"etag": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Optional. An opaque tag indicating the current state of the policy, used for concurrency control. This 'etag' is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceOrgPolicyPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandOrgPolicyPolicyName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	specProp, err := expandOrgPolicyPolicySpec(d.Get("spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(specProp)) && (ok || !reflect.DeepEqual(v, specProp)) {
		obj["spec"] = specProp
	}
	dryRunSpecProp, err := expandOrgPolicyPolicyDryRunSpec(d.Get("dry_run_spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("dry_run_spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(dryRunSpecProp)) && (ok || !reflect.DeepEqual(v, dryRunSpecProp)) {
		obj["dryRunSpec"] = dryRunSpecProp
	}

	obj, err = resourceOrgPolicyPolicyEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{OrgPolicyBasePath}}{{parent}}/policies")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Policy: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:               config,
		Method:               "POST",
		Project:              billingProject,
		RawURL:               url,
		UserAgent:            userAgent,
		Body:                 obj,
		Timeout:              d.Timeout(schema.TimeoutCreate),
		Headers:              headers,
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{transport_tpg.IsOrgpolicyRetryableError},
	})
	if err != nil {
		return fmt.Errorf("Error creating Policy: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/policies/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Policy %q: %#v", d.Id(), res)

	return resourceOrgPolicyPolicyRead(d, meta)
}

func resourceOrgPolicyPolicyRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{OrgPolicyBasePath}}{{parent}}/policies/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	// Call the encoder to shorten name even if the resource is created by another provider version.
	resourceOrgPolicyPolicyEncoder(d, nil, nil)
	// Re-create the url.
	url, err = tpgresource.ReplaceVars(d, config, "{{OrgPolicyBasePath}}{{parent}}/policies/{{name}}")
	if err != nil {
		return err
	}
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:               config,
		Method:               "GET",
		Project:              billingProject,
		RawURL:               url,
		UserAgent:            userAgent,
		Headers:              headers,
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{transport_tpg.IsOrgpolicyRetryableError},
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("OrgPolicyPolicy %q", d.Id()))
	}

	if err := d.Set("spec", flattenOrgPolicyPolicySpec(res["spec"], d, config)); err != nil {
		return fmt.Errorf("Error reading Policy: %s", err)
	}
	if err := d.Set("dry_run_spec", flattenOrgPolicyPolicyDryRunSpec(res["dryRunSpec"], d, config)); err != nil {
		return fmt.Errorf("Error reading Policy: %s", err)
	}
	if err := d.Set("etag", flattenOrgPolicyPolicyEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading Policy: %s", err)
	}

	return nil
}

func resourceOrgPolicyPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	specProp, err := expandOrgPolicyPolicySpec(d.Get("spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, specProp)) {
		obj["spec"] = specProp
	}
	dryRunSpecProp, err := expandOrgPolicyPolicyDryRunSpec(d.Get("dry_run_spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("dry_run_spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, dryRunSpecProp)) {
		obj["dryRunSpec"] = dryRunSpecProp
	}

	obj, err = resourceOrgPolicyPolicyEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{OrgPolicyBasePath}}{{parent}}/policies/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Policy %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("spec") {
		updateMask = append(updateMask, "policy.spec")
	}

	if d.HasChange("dry_run_spec") {
		updateMask = append(updateMask, "policy.dryRunSpec")
	}

	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:               config,
		Method:               "PATCH",
		Project:              billingProject,
		RawURL:               url,
		UserAgent:            userAgent,
		Body:                 obj,
		Timeout:              d.Timeout(schema.TimeoutUpdate),
		Headers:              headers,
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{transport_tpg.IsOrgpolicyRetryableError},
	})

	if err != nil {
		return fmt.Errorf("Error updating Policy %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating Policy %q: %#v", d.Id(), res)
	}

	return resourceOrgPolicyPolicyRead(d, meta)
}

func resourceOrgPolicyPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{OrgPolicyBasePath}}{{parent}}/policies/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting Policy %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:               config,
		Method:               "DELETE",
		Project:              billingProject,
		RawURL:               url,
		UserAgent:            userAgent,
		Body:                 obj,
		Timeout:              d.Timeout(schema.TimeoutDelete),
		Headers:              headers,
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{transport_tpg.IsOrgpolicyRetryableError},
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Policy")
	}

	log.Printf("[DEBUG] Finished deleting Policy %q: %#v", d.Id(), res)
	return nil
}

func resourceOrgPolicyPolicyImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^(?P<parent>.+)/policies/(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/policies/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenOrgPolicyPolicySpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["etag"] =
		flattenOrgPolicyPolicySpecEtag(original["etag"], d, config)
	transformed["update_time"] =
		flattenOrgPolicyPolicySpecUpdateTime(original["updateTime"], d, config)
	transformed["rules"] =
		flattenOrgPolicyPolicySpecRules(original["rules"], d, config)
	transformed["inherit_from_parent"] =
		flattenOrgPolicyPolicySpecInheritFromParent(original["inheritFromParent"], d, config)
	transformed["reset"] =
		flattenOrgPolicyPolicySpecReset(original["reset"], d, config)
	return []interface{}{transformed}
}
func flattenOrgPolicyPolicySpecEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicySpecUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicySpecRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"values":    flattenOrgPolicyPolicySpecRulesValues(original["values"], d, config),
			"allow_all": flattenOrgPolicyPolicySpecRulesAllowAll(original["allowAll"], d, config),
			"deny_all":  flattenOrgPolicyPolicySpecRulesDenyAll(original["denyAll"], d, config),
			"enforce":   flattenOrgPolicyPolicySpecRulesEnforce(original["enforce"], d, config),
			"condition": flattenOrgPolicyPolicySpecRulesCondition(original["condition"], d, config),
		})
	}
	return transformed
}
func flattenOrgPolicyPolicySpecRulesValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allowed_values"] =
		flattenOrgPolicyPolicySpecRulesValuesAllowedValues(original["allowedValues"], d, config)
	transformed["denied_values"] =
		flattenOrgPolicyPolicySpecRulesValuesDeniedValues(original["deniedValues"], d, config)
	return []interface{}{transformed}
}
func flattenOrgPolicyPolicySpecRulesValuesAllowedValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicySpecRulesValuesDeniedValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicySpecRulesAllowAll(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return ""
	}
	return strings.ToUpper(strconv.FormatBool(v.(bool)))
}

func flattenOrgPolicyPolicySpecRulesDenyAll(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return ""
	}
	return strings.ToUpper(strconv.FormatBool(v.(bool)))
}

func flattenOrgPolicyPolicySpecRulesEnforce(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return ""
	}
	return strings.ToUpper(strconv.FormatBool(v.(bool)))
}

func flattenOrgPolicyPolicySpecRulesCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["expression"] =
		flattenOrgPolicyPolicySpecRulesConditionExpression(original["expression"], d, config)
	transformed["title"] =
		flattenOrgPolicyPolicySpecRulesConditionTitle(original["title"], d, config)
	transformed["description"] =
		flattenOrgPolicyPolicySpecRulesConditionDescription(original["description"], d, config)
	transformed["location"] =
		flattenOrgPolicyPolicySpecRulesConditionLocation(original["location"], d, config)
	return []interface{}{transformed}
}
func flattenOrgPolicyPolicySpecRulesConditionExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicySpecRulesConditionTitle(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicySpecRulesConditionDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicySpecRulesConditionLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicySpecInheritFromParent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicySpecReset(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["etag"] =
		flattenOrgPolicyPolicyDryRunSpecEtag(original["etag"], d, config)
	transformed["update_time"] =
		flattenOrgPolicyPolicyDryRunSpecUpdateTime(original["updateTime"], d, config)
	transformed["rules"] =
		flattenOrgPolicyPolicyDryRunSpecRules(original["rules"], d, config)
	transformed["inherit_from_parent"] =
		flattenOrgPolicyPolicyDryRunSpecInheritFromParent(original["inheritFromParent"], d, config)
	transformed["reset"] =
		flattenOrgPolicyPolicyDryRunSpecReset(original["reset"], d, config)
	return []interface{}{transformed}
}
func flattenOrgPolicyPolicyDryRunSpecEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpecUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpecRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"values":    flattenOrgPolicyPolicyDryRunSpecRulesValues(original["values"], d, config),
			"allow_all": flattenOrgPolicyPolicyDryRunSpecRulesAllowAll(original["allowAll"], d, config),
			"deny_all":  flattenOrgPolicyPolicyDryRunSpecRulesDenyAll(original["denyAll"], d, config),
			"enforce":   flattenOrgPolicyPolicyDryRunSpecRulesEnforce(original["enforce"], d, config),
			"condition": flattenOrgPolicyPolicyDryRunSpecRulesCondition(original["condition"], d, config),
		})
	}
	return transformed
}
func flattenOrgPolicyPolicyDryRunSpecRulesValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allowed_values"] =
		flattenOrgPolicyPolicyDryRunSpecRulesValuesAllowedValues(original["allowedValues"], d, config)
	transformed["denied_values"] =
		flattenOrgPolicyPolicyDryRunSpecRulesValuesDeniedValues(original["deniedValues"], d, config)
	return []interface{}{transformed}
}
func flattenOrgPolicyPolicyDryRunSpecRulesValuesAllowedValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpecRulesValuesDeniedValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpecRulesAllowAll(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return ""
	}
	return strings.ToUpper(strconv.FormatBool(v.(bool)))
}

func flattenOrgPolicyPolicyDryRunSpecRulesDenyAll(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return ""
	}
	return strings.ToUpper(strconv.FormatBool(v.(bool)))
}

func flattenOrgPolicyPolicyDryRunSpecRulesEnforce(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return ""
	}
	return strings.ToUpper(strconv.FormatBool(v.(bool)))
}

func flattenOrgPolicyPolicyDryRunSpecRulesCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["expression"] =
		flattenOrgPolicyPolicyDryRunSpecRulesConditionExpression(original["expression"], d, config)
	transformed["title"] =
		flattenOrgPolicyPolicyDryRunSpecRulesConditionTitle(original["title"], d, config)
	transformed["description"] =
		flattenOrgPolicyPolicyDryRunSpecRulesConditionDescription(original["description"], d, config)
	transformed["location"] =
		flattenOrgPolicyPolicyDryRunSpecRulesConditionLocation(original["location"], d, config)
	return []interface{}{transformed}
}
func flattenOrgPolicyPolicyDryRunSpecRulesConditionExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpecRulesConditionTitle(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpecRulesConditionDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpecRulesConditionLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpecInheritFromParent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyDryRunSpecReset(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOrgPolicyPolicyEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandOrgPolicyPolicyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEtag, err := expandOrgPolicyPolicySpecEtag(original["etag"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEtag); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["etag"] = transformedEtag
	}

	transformedUpdateTime, err := expandOrgPolicyPolicySpecUpdateTime(original["update_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUpdateTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["updateTime"] = transformedUpdateTime
	}

	transformedRules, err := expandOrgPolicyPolicySpecRules(original["rules"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRules); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rules"] = transformedRules
	}

	transformedInheritFromParent, err := expandOrgPolicyPolicySpecInheritFromParent(original["inherit_from_parent"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["inheritFromParent"] = transformedInheritFromParent
	}

	transformedReset, err := expandOrgPolicyPolicySpecReset(original["reset"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["reset"] = transformedReset
	}

	return transformed, nil
}

func expandOrgPolicyPolicySpecEtag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpecUpdateTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpecRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedValues, err := expandOrgPolicyPolicySpecRulesValues(original["values"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["values"] = transformedValues
		}

		transformedAllowAll, err := expandOrgPolicyPolicySpecRulesAllowAll(original["allow_all"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["allowAll"] = transformedAllowAll
		}

		transformedDenyAll, err := expandOrgPolicyPolicySpecRulesDenyAll(original["deny_all"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["denyAll"] = transformedDenyAll
		}

		transformedEnforce, err := expandOrgPolicyPolicySpecRulesEnforce(original["enforce"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["enforce"] = transformedEnforce
		}

		transformedCondition, err := expandOrgPolicyPolicySpecRulesCondition(original["condition"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCondition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["condition"] = transformedCondition
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOrgPolicyPolicySpecRulesValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowedValues, err := expandOrgPolicyPolicySpecRulesValuesAllowedValues(original["allowed_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedValues"] = transformedAllowedValues
	}

	transformedDeniedValues, err := expandOrgPolicyPolicySpecRulesValuesDeniedValues(original["denied_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeniedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deniedValues"] = transformedDeniedValues
	}

	return transformed, nil
}

func expandOrgPolicyPolicySpecRulesValuesAllowedValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpecRulesValuesDeniedValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpecRulesAllowAll(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}

	b, err := strconv.ParseBool(v.(string))
	if err != nil {
		return nil, nil
	}
	return b, nil
}

func expandOrgPolicyPolicySpecRulesDenyAll(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}

	b, err := strconv.ParseBool(v.(string))
	if err != nil {
		return nil, nil
	}
	return b, nil
}

func expandOrgPolicyPolicySpecRulesEnforce(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}

	b, err := strconv.ParseBool(v.(string))
	if err != nil {
		return nil, nil
	}
	return b, nil
}

func expandOrgPolicyPolicySpecRulesCondition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExpression, err := expandOrgPolicyPolicySpecRulesConditionExpression(original["expression"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["expression"] = transformedExpression
	}

	transformedTitle, err := expandOrgPolicyPolicySpecRulesConditionTitle(original["title"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTitle); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["title"] = transformedTitle
	}

	transformedDescription, err := expandOrgPolicyPolicySpecRulesConditionDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedLocation, err := expandOrgPolicyPolicySpecRulesConditionLocation(original["location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["location"] = transformedLocation
	}

	return transformed, nil
}

func expandOrgPolicyPolicySpecRulesConditionExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpecRulesConditionTitle(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpecRulesConditionDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpecRulesConditionLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpecInheritFromParent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicySpecReset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEtag, err := expandOrgPolicyPolicyDryRunSpecEtag(original["etag"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEtag); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["etag"] = transformedEtag
	}

	transformedUpdateTime, err := expandOrgPolicyPolicyDryRunSpecUpdateTime(original["update_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUpdateTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["updateTime"] = transformedUpdateTime
	}

	transformedRules, err := expandOrgPolicyPolicyDryRunSpecRules(original["rules"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRules); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rules"] = transformedRules
	}

	transformedInheritFromParent, err := expandOrgPolicyPolicyDryRunSpecInheritFromParent(original["inherit_from_parent"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["inheritFromParent"] = transformedInheritFromParent
	}

	transformedReset, err := expandOrgPolicyPolicyDryRunSpecReset(original["reset"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["reset"] = transformedReset
	}

	return transformed, nil
}

func expandOrgPolicyPolicyDryRunSpecEtag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpecUpdateTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpecRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedValues, err := expandOrgPolicyPolicyDryRunSpecRulesValues(original["values"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["values"] = transformedValues
		}

		transformedAllowAll, err := expandOrgPolicyPolicyDryRunSpecRulesAllowAll(original["allow_all"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["allowAll"] = transformedAllowAll
		}

		transformedDenyAll, err := expandOrgPolicyPolicyDryRunSpecRulesDenyAll(original["deny_all"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["denyAll"] = transformedDenyAll
		}

		transformedEnforce, err := expandOrgPolicyPolicyDryRunSpecRulesEnforce(original["enforce"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["enforce"] = transformedEnforce
		}

		transformedCondition, err := expandOrgPolicyPolicyDryRunSpecRulesCondition(original["condition"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCondition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["condition"] = transformedCondition
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowedValues, err := expandOrgPolicyPolicyDryRunSpecRulesValuesAllowedValues(original["allowed_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedValues"] = transformedAllowedValues
	}

	transformedDeniedValues, err := expandOrgPolicyPolicyDryRunSpecRulesValuesDeniedValues(original["denied_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeniedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deniedValues"] = transformedDeniedValues
	}

	return transformed, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesValuesAllowedValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesValuesDeniedValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesAllowAll(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}

	b, err := strconv.ParseBool(v.(string))
	if err != nil {
		return nil, nil
	}
	return b, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesDenyAll(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}

	b, err := strconv.ParseBool(v.(string))
	if err != nil {
		return nil, nil
	}
	return b, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesEnforce(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}

	b, err := strconv.ParseBool(v.(string))
	if err != nil {
		return nil, nil
	}
	return b, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesCondition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExpression, err := expandOrgPolicyPolicyDryRunSpecRulesConditionExpression(original["expression"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["expression"] = transformedExpression
	}

	transformedTitle, err := expandOrgPolicyPolicyDryRunSpecRulesConditionTitle(original["title"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTitle); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["title"] = transformedTitle
	}

	transformedDescription, err := expandOrgPolicyPolicyDryRunSpecRulesConditionDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedLocation, err := expandOrgPolicyPolicyDryRunSpecRulesConditionLocation(original["location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["location"] = transformedLocation
	}

	return transformed, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesConditionExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesConditionTitle(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesConditionDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpecRulesConditionLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpecInheritFromParent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOrgPolicyPolicyDryRunSpecReset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func resourceOrgPolicyPolicyEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	name := d.Get("name").(string)
	d.Set("name", tpgresource.GetResourceNameFromSelfLink(name))
	return obj, nil
}
