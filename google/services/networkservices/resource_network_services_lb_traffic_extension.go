// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkservices

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceNetworkServicesLbTrafficExtension() *schema.Resource {
	return &schema.Resource{
		Create: resourceNetworkServicesLbTrafficExtensionCreate,
		Read:   resourceNetworkServicesLbTrafficExtensionRead,
		Update: resourceNetworkServicesLbTrafficExtensionUpdate,
		Delete: resourceNetworkServicesLbTrafficExtensionDelete,

		Importer: &schema.ResourceImporter{
			State: resourceNetworkServicesLbTrafficExtensionImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"extension_chains": {
				Type:     schema.TypeList,
				Required: true,
				Description: `A set of ordered extension chains that contain the match conditions and extensions to execute.
Match conditions for each extension chain are evaluated in sequence for a given request.
The first extension chain that has a condition that matches the request is executed.
Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"extensions": {
							Type:     schema.TypeList,
							Required: true,
							Description: `A set of extensions to execute for the matching request.
At least one extension is required. Up to 3 extensions can be defined for each extension chain for
LbTrafficExtension resource. LbRouteExtension chains are limited to 1 extension per extension chain.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"authority": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The :authority header in the gRPC request sent from Envoy to the extension service.`,
									},
									"name": {
										Type:     schema.TypeString,
										Required: true,
										Description: `The name for this extension. The name is logged as part of the HTTP request logs.
The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens,
and can have a maximum length of 63 characters. Additionally, the first character must be a letter
and the last a letter or a number.`,
									},
									"service": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
										Description:      `The reference to the service that runs the extension. Must be a reference to a backend service`,
									},
									"timeout": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.DurationDiffSuppress,
										Description: `Specifies the timeout for each individual message on the stream. The timeout must be between 10-1000 milliseconds.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".`,
									},
									"fail_open": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `Determines how the proxy behaves if the call to the extension fails or times out.
When set to TRUE, request or response processing continues without error.
Any subsequent extensions in the extension chain are also executed.
When set to FALSE: * If response headers have not been delivered to the downstream client,
a generic 500 error is returned to the client. The error response can be tailored by
configuring a custom error response in the load balancer.`,
									},
									"forward_headers": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `List of the HTTP headers to forward to the extension (from the client or backend).
If omitted, all headers are sent. Each element is a string indicating the header name.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"supported_events": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `A set of events during request or response processing for which this extension is called.
This field is required for the LbTrafficExtension resource. It's not relevant for the LbRouteExtension
resource. Possible values:'EVENT_TYPE_UNSPECIFIED', 'REQUEST_HEADERS', 'REQUEST_BODY', 'RESPONSE_HEADERS',
'RESPONSE_BODY', 'RESPONSE_BODY' and 'RESPONSE_BODY'.`,
										MinItems: 1,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"match_condition": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Conditions under which this chain is invoked for a request.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"cel_expression": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `A Common Expression Language (CEL) expression that is used to match requests for which the extension chain is executed.`,
									},
								},
							},
						},
						"name": {
							Type:     schema.TypeString,
							Required: true,
							Description: `The name for this extension chain. The name is logged as part of the HTTP request logs.
The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens,
and can have a maximum length of 63 characters. Additionally, the first character must be a letter
and the last a letter or a number.`,
						},
					},
				},
			},
			"forwarding_rules": {
				Type:             schema.TypeList,
				Required:         true,
				DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
				Description: `A list of references to the forwarding rules to which this service extension is attached to.
At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location of the traffic extension`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `A human-readable description of the resource.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Set of labels associated with the LbTrafficExtension resource.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"load_balancing_scheme": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"LOAD_BALANCING_SCHEME_UNSPECIFIED", "INTERNAL_MANAGED", "EXTERNAL_MANAGED", ""}),
				Description: `All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
  For more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED", "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceNetworkServicesLbTrafficExtensionCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkServicesLbTrafficExtensionDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	forwardingRulesProp, err := expandNetworkServicesLbTrafficExtensionForwardingRules(d.Get("forwarding_rules"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("forwarding_rules"); !tpgresource.IsEmptyValue(reflect.ValueOf(forwardingRulesProp)) && (ok || !reflect.DeepEqual(v, forwardingRulesProp)) {
		obj["forwardingRules"] = forwardingRulesProp
	}
	extensionChainsProp, err := expandNetworkServicesLbTrafficExtensionExtensionChains(d.Get("extension_chains"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("extension_chains"); !tpgresource.IsEmptyValue(reflect.ValueOf(extensionChainsProp)) && (ok || !reflect.DeepEqual(v, extensionChainsProp)) {
		obj["extensionChains"] = extensionChainsProp
	}
	loadBalancingSchemeProp, err := expandNetworkServicesLbTrafficExtensionLoadBalancingScheme(d.Get("load_balancing_scheme"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("load_balancing_scheme"); !tpgresource.IsEmptyValue(reflect.ValueOf(loadBalancingSchemeProp)) && (ok || !reflect.DeepEqual(v, loadBalancingSchemeProp)) {
		obj["loadBalancingScheme"] = loadBalancingSchemeProp
	}
	labelsProp, err := expandNetworkServicesLbTrafficExtensionEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/{{location}}/lbTrafficExtensions?lbTrafficExtensionId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new LbTrafficExtension: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LbTrafficExtension: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating LbTrafficExtension: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = NetworkServicesOperationWaitTime(
		config, res, project, "Creating LbTrafficExtension", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create LbTrafficExtension: %s", err)
	}

	log.Printf("[DEBUG] Finished creating LbTrafficExtension %q: %#v", d.Id(), res)

	return resourceNetworkServicesLbTrafficExtensionRead(d, meta)
}

func resourceNetworkServicesLbTrafficExtensionRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LbTrafficExtension: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("NetworkServicesLbTrafficExtension %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading LbTrafficExtension: %s", err)
	}

	if err := d.Set("description", flattenNetworkServicesLbTrafficExtensionDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading LbTrafficExtension: %s", err)
	}
	if err := d.Set("labels", flattenNetworkServicesLbTrafficExtensionLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading LbTrafficExtension: %s", err)
	}
	if err := d.Set("forwarding_rules", flattenNetworkServicesLbTrafficExtensionForwardingRules(res["forwardingRules"], d, config)); err != nil {
		return fmt.Errorf("Error reading LbTrafficExtension: %s", err)
	}
	if err := d.Set("extension_chains", flattenNetworkServicesLbTrafficExtensionExtensionChains(res["extensionChains"], d, config)); err != nil {
		return fmt.Errorf("Error reading LbTrafficExtension: %s", err)
	}
	if err := d.Set("load_balancing_scheme", flattenNetworkServicesLbTrafficExtensionLoadBalancingScheme(res["loadBalancingScheme"], d, config)); err != nil {
		return fmt.Errorf("Error reading LbTrafficExtension: %s", err)
	}
	if err := d.Set("terraform_labels", flattenNetworkServicesLbTrafficExtensionTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading LbTrafficExtension: %s", err)
	}
	if err := d.Set("effective_labels", flattenNetworkServicesLbTrafficExtensionEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading LbTrafficExtension: %s", err)
	}

	return nil
}

func resourceNetworkServicesLbTrafficExtensionUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LbTrafficExtension: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkServicesLbTrafficExtensionDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	forwardingRulesProp, err := expandNetworkServicesLbTrafficExtensionForwardingRules(d.Get("forwarding_rules"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("forwarding_rules"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, forwardingRulesProp)) {
		obj["forwardingRules"] = forwardingRulesProp
	}
	extensionChainsProp, err := expandNetworkServicesLbTrafficExtensionExtensionChains(d.Get("extension_chains"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("extension_chains"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, extensionChainsProp)) {
		obj["extensionChains"] = extensionChainsProp
	}
	loadBalancingSchemeProp, err := expandNetworkServicesLbTrafficExtensionLoadBalancingScheme(d.Get("load_balancing_scheme"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("load_balancing_scheme"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, loadBalancingSchemeProp)) {
		obj["loadBalancingScheme"] = loadBalancingSchemeProp
	}
	labelsProp, err := expandNetworkServicesLbTrafficExtensionEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating LbTrafficExtension %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("forwarding_rules") {
		updateMask = append(updateMask, "forwardingRules")
	}

	if d.HasChange("extension_chains") {
		updateMask = append(updateMask, "extensionChains")
	}

	if d.HasChange("load_balancing_scheme") {
		updateMask = append(updateMask, "loadBalancingScheme")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating LbTrafficExtension %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating LbTrafficExtension %q: %#v", d.Id(), res)
		}

		err = NetworkServicesOperationWaitTime(
			config, res, project, "Updating LbTrafficExtension", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceNetworkServicesLbTrafficExtensionRead(d, meta)
}

func resourceNetworkServicesLbTrafficExtensionDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LbTrafficExtension: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting LbTrafficExtension %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "LbTrafficExtension")
	}

	err = NetworkServicesOperationWaitTime(
		config, res, project, "Deleting LbTrafficExtension", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting LbTrafficExtension %q: %#v", d.Id(), res)
	return nil
}

func resourceNetworkServicesLbTrafficExtensionImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/lbTrafficExtensions/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenNetworkServicesLbTrafficExtensionDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesLbTrafficExtensionForwardingRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionExtensionChains(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":            flattenNetworkServicesLbTrafficExtensionExtensionChainsName(original["name"], d, config),
			"match_condition": flattenNetworkServicesLbTrafficExtensionExtensionChainsMatchCondition(original["matchCondition"], d, config),
			"extensions":      flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensions(original["extensions"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesLbTrafficExtensionExtensionChainsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionExtensionChainsMatchCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cel_expression"] =
		flattenNetworkServicesLbTrafficExtensionExtensionChainsMatchConditionCelExpression(original["celExpression"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesLbTrafficExtensionExtensionChainsMatchConditionCelExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":             flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsName(original["name"], d, config),
			"authority":        flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsAuthority(original["authority"], d, config),
			"service":          flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsService(original["service"], d, config),
			"timeout":          flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsTimeout(original["timeout"], d, config),
			"fail_open":        flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsFailOpen(original["failOpen"], d, config),
			"forward_headers":  flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsForwardHeaders(original["forwardHeaders"], d, config),
			"supported_events": flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsSupportedEvents(original["supportedEvents"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsAuthority(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsFailOpen(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsForwardHeaders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionExtensionChainsExtensionsSupportedEvents(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionLoadBalancingScheme(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesLbTrafficExtensionTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesLbTrafficExtensionEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandNetworkServicesLbTrafficExtensionDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionForwardingRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandNetworkServicesLbTrafficExtensionExtensionChainsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedMatchCondition, err := expandNetworkServicesLbTrafficExtensionExtensionChainsMatchCondition(original["match_condition"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMatchCondition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["matchCondition"] = transformedMatchCondition
		}

		transformedExtensions, err := expandNetworkServicesLbTrafficExtensionExtensionChainsExtensions(original["extensions"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExtensions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["extensions"] = transformedExtensions
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsMatchCondition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCelExpression, err := expandNetworkServicesLbTrafficExtensionExtensionChainsMatchConditionCelExpression(original["cel_expression"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCelExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["celExpression"] = transformedCelExpression
	}

	return transformed, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsMatchConditionCelExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsExtensions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedAuthority, err := expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsAuthority(original["authority"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAuthority); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["authority"] = transformedAuthority
		}

		transformedService, err := expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsService(original["service"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedService); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["service"] = transformedService
		}

		transformedTimeout, err := expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsTimeout(original["timeout"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTimeout); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["timeout"] = transformedTimeout
		}

		transformedFailOpen, err := expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsFailOpen(original["fail_open"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFailOpen); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["failOpen"] = transformedFailOpen
		}

		transformedForwardHeaders, err := expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsForwardHeaders(original["forward_headers"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedForwardHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["forwardHeaders"] = transformedForwardHeaders
		}

		transformedSupportedEvents, err := expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsSupportedEvents(original["supported_events"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSupportedEvents); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["supportedEvents"] = transformedSupportedEvents
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsAuthority(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsFailOpen(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsForwardHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionExtensionChainsExtensionsSupportedEvents(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionLoadBalancingScheme(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesLbTrafficExtensionEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
