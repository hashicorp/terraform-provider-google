// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkservices_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccNetworkServicesHttpRoute_networkServicesHttpRouteBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesHttpRouteDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesHttpRoute_networkServicesHttpRouteBasicExample(context),
			},
			{
				ResourceName:            "google_network_services_http_route.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
		},
	})
}

func testAccNetworkServicesHttpRoute_networkServicesHttpRouteBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_network_services_http_route" "default" {
  name                   = "tf-test-my-http-route%{random_suffix}"
  labels                 = {
    foo = "bar"
  }
  description             = "my description"
  hostnames               = ["example"]
  rules                   {
    matches {
      query_parameters {
        query_parameter = "key"
        exact_match = "value"
      }
      full_path_match = "example"
    }
  }
}
`, context)
}

func TestAccNetworkServicesHttpRoute_networkServicesHttpRouteMatchesAndActionsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesHttpRouteDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesHttpRoute_networkServicesHttpRouteMatchesAndActionsExample(context),
			},
			{
				ResourceName:            "google_network_services_http_route.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
		},
	})
}

func testAccNetworkServicesHttpRoute_networkServicesHttpRouteMatchesAndActionsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_network_services_http_route" "default" {
  name                   = "tf-test-my-http-route%{random_suffix}"
  labels                 = {
    foo = "bar"
  }
  description             = "my description"
  hostnames               = ["example"]
  rules                   {
    matches {
      headers {
        header = "header"
        invert_match = false
        regex_match = "header-value"
      }
      query_parameters {
        query_parameter = "key"
        exact_match = "value"
      }
      prefix_match = "example"
      ignore_case = false
    }
    matches {
      headers {
        header = "header"
        invert_match = false
        present_match = true
      }
      query_parameters {
        query_parameter = "key"
        regex_match = "value"
      }
      regex_match = "example"
      ignore_case = false
    }
    matches {
      headers {
        header = "header"
        invert_match = false
        present_match = true
      }
      query_parameters {
        query_parameter = "key"
        present_match = true
      }
      full_path_match = "example"
      ignore_case = false
    }
    action {
      redirect {
        host_redirect = "new-host"
        path_redirect =  "new-path"
        prefix_rewrite =  "new-prefix"
        https_redirect = true
        strip_query = true
        port_redirect = 8081
      }
      url_rewrite {
        path_prefix_rewrite = "new-prefix"
        host_rewrite = "new-host"
      }
      retry_policy {
          retry_conditions = ["server_error"]
          num_retries = 1
          per_try_timeout =  "1s"
      }
      request_mirror_policy {
        destination {
          service_name = "new"
          weight = 1
        }
      }
      cors_policy {
        allow_origins = ["example"]
        allow_methods = ["GET", "PUT"]
        allow_headers = ["version", "type"]
        expose_headers = ["version", "type"]
        max_age = "1s"
        allow_credentials = true
        disabled = false
      }
    }
  }
}
`, context)
}

func TestAccNetworkServicesHttpRoute_networkServicesHttpRouteActionsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesHttpRouteDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesHttpRoute_networkServicesHttpRouteActionsExample(context),
			},
			{
				ResourceName:            "google_network_services_http_route.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
		},
	})
}

func testAccNetworkServicesHttpRoute_networkServicesHttpRouteActionsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_network_services_http_route" "default" {
  name                   = "tf-test-my-http-route%{random_suffix}"
  labels                 = {
    foo = "bar"
  }
  description             = "my description"
  hostnames               = ["example"]
  rules                   {
    action {
      fault_injection_policy {
       delay {
         fixed_delay = "1s"
         percentage = 1
       }
       abort {
         http_status = 500
         percentage = 1
       }
     }
      url_rewrite {
        path_prefix_rewrite = "new-prefix"
        host_rewrite = "new-host"
      }
      retry_policy {
          retry_conditions = ["server_error"]
          num_retries = 1
          per_try_timeout =  "1s"
      }
      request_mirror_policy {
        destination {
          service_name = "new"
          weight = 1
        }
      }
      cors_policy {
        allow_origins = ["example"]
        allow_methods = ["GET", "PUT"]
        allow_headers = ["version", "type"]
        expose_headers = ["version", "type"]
        max_age = "1s"
        allow_credentials = true
        disabled = false
      }
      request_header_modifier {
        set = { "version": "1", "type" : "json"}
        add = { "minor-version": "1"}
        remove = ["arg"]
      }
      response_header_modifier {
        set = { "version": "1", "type" : "json"}
        add = { "minor-version": "1"}
        remove = ["removearg"]
      }
    }
  }
}
`, context)
}

func TestAccNetworkServicesHttpRoute_networkServicesHttpRouteMeshBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesHttpRouteDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesHttpRoute_networkServicesHttpRouteMeshBasicExample(context),
			},
			{
				ResourceName:            "google_network_services_http_route.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
		},
	})
}

func testAccNetworkServicesHttpRoute_networkServicesHttpRouteMeshBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_network_services_mesh" "default" {
  name        = "tf-test-my-http-route%{random_suffix}"
  labels      = {
    foo = "bar"
  }
  description = "my description"
}

resource "google_network_services_http_route" "default" {
  name                   = "tf-test-my-http-route%{random_suffix}"
  labels                 = {
    foo = "bar"
  }
  description             = "my description"
  hostnames               = ["example"]
  meshes = [
    google_network_services_mesh.default.id
  ]
  rules                   {
    matches {
      query_parameters {
        query_parameter = "key"
        exact_match = "value"
      }
      full_path_match = "example"
    }
  }
}
`, context)
}

func testAccCheckNetworkServicesHttpRouteDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_network_services_http_route" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{NetworkServicesBasePath}}projects/{{project}}/locations/global/httpRoutes/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("NetworkServicesHttpRoute still exists at %s", url)
			}
		}

		return nil
	}
}
