// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networkservices/HttpRoute.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package networkservices

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceNetworkServicesHttpRoute() *schema.Resource {
	return &schema.Resource{
		Create: resourceNetworkServicesHttpRouteCreate,
		Read:   resourceNetworkServicesHttpRouteRead,
		Update: resourceNetworkServicesHttpRouteUpdate,
		Delete: resourceNetworkServicesHttpRouteDelete,

		Importer: &schema.ResourceImporter{
			State: resourceNetworkServicesHttpRouteImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(30 * time.Minute),
			Update: schema.DefaultTimeout(30 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"hostnames": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Set of hosts that should match against the HTTP host header to select a HttpRoute to process the request.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Name of the HttpRoute resource.`,
			},
			"rules": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Rules that define how traffic is routed and handled.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"action": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The detailed rule defining how to route matched traffic.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"cors_policy": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The specification for allowing client side cross-origin requests.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"allow_credentials": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `In response to a preflight request, setting this to true indicates that the actual request can include user credentials.`,
												},
												"allow_headers": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specifies the content for Access-Control-Allow-Headers header.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"allow_methods": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specifies the content for Access-Control-Allow-Methods header.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"allow_origin_regexes": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specifies the regular expression patterns that match allowed origins.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"allow_origins": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specifies the list of origins that will be allowed to do CORS requests.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"disabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.`,
												},
												"expose_headers": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specifies the content for Access-Control-Expose-Headers header.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"max_age": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Specifies how long result of a preflight request can be cached in seconds.`,
												},
											},
										},
									},
									"destinations": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The destination to which traffic should be forwarded.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"service_name": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The URL of a BackendService to route traffic to.`,
												},
												"weight": {
													Type:     schema.TypeInt,
													Optional: true,
													Description: `Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
If weights are specified for any one service name, they need to be specified for all of them.
If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.`,
												},
											},
										},
									},
									"fault_injection_policy": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"abort": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specification of how client requests are aborted as part of fault injection before being sent to a destination.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"http_status": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `The HTTP status code used to abort the request.`,
															},
															"percentage": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `The percentage of traffic which will be aborted.`,
															},
														},
													},
												},
												"delay": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specification of how client requests are delayed as part of fault injection before being sent to a destination.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"fixed_delay": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Specify a fixed delay before forwarding the request.`,
															},
															"percentage": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `The percentage of traffic on which delay will be injected.`,
															},
														},
													},
												},
											},
										},
									},
									"redirect": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `If set, the request is directed as configured by this field.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"host_redirect": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The host that will be used in the redirect response instead of the one that was supplied in the request.`,
												},
												"https_redirect": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `If set to true, the URL scheme in the redirected request is set to https.`,
												},
												"path_redirect": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect can not be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.`,
												},
												"port_redirect": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `The port that will be used in the redirected request instead of the one that was supplied in the request.`,
												},
												"prefix_rewrite": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Indicates that during redirection, the matched prefix (or path) should be swapped with this value.`,
												},
												"response_code": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The HTTP Status code to use for the redirect.`,
												},
												"strip_query": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request.`,
												},
											},
										},
									},
									"request_header_modifier": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The specification for modifying the headers of a matching request prior to delivery of the request to the destination.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"add": {
													Type:        schema.TypeMap,
													Optional:    true,
													Description: `Add the headers with given map where key is the name of the header, value is the value of the header.`,
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"remove": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Remove headers (matching by header names) specified in the list.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"set": {
													Type:        schema.TypeMap,
													Optional:    true,
													Description: `Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.`,
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
											},
										},
									},
									"request_mirror_policy": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"destination": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The destination the requests will be mirrored to.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"service_name": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `The URL of a BackendService to route traffic to.`,
															},
															"weight": {
																Type:     schema.TypeInt,
																Optional: true,
																Description: `Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
If weights are specified for any one service name, they need to be specified for all of them.
If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.`,
															},
														},
													},
												},
											},
										},
									},
									"response_header_modifier": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The specification for modifying the headers of a response prior to sending the response back to the client.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"add": {
													Type:        schema.TypeMap,
													Optional:    true,
													Description: `Add the headers with given map where key is the name of the header, value is the value of the header.`,
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"remove": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Remove headers (matching by header names) specified in the list.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"set": {
													Type:        schema.TypeMap,
													Optional:    true,
													Description: `Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.`,
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
											},
										},
									},
									"retry_policy": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Specifies the retry policy associated with this route.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"num_retries": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `Specifies the allowed number of retries.`,
												},
												"per_try_timeout": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Specifies a non-zero timeout per retry attempt. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".`,
												},
												"retry_conditions": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specifies one or more conditions when this retry policy applies.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
									"timeout": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Specifies the timeout for selected route.`,
									},
									"url_rewrite": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The specification for rewrite URL before forwarding requests to the destination.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"host_rewrite": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.`,
												},
												"path_prefix_rewrite": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.`,
												},
											},
										},
									},
								},
							},
						},
						"matches": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.
If no matches field is specified, this rule will unconditionally match traffic.
If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"full_path_match": {
										Type:         schema.TypeString,
										Optional:     true,
										Description:  `The HTTP request path value should exactly match this value.`,
										ExactlyOneOf: []string{},
									},
									"headers": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Specifies a list of HTTP request headers to match against.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"exact_match": {
													Type:         schema.TypeString,
													Optional:     true,
													Description:  `The value of the header should match exactly the content of exactMatch.`,
													ExactlyOneOf: []string{},
												},
												"header": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The name of the HTTP header to match against.`,
												},
												"invert_match": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `If specified, the match result will be inverted before checking. Default value is set to false.`,
												},
												"prefix_match": {
													Type:         schema.TypeString,
													Optional:     true,
													Description:  `The value of the header must start with the contents of prefixMatch.`,
													ExactlyOneOf: []string{},
												},
												"present_match": {
													Type:         schema.TypeBool,
													Optional:     true,
													Description:  `A header with headerName must exist. The match takes place whether or not the header has a value.`,
													ExactlyOneOf: []string{},
												},
												"range_match": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `If specified, the rule will match if the request header value is within the range.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"end": {
																Type:        schema.TypeInt,
																Required:    true,
																Description: `End of the range (exclusive).`,
															},
															"start": {
																Type:        schema.TypeInt,
																Required:    true,
																Description: `Start of the range (inclusive).`,
															},
														},
													},
													ExactlyOneOf: []string{},
												},
												"regex_match": {
													Type:         schema.TypeString,
													Optional:     true,
													Description:  `The value of the header must match the regular expression specified in regexMatch.`,
													ExactlyOneOf: []string{},
												},
												"suffix_match": {
													Type:         schema.TypeString,
													Optional:     true,
													Description:  `The value of the header must end with the contents of suffixMatch.`,
													ExactlyOneOf: []string{},
												},
											},
										},
									},
									"ignore_case": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.`,
									},
									"prefix_match": {
										Type:         schema.TypeString,
										Optional:     true,
										Description:  `The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.`,
										ExactlyOneOf: []string{},
									},
									"query_parameters": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Specifies a list of query parameters to match against.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"exact_match": {
													Type:         schema.TypeString,
													Optional:     true,
													Description:  `The value of the query parameter must exactly match the contents of exactMatch.`,
													ExactlyOneOf: []string{},
												},
												"present_match": {
													Type:         schema.TypeBool,
													Optional:     true,
													Description:  `Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not.`,
													ExactlyOneOf: []string{},
												},
												"query_parameter": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The name of the query parameter to match.`,
												},
												"regex_match": {
													Type:         schema.TypeString,
													Optional:     true,
													Description:  `The value of the query parameter must match the regular expression specified by regexMatch.For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax`,
													ExactlyOneOf: []string{},
												},
											},
										},
									},
									"regex_match": {
										Type:         schema.TypeString,
										Optional:     true,
										Description:  `The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax`,
										ExactlyOneOf: []string{},
									},
								},
							},
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `A free-text description of the resource. Max length 1024 characters.`,
			},
			"gateways": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
Each gateway reference should match the pattern: projects/*/locations/global/gateways/<gateway_name>`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Set of label tags associated with the HttpRoute resource.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"meshes": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name>.
The attached Mesh should be of a type SIDECAR.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time the HttpRoute was created in UTC.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"self_link": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Server-defined URL of this resource.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time the HttpRoute was updated in UTC.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceNetworkServicesHttpRouteCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkServicesHttpRouteDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	hostnamesProp, err := expandNetworkServicesHttpRouteHostnames(d.Get("hostnames"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("hostnames"); !tpgresource.IsEmptyValue(reflect.ValueOf(hostnamesProp)) && (ok || !reflect.DeepEqual(v, hostnamesProp)) {
		obj["hostnames"] = hostnamesProp
	}
	meshesProp, err := expandNetworkServicesHttpRouteMeshes(d.Get("meshes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("meshes"); ok || !reflect.DeepEqual(v, meshesProp) {
		obj["meshes"] = meshesProp
	}
	gatewaysProp, err := expandNetworkServicesHttpRouteGateways(d.Get("gateways"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("gateways"); ok || !reflect.DeepEqual(v, gatewaysProp) {
		obj["gateways"] = gatewaysProp
	}
	rulesProp, err := expandNetworkServicesHttpRouteRules(d.Get("rules"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rules"); ok || !reflect.DeepEqual(v, rulesProp) {
		obj["rules"] = rulesProp
	}
	labelsProp, err := expandNetworkServicesHttpRouteEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/global/httpRoutes?httpRouteId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new HttpRoute: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for HttpRoute: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating HttpRoute: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/global/httpRoutes/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = NetworkServicesOperationWaitTime(
		config, res, project, "Creating HttpRoute", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create HttpRoute: %s", err)
	}

	log.Printf("[DEBUG] Finished creating HttpRoute %q: %#v", d.Id(), res)

	return resourceNetworkServicesHttpRouteRead(d, meta)
}

func resourceNetworkServicesHttpRouteRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/global/httpRoutes/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for HttpRoute: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("NetworkServicesHttpRoute %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}

	if err := d.Set("self_link", flattenNetworkServicesHttpRouteSelfLink(res["selfLink"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("create_time", flattenNetworkServicesHttpRouteCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("update_time", flattenNetworkServicesHttpRouteUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("labels", flattenNetworkServicesHttpRouteLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("description", flattenNetworkServicesHttpRouteDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("hostnames", flattenNetworkServicesHttpRouteHostnames(res["hostnames"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("meshes", flattenNetworkServicesHttpRouteMeshes(res["meshes"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("gateways", flattenNetworkServicesHttpRouteGateways(res["gateways"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("rules", flattenNetworkServicesHttpRouteRules(res["rules"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("terraform_labels", flattenNetworkServicesHttpRouteTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}
	if err := d.Set("effective_labels", flattenNetworkServicesHttpRouteEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading HttpRoute: %s", err)
	}

	return nil
}

func resourceNetworkServicesHttpRouteUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for HttpRoute: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkServicesHttpRouteDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	hostnamesProp, err := expandNetworkServicesHttpRouteHostnames(d.Get("hostnames"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("hostnames"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, hostnamesProp)) {
		obj["hostnames"] = hostnamesProp
	}
	meshesProp, err := expandNetworkServicesHttpRouteMeshes(d.Get("meshes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("meshes"); ok || !reflect.DeepEqual(v, meshesProp) {
		obj["meshes"] = meshesProp
	}
	gatewaysProp, err := expandNetworkServicesHttpRouteGateways(d.Get("gateways"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("gateways"); ok || !reflect.DeepEqual(v, gatewaysProp) {
		obj["gateways"] = gatewaysProp
	}
	rulesProp, err := expandNetworkServicesHttpRouteRules(d.Get("rules"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rules"); ok || !reflect.DeepEqual(v, rulesProp) {
		obj["rules"] = rulesProp
	}
	labelsProp, err := expandNetworkServicesHttpRouteEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/global/httpRoutes/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating HttpRoute %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("hostnames") {
		updateMask = append(updateMask, "hostnames")
	}

	if d.HasChange("meshes") {
		updateMask = append(updateMask, "meshes")
	}

	if d.HasChange("gateways") {
		updateMask = append(updateMask, "gateways")
	}

	if d.HasChange("rules") {
		updateMask = append(updateMask, "rules")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating HttpRoute %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating HttpRoute %q: %#v", d.Id(), res)
		}

		err = NetworkServicesOperationWaitTime(
			config, res, project, "Updating HttpRoute", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceNetworkServicesHttpRouteRead(d, meta)
}

func resourceNetworkServicesHttpRouteDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for HttpRoute: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/global/httpRoutes/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting HttpRoute %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "HttpRoute")
	}

	err = NetworkServicesOperationWaitTime(
		config, res, project, "Deleting HttpRoute", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting HttpRoute %q: %#v", d.Id(), res)
	return nil
}

func resourceNetworkServicesHttpRouteImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/global/httpRoutes/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/global/httpRoutes/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenNetworkServicesHttpRouteSelfLink(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesHttpRouteDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteHostnames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteMeshes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteGateways(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"matches": flattenNetworkServicesHttpRouteRulesMatches(original["matches"], d, config),
			"action":  flattenNetworkServicesHttpRouteRulesAction(original["action"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesMatches(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"ignore_case":      flattenNetworkServicesHttpRouteRulesMatchesIgnoreCase(original["ignoreCase"], d, config),
			"full_path_match":  flattenNetworkServicesHttpRouteRulesMatchesFullPathMatch(original["fullPathMatch"], d, config),
			"prefix_match":     flattenNetworkServicesHttpRouteRulesMatchesPrefixMatch(original["prefixMatch"], d, config),
			"regex_match":      flattenNetworkServicesHttpRouteRulesMatchesRegexMatch(original["regexMatch"], d, config),
			"query_parameters": flattenNetworkServicesHttpRouteRulesMatchesQueryParameters(original["queryParameters"], d, config),
			"headers":          flattenNetworkServicesHttpRouteRulesMatchesHeaders(original["headers"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesMatchesIgnoreCase(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesFullPathMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesPrefixMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesRegexMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesQueryParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"query_parameter": flattenNetworkServicesHttpRouteRulesMatchesQueryParametersQueryParameter(original["queryParameter"], d, config),
			"exact_match":     flattenNetworkServicesHttpRouteRulesMatchesQueryParametersExactMatch(original["exactMatch"], d, config),
			"regex_match":     flattenNetworkServicesHttpRouteRulesMatchesQueryParametersRegexMatch(original["regexMatch"], d, config),
			"present_match":   flattenNetworkServicesHttpRouteRulesMatchesQueryParametersPresentMatch(original["presentMatch"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesMatchesQueryParametersQueryParameter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesQueryParametersExactMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesQueryParametersRegexMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesQueryParametersPresentMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeaders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"header":        flattenNetworkServicesHttpRouteRulesMatchesHeadersHeader(original["header"], d, config),
			"invert_match":  flattenNetworkServicesHttpRouteRulesMatchesHeadersInvertMatch(original["invertMatch"], d, config),
			"exact_match":   flattenNetworkServicesHttpRouteRulesMatchesHeadersExactMatch(original["exactMatch"], d, config),
			"regex_match":   flattenNetworkServicesHttpRouteRulesMatchesHeadersRegexMatch(original["regexMatch"], d, config),
			"prefix_match":  flattenNetworkServicesHttpRouteRulesMatchesHeadersPrefixMatch(original["prefixMatch"], d, config),
			"present_match": flattenNetworkServicesHttpRouteRulesMatchesHeadersPresentMatch(original["presentMatch"], d, config),
			"suffix_match":  flattenNetworkServicesHttpRouteRulesMatchesHeadersSuffixMatch(original["suffixMatch"], d, config),
			"range_match":   flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatch(original["rangeMatch"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesMatchesHeadersHeader(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersInvertMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersExactMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersRegexMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersPrefixMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersPresentMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersSuffixMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["start"] =
		flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchStart(original["start"], d, config)
	transformed["end"] =
		flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchEnd(original["end"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchStart(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchEnd(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["destinations"] =
		flattenNetworkServicesHttpRouteRulesActionDestinations(original["destinations"], d, config)
	transformed["redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirect(original["redirect"], d, config)
	transformed["fault_injection_policy"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicy(original["faultInjectionPolicy"], d, config)
	transformed["request_header_modifier"] =
		flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifier(original["requestHeaderModifier"], d, config)
	transformed["response_header_modifier"] =
		flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifier(original["responseHeaderModifier"], d, config)
	transformed["url_rewrite"] =
		flattenNetworkServicesHttpRouteRulesActionUrlRewrite(original["urlRewrite"], d, config)
	transformed["timeout"] =
		flattenNetworkServicesHttpRouteRulesActionTimeout(original["timeout"], d, config)
	transformed["retry_policy"] =
		flattenNetworkServicesHttpRouteRulesActionRetryPolicy(original["retryPolicy"], d, config)
	transformed["request_mirror_policy"] =
		flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicy(original["requestMirrorPolicy"], d, config)
	transformed["cors_policy"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicy(original["corsPolicy"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionDestinations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"service_name": flattenNetworkServicesHttpRouteRulesActionDestinationsServiceName(original["serviceName"], d, config),
			"weight":       flattenNetworkServicesHttpRouteRulesActionDestinationsWeight(original["weight"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesActionDestinationsServiceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionDestinationsWeight(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["host_redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectHostRedirect(original["hostRedirect"], d, config)
	transformed["path_redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectPathRedirect(original["pathRedirect"], d, config)
	transformed["prefix_rewrite"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectPrefixRewrite(original["prefixRewrite"], d, config)
	transformed["response_code"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectResponseCode(original["responseCode"], d, config)
	transformed["https_redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectHttpsRedirect(original["httpsRedirect"], d, config)
	transformed["strip_query"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectStripQuery(original["stripQuery"], d, config)
	transformed["port_redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectPortRedirect(original["portRedirect"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRedirectHostRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectPathRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectPrefixRewrite(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectResponseCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectHttpsRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectStripQuery(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectPortRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["delay"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelay(original["delay"], d, config)
	transformed["abort"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbort(original["abort"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["fixed_delay"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayFixedDelay(original["fixedDelay"], d, config)
	transformed["percentage"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayPercentage(original["percentage"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayFixedDelay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayPercentage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["http_status"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortHttpStatus(original["httpStatus"], d, config)
	transformed["percentage"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortPercentage(original["percentage"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortHttpStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortPercentage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["set"] =
		flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierSet(original["set"], d, config)
	transformed["add"] =
		flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierAdd(original["add"], d, config)
	transformed["remove"] =
		flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierRemove(original["remove"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierAdd(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierRemove(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["set"] =
		flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierSet(original["set"], d, config)
	transformed["add"] =
		flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierAdd(original["add"], d, config)
	transformed["remove"] =
		flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierRemove(original["remove"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierAdd(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierRemove(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionUrlRewrite(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["path_prefix_rewrite"] =
		flattenNetworkServicesHttpRouteRulesActionUrlRewritePathPrefixRewrite(original["pathPrefixRewrite"], d, config)
	transformed["host_rewrite"] =
		flattenNetworkServicesHttpRouteRulesActionUrlRewriteHostRewrite(original["hostRewrite"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionUrlRewritePathPrefixRewrite(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionUrlRewriteHostRewrite(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRetryPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["retry_conditions"] =
		flattenNetworkServicesHttpRouteRulesActionRetryPolicyRetryConditions(original["retryConditions"], d, config)
	transformed["num_retries"] =
		flattenNetworkServicesHttpRouteRulesActionRetryPolicyNumRetries(original["numRetries"], d, config)
	transformed["per_try_timeout"] =
		flattenNetworkServicesHttpRouteRulesActionRetryPolicyPerTryTimeout(original["perTryTimeout"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRetryPolicyRetryConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRetryPolicyNumRetries(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionRetryPolicyPerTryTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["destination"] =
		flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestination(original["destination"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestination(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service_name"] =
		flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationServiceName(original["serviceName"], d, config)
	transformed["weight"] =
		flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationWeight(original["weight"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationServiceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationWeight(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allow_origins"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowOrigins(original["allowOrigins"], d, config)
	transformed["allow_origin_regexes"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowOriginRegexes(original["allowOriginRegexes"], d, config)
	transformed["allow_methods"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowMethods(original["allowMethods"], d, config)
	transformed["allow_headers"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowHeaders(original["allowHeaders"], d, config)
	transformed["expose_headers"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyExposeHeaders(original["exposeHeaders"], d, config)
	transformed["max_age"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyMaxAge(original["maxAge"], d, config)
	transformed["allow_credentials"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowCredentials(original["allowCredentials"], d, config)
	transformed["disabled"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyDisabled(original["disabled"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowOrigins(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowOriginRegexes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowMethods(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowHeaders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyExposeHeaders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyMaxAge(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowCredentials(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesHttpRouteEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandNetworkServicesHttpRouteDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteHostnames(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteMeshes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteGateways(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedMatches, err := expandNetworkServicesHttpRouteRulesMatches(original["matches"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["matches"] = transformedMatches
		}

		transformedAction, err := expandNetworkServicesHttpRouteRulesAction(original["action"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["action"] = transformedAction
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkServicesHttpRouteRulesMatches(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedIgnoreCase, err := expandNetworkServicesHttpRouteRulesMatchesIgnoreCase(original["ignore_case"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["ignoreCase"] = transformedIgnoreCase
		}

		transformedFullPathMatch, err := expandNetworkServicesHttpRouteRulesMatchesFullPathMatch(original["full_path_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFullPathMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["fullPathMatch"] = transformedFullPathMatch
		}

		transformedPrefixMatch, err := expandNetworkServicesHttpRouteRulesMatchesPrefixMatch(original["prefix_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrefixMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["prefixMatch"] = transformedPrefixMatch
		}

		transformedRegexMatch, err := expandNetworkServicesHttpRouteRulesMatchesRegexMatch(original["regex_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRegexMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["regexMatch"] = transformedRegexMatch
		}

		transformedQueryParameters, err := expandNetworkServicesHttpRouteRulesMatchesQueryParameters(original["query_parameters"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryParameters); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryParameters"] = transformedQueryParameters
		}

		transformedHeaders, err := expandNetworkServicesHttpRouteRulesMatchesHeaders(original["headers"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["headers"] = transformedHeaders
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkServicesHttpRouteRulesMatchesIgnoreCase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesFullPathMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesPrefixMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesRegexMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesQueryParameters(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedQueryParameter, err := expandNetworkServicesHttpRouteRulesMatchesQueryParametersQueryParameter(original["query_parameter"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryParameter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryParameter"] = transformedQueryParameter
		}

		transformedExactMatch, err := expandNetworkServicesHttpRouteRulesMatchesQueryParametersExactMatch(original["exact_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExactMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["exactMatch"] = transformedExactMatch
		}

		transformedRegexMatch, err := expandNetworkServicesHttpRouteRulesMatchesQueryParametersRegexMatch(original["regex_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRegexMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["regexMatch"] = transformedRegexMatch
		}

		transformedPresentMatch, err := expandNetworkServicesHttpRouteRulesMatchesQueryParametersPresentMatch(original["present_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPresentMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["presentMatch"] = transformedPresentMatch
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkServicesHttpRouteRulesMatchesQueryParametersQueryParameter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesQueryParametersExactMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesQueryParametersRegexMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesQueryParametersPresentMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedHeader, err := expandNetworkServicesHttpRouteRulesMatchesHeadersHeader(original["header"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHeader); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["header"] = transformedHeader
		}

		transformedInvertMatch, err := expandNetworkServicesHttpRouteRulesMatchesHeadersInvertMatch(original["invert_match"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["invertMatch"] = transformedInvertMatch
		}

		transformedExactMatch, err := expandNetworkServicesHttpRouteRulesMatchesHeadersExactMatch(original["exact_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExactMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["exactMatch"] = transformedExactMatch
		}

		transformedRegexMatch, err := expandNetworkServicesHttpRouteRulesMatchesHeadersRegexMatch(original["regex_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRegexMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["regexMatch"] = transformedRegexMatch
		}

		transformedPrefixMatch, err := expandNetworkServicesHttpRouteRulesMatchesHeadersPrefixMatch(original["prefix_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrefixMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["prefixMatch"] = transformedPrefixMatch
		}

		transformedPresentMatch, err := expandNetworkServicesHttpRouteRulesMatchesHeadersPresentMatch(original["present_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPresentMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["presentMatch"] = transformedPresentMatch
		}

		transformedSuffixMatch, err := expandNetworkServicesHttpRouteRulesMatchesHeadersSuffixMatch(original["suffix_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuffixMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suffixMatch"] = transformedSuffixMatch
		}

		transformedRangeMatch, err := expandNetworkServicesHttpRouteRulesMatchesHeadersRangeMatch(original["range_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRangeMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["rangeMatch"] = transformedRangeMatch
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersHeader(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersInvertMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersExactMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersRegexMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersPrefixMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersPresentMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersSuffixMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersRangeMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedStart, err := expandNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchStart(original["start"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStart); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["start"] = transformedStart
	}

	transformedEnd, err := expandNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchEnd(original["end"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnd); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["end"] = transformedEnd
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchStart(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchEnd(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDestinations, err := expandNetworkServicesHttpRouteRulesActionDestinations(original["destinations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDestinations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["destinations"] = transformedDestinations
	}

	transformedRedirect, err := expandNetworkServicesHttpRouteRulesActionRedirect(original["redirect"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRedirect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["redirect"] = transformedRedirect
	}

	transformedFaultInjectionPolicy, err := expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicy(original["fault_injection_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFaultInjectionPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["faultInjectionPolicy"] = transformedFaultInjectionPolicy
	}

	transformedRequestHeaderModifier, err := expandNetworkServicesHttpRouteRulesActionRequestHeaderModifier(original["request_header_modifier"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequestHeaderModifier); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["requestHeaderModifier"] = transformedRequestHeaderModifier
	}

	transformedResponseHeaderModifier, err := expandNetworkServicesHttpRouteRulesActionResponseHeaderModifier(original["response_header_modifier"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResponseHeaderModifier); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["responseHeaderModifier"] = transformedResponseHeaderModifier
	}

	transformedUrlRewrite, err := expandNetworkServicesHttpRouteRulesActionUrlRewrite(original["url_rewrite"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUrlRewrite); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["urlRewrite"] = transformedUrlRewrite
	}

	transformedTimeout, err := expandNetworkServicesHttpRouteRulesActionTimeout(original["timeout"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeout); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeout"] = transformedTimeout
	}

	transformedRetryPolicy, err := expandNetworkServicesHttpRouteRulesActionRetryPolicy(original["retry_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRetryPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["retryPolicy"] = transformedRetryPolicy
	}

	transformedRequestMirrorPolicy, err := expandNetworkServicesHttpRouteRulesActionRequestMirrorPolicy(original["request_mirror_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequestMirrorPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["requestMirrorPolicy"] = transformedRequestMirrorPolicy
	}

	transformedCorsPolicy, err := expandNetworkServicesHttpRouteRulesActionCorsPolicy(original["cors_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCorsPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["corsPolicy"] = transformedCorsPolicy
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionDestinations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedServiceName, err := expandNetworkServicesHttpRouteRulesActionDestinationsServiceName(original["service_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedServiceName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["serviceName"] = transformedServiceName
		}

		transformedWeight, err := expandNetworkServicesHttpRouteRulesActionDestinationsWeight(original["weight"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedWeight); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["weight"] = transformedWeight
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkServicesHttpRouteRulesActionDestinationsServiceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionDestinationsWeight(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRedirect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHostRedirect, err := expandNetworkServicesHttpRouteRulesActionRedirectHostRedirect(original["host_redirect"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHostRedirect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hostRedirect"] = transformedHostRedirect
	}

	transformedPathRedirect, err := expandNetworkServicesHttpRouteRulesActionRedirectPathRedirect(original["path_redirect"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPathRedirect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pathRedirect"] = transformedPathRedirect
	}

	transformedPrefixRewrite, err := expandNetworkServicesHttpRouteRulesActionRedirectPrefixRewrite(original["prefix_rewrite"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrefixRewrite); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["prefixRewrite"] = transformedPrefixRewrite
	}

	transformedResponseCode, err := expandNetworkServicesHttpRouteRulesActionRedirectResponseCode(original["response_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResponseCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["responseCode"] = transformedResponseCode
	}

	transformedHttpsRedirect, err := expandNetworkServicesHttpRouteRulesActionRedirectHttpsRedirect(original["https_redirect"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpsRedirect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpsRedirect"] = transformedHttpsRedirect
	}

	transformedStripQuery, err := expandNetworkServicesHttpRouteRulesActionRedirectStripQuery(original["strip_query"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStripQuery); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["stripQuery"] = transformedStripQuery
	}

	transformedPortRedirect, err := expandNetworkServicesHttpRouteRulesActionRedirectPortRedirect(original["port_redirect"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPortRedirect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["portRedirect"] = transformedPortRedirect
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionRedirectHostRedirect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRedirectPathRedirect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRedirectPrefixRewrite(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRedirectResponseCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRedirectHttpsRedirect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRedirectStripQuery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRedirectPortRedirect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDelay, err := expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelay(original["delay"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDelay); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["delay"] = transformedDelay
	}

	transformedAbort, err := expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbort(original["abort"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAbort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["abort"] = transformedAbort
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFixedDelay, err := expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayFixedDelay(original["fixed_delay"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFixedDelay); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["fixedDelay"] = transformedFixedDelay
	}

	transformedPercentage, err := expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayPercentage(original["percentage"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["percentage"] = transformedPercentage
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayFixedDelay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayPercentage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHttpStatus, err := expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortHttpStatus(original["http_status"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpStatus); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpStatus"] = transformedHttpStatus
	}

	transformedPercentage, err := expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortPercentage(original["percentage"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["percentage"] = transformedPercentage
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortHttpStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortPercentage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRequestHeaderModifier(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSet, err := expandNetworkServicesHttpRouteRulesActionRequestHeaderModifierSet(original["set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["set"] = transformedSet
	}

	transformedAdd, err := expandNetworkServicesHttpRouteRulesActionRequestHeaderModifierAdd(original["add"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdd); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["add"] = transformedAdd
	}

	transformedRemove, err := expandNetworkServicesHttpRouteRulesActionRequestHeaderModifierRemove(original["remove"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRemove); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["remove"] = transformedRemove
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionRequestHeaderModifierSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandNetworkServicesHttpRouteRulesActionRequestHeaderModifierAdd(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandNetworkServicesHttpRouteRulesActionRequestHeaderModifierRemove(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionResponseHeaderModifier(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSet, err := expandNetworkServicesHttpRouteRulesActionResponseHeaderModifierSet(original["set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["set"] = transformedSet
	}

	transformedAdd, err := expandNetworkServicesHttpRouteRulesActionResponseHeaderModifierAdd(original["add"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdd); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["add"] = transformedAdd
	}

	transformedRemove, err := expandNetworkServicesHttpRouteRulesActionResponseHeaderModifierRemove(original["remove"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRemove); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["remove"] = transformedRemove
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionResponseHeaderModifierSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandNetworkServicesHttpRouteRulesActionResponseHeaderModifierAdd(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandNetworkServicesHttpRouteRulesActionResponseHeaderModifierRemove(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionUrlRewrite(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPathPrefixRewrite, err := expandNetworkServicesHttpRouteRulesActionUrlRewritePathPrefixRewrite(original["path_prefix_rewrite"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPathPrefixRewrite); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pathPrefixRewrite"] = transformedPathPrefixRewrite
	}

	transformedHostRewrite, err := expandNetworkServicesHttpRouteRulesActionUrlRewriteHostRewrite(original["host_rewrite"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHostRewrite); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hostRewrite"] = transformedHostRewrite
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionUrlRewritePathPrefixRewrite(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionUrlRewriteHostRewrite(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRetryPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRetryConditions, err := expandNetworkServicesHttpRouteRulesActionRetryPolicyRetryConditions(original["retry_conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRetryConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["retryConditions"] = transformedRetryConditions
	}

	transformedNumRetries, err := expandNetworkServicesHttpRouteRulesActionRetryPolicyNumRetries(original["num_retries"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNumRetries); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["numRetries"] = transformedNumRetries
	}

	transformedPerTryTimeout, err := expandNetworkServicesHttpRouteRulesActionRetryPolicyPerTryTimeout(original["per_try_timeout"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPerTryTimeout); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["perTryTimeout"] = transformedPerTryTimeout
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionRetryPolicyRetryConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRetryPolicyNumRetries(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRetryPolicyPerTryTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRequestMirrorPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDestination, err := expandNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestination(original["destination"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDestination); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["destination"] = transformedDestination
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestination(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceName, err := expandNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationServiceName(original["service_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceName"] = transformedServiceName
	}

	transformedWeight, err := expandNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationWeight(original["weight"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWeight); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["weight"] = transformedWeight
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationServiceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationWeight(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionCorsPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowOrigins, err := expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowOrigins(original["allow_origins"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowOrigins); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowOrigins"] = transformedAllowOrigins
	}

	transformedAllowOriginRegexes, err := expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowOriginRegexes(original["allow_origin_regexes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowOriginRegexes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowOriginRegexes"] = transformedAllowOriginRegexes
	}

	transformedAllowMethods, err := expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowMethods(original["allow_methods"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowMethods); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowMethods"] = transformedAllowMethods
	}

	transformedAllowHeaders, err := expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowHeaders(original["allow_headers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowHeaders"] = transformedAllowHeaders
	}

	transformedExposeHeaders, err := expandNetworkServicesHttpRouteRulesActionCorsPolicyExposeHeaders(original["expose_headers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExposeHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["exposeHeaders"] = transformedExposeHeaders
	}

	transformedMaxAge, err := expandNetworkServicesHttpRouteRulesActionCorsPolicyMaxAge(original["max_age"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxAge); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxAge"] = transformedMaxAge
	}

	transformedAllowCredentials, err := expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowCredentials(original["allow_credentials"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowCredentials); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowCredentials"] = transformedAllowCredentials
	}

	transformedDisabled, err := expandNetworkServicesHttpRouteRulesActionCorsPolicyDisabled(original["disabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disabled"] = transformedDisabled
	}

	return transformed, nil
}

func expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowOrigins(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowOriginRegexes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowMethods(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionCorsPolicyExposeHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionCorsPolicyMaxAge(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionCorsPolicyAllowCredentials(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteRulesActionCorsPolicyDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesHttpRouteEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
