// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/networkservices/resource_network_services_wasm_plugin_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package networkservices_test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"net/textproto"
	"os"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"google.golang.org/api/googleapi"
)

func TestAccNetworkServicesWasmPlugin_wasmPluginLogConfigUpdate(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   acctest.RandString(t, 10),
		"test_project_id": envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesWasmPluginDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context),
				Check: resource.ComposeTestCheckFunc(
					// Upload the compiled plugin code to Artifact Registry
					testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(
						t,
						"google_artifact_registry_repository.test_repository",
						"my-wasm-plugin",
						"v1",
						"test-fixtures/compiled-package/plugin.wasm",
						"plugin.wasm",
					),
				),
			},
			{
				ResourceName:            "google_artifact_registry_repository.test_repository",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginBasicCreate(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginLogConfigUpdate(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
		},
	})
}

func TestAccNetworkServicesWasmPlugin_wasmPluginVersionUpdate(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   acctest.RandString(t, 10),
		"test_project_id": envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesWasmPluginDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context),
				Check: resource.ComposeTestCheckFunc(
					// Upload the compiled plugin code to Artifact Registry
					testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(
						t,
						"google_artifact_registry_repository.test_repository",
						"my-wasm-plugin",
						"v1",
						"test-fixtures/compiled-package/plugin.wasm",
						"plugin.wasm",
					),
					testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(
						t,
						"google_artifact_registry_repository.test_repository",
						"my-wasm-plugin",
						"v2",
						"test-fixtures/compiled-package/plugin.wasm",
						"plugin.wasm",
					),
					testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(
						t,
						"google_artifact_registry_repository.test_repository",
						"my-wasm-plugin",
						"v3",
						"test-fixtures/compiled-package/plugin.wasm",
						"plugin.wasm",
					),
				),
			},
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginVersionCreate(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginVersionUpdate(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
		},
	})
}

func TestAccNetworkServicesWasmPlugin_wasmPluginConfigUpdate(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   acctest.RandString(t, 10),
		"test_project_id": envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesWasmPluginDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context),
				Check: resource.ComposeTestCheckFunc(
					// Upload the compiled plugin code to Artifact Registry
					testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(
						t,
						"google_artifact_registry_repository.test_repository",
						"my-wasm-plugin",
						"v1",
						"test-fixtures/compiled-package/plugin.wasm",
						"plugin.wasm",
					),
					testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(
						t,
						"google_artifact_registry_repository.test_repository",
						"my-wasm-plugin",
						"v2",
						"test-fixtures/compiled-package/plugin.wasm",
						"plugin.wasm",
					),
					testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(
						t,
						"google_artifact_registry_repository.test_repository",
						"my-wasm-plugin",
						"v3",
						"test-fixtures/compiled-package/plugin.wasm",
						"plugin.wasm",
					),
					testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(
						t,
						"google_artifact_registry_repository.test_repository",
						"my-wasm-config",
						"v3",
						"test-fixtures/compiled-package/plugin.config",
						"plugin.config",
					),
				),
			},
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginBasicCreate(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginConfigDataUpdate(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginConfigUriUpdate(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
		},
	})
}

func TestAccNetworkServicesWasmPlugin_wasmPluginLocation(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   acctest.RandString(t, 10),
		"test_project_id": envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesWasmPluginDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context),
				Check: resource.ComposeTestCheckFunc(
					// Upload the compiled plugin code to Artifact Registry
					testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(
						t,
						"google_artifact_registry_repository.test_repository",
						"my-wasm-plugin",
						"v1",
						"test-fixtures/compiled-package/plugin.wasm",
						"plugin.wasm",
					),
				),
			},
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginLocationCreate(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "name", "terraform_labels"},
			},
			// We shoud test steps for regional plugins once available
		},
	})
}

func testAccNetworkServicesWasmPlugin_wasmPluginBasicCreate(context map[string]interface{}) string {
	return fmt.Sprint(testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context), acctest.Nprintf(`
resource "google_network_services_wasm_plugin" "wasm_plugin" {
  name        = "tf-test-my-wasm-plugin%{random_suffix}"
  description = "my wasm plugin"

  main_version_id = "v1"

  labels = {
    test_label =  "test_value"
  }
  log_config {
    enable =  true
    sample_rate = 1
    min_log_level =  "WARN"
  }

  versions {
    version_name = "v1"
    description = "v1 version of my wasm plugin"
    image_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-plugin:v1"

    labels = {
      test_label =  "test_value"
    }
  }
}
`, context))
}

func testAccNetworkServicesWasmPlugin_wasmPluginLogConfigUpdate(context map[string]interface{}) string {
	return fmt.Sprint(testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context), acctest.Nprintf(`
resource "google_network_services_wasm_plugin" "wasm_plugin" {
  name        = "tf-test-my-wasm-plugin%{random_suffix}"
  description = "my wasm plugin"

  main_version_id = "v1"

  labels = {
    test_label2 =  "test_value2"
  }
  log_config {
    enable =  true
    sample_rate = 0.5
    min_log_level =  "ERROR"
  }

  versions {
    version_name = "v1"
    description = "v1 version of my wasm plugin"
    image_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-plugin:v1"

    labels = {
      test_label =  "test_value"
    }
  }
}
`, context))
}

func testAccNetworkServicesWasmPlugin_wasmPluginVersionCreate(context map[string]interface{}) string {
	return fmt.Sprint(testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context), acctest.Nprintf(`
resource "google_network_services_wasm_plugin" "wasm_plugin" {
  name        = "tf-test-my-wasm-plugin%{random_suffix}"
  description = "my wasm plugin"

  main_version_id = "v2"

  labels = {
    test_label =  "test_value"
  }
  log_config {
    enable =  true
    sample_rate = 1
    min_log_level =  "WARN"
  }

  versions {
    version_name = "v1"
    description = "v1 version of my wasm plugin"
    image_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-plugin:v1"

    labels = {
      test_label =  "test_value"
    }
  }
  versions {
    version_name = "v2"
    description = "v2 version of my wasm plugin"
    image_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-plugin:v2"

    labels = {
      test_label =  "test_value"
    }
  }
}
`, context))
}

func testAccNetworkServicesWasmPlugin_wasmPluginVersionUpdate(context map[string]interface{}) string {
	return fmt.Sprint(testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context), acctest.Nprintf(`
resource "google_network_services_wasm_plugin" "wasm_plugin" {
  name        = "tf-test-my-wasm-plugin%{random_suffix}"
  description = "my wasm plugin"

  main_version_id = "v2"

  labels = {
    test_label =  "test_value"
  }
  log_config {
    enable =  true
    sample_rate = 1
    min_log_level =  "WARN"
  }

  versions {
    version_name = "v2"
    description = "v2 version of my wasm plugin"
    image_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-plugin:v2"

    labels = {
      test_label =  "test_value"
    }
  }
  versions {
    version_name = "v3"
    description = "v3 version of my wasm plugin"
    image_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-plugin:v3"

    labels = {
      test_label =  "test_value"
    }
  }
}
`, context))
}

func testAccNetworkServicesWasmPlugin_wasmPluginConfigDataUpdate(context map[string]interface{}) string {
	return fmt.Sprint(testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context), acctest.Nprintf(`
data "google_project" "project" {}

resource "google_network_services_wasm_plugin" "wasm_plugin" {
  name        = "tf-test-my-wasm-plugin%{random_suffix}"
  description = "my wasm plugin"

  main_version_id = "v2"

  labels = {
    test_label =  "test_value"
  }
  log_config {
    enable =  true
    sample_rate = 1
    min_log_level =  "WARN"
  }

  versions {
    version_name = "v2"
    description = "v2 version of my wasm plugin"
    image_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-plugin:v2"
    plugin_config_data = base64encode(file("test-fixtures/compiled-package/plugin.config"))

    labels = {
      test_label =  "test_value"
    }
  }
}
`, context))
}

func testAccNetworkServicesWasmPlugin_wasmPluginConfigUriUpdate(context map[string]interface{}) string {
	return fmt.Sprint(testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context), acctest.Nprintf(`
data "google_project" "project" {}

resource "google_network_services_wasm_plugin" "wasm_plugin" {
  name        = "tf-test-my-wasm-plugin%{random_suffix}"
  description = "my wasm plugin"

  main_version_id = "v3"

  labels = {
    test_label =  "test_value"
  }
  log_config {
    enable =  true
    sample_rate = 1
    min_log_level =  "WARN"
  }

  versions {
    version_name = "v3"
    description = "v3 version of my wasm plugin"
    image_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-plugin:v3"
    plugin_config_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-config:v3"

    labels = {
      test_label =  "test_value"
    }
  }
}
`, context))
}

func testAccNetworkServicesWasmPlugin_wasmPluginLocationCreate(context map[string]interface{}) string {
	return fmt.Sprint(testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context), acctest.Nprintf(`
resource "google_network_services_wasm_plugin" "wasm_plugin" {
  name        = "tf-test-my-wasm-plugin%{random_suffix}"
  description = "my wasm plugin"
  location 		= "global"

  main_version_id = "v1"

  labels = {
    test_label =  "test_value"
  }
  log_config {
    enable =  true
    sample_rate = 1
    min_log_level =  "WARN"
  }

  versions {
    version_name = "v1"
    description = "v1 version of my wasm plugin"
    image_uri = "projects/%{test_project_id}/locations/us-central1/repositories/tf-test-repository-standard%{random_suffix}/genericArtifacts/my-wasm-plugin:v1"

    labels = {
      test_label =  "test_value"
    }
  }
}
`, context))
}

func testAccNetworkServicesWasmPlugin_artifactRegistryRepositorySetup(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_artifact_registry_repository" "test_repository" {
  repository_id = "tf-test-repository-standard%{random_suffix}"
  location = "us-central1"
  description = "standard repo"
  format = "GENERIC"

  labels = {
    my_key    = "my_val"
    other_key = "other_val"
  }
}
`, context)
}

func testAccCheckNetworkServicesWasmPlugin_uploadCompiledCode(t *testing.T, resourceName string, packageName string, version string, packageFilePath string, packageFileName string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("Resource not found: %s", resourceName)
		}

		if rs.Primary.ID == "" {
			return fmt.Errorf("No ID is set for Artifact Registry Repository")
		}

		config := acctest.GoogleProviderConfig(t)

		// Extract the instance name, project, and region from the resource
		project, err := acctest.GetTestProject(rs.Primary, config)
		if err != nil {
			return err
		}

		location := rs.Primary.Attributes["location"]
		repository_id := rs.Primary.Attributes["repository_id"]

		//Geting the compiled code file
		mediaBody, err := os.ReadFile(packageFilePath)
		if err != nil {
			return fmt.Errorf("Could not read the target file: %s", err.Error())
		}

		// Construct the upload request
		jsonBody := fmt.Sprintf(`{"packageId": "%s", "versionId": "%s", "filename": "%s"}`, packageName, version, packageFileName)

		// Make the API call to upload the compiled code
		url := fmt.Sprintf("https://artifactregistry.googleapis.com/upload/v1/projects/%s/locations/%s/repositories/%s/genericArtifacts:create?alt=json&uploadType=multipart", project, location, repository_id)

		// New multipart writer.
		body := &bytes.Buffer{}
		writer := multipart.NewWriter(body)

		// Metadata part.
		metadataHeader := textproto.MIMEHeader{}
		metadataHeader.Set("Content-Type", "application/json")
		metadataHeader.Set("MIME-Version", "1.0")
		part, _ := writer.CreatePart(metadataHeader)
		part.Write([]byte(jsonBody))

		// Media Files.
		mediaHeader := textproto.MIMEHeader{}
		mediaHeader.Set("Content-Type", "application/octet-stream")
		mediaHeader.Set("Content-Transfer-Encoding", "binary")
		mediaHeader.Set("MIME-Version", "1.0")

		mediaPart, _ := writer.CreatePart(mediaHeader)
		io.Copy(mediaPart, bytes.NewReader(mediaBody))

		// Close multipart writer.
		writer.Close()

		contentTypeHeader := fmt.Sprintf("multipart/related; boundary='%s'", writer.Boundary())

		res, err := sendRequestRawBodyWithTimeout(config, "POST", config.BillingProject, url, config.UserAgent, bytes.NewReader(body.Bytes()), contentTypeHeader, time.Minute*20)

		if err != nil {
			return fmt.Errorf("Error uploading the compiled file to the Artifact Registry Repository %s: %s", repository_id, err)
		}

		log.Printf("[DEBUG] Finished uploading the compiled file: %#v", res)

		return nil
	}
}

// sendRequestRawBodyWithTimeout is derived from sendRequestWithTimeout with direct pass through of request body
func sendRequestRawBodyWithTimeout(config *transport_tpg.Config, method, project, rawurl, userAgent string, body io.Reader, contentType string, timeout time.Duration, errorRetryPredicates ...transport_tpg.RetryErrorPredicateFunc) (map[string]interface{}, error) {
	log.Printf("[DEBUG] sendRequestRawBodyWithTimeout start")
	reqHeaders := make(http.Header)
	reqHeaders.Set("User-Agent", userAgent)
	reqHeaders.Set("Content-Type", contentType)

	if config.UserProjectOverride && project != "" {
		// Pass the project into this fn instead of parsing it from the URL because
		// both project names and URLs can have colons in them.
		reqHeaders.Set("X-Goog-User-Project", project)
	}

	if timeout == 0 {
		timeout = time.Duration(1) * time.Minute
	}

	var res *http.Response

	log.Printf("[DEBUG] sendRequestRawBodyWithTimeout sending request")

	err := transport_tpg.Retry(transport_tpg.RetryOptions{
		RetryFunc: func() error {
			req, err := http.NewRequest(method, rawurl, body)
			if err != nil {
				return err
			}

			req.Header = reqHeaders
			res, err = config.Client.Do(req)
			if err != nil {
				return err
			}

			if err := googleapi.CheckResponse(res); err != nil {
				googleapi.CloseBody(res)
				return err
			}

			return nil
		},
		Timeout:              timeout,
		ErrorRetryPredicates: errorRetryPredicates,
	})
	if err != nil {
		return nil, err
	}

	if res == nil {
		return nil, fmt.Errorf("Unable to parse server response. This is most likely a terraform problem, please file a bug at https://github.com/hashicorp/terraform-provider-google/issues.")
	}

	// The defer call must be made outside of the retryFunc otherwise it's closed too soon.
	defer googleapi.CloseBody(res)

	// 204 responses will have no body, so we're going to error with "EOF" if we
	// try to parse it. Instead, we can just return nil.
	if res.StatusCode == 204 {
		return nil, nil
	}
	result := make(map[string]interface{})
	if err := json.NewDecoder(res.Body).Decode(&result); err != nil {
		return nil, err
	}
	log.Printf("[DEBUG] sendRequestRawBodyWithTimeout returning")
	return result, nil
}
