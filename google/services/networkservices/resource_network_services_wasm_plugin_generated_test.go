// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkservices_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccNetworkServicesWasmPlugin_wasmPluginBasicDockerRepositoryExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesWasmPluginDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginBasicDockerRepositoryExample(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccNetworkServicesWasmPlugin_wasmPluginBasicDockerRepositoryExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {}

resource "google_network_services_wasm_plugin" "wasm_plugin" {
  name        = "tf-test-my-wasm-plugin%{random_suffix}"
  description = "my wasm plugin from a docker repository"

  main_version_id = "v1"

  labels = {
    test_label =  "test_value"
  }
  log_config {
    enable =  true
    sample_rate = 1
    min_log_level =  "WARN"
  }

  versions {
    version_name = "v1"
    description = "v1 version of my wasm plugin"
    image_uri = "us-central1-docker.pkg.dev/${data.google_project.project.name}/{index $.Vars "repository_name"}/{index $.Vars "plugin_package_name"}:prod"

    labels = {
      test_label =  "test_value"
    }
  }
}
`, context)
}

func TestAccNetworkServicesWasmPlugin_wasmPluginBasicGenericRepositoryExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkServicesWasmPluginDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkServicesWasmPlugin_wasmPluginBasicGenericRepositoryExample(context),
			},
			{
				ResourceName:            "google_network_services_wasm_plugin.wasm_plugin",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccNetworkServicesWasmPlugin_wasmPluginBasicGenericRepositoryExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {}

resource "google_network_services_wasm_plugin" "wasm_plugin" {
  name        = "tf-test-my-wasm-plugin%{random_suffix}"
  description = "my wasm plugin from a generic repository"

  main_version_id = "v1"

  labels = {
    test_label =  "test_value"
  }
  log_config {
    enable =  true
    sample_rate = 1
    min_log_level =  "WARN"
  }

  versions {
    version_name = "v1"
    description = "v1 version of my wasm plugin"
    image_uri = "projects/${data.google_project.project.name}/locations/us-central1/repositories/{index $.Vars "repository_name"}/genericArtifacts/{index $.Vars "plugin_package_name"}:v1"

    labels = {
      test_label =  "test_value"
    }
  }
}
`, context)
}

func testAccCheckNetworkServicesWasmPluginDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_network_services_wasm_plugin" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{NetworkServicesBasePath}}projects/{{project}}/locations/{{location}}/wasmPlugins/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("NetworkServicesWasmPlugin still exists at %s", url)
			}
		}

		return nil
	}
}
