// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networkservices/MulticastDomain.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package networkservices

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/errwrap"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.NewDecoder
	_ = json.Marshal
	_ = fmt.Sprintf
	_ = log.Print
	_ = http.Get
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = errwrap.Wrap
	_ = cty.BoolVal
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = validation.All
	_ = structure.ExpandJsonFromString
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ValidateEnum
	_ = googleapi.Error{}
)

func ResourceNetworkServicesMulticastDomain() *schema.Resource {
	return &schema.Resource{
		Create: resourceNetworkServicesMulticastDomainCreate,
		Read:   resourceNetworkServicesMulticastDomainRead,
		Update: resourceNetworkServicesMulticastDomainUpdate,
		Delete: resourceNetworkServicesMulticastDomainDelete,

		Importer: &schema.ResourceImporter{
			State: resourceNetworkServicesMulticastDomainImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"admin_network": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The resource name of the multicast admin VPC network.
Use the following format:
'projects/{project}/locations/global/networks/{network}'.`,
			},
			"connection_config": {
				Type:        schema.TypeList,
				Required:    true,
				ForceNew:    true,
				Description: `VPC connectivity information.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"connection_type": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `The VPC connection type.
Possible values:
NCC
SAME_VPC`,
						},
						"ncc_hub": {
							Type:     schema.TypeString,
							Optional: true,
							ForceNew: true,
							Description: `The resource name of the
[NCC](https://cloud.google.com/network-connectivity-center) hub.
Use the following format:
'projects/{project}/locations/global/hubs/{hub}'.`,
						},
					},
				},
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"multicast_domain_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `A unique name for the multicast domain.
The name is restricted to letters, numbers, and hyphen, with the first
character a letter, and the last a letter or a number. The name must not
exceed 48 characters.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `An optional text description of the multicast domain.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Labels as key-value pairs.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"multicast_domain_group": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `The multicast domain group this domain should be associated with.
Use the following format:
'projects/{project}/locations/global/multicastDomainGroups/{multicast_domain_group}'.`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `[Output only] The timestamp when the multicast domain was created.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				ForceNew:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The resource name of the multicast domain.
Use the following format:
'projects/*/locations/global/multicastDomains/*'`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"unique_id": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `[Output only] The Google-generated UUID for the resource. This value is
unique across all multicast domain resources. If a domain is deleted and
another with the same name is created, the new domain is assigned a
different unique_id.`,
			},
			"update_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `[Output only] The timestamp when the multicast domain was most recently
updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceNetworkServicesMulticastDomainCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	adminNetworkProp, err := expandNetworkServicesMulticastDomainAdminNetwork(d.Get("admin_network"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("admin_network"); !tpgresource.IsEmptyValue(reflect.ValueOf(adminNetworkProp)) && (ok || !reflect.DeepEqual(v, adminNetworkProp)) {
		obj["adminNetwork"] = adminNetworkProp
	}
	connectionConfigProp, err := expandNetworkServicesMulticastDomainConnectionConfig(d.Get("connection_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("connection_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(connectionConfigProp)) && (ok || !reflect.DeepEqual(v, connectionConfigProp)) {
		obj["connection"] = connectionConfigProp
	}
	descriptionProp, err := expandNetworkServicesMulticastDomainDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	multicastDomainGroupProp, err := expandNetworkServicesMulticastDomainMulticastDomainGroup(d.Get("multicast_domain_group"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("multicast_domain_group"); !tpgresource.IsEmptyValue(reflect.ValueOf(multicastDomainGroupProp)) && (ok || !reflect.DeepEqual(v, multicastDomainGroupProp)) {
		obj["multicastDomainGroup"] = multicastDomainGroupProp
	}
	effectiveLabelsProp, err := expandNetworkServicesMulticastDomainEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/{{location}}/multicastDomains?multicastDomainId={{multicast_domain_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new MulticastDomain: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for MulticastDomain: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating MulticastDomain: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/multicastDomains/{{multicast_domain_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = NetworkServicesOperationWaitTime(
		config, res, project, "Creating MulticastDomain", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create MulticastDomain: %s", err)
	}

	log.Printf("[DEBUG] Finished creating MulticastDomain %q: %#v", d.Id(), res)

	return resourceNetworkServicesMulticastDomainRead(d, meta)
}

func resourceNetworkServicesMulticastDomainRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/{{location}}/multicastDomains/{{multicast_domain_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for MulticastDomain: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("NetworkServicesMulticastDomain %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}

	if err := d.Set("admin_network", flattenNetworkServicesMulticastDomainAdminNetwork(res["adminNetwork"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("connection_config", flattenNetworkServicesMulticastDomainConnectionConfig(res["connection"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("create_time", flattenNetworkServicesMulticastDomainCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("description", flattenNetworkServicesMulticastDomainDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("labels", flattenNetworkServicesMulticastDomainLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("multicast_domain_group", flattenNetworkServicesMulticastDomainMulticastDomainGroup(res["multicastDomainGroup"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("name", flattenNetworkServicesMulticastDomainName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("unique_id", flattenNetworkServicesMulticastDomainUniqueId(res["uniqueId"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("update_time", flattenNetworkServicesMulticastDomainUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("terraform_labels", flattenNetworkServicesMulticastDomainTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}
	if err := d.Set("effective_labels", flattenNetworkServicesMulticastDomainEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading MulticastDomain: %s", err)
	}

	return nil
}

func resourceNetworkServicesMulticastDomainUpdate(d *schema.ResourceData, meta interface{}) error {
	// Only the root field "labels" and "terraform_labels" are mutable
	return resourceNetworkServicesMulticastDomainRead(d, meta)
}

func resourceNetworkServicesMulticastDomainDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for MulticastDomain: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/{{location}}/multicastDomains/{{multicast_domain_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting MulticastDomain %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "MulticastDomain")
	}

	err = NetworkServicesOperationWaitTime(
		config, res, project, "Deleting MulticastDomain", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting MulticastDomain %q: %#v", d.Id(), res)
	return nil
}

func resourceNetworkServicesMulticastDomainImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/multicastDomains/(?P<multicast_domain_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<multicast_domain_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<multicast_domain_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/multicastDomains/{{multicast_domain_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenNetworkServicesMulticastDomainAdminNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesMulticastDomainConnectionConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["connection_type"] =
		flattenNetworkServicesMulticastDomainConnectionConfigConnectionType(original["connectionType"], d, config)
	transformed["ncc_hub"] =
		flattenNetworkServicesMulticastDomainConnectionConfigNccHub(original["nccHub"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesMulticastDomainConnectionConfigConnectionType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesMulticastDomainConnectionConfigNccHub(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesMulticastDomainCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesMulticastDomainDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesMulticastDomainLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesMulticastDomainMulticastDomainGroup(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesMulticastDomainName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesMulticastDomainUniqueId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesMulticastDomainUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesMulticastDomainTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesMulticastDomainEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandNetworkServicesMulticastDomainAdminNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainConnectionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedConnectionType, err := expandNetworkServicesMulticastDomainConnectionConfigConnectionType(original["connection_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConnectionType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["connectionType"] = transformedConnectionType
	}

	transformedNccHub, err := expandNetworkServicesMulticastDomainConnectionConfigNccHub(original["ncc_hub"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNccHub); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nccHub"] = transformedNccHub
	}

	return transformed, nil
}

func expandNetworkServicesMulticastDomainConnectionConfigConnectionType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainConnectionConfigNccHub(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainMulticastDomainGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
