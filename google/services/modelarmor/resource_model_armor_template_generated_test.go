// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package modelarmor_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccModelArmorTemplate_modelarmorTemplateBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"location":      "us-central1",
		"templateId":    "modelarmor1",
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckModelArmorTemplateDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccModelArmorTemplate_modelarmorTemplateBasicExample(context),
			},
			{
				ResourceName:            "google_model_armor_template.template-basic",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "template_id", "terraform_labels"},
			},
		},
	})
}

func testAccModelArmorTemplate_modelarmorTemplateBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_model_armor_template" "template-basic" {
  location    = "%{location}"
  template_id = "%{templateId}"

  filter_config {

  }

  template_metadata {

  }
}
`, context)
}

func TestAccModelArmorTemplate_modelarmorTemplateFilterConfigExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"filter_config_malicious_uri_filter_settings_filter_enforcement":    "ENABLED",
		"filter_config_pi_and_jailbreak_filter_settings_confidence_level":   "MEDIUM_AND_ABOVE",
		"filter_config_pi_and_jailbreak_filter_settings_filter_enforcement": "ENABLED",
		"filter_config_rai_settings_rai_filters_0_confidence_level":         "HIGH",
		"filter_config_rai_settings_rai_filters_0_filter_type":              "HATE_SPEECH",
		"filter_config_sdp_settings_basic_config_filter_enforcement":        "ENABLED",
		"location":                 "us-central1",
		"sdp_settings_config_type": "basic_config",
		"templateId":               "modelarmor2",
		"template_metadata_multi_language_detection_enable_multi_language_detection": false,
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckModelArmorTemplateDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccModelArmorTemplate_modelarmorTemplateFilterConfigExample(context),
			},
			{
				ResourceName:            "google_model_armor_template.template-filter-config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "template_id", "terraform_labels"},
			},
		},
	})
}

func testAccModelArmorTemplate_modelarmorTemplateFilterConfigExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_model_armor_template" "template-filter-config" {
  location    = "%{location}"
  template_id = "%{templateId}"

  filter_config {
    rai_settings {
      rai_filters {
        filter_type      = "%{filter_config_rai_settings_rai_filters_0_filter_type}"
        confidence_level = "%{filter_config_rai_settings_rai_filters_0_confidence_level}"
      }
    }
    sdp_settings {
      basic_config {
          filter_enforcement = "%{filter_config_sdp_settings_basic_config_filter_enforcement}"
      }
    }
    pi_and_jailbreak_filter_settings {
      filter_enforcement = "%{filter_config_pi_and_jailbreak_filter_settings_filter_enforcement}"
      confidence_level   = "%{filter_config_pi_and_jailbreak_filter_settings_confidence_level}"
    }
    malicious_uri_filter_settings {
      filter_enforcement = "%{filter_config_malicious_uri_filter_settings_filter_enforcement}"
    }
  }
  template_metadata {
    multi_language_detection {
    enable_multi_language_detection        = %{template_metadata_multi_language_detection_enable_multi_language_detection}
    }
  }
}
`, context)
}

func TestAccModelArmorTemplate_modelarmorTemplateTemplateMetadataExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"filter_config_rai_settings_rai_filters_0_confidence_level": "MEDIUM_AND_ABOVE",
		"filter_config_rai_settings_rai_filters_0_filter_type":      "HARASSMENT",
		"location":   "us-central1",
		"templateId": "modelarmor3",
		"template_metadata_custom_llm_response_safety_error_code":                    401,
		"template_metadata_custom_llm_response_safety_error_message":                 "This is a custom error message for LLM response",
		"template_metadata_custom_prompt_safety_error_code":                          400,
		"template_metadata_custom_prompt_safety_error_message":                       "This is a custom error message for prompt",
		"template_metadata_enforcement_type":                                         "INSPECT_ONLY",
		"template_metadata_ignore_partial_invocation_failures":                       false,
		"template_metadata_log_sanitize_operations":                                  false,
		"template_metadata_log_template_operations":                                  true,
		"template_metadata_multi_language_detection_enable_multi_language_detection": true,
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckModelArmorTemplateDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccModelArmorTemplate_modelarmorTemplateTemplateMetadataExample(context),
			},
			{
				ResourceName:            "google_model_armor_template.template-template-metadata",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "template_id", "terraform_labels"},
			},
		},
	})
}

func testAccModelArmorTemplate_modelarmorTemplateTemplateMetadataExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_model_armor_template" "template-template-metadata" {
  location    = "%{location}"
  template_id = "%{templateId}"

  filter_config {
    rai_settings {
      rai_filters {
        filter_type      = "%{filter_config_rai_settings_rai_filters_0_filter_type}"
        confidence_level = "%{filter_config_rai_settings_rai_filters_0_confidence_level}"
      }
    }
  }
  template_metadata {
    custom_llm_response_safety_error_message = "%{template_metadata_custom_llm_response_safety_error_message}"
    log_sanitize_operations                  = %{template_metadata_log_sanitize_operations}
    log_template_operations                  = %{template_metadata_log_template_operations}
    multi_language_detection {
      enable_multi_language_detection        = %{template_metadata_multi_language_detection_enable_multi_language_detection}
    }
    ignore_partial_invocation_failures       = %{template_metadata_ignore_partial_invocation_failures}
    custom_prompt_safety_error_code          = %{template_metadata_custom_prompt_safety_error_code}
    custom_prompt_safety_error_message       = "%{template_metadata_custom_prompt_safety_error_message}"
    custom_llm_response_safety_error_code    = %{template_metadata_custom_llm_response_safety_error_code}
    enforcement_type                         = "%{template_metadata_enforcement_type}"
  }
}
`, context)
}

func TestAccModelArmorTemplate_modelarmorTemplateLabelExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"filter_config_rai_settings_rai_filters_0_confidence_level":      "MEDIUM_AND_ABOVE",
		"filter_config_rai_settings_rai_filters_0_filter_type":           "DANGEROUS",
		"filter_config_sdp_settings_advanced_config_deidentify_template": "projects/llm-firewall-demo/locations/us-central1/deidentifyTemplates/t2",
		"filter_config_sdp_settings_advanced_config_inspect_template":    "projects/llm-firewall-demo/locations/us-central1/inspectTemplates/t3",
		"filter_config_sdp_settings_basic_config_filter_enforcement":     "ENABLED",
		"label_test_label":         "template-test-label",
		"location":                 "us-central1",
		"sdp_settings_config_type": "advanced_config",
		"templateId":               "modelarmor4",
		"template_metadata_multi_language_detection_enable_multi_language_detection": false,
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckModelArmorTemplateDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccModelArmorTemplate_modelarmorTemplateLabelExample(context),
			},
			{
				ResourceName:            "google_model_armor_template.template-label-advanced-config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "template_id", "terraform_labels"},
			},
		},
	})
}

func testAccModelArmorTemplate_modelarmorTemplateLabelExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_model_armor_template" "template-label-advanced-config" {
  location    = "%{location}"
  template_id = "%{templateId}"

  labels = {
    "test-label" = "%{label_test_label}"
  }

  filter_config {
    rai_settings {
      rai_filters {
        filter_type      = "%{filter_config_rai_settings_rai_filters_0_filter_type}"
        confidence_level = "%{filter_config_rai_settings_rai_filters_0_confidence_level}"
      }
    }
    sdp_settings {
      advanced_config {
        inspect_template     = "%{filter_config_sdp_settings_advanced_config_inspect_template}"
        deidentify_template  = "%{filter_config_sdp_settings_advanced_config_deidentify_template}"
      }
    }
  }
  template_metadata {
    multi_language_detection {
      enable_multi_language_detection = %{template_metadata_multi_language_detection_enable_multi_language_detection}
    }
  }
}
`, context)
}

func testAccCheckModelArmorTemplateDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_model_armor_template" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ModelArmorBasePath}}projects/{{project}}/locations/{{location}}/templates/{{template_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ModelArmorTemplate still exists at %s", url)
			}
		}

		return nil
	}
}
