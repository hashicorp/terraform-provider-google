// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/modelarmor/Template.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package modelarmor

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceModelArmorTemplate() *schema.Resource {
	return &schema.Resource{
		Create: resourceModelArmorTemplateCreate,
		Read:   resourceModelArmorTemplateRead,
		Update: resourceModelArmorTemplateUpdate,
		Delete: resourceModelArmorTemplateDelete,

		Importer: &schema.ResourceImporter{
			State: resourceModelArmorTemplateImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"filter_config": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Filters configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"malicious_uri_filter_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Malicious URI filter settings.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"filter_enforcement": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Tells whether the Malicious URI filter is enabled or disabled.
Possible values:
ENABLED
DISABLED`,
									},
								},
							},
						},
						"pi_and_jailbreak_filter_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Prompt injection and Jailbreak Filter settings.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"confidence_level": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Possible values:
LOW_AND_ABOVE
MEDIUM_AND_ABOVE
HIGH`,
									},
									"filter_enforcement": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Tells whether Prompt injection and Jailbreak filter is enabled or
disabled.
Possible values:
ENABLED
DISABLED`,
									},
								},
							},
						},
						"rai_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Responsible AI Filter settings.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"rai_filters": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `List of Responsible AI filters enabled for template.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"filter_type": {
													Type:     schema.TypeString,
													Required: true,
													Description: `Possible values:
SEXUALLY_EXPLICIT
HATE_SPEECH
HARASSMENT
DANGEROUS`,
												},
												"confidence_level": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Possible values:
LOW_AND_ABOVE
MEDIUM_AND_ABOVE
HIGH`,
												},
											},
										},
									},
								},
							},
						},
						"sdp_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Sensitive Data Protection settings.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"advanced_config": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Sensitive Data Protection Advanced configuration.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"deidentify_template": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Optional Sensitive Data Protection Deidentify template resource name.
If provided then DeidentifyContent action is performed during Sanitization
using this template and inspect template. The De-identified data will
be returned in SdpDeidentifyResult.
Note that all info-types present in the deidentify template must be present
in inspect template.
e.g.
'projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}'`,
												},
												"inspect_template": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Sensitive Data Protection inspect template resource name
If only inspect template is provided (de-identify template not provided),
then Sensitive Data Protection InspectContent action is performed during
Sanitization. All Sensitive Data Protection findings identified during
inspection will be returned as SdpFinding in SdpInsepctionResult.
e.g:-
'projects/{project}/locations/{location}/inspectTemplates/{inspect_template}'`,
												},
											},
										},
										ConflictsWith: []string{"filter_config.0.sdp_settings.0.basic_config"},
									},
									"basic_config": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Sensitive Data Protection basic configuration.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"filter_enforcement": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Tells whether the Sensitive Data Protection basic config is enabled or
disabled.
Possible values:
ENABLED
DISABLED`,
												},
											},
										},
										ConflictsWith: []string{"filter_config.0.sdp_settings.0.advanced_config"},
									},
								},
							},
						},
					},
				},
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"template_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `Id of the requesting object
If auto-generating Id server-side, remove this field and
template_id from the method_signature of Create RPC`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Labels as key value pairs

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"template_metadata": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Message describing TemplateMetadata`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"custom_llm_response_safety_error_code": {
							Type:     schema.TypeInt,
							Optional: true,
							Description: `Indicates the custom error code set by the user to be returned to the end
user if the LLM response trips Model Armor filters.`,
						},
						"custom_llm_response_safety_error_message": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Indicates the custom error message set by the user to be returned to the
end user if the LLM response trips Model Armor filters.`,
						},
						"custom_prompt_safety_error_code": {
							Type:     schema.TypeInt,
							Optional: true,
							Description: `Indicates the custom error code set by the user to be returned to the end
user by the service extension if the prompt trips Model Armor filters.`,
						},
						"custom_prompt_safety_error_message": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Indicates the custom error message set by the user to be returned to the
end user if the prompt trips Model Armor filters.`,
						},
						"enforcement_type": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Possible values:
INSPECT_ONLY
INSPECT_AND_BLOCK`,
						},
						"ignore_partial_invocation_failures": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `If true, partial detector failures should be ignored.`,
						},
						"log_sanitize_operations": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `If true, log sanitize operations.`,
						},
						"log_template_operations": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `If true, log template crud operations.`,
						},
						"multi_language_detection": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Metadata to enable multi language detection via template.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enable_multi_language_detection": {
										Type:        schema.TypeBool,
										Required:    true,
										Description: `If true, multi language detection will be enabled.`,
									},
								},
							},
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Create time stamp`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Identifier. name of resource`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Update time stamp`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceModelArmorTemplateCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	filterConfigProp, err := expandModelArmorTemplateFilterConfig(d.Get("filter_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_config"); ok || !reflect.DeepEqual(v, filterConfigProp) {
		obj["filterConfig"] = filterConfigProp
	}
	templateMetadataProp, err := expandModelArmorTemplateTemplateMetadata(d.Get("template_metadata"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("template_metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(templateMetadataProp)) && (ok || !reflect.DeepEqual(v, templateMetadataProp)) {
		obj["templateMetadata"] = templateMetadataProp
	}
	effectiveLabelsProp, err := expandModelArmorTemplateEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ModelArmorBasePath}}projects/{{project}}/locations/{{location}}/templates?templateId={{template_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Template: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Template: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Template: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/templates/{{template_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Template %q: %#v", d.Id(), res)

	return resourceModelArmorTemplateRead(d, meta)
}

func resourceModelArmorTemplateRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ModelArmorBasePath}}projects/{{project}}/locations/{{location}}/templates/{{template_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Template: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ModelArmorTemplate %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Template: %s", err)
	}

	if err := d.Set("name", flattenModelArmorTemplateName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Template: %s", err)
	}
	if err := d.Set("create_time", flattenModelArmorTemplateCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Template: %s", err)
	}
	if err := d.Set("update_time", flattenModelArmorTemplateUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Template: %s", err)
	}
	if err := d.Set("labels", flattenModelArmorTemplateLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading Template: %s", err)
	}
	if err := d.Set("filter_config", flattenModelArmorTemplateFilterConfig(res["filterConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading Template: %s", err)
	}
	if err := d.Set("template_metadata", flattenModelArmorTemplateTemplateMetadata(res["templateMetadata"], d, config)); err != nil {
		return fmt.Errorf("Error reading Template: %s", err)
	}
	if err := d.Set("terraform_labels", flattenModelArmorTemplateTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading Template: %s", err)
	}
	if err := d.Set("effective_labels", flattenModelArmorTemplateEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading Template: %s", err)
	}

	return nil
}

func resourceModelArmorTemplateUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Template: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	filterConfigProp, err := expandModelArmorTemplateFilterConfig(d.Get("filter_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_config"); ok || !reflect.DeepEqual(v, filterConfigProp) {
		obj["filterConfig"] = filterConfigProp
	}
	templateMetadataProp, err := expandModelArmorTemplateTemplateMetadata(d.Get("template_metadata"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("template_metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, templateMetadataProp)) {
		obj["templateMetadata"] = templateMetadataProp
	}
	effectiveLabelsProp, err := expandModelArmorTemplateEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ModelArmorBasePath}}projects/{{project}}/locations/{{location}}/templates/{{template_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Template %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("filter_config") {
		updateMask = append(updateMask, "filterConfig")
	}

	if d.HasChange("template_metadata") {
		updateMask = append(updateMask, "templateMetadata")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Template %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Template %q: %#v", d.Id(), res)
		}

	}

	return resourceModelArmorTemplateRead(d, meta)
}

func resourceModelArmorTemplateDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Template: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ModelArmorBasePath}}projects/{{project}}/locations/{{location}}/templates/{{template_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting Template %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Template")
	}

	log.Printf("[DEBUG] Finished deleting Template %q: %#v", d.Id(), res)
	return nil
}

func resourceModelArmorTemplateImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/templates/(?P<template_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<template_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<template_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/templates/{{template_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenModelArmorTemplateName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenModelArmorTemplateFilterConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["malicious_uri_filter_settings"] =
		flattenModelArmorTemplateFilterConfigMaliciousUriFilterSettings(original["maliciousUriFilterSettings"], d, config)
	transformed["rai_settings"] =
		flattenModelArmorTemplateFilterConfigRaiSettings(original["raiSettings"], d, config)
	transformed["sdp_settings"] =
		flattenModelArmorTemplateFilterConfigSdpSettings(original["sdpSettings"], d, config)
	transformed["pi_and_jailbreak_filter_settings"] =
		flattenModelArmorTemplateFilterConfigPiAndJailbreakFilterSettings(original["piAndJailbreakFilterSettings"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorTemplateFilterConfigMaliciousUriFilterSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["filter_enforcement"] =
		flattenModelArmorTemplateFilterConfigMaliciousUriFilterSettingsFilterEnforcement(original["filterEnforcement"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorTemplateFilterConfigMaliciousUriFilterSettingsFilterEnforcement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateFilterConfigRaiSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["rai_filters"] =
		flattenModelArmorTemplateFilterConfigRaiSettingsRaiFilters(original["raiFilters"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorTemplateFilterConfigRaiSettingsRaiFilters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"filter_type":      flattenModelArmorTemplateFilterConfigRaiSettingsRaiFiltersFilterType(original["filterType"], d, config),
			"confidence_level": flattenModelArmorTemplateFilterConfigRaiSettingsRaiFiltersConfidenceLevel(original["confidenceLevel"], d, config),
		})
	}
	return transformed
}
func flattenModelArmorTemplateFilterConfigRaiSettingsRaiFiltersFilterType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateFilterConfigRaiSettingsRaiFiltersConfidenceLevel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateFilterConfigSdpSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["advanced_config"] =
		flattenModelArmorTemplateFilterConfigSdpSettingsAdvancedConfig(original["advancedConfig"], d, config)
	transformed["basic_config"] =
		flattenModelArmorTemplateFilterConfigSdpSettingsBasicConfig(original["basicConfig"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorTemplateFilterConfigSdpSettingsAdvancedConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["inspect_template"] =
		flattenModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigInspectTemplate(original["inspectTemplate"], d, config)
	transformed["deidentify_template"] =
		flattenModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(original["deidentifyTemplate"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigInspectTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateFilterConfigSdpSettingsBasicConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["filter_enforcement"] =
		flattenModelArmorTemplateFilterConfigSdpSettingsBasicConfigFilterEnforcement(original["filterEnforcement"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorTemplateFilterConfigSdpSettingsBasicConfigFilterEnforcement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateFilterConfigPiAndJailbreakFilterSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["filter_enforcement"] =
		flattenModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(original["filterEnforcement"], d, config)
	transformed["confidence_level"] =
		flattenModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(original["confidenceLevel"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateTemplateMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["log_template_operations"] =
		flattenModelArmorTemplateTemplateMetadataLogTemplateOperations(original["logTemplateOperations"], d, config)
	transformed["log_sanitize_operations"] =
		flattenModelArmorTemplateTemplateMetadataLogSanitizeOperations(original["logSanitizeOperations"], d, config)
	transformed["multi_language_detection"] =
		flattenModelArmorTemplateTemplateMetadataMultiLanguageDetection(original["multiLanguageDetection"], d, config)
	transformed["ignore_partial_invocation_failures"] =
		flattenModelArmorTemplateTemplateMetadataIgnorePartialInvocationFailures(original["ignorePartialInvocationFailures"], d, config)
	transformed["custom_prompt_safety_error_code"] =
		flattenModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorCode(original["customPromptSafetyErrorCode"], d, config)
	transformed["custom_prompt_safety_error_message"] =
		flattenModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorMessage(original["customPromptSafetyErrorMessage"], d, config)
	transformed["custom_llm_response_safety_error_code"] =
		flattenModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorCode(original["customLlmResponseSafetyErrorCode"], d, config)
	transformed["custom_llm_response_safety_error_message"] =
		flattenModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorMessage(original["customLlmResponseSafetyErrorMessage"], d, config)
	transformed["enforcement_type"] =
		flattenModelArmorTemplateTemplateMetadataEnforcementType(original["enforcementType"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorTemplateTemplateMetadataLogTemplateOperations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateTemplateMetadataLogSanitizeOperations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateTemplateMetadataMultiLanguageDetection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil // The whole multi_language_detection block is absent
	}
	original, ok := v.(map[string]interface{})
	if !ok {
		return nil // Should not happen if API is consistent
	}
	// Populating the field even if the returned block is empty.
	transformed := make(map[string]interface{})

	if val, ok := original["enableMultiLanguageDetection"]; ok {
		transformed["enable_multi_language_detection"] = val
	} else {
		// Since the field is REQUIRED in the schema and the block exists, default to false if the key is missing from the API response.
		transformed["enable_multi_language_detection"] = false
	}
	return []interface{}{transformed}
}

func flattenModelArmorTemplateTemplateMetadataIgnorePartialInvocationFailures(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateTemplateMetadataEnforcementType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorTemplateTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenModelArmorTemplateEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandModelArmorTemplateFilterConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaliciousUriFilterSettings, err := expandModelArmorTemplateFilterConfigMaliciousUriFilterSettings(original["malicious_uri_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaliciousUriFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maliciousUriFilterSettings"] = transformedMaliciousUriFilterSettings
	}

	transformedRaiSettings, err := expandModelArmorTemplateFilterConfigRaiSettings(original["rai_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRaiSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["raiSettings"] = transformedRaiSettings
	}

	transformedSdpSettings, err := expandModelArmorTemplateFilterConfigSdpSettings(original["sdp_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSdpSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sdpSettings"] = transformedSdpSettings
	}

	transformedPiAndJailbreakFilterSettings, err := expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettings(original["pi_and_jailbreak_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPiAndJailbreakFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["piAndJailbreakFilterSettings"] = transformedPiAndJailbreakFilterSettings
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigMaliciousUriFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorTemplateFilterConfigMaliciousUriFilterSettingsFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigMaliciousUriFilterSettingsFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigRaiSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRaiFilters, err := expandModelArmorTemplateFilterConfigRaiSettingsRaiFilters(original["rai_filters"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRaiFilters); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["raiFilters"] = transformedRaiFilters
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigRaiSettingsRaiFilters(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedFilterType, err := expandModelArmorTemplateFilterConfigRaiSettingsRaiFiltersFilterType(original["filter_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFilterType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["filterType"] = transformedFilterType
		}

		transformedConfidenceLevel, err := expandModelArmorTemplateFilterConfigRaiSettingsRaiFiltersConfidenceLevel(original["confidence_level"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConfidenceLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["confidenceLevel"] = transformedConfidenceLevel
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandModelArmorTemplateFilterConfigRaiSettingsRaiFiltersFilterType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigRaiSettingsRaiFiltersConfidenceLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigSdpSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdvancedConfig, err := expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfig(original["advanced_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdvancedConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["advancedConfig"] = transformedAdvancedConfig
	}

	transformedBasicConfig, err := expandModelArmorTemplateFilterConfigSdpSettingsBasicConfig(original["basic_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBasicConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["basicConfig"] = transformedBasicConfig
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInspectTemplate, err := expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigInspectTemplate(original["inspect_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectTemplate"] = transformedInspectTemplate
	}

	transformedDeidentifyTemplate, err := expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(original["deidentify_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeidentifyTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deidentifyTemplate"] = transformedDeidentifyTemplate
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigInspectTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsBasicConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorTemplateFilterConfigSdpSettingsBasicConfigFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsBasicConfigFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	transformedConfidenceLevel, err := expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(original["confidence_level"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["confidenceLevel"] = transformedConfidenceLevel
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLogTemplateOperations, err := expandModelArmorTemplateTemplateMetadataLogTemplateOperations(original["log_template_operations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLogTemplateOperations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["logTemplateOperations"] = transformedLogTemplateOperations
	}

	transformedLogSanitizeOperations, err := expandModelArmorTemplateTemplateMetadataLogSanitizeOperations(original["log_sanitize_operations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLogSanitizeOperations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["logSanitizeOperations"] = transformedLogSanitizeOperations
	}

	transformedMultiLanguageDetection, err := expandModelArmorTemplateTemplateMetadataMultiLanguageDetection(original["multi_language_detection"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMultiLanguageDetection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["multiLanguageDetection"] = transformedMultiLanguageDetection
	}

	transformedIgnorePartialInvocationFailures, err := expandModelArmorTemplateTemplateMetadataIgnorePartialInvocationFailures(original["ignore_partial_invocation_failures"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIgnorePartialInvocationFailures); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ignorePartialInvocationFailures"] = transformedIgnorePartialInvocationFailures
	}

	transformedCustomPromptSafetyErrorCode, err := expandModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorCode(original["custom_prompt_safety_error_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomPromptSafetyErrorCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customPromptSafetyErrorCode"] = transformedCustomPromptSafetyErrorCode
	}

	transformedCustomPromptSafetyErrorMessage, err := expandModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorMessage(original["custom_prompt_safety_error_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomPromptSafetyErrorMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customPromptSafetyErrorMessage"] = transformedCustomPromptSafetyErrorMessage
	}

	transformedCustomLlmResponseSafetyErrorCode, err := expandModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorCode(original["custom_llm_response_safety_error_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomLlmResponseSafetyErrorCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customLlmResponseSafetyErrorCode"] = transformedCustomLlmResponseSafetyErrorCode
	}

	transformedCustomLlmResponseSafetyErrorMessage, err := expandModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorMessage(original["custom_llm_response_safety_error_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomLlmResponseSafetyErrorMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customLlmResponseSafetyErrorMessage"] = transformedCustomLlmResponseSafetyErrorMessage
	}

	transformedEnforcementType, err := expandModelArmorTemplateTemplateMetadataEnforcementType(original["enforcement_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnforcementType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enforcementType"] = transformedEnforcementType
	}

	return transformed, nil
}

func expandModelArmorTemplateTemplateMetadataLogTemplateOperations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataLogSanitizeOperations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataMultiLanguageDetection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableMultiLanguageDetection, err := expandModelArmorTemplateTemplateMetadataMultiLanguageDetectionEnableMultiLanguageDetection(original["enable_multi_language_detection"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enableMultiLanguageDetection"] = transformedEnableMultiLanguageDetection
	}

	return transformed, nil
}

func expandModelArmorTemplateTemplateMetadataMultiLanguageDetectionEnableMultiLanguageDetection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataIgnorePartialInvocationFailures(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataEnforcementType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
