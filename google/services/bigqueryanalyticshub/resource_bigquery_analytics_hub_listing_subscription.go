// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/bigqueryanalyticshub/ListingSubscription.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package bigqueryanalyticshub

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceBigqueryAnalyticsHubListingSubscription() *schema.Resource {
	return &schema.Resource{
		Create: resourceBigqueryAnalyticsHubListingSubscriptionCreate,
		Read:   resourceBigqueryAnalyticsHubListingSubscriptionRead,
		Delete: resourceBigqueryAnalyticsHubListingSubscriptionDelete,

		Importer: &schema.ResourceImporter{
			State: resourceBigqueryAnalyticsHubListingSubscriptionImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"data_exchange_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.`,
			},
			"destination_dataset": {
				Type:        schema.TypeList,
				Required:    true,
				ForceNew:    true,
				Description: `The destination dataset for this subscription.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"dataset_reference": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `A reference that identifies the destination dataset.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"dataset_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `The ID of the project containing this dataset.`,
									},
								},
							},
						},
						"location": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.CaseDiffSuppress,
							Description: `The geographic location where the dataset should reside.
See https://cloud.google.com/bigquery/docs/locations for supported locations.`,
						},
						"description": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `A user-friendly description of the dataset.`,
						},
						"friendly_name": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `A descriptive name for the dataset.`,
						},
						"labels": {
							Type:     schema.TypeMap,
							Optional: true,
							ForceNew: true,
							Description: `The labels associated with this dataset. You can use these to
organize and group your datasets.`,
							Elem: &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"listing_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.`,
			},
			"location": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.CaseDiffSuppress,
				Description:      `The name of the location of the data exchange. Distinct from the location of the destination data set.`,
			},
			"creation_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Timestamp when the subscription was created.`,
			},
			"last_modify_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Timestamp when the subscription was last modified.`,
			},
			"linked_dataset_map": {
				Type:     schema.TypeSet,
				Computed: true,
				Description: `Output only. Map of listing resource names to associated linked resource,
e.g. projects/123/locations/US/dataExchanges/456/listings/789 -> projects/123/datasets/my_dataset`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"resource_name": {
							Type:     schema.TypeString,
							Required: true,
						},
						"linked_dataset": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset`,
						},
						"listing": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. Listing for which linked resource is created.`,
						},
					},
				},
			},
			"linked_resources": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"linked_dataset": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset`,
						},
						"listing": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. Listing for which linked resource is created.`,
						},
					},
				},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The resource name of the subscription. e.g. "projects/myproject/locations/US/subscriptions/123"`,
			},
			"organization_display_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Display name of the project of this subscription.`,
			},
			"organization_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Organization of the project this subscription belongs to.`,
			},
			"resource_type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Listing shared asset type.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Current state of the subscription.`,
			},
			"subscriber_contact": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Email of the subscriber.`,
			},
			"subscription_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The subscription id used to reference the subscription.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceBigqueryAnalyticsHubListingSubscriptionCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	destinationDatasetProp, err := expandBigqueryAnalyticsHubListingSubscriptionDestinationDataset(d.Get("destination_dataset"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("destination_dataset"); !tpgresource.IsEmptyValue(reflect.ValueOf(destinationDatasetProp)) && (ok || !reflect.DeepEqual(v, destinationDatasetProp)) {
		obj["destinationDataset"] = destinationDatasetProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}}:subscribe")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new ListingSubscription: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ListingSubscription: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating ListingSubscription: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	subscription, ok := res["subscription"]
	if ok {
		name, nok := subscription.(map[string]interface{})["name"]
		if nok {
			parts := strings.Split(name.(string), "/")
			d.SetId(name.(string))
			d.Set("name", name.(string))
			d.Set("subscription_id", parts[5])
		}
	}

	log.Printf("[DEBUG] Finished creating ListingSubscription %q: %#v", d.Id(), res)

	return resourceBigqueryAnalyticsHubListingSubscriptionRead(d, meta)
}

func resourceBigqueryAnalyticsHubListingSubscriptionRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ListingSubscription: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	// The project used for Create and Read may be different.
	// Here, we will use the destination project specifically for reading and deleting.
	// This cannot be done editing the self_link since the destination project is not a top-level field.
	destinationProject, ok := d.GetOk("destination_dataset.0.dataset_reference.0.project_id")
	if ok {
		billingProject = destinationProject.(string)

		// err == nil indicates that the billing_project value was found
		if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
			billingProject = bp
		}
		destinationLocation := d.Get("destination_dataset.0.location")
		partToReplace := regexp.MustCompile(`projects\/.*\/locations\/.*\/subscriptions`)
		url = partToReplace.ReplaceAllString(url, fmt.Sprintf("projects/%s/locations/%s/subscriptions", destinationProject, destinationLocation))
	}
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("BigqueryAnalyticsHubListingSubscription %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}

	if err := d.Set("name", flattenBigqueryAnalyticsHubListingSubscriptionName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}
	if err := d.Set("creation_time", flattenBigqueryAnalyticsHubListingSubscriptionCreationTime(res["creationTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}
	if err := d.Set("last_modify_time", flattenBigqueryAnalyticsHubListingSubscriptionLastModifyTime(res["lastModifyTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}
	if err := d.Set("organization_id", flattenBigqueryAnalyticsHubListingSubscriptionOrganizationId(res["organizationId"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}
	if err := d.Set("organization_display_name", flattenBigqueryAnalyticsHubListingSubscriptionOrganizationDisplayName(res["organizationDisplayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}
	if err := d.Set("state", flattenBigqueryAnalyticsHubListingSubscriptionState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}
	if err := d.Set("subscriber_contact", flattenBigqueryAnalyticsHubListingSubscriptionSubscriberContact(res["subscriberContact"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}
	if err := d.Set("resource_type", flattenBigqueryAnalyticsHubListingSubscriptionResourceType(res["resourceType"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}
	if err := d.Set("linked_dataset_map", flattenBigqueryAnalyticsHubListingSubscriptionLinkedDatasetMap(res["linkedDatasetMap"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}
	if err := d.Set("linked_resources", flattenBigqueryAnalyticsHubListingSubscriptionLinkedResources(res["linkedResources"], d, config)); err != nil {
		return fmt.Errorf("Error reading ListingSubscription: %s", err)
	}

	return nil
}

func resourceBigqueryAnalyticsHubListingSubscriptionDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ListingSubscription: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	// The project used for Create and Read may be different.
	// Here, we will use the destination project specifically for reading and deleting.
	// This cannot be done editing the self_link since the destination project is not a top-level field.
	destinationProject, ok := d.GetOk("destination_dataset.0.dataset_reference.0.project_id")
	if ok {
		billingProject = destinationProject.(string)

		// err == nil indicates that the billing_project value was found
		if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
			billingProject = bp
		}
		destinationLocation := d.Get("destination_dataset.0.location")
		partToReplace := regexp.MustCompile(`projects\/.*\/locations\/.*\/subscriptions`)
		url = partToReplace.ReplaceAllString(url, fmt.Sprintf("projects/%s/locations/%s/subscriptions", destinationProject, destinationLocation))
	}

	log.Printf("[DEBUG] Deleting ListingSubscription %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "ListingSubscription")
	}

	log.Printf("[DEBUG] Finished deleting ListingSubscription %q: %#v", d.Id(), res)
	return nil
}

func resourceBigqueryAnalyticsHubListingSubscriptionImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/subscriptions/(?P<subscription_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<subscription_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<subscription_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return nil, err
	}

	projectNumber := d.Get("project").(string)
	resourceManager := config.NewResourceManagerV3Client(userAgent)
	projectData, err := resourceManager.Projects.Get("projects/" + d.Get("project").(string)).Do()
	if err != nil {
		return nil, err
	}

	d.Set("project", projectData.ProjectId)

	id = fmt.Sprintf("projects/%s/locations/%s/subscriptions/%s",
		projectNumber,
		d.Get("location"),
		d.Get("subscription_id"))

	d.SetId(id)
	d.Set("name", id)

	return []*schema.ResourceData{d}, nil
}

func flattenBigqueryAnalyticsHubListingSubscriptionName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionCreationTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionLastModifyTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionOrganizationId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionOrganizationDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionSubscriberContact(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionResourceType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionLinkedDatasetMap(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.(map[string]interface{})
	transformed := make([]interface{}, 0, len(l))
	for k, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"resource_name":  k,
			"listing":        flattenBigqueryAnalyticsHubListingSubscriptionLinkedDatasetMapListing(original["listing"], d, config),
			"linked_dataset": flattenBigqueryAnalyticsHubListingSubscriptionLinkedDatasetMapLinkedDataset(original["linkedDataset"], d, config),
		})
	}
	return transformed
}
func flattenBigqueryAnalyticsHubListingSubscriptionLinkedDatasetMapListing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionLinkedDatasetMapLinkedDataset(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionLinkedResources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"listing":        flattenBigqueryAnalyticsHubListingSubscriptionLinkedResourcesListing(original["listing"], d, config),
			"linked_dataset": flattenBigqueryAnalyticsHubListingSubscriptionLinkedResourcesLinkedDataset(original["linkedDataset"], d, config),
		})
	}
	return transformed
}
func flattenBigqueryAnalyticsHubListingSubscriptionLinkedResourcesListing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingSubscriptionLinkedResourcesLinkedDataset(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandBigqueryAnalyticsHubListingSubscriptionDestinationDataset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLocation, err := expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetLocation(original["location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["location"] = transformedLocation
	}

	transformedDatasetReference, err := expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetDatasetReference(original["dataset_reference"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetReference); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datasetReference"] = transformedDatasetReference
	}

	transformedFriendlyName, err := expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetFriendlyName(original["friendly_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFriendlyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["friendlyName"] = transformedFriendlyName
	}

	transformedDescription, err := expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedLabels, err := expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetLabels(original["labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["labels"] = transformedLabels
	}

	return transformed, nil
}

func expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetDatasetReference(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatasetId, err := expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetDatasetReferenceDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedProjectId, err := expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetDatasetReferenceProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	return transformed, nil
}

func expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetDatasetReferenceDatasetId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetDatasetReferenceProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetFriendlyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubListingSubscriptionDestinationDatasetLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
