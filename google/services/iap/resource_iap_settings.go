// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package iap

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceIapSettings() *schema.Resource {
	return &schema.Resource{
		Create: resourceIapSettingsCreate,
		Read:   resourceIapSettingsRead,
		Update: resourceIapSettingsUpdate,
		Delete: resourceIapSettingsDelete,

		Importer: &schema.ResourceImporter{
			State: resourceIapSettingsImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The resource name of the IAP protected resource. Name can have below resources:
* organizations/{organization_id}
* folders/{folder_id}
* projects/{projects_id}
* projects/{projects_id}/iap_web
* projects/{projects_id}/iap_web/compute
* projects/{projects_id}/iap_web/compute-{region}
* projects/{projects_id}/iap_web/compute/service/{service_id}
* projects/{projects_id}/iap_web/compute-{region}/service/{service_id}
* projects/{projects_id}/iap_web/appengine-{app_id}
* projects/{projects_id}/iap_web/appengine-{app_id}/service/{service_id}
* projects/{projects_id}/iap_web/appengine-{app_id}/service/{service_id}/version/{version_id}`,
			},
			"access_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Top level wrapper for all access related setting in IAP.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"allowed_domains_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings to configure and enable allowed domains.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"domains": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `List of trusted domains.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"enable": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Configuration for customers to opt in for the feature.`,
									},
								},
							},
						},
						"cors_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration to allow cross-origin requests via IAP.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"allow_http_options": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `Configuration to allow HTTP OPTIONS calls to skip authorization.
If undefined, IAP will not apply any special logic to OPTIONS requests.`,
									},
								},
							},
						},
						"gcip_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `GCIP claims and endpoint configurations for 3p identity providers.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"login_page_uri": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Login page URI associated with the GCIP tenants. Typically, all resources within
the same project share the same login page, though it could be overridden at the
sub resource level.`,
									},
									"tenant_ids": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `GCIP tenant ids that are linked to the IAP resource. tenantIds could be a string
beginning with a number character to indicate authenticating with GCIP tenant flow,
or in the format of _ to indicate authenticating with GCIP agent flow. If agent flow
is used, tenantIds should only contain one single element, while for tenant flow,
tenantIds can contain multiple elements.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"identity_sources": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Identity sources that IAP can use to authenticate the end user. Only one identity source
can be configured. The possible values are:

* 'WORKFORCE_IDENTITY_FEDERATION': Use external identities set up on Google Cloud Workforce
  				     Identity Federation. Possible values: ["WORKFORCE_IDENTITY_FEDERATION"]`,
							Elem: &schema.Schema{
								Type:         schema.TypeString,
								ValidateFunc: verify.ValidateEnum([]string{"WORKFORCE_IDENTITY_FEDERATION"}),
							},
						},
						"oauth_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings to configure IAP's OAuth behavior.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"login_hint": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Domain hint to send as hd=? parameter in OAuth request flow.
Enables redirect to primary IDP by skipping Google's login screen.
(https://developers.google.com/identity/protocols/OpenIDConnect#hd-param)
Note: IAP does not verify that the id token's hd claim matches this value
since access behavior is managed by IAM policies.`,
									},
									"programmatic_clients": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `List of client ids allowed to use IAP programmatically.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"reauth_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings to configure reauthentication policies in IAP.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"max_age": {
										Type:     schema.TypeString,
										Required: true,
										Description: `Reauth session lifetime, how long before a user has to reauthenticate again.
A duration in seconds with up to nine fractional digits, ending with 's'.
Example: "3.5s".`,
									},
									"method": {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: verify.ValidateEnum([]string{"LOGIN", "SECURE_KEY", "ENROLLED_SECOND_FACTORS"}),
										Description: `Reauth method requested. The possible values are:

* 'LOGIN': Prompts the user to log in again.
* 'SECURE_KEY': User must use their secure key 2nd factor device.
* 'ENROLLED_SECOND_FACTORS': User can use any enabled 2nd factor. Possible values: ["LOGIN", "SECURE_KEY", "ENROLLED_SECOND_FACTORS"]`,
									},
									"policy_type": {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: verify.ValidateEnum([]string{"MINIMUM", "DEFAULT"}),
										Description: `How IAP determines the effective policy in cases of hierarchical policies.
Policies are merged from higher in the hierarchy to lower in the hierarchy.
The possible values are:

* 'MINIMUM': This policy acts as a minimum to other policies, lower in the hierarchy.
		   Effective policy may only be the same or stricter.
* 'DEFAULT': This policy acts as a default if no other reauth policy is set. Possible values: ["MINIMUM", "DEFAULT"]`,
									},
								},
							},
						},
						"workforce_identity_settings": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Settings to configure the workforce identity federation, including workforce pools
and OAuth 2.0 settings.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"oauth2": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `OAuth 2.0 settings for IAP to perform OIDC flow with workforce identity
federation services.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"client_id": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `The OAuth 2.0 client ID registered in the workforce identity
federation OAuth 2.0 Server.`,
												},
												"client_secret": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Input only. The OAuth 2.0 client secret created while registering
the client ID.`,
													Sensitive: true,
												},
												"client_secret_sha256": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `Output only. SHA256 hash value for the client secret. This field
is returned by IAP when the settings are retrieved.`,
												},
											},
										},
									},
									"workforce_pools": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The workforce pool resources. Only one workforce pool is accepted.`,
										MaxItems:    1,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},
			"application_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Top level wrapper for all application related settings in IAP.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"access_denied_page_settings": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Customization for Access Denied page. IAP allows customers to define a custom URI
to use as the error page when access is denied to users. If IAP prevents access
to this page, the default IAP error page will be displayed instead.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"access_denied_page_uri": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The URI to be redirected to when access is denied.`,
									},
									"generate_troubleshooting_uri": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Whether to generate a troubleshooting URL on access denied events to this application.`,
									},
									"remediation_token_generation_enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Whether to generate remediation token on access denied events to this application.`,
									},
								},
							},
						},
						"attribute_propagation_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings to configure attribute propagation.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enable": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `Whether the provided attribute propagation settings should be evaluated on user requests.
If set to true, attributes returned from the expression will be propagated in the set output credentials.`,
									},
									"expression": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Raw string CEL expression. Must return a list of attributes. A maximum of 45 attributes can
be selected. Expressions can select different attribute types from attributes:
attributes.saml_attributes, attributes.iap_attributes.`,
									},
									"output_credentials": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Which output credentials attributes selected by the CEL expression should be propagated in.
All attributes will be fully duplicated in each selected output credential.
Possible values are:

* 'HEADER': Propagate attributes in the headers with "x-goog-iap-attr-" prefix.
* 'JWT': Propagate attributes in the JWT of the form:
         "additional_claims": { "my_attribute": ["value1", "value2"] }
* 'RCTOKEN': Propagate attributes in the RCToken of the form: "
             additional_claims": { "my_attribute": ["value1", "value2"] } Possible values: ["HEADER", "JWT", "RCTOKEN"]`,
										Elem: &schema.Schema{
											Type:         schema.TypeString,
											ValidateFunc: verify.ValidateEnum([]string{"HEADER", "JWT", "RCTOKEN"}),
										},
									},
								},
							},
						},
						"cookie_domain": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The Domain value to set for cookies generated by IAP. This value is not validated by the API,
but will be ignored at runtime if invalid.`,
						},
						"csm_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings to configure IAP's behavior for a service mesh.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"rctoken_aud": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Audience claim set in the generated RCToken. This value is not validated by IAP.`,
									},
								},
							},
						},
					},
				},
			},
		},
		UseJSONNumber: true,
	}
}

func resourceIapSettingsCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandIapSettingsName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	accessSettingsProp, err := expandIapSettingsAccessSettings(d.Get("access_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("access_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(accessSettingsProp)) && (ok || !reflect.DeepEqual(v, accessSettingsProp)) {
		obj["accessSettings"] = accessSettingsProp
	}
	applicationSettingsProp, err := expandIapSettingsApplicationSettings(d.Get("application_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("application_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(applicationSettingsProp)) && (ok || !reflect.DeepEqual(v, applicationSettingsProp)) {
		obj["applicationSettings"] = applicationSettingsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{IapBasePath}}{{name}}:iapSettings")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Settings: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Settings: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{name}}/iapSettings")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Settings %q: %#v", d.Id(), res)

	return resourceIapSettingsRead(d, meta)
}

func resourceIapSettingsRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{IapBasePath}}{{name}}:iapSettings")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("IapSettings %q", d.Id()))
	}

	if err := d.Set("access_settings", flattenIapSettingsAccessSettings(res["accessSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading Settings: %s", err)
	}
	if err := d.Set("application_settings", flattenIapSettingsApplicationSettings(res["applicationSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading Settings: %s", err)
	}

	return nil
}

func resourceIapSettingsUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	accessSettingsProp, err := expandIapSettingsAccessSettings(d.Get("access_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("access_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, accessSettingsProp)) {
		obj["accessSettings"] = accessSettingsProp
	}
	applicationSettingsProp, err := expandIapSettingsApplicationSettings(d.Get("application_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("application_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, applicationSettingsProp)) {
		obj["applicationSettings"] = applicationSettingsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{IapBasePath}}{{name}}:iapSettings")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Settings %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating Settings %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating Settings %q: %#v", d.Id(), res)
	}

	return resourceIapSettingsRead(d, meta)
}

func resourceIapSettingsDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{IapBasePath}}{{name}}:iapSettings")
	if err != nil {
		return err
	}

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Settings: %s", err)
	}

	headers := make(http.Header)

	obj := make(map[string]interface{})

	log.Printf("[DEBUG] Updating Settings %q: %#v", d.Id(), obj)

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   project,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating Settings %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating Settings %q: %#v", d.Id(), res)
	}

	return nil

}

func resourceIapSettingsImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^(?P<name>.+)/iapSettings$",
		"^(?P<name>.+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{name}}/iapSettings")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil

}

func flattenIapSettingsAccessSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["gcip_settings"] =
		flattenIapSettingsAccessSettingsGcipSettings(original["gcipSettings"], d, config)
	transformed["cors_settings"] =
		flattenIapSettingsAccessSettingsCorsSettings(original["corsSettings"], d, config)
	transformed["oauth_settings"] =
		flattenIapSettingsAccessSettingsOauthSettings(original["oauthSettings"], d, config)
	transformed["reauth_settings"] =
		flattenIapSettingsAccessSettingsReauthSettings(original["reauthSettings"], d, config)
	transformed["allowed_domains_settings"] =
		flattenIapSettingsAccessSettingsAllowedDomainsSettings(original["allowedDomainsSettings"], d, config)
	transformed["workforce_identity_settings"] =
		flattenIapSettingsAccessSettingsWorkforceIdentitySettings(original["workforceIdentitySettings"], d, config)
	transformed["identity_sources"] =
		flattenIapSettingsAccessSettingsIdentitySources(original["identitySources"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsAccessSettingsGcipSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["tenant_ids"] =
		flattenIapSettingsAccessSettingsGcipSettingsTenantIds(original["tenantIds"], d, config)
	transformed["login_page_uri"] =
		flattenIapSettingsAccessSettingsGcipSettingsLoginPageUri(original["loginPageUri"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsAccessSettingsGcipSettingsTenantIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsGcipSettingsLoginPageUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsCorsSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allow_http_options"] =
		flattenIapSettingsAccessSettingsCorsSettingsAllowHttpOptions(original["allowHttpOptions"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsAccessSettingsCorsSettingsAllowHttpOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsOauthSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["login_hint"] =
		flattenIapSettingsAccessSettingsOauthSettingsLoginHint(original["loginHint"], d, config)
	transformed["programmatic_clients"] =
		flattenIapSettingsAccessSettingsOauthSettingsProgrammaticClients(original["programmaticClients"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsAccessSettingsOauthSettingsLoginHint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsOauthSettingsProgrammaticClients(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsReauthSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["method"] =
		flattenIapSettingsAccessSettingsReauthSettingsMethod(original["method"], d, config)
	transformed["max_age"] =
		flattenIapSettingsAccessSettingsReauthSettingsMaxAge(original["maxAge"], d, config)
	transformed["policy_type"] =
		flattenIapSettingsAccessSettingsReauthSettingsPolicyType(original["policyType"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsAccessSettingsReauthSettingsMethod(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsReauthSettingsMaxAge(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsReauthSettingsPolicyType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsAllowedDomainsSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["domains"] =
		flattenIapSettingsAccessSettingsAllowedDomainsSettingsDomains(original["domains"], d, config)
	transformed["enable"] =
		flattenIapSettingsAccessSettingsAllowedDomainsSettingsEnable(original["enable"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsAccessSettingsAllowedDomainsSettingsDomains(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsAllowedDomainsSettingsEnable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsWorkforceIdentitySettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["workforce_pools"] =
		flattenIapSettingsAccessSettingsWorkforceIdentitySettingsWorkforcePools(original["workforcePools"], d, config)
	transformed["oauth2"] =
		flattenIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2(original["oauth2"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsAccessSettingsWorkforceIdentitySettingsWorkforcePools(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["client_id"] =
		flattenIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientId(original["clientId"], d, config)
	transformed["client_secret"] =
		flattenIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientSecret(original["clientSecret"], d, config)
	transformed["client_secret_sha256"] =
		flattenIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientSecretSha256(original["clientSecretSha256"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("access_settings.0.workforce_identity_settings.0.oauth2.0.client_secret")
}

func flattenIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientSecretSha256(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsAccessSettingsIdentitySources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsApplicationSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["csm_settings"] =
		flattenIapSettingsApplicationSettingsCsmSettings(original["csmSettings"], d, config)
	transformed["access_denied_page_settings"] =
		flattenIapSettingsApplicationSettingsAccessDeniedPageSettings(original["accessDeniedPageSettings"], d, config)
	transformed["cookie_domain"] =
		flattenIapSettingsApplicationSettingsCookieDomain(original["cookieDomain"], d, config)
	transformed["attribute_propagation_settings"] =
		flattenIapSettingsApplicationSettingsAttributePropagationSettings(original["attributePropagationSettings"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsApplicationSettingsCsmSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["rctoken_aud"] =
		flattenIapSettingsApplicationSettingsCsmSettingsRctokenAud(original["rctokenAud"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsApplicationSettingsCsmSettingsRctokenAud(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsApplicationSettingsAccessDeniedPageSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["access_denied_page_uri"] =
		flattenIapSettingsApplicationSettingsAccessDeniedPageSettingsAccessDeniedPageUri(original["accessDeniedPageUri"], d, config)
	transformed["generate_troubleshooting_uri"] =
		flattenIapSettingsApplicationSettingsAccessDeniedPageSettingsGenerateTroubleshootingUri(original["generateTroubleshootingUri"], d, config)
	transformed["remediation_token_generation_enabled"] =
		flattenIapSettingsApplicationSettingsAccessDeniedPageSettingsRemediationTokenGenerationEnabled(original["remediationTokenGenerationEnabled"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsApplicationSettingsAccessDeniedPageSettingsAccessDeniedPageUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsApplicationSettingsAccessDeniedPageSettingsGenerateTroubleshootingUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsApplicationSettingsAccessDeniedPageSettingsRemediationTokenGenerationEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsApplicationSettingsCookieDomain(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsApplicationSettingsAttributePropagationSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["output_credentials"] =
		flattenIapSettingsApplicationSettingsAttributePropagationSettingsOutputCredentials(original["outputCredentials"], d, config)
	transformed["expression"] =
		flattenIapSettingsApplicationSettingsAttributePropagationSettingsExpression(original["expression"], d, config)
	transformed["enable"] =
		flattenIapSettingsApplicationSettingsAttributePropagationSettingsEnable(original["enable"], d, config)
	return []interface{}{transformed}
}
func flattenIapSettingsApplicationSettingsAttributePropagationSettingsOutputCredentials(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsApplicationSettingsAttributePropagationSettingsExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIapSettingsApplicationSettingsAttributePropagationSettingsEnable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandIapSettingsName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGcipSettings, err := expandIapSettingsAccessSettingsGcipSettings(original["gcip_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcipSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gcipSettings"] = transformedGcipSettings
	}

	transformedCorsSettings, err := expandIapSettingsAccessSettingsCorsSettings(original["cors_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCorsSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["corsSettings"] = transformedCorsSettings
	}

	transformedOauthSettings, err := expandIapSettingsAccessSettingsOauthSettings(original["oauth_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauthSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["oauthSettings"] = transformedOauthSettings
	}

	transformedReauthSettings, err := expandIapSettingsAccessSettingsReauthSettings(original["reauth_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReauthSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["reauthSettings"] = transformedReauthSettings
	}

	transformedAllowedDomainsSettings, err := expandIapSettingsAccessSettingsAllowedDomainsSettings(original["allowed_domains_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedDomainsSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedDomainsSettings"] = transformedAllowedDomainsSettings
	}

	transformedWorkforceIdentitySettings, err := expandIapSettingsAccessSettingsWorkforceIdentitySettings(original["workforce_identity_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWorkforceIdentitySettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["workforceIdentitySettings"] = transformedWorkforceIdentitySettings
	}

	transformedIdentitySources, err := expandIapSettingsAccessSettingsIdentitySources(original["identity_sources"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIdentitySources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["identitySources"] = transformedIdentitySources
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsGcipSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTenantIds, err := expandIapSettingsAccessSettingsGcipSettingsTenantIds(original["tenant_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTenantIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tenantIds"] = transformedTenantIds
	}

	transformedLoginPageUri, err := expandIapSettingsAccessSettingsGcipSettingsLoginPageUri(original["login_page_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLoginPageUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["loginPageUri"] = transformedLoginPageUri
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsGcipSettingsTenantIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsGcipSettingsLoginPageUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsCorsSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowHttpOptions, err := expandIapSettingsAccessSettingsCorsSettingsAllowHttpOptions(original["allow_http_options"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowHttpOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowHttpOptions"] = transformedAllowHttpOptions
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsCorsSettingsAllowHttpOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsOauthSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLoginHint, err := expandIapSettingsAccessSettingsOauthSettingsLoginHint(original["login_hint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLoginHint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["loginHint"] = transformedLoginHint
	}

	transformedProgrammaticClients, err := expandIapSettingsAccessSettingsOauthSettingsProgrammaticClients(original["programmatic_clients"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProgrammaticClients); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["programmaticClients"] = transformedProgrammaticClients
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsOauthSettingsLoginHint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsOauthSettingsProgrammaticClients(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsReauthSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMethod, err := expandIapSettingsAccessSettingsReauthSettingsMethod(original["method"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMethod); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["method"] = transformedMethod
	}

	transformedMaxAge, err := expandIapSettingsAccessSettingsReauthSettingsMaxAge(original["max_age"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxAge); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxAge"] = transformedMaxAge
	}

	transformedPolicyType, err := expandIapSettingsAccessSettingsReauthSettingsPolicyType(original["policy_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPolicyType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["policyType"] = transformedPolicyType
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsReauthSettingsMethod(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsReauthSettingsMaxAge(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsReauthSettingsPolicyType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsAllowedDomainsSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDomains, err := expandIapSettingsAccessSettingsAllowedDomainsSettingsDomains(original["domains"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDomains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["domains"] = transformedDomains
	}

	transformedEnable, err := expandIapSettingsAccessSettingsAllowedDomainsSettingsEnable(original["enable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enable"] = transformedEnable
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsAllowedDomainsSettingsDomains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsAllowedDomainsSettingsEnable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsWorkforceIdentitySettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedWorkforcePools, err := expandIapSettingsAccessSettingsWorkforceIdentitySettingsWorkforcePools(original["workforce_pools"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWorkforcePools); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["workforcePools"] = transformedWorkforcePools
	}

	transformedOauth2, err := expandIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2(original["oauth2"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauth2); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["oauth2"] = transformedOauth2
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsWorkforceIdentitySettingsWorkforcePools(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedClientId, err := expandIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientId(original["client_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientId"] = transformedClientId
	}

	transformedClientSecret, err := expandIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientSecret(original["client_secret"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientSecret); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientSecret"] = transformedClientSecret
	}

	transformedClientSecretSha256, err := expandIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientSecretSha256(original["client_secret_sha256"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientSecretSha256); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientSecretSha256"] = transformedClientSecretSha256
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientSecret(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsWorkforceIdentitySettingsOauth2ClientSecretSha256(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsIdentitySources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCsmSettings, err := expandIapSettingsApplicationSettingsCsmSettings(original["csm_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCsmSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["csmSettings"] = transformedCsmSettings
	}

	transformedAccessDeniedPageSettings, err := expandIapSettingsApplicationSettingsAccessDeniedPageSettings(original["access_denied_page_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccessDeniedPageSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["accessDeniedPageSettings"] = transformedAccessDeniedPageSettings
	}

	transformedCookieDomain, err := expandIapSettingsApplicationSettingsCookieDomain(original["cookie_domain"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCookieDomain); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cookieDomain"] = transformedCookieDomain
	}

	transformedAttributePropagationSettings, err := expandIapSettingsApplicationSettingsAttributePropagationSettings(original["attribute_propagation_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAttributePropagationSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["attributePropagationSettings"] = transformedAttributePropagationSettings
	}

	return transformed, nil
}

func expandIapSettingsApplicationSettingsCsmSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRctokenAud, err := expandIapSettingsApplicationSettingsCsmSettingsRctokenAud(original["rctoken_aud"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRctokenAud); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rctokenAud"] = transformedRctokenAud
	}

	return transformed, nil
}

func expandIapSettingsApplicationSettingsCsmSettingsRctokenAud(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsAccessDeniedPageSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAccessDeniedPageUri, err := expandIapSettingsApplicationSettingsAccessDeniedPageSettingsAccessDeniedPageUri(original["access_denied_page_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccessDeniedPageUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["accessDeniedPageUri"] = transformedAccessDeniedPageUri
	}

	transformedGenerateTroubleshootingUri, err := expandIapSettingsApplicationSettingsAccessDeniedPageSettingsGenerateTroubleshootingUri(original["generate_troubleshooting_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGenerateTroubleshootingUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generateTroubleshootingUri"] = transformedGenerateTroubleshootingUri
	}

	transformedRemediationTokenGenerationEnabled, err := expandIapSettingsApplicationSettingsAccessDeniedPageSettingsRemediationTokenGenerationEnabled(original["remediation_token_generation_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRemediationTokenGenerationEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["remediationTokenGenerationEnabled"] = transformedRemediationTokenGenerationEnabled
	}

	return transformed, nil
}

func expandIapSettingsApplicationSettingsAccessDeniedPageSettingsAccessDeniedPageUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsAccessDeniedPageSettingsGenerateTroubleshootingUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsAccessDeniedPageSettingsRemediationTokenGenerationEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsCookieDomain(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsAttributePropagationSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOutputCredentials, err := expandIapSettingsApplicationSettingsAttributePropagationSettingsOutputCredentials(original["output_credentials"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOutputCredentials); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["outputCredentials"] = transformedOutputCredentials
	}

	transformedExpression, err := expandIapSettingsApplicationSettingsAttributePropagationSettingsExpression(original["expression"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["expression"] = transformedExpression
	}

	transformedEnable, err := expandIapSettingsApplicationSettingsAttributePropagationSettingsEnable(original["enable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enable"] = transformedEnable
	}

	return transformed, nil
}

func expandIapSettingsApplicationSettingsAttributePropagationSettingsOutputCredentials(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsAttributePropagationSettingsExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsAttributePropagationSettingsEnable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
