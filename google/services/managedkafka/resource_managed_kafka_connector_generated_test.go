// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package managedkafka_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccManagedKafkaConnector_managedkafkaConnectorBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		CheckDestroy: testAccCheckManagedKafkaConnectorDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccManagedKafkaConnector_managedkafkaConnectorBasicExample(context),
			},
			{
				ResourceName:            "google_managed_kafka_connector.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"connect_cluster", "connector_id", "location"},
			},
		},
	})
}

func testAccManagedKafkaConnector_managedkafkaConnectorBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_compute_subnetwork" "mkc_secondary_subnet" {
  project       = data.google_project.project.project_id
  name          = "tf-test-my-secondary-subnetwork-00%{random_suffix}"
  ip_cidr_range = "10.5.0.0/16"
  region        = "us-central1"
  network       = "default"
}

resource "google_pubsub_topic" "cps_topic" {
  project = data.google_project.project.project_id
  name    = "tf-test-my-cps-topic%{random_suffix}"
  message_retention_duration = "86600s"
}

resource "google_managed_kafka_cluster" "gmk_cluster" {
  cluster_id = "tf-test-my-cluster%{random_suffix}"
  location   = "us-central1"
  capacity_config {
    vcpu_count   = 3
    memory_bytes = 3221225472
  }
  gcp_config {
    access_config {
      network_configs {
        subnet = "projects/${data.google_project.project.number}/regions/us-central1/subnetworks/default"
      }
    }
  }
}

resource "google_managed_kafka_topic" "gmk_topic" {
  topic_id           = "tf-test-my-topic%{random_suffix}"
  cluster            = google_managed_kafka_cluster.gmk_cluster.cluster_id
  location           = "us-central1"
  partition_count    = 2
  replication_factor = 3
}

resource "google_managed_kafka_connect_cluster" "mkc_cluster" {
  connect_cluster_id = "tf-test-my-connect-cluster%{random_suffix}"
  kafka_cluster      = "projects/${data.google_project.project.project_id}/locations/us-central1/clusters/${google_managed_kafka_cluster.gmk_cluster.cluster_id}"
  location           = "us-central1"
  capacity_config {
    vcpu_count   = 12
    memory_bytes = 21474836480
  }
  gcp_config {
    access_config {
      network_configs {
        primary_subnet = "projects/${data.google_project.project.number}/regions/us-central1/subnetworks/default"
        additional_subnets = [
          google_compute_subnetwork.mkc_secondary_subnet.id
        ]
        dns_domain_names = [
          "${google_managed_kafka_cluster.gmk_cluster.cluster_id}.us-central1.managedkafka.${data.google_project.project.project_id}.cloud.goog"
        ]
      }
    }
  }
  labels = {
    key = "value"
  }
}

resource "google_managed_kafka_connector" "example" {
  connector_id    = "tf-test-my-connector%{random_suffix}"
  connect_cluster = google_managed_kafka_connect_cluster.mkc_cluster.connect_cluster_id
  location        = "us-central1"
  configs = {
    "connector.class" = "com.google.pubsub.kafka.sink.CloudPubSubSinkConnector"
    "name"            = "tf-test-my-connector%{random_suffix}"
    "tasks.max"       = "3"
    "topics"          = google_managed_kafka_topic.gmk_topic.topic_id
    "cps.topic"       = google_pubsub_topic.cps_topic.name
    "cps.project"     = data.google_project.project.project_id
    "value.converter" = "org.apache.kafka.connect.storage.StringConverter"
    "key.converter"   = "org.apache.kafka.connect.storage.StringConverter"
  }
  task_restart_policy {
    minimum_backoff = "60s"
    maximum_backoff = "1800s"
  }
}
`, context)
}

func testAccCheckManagedKafkaConnectorDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_managed_kafka_connector" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ManagedKafkaBasePath}}projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster}}/connectors/{{connector_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ManagedKafkaConnector still exists at %s", url)
			}
		}

		return nil
	}
}
