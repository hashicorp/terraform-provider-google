// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package securesourcemanager_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccSecureSourceManagerHook_secureSourceManagerHookBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"deletion_policy": "DELETE",
		"prevent_destroy": false,
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckSecureSourceManagerHookDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccSecureSourceManagerHook_secureSourceManagerHookBasicExample(context),
			},
			{
				ResourceName:            "google_secure_source_manager_hook.basic",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"deletion_policy", "hook_id", "location", "repository_id", "sensitive_query_string"},
			},
		},
	})
}

func testAccSecureSourceManagerHook_secureSourceManagerHookBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_secure_source_manager_instance" "instance" {
    location = "us-central1"
    instance_id = "tf-test-my-basic-instance%{random_suffix}"

    # Prevent accidental deletions.
    deletion_policy = "%{deletion_policy}"
}

resource "google_secure_source_manager_repository" "repository" {
    repository_id = "tf-test-my-basic-repository%{random_suffix}"
    location = google_secure_source_manager_instance.instance.location
    instance = google_secure_source_manager_instance.instance.name

    # Prevent accidental deletions.
    deletion_policy = "%{deletion_policy}"
}

resource "google_secure_source_manager_hook" "basic" {
    hook_id = "tf-test-my-basic-hook%{random_suffix}"
    repository_id = google_secure_source_manager_repository.repository.repository_id
    location = google_secure_source_manager_repository.repository.location
    target_uri = "https://www.example.com"
    # default event
    events = ["PUSH"]
}
`, context)
}

func TestAccSecureSourceManagerHook_secureSourceManagerHookWithFieldsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"deletion_policy": "DELETE",
		"prevent_destroy": false,
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckSecureSourceManagerHookDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccSecureSourceManagerHook_secureSourceManagerHookWithFieldsExample(context),
			},
			{
				ResourceName:            "google_secure_source_manager_hook.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"deletion_policy", "hook_id", "location", "repository_id", "sensitive_query_string"},
			},
		},
	})
}

func testAccSecureSourceManagerHook_secureSourceManagerHookWithFieldsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_secure_source_manager_instance" "instance" {
    location = "us-central1"
    instance_id = "tf-test-my-initial-instance%{random_suffix}"

    # Prevent accidental deletions.
    deletion_policy = "%{deletion_policy}"
}

resource "google_secure_source_manager_repository" "repository" {
    repository_id = "tf-test-my-initial-repository%{random_suffix}"
    instance = google_secure_source_manager_instance.instance.name
    location = google_secure_source_manager_instance.instance.location

    # Prevent accidental deletions.
    deletion_policy = "%{deletion_policy}"
}

resource "google_secure_source_manager_hook" "default" {
    hook_id = "tf-test-my-initial-hook%{random_suffix}"
    location = google_secure_source_manager_repository.repository.location
    repository_id = google_secure_source_manager_repository.repository.repository_id
    target_uri = "https://www.example.com"
    sensitive_query_string = "auth=fake_token"
    disabled = false
    push_option {
        branch_filter = "main"
    }
    events = ["PUSH", "PULL_REQUEST"]
}
`, context)
}

func testAccCheckSecureSourceManagerHookDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_secure_source_manager_hook" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{SecureSourceManagerBasePath}}projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("SecureSourceManagerHook still exists at %s", url)
			}
		}

		return nil
	}
}
