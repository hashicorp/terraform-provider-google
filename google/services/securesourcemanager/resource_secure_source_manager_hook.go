// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/securesourcemanager/Hook.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package securesourcemanager

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceSecureSourceManagerHook() *schema.Resource {
	return &schema.Resource{
		Create: resourceSecureSourceManagerHookCreate,
		Read:   resourceSecureSourceManagerHookRead,
		Update: resourceSecureSourceManagerHookUpdate,
		Delete: resourceSecureSourceManagerHookDelete,

		Importer: &schema.ResourceImporter{
			State: resourceSecureSourceManagerHookImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"hook_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The ID for the Hook.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The location for the Repository.`,
			},
			"repository_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The ID for the Repository.`,
			},
			"target_uri": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The target URI to which the payloads will be delivered.`,
			},
			"disabled": {
				Type:     schema.TypeBool,
				Optional: true,
				Description: `Determines if the hook disabled or not.
Set to true to stop sending traffic.`,
			},
			"events": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `The events that trigger hook on. Possible values: ["PUSH", "PULL_REQUEST"]`,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: verify.ValidateEnum([]string{"PUSH", "PULL_REQUEST"}),
				},
			},
			"push_option": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `The trigger option for push events.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"branch_filter": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Trigger hook for matching branches only.
Specified as glob pattern. If empty or *, events for all branches are
reported. Examples: main, {main,release*}.
See https://pkg.go.dev/github.com/gobwas/glob documentation.`,
						},
					},
				},
			},
			"sensitive_query_string": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The sensitive query string to be appended to the target URI.`,
				Sensitive:   true,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Create timestamp.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `A unique identifier for a Hook. The name should be of the format:
'projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}'`,
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Unique identifier of the hook.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Update timestamp.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceSecureSourceManagerHookCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	targetUriProp, err := expandSecureSourceManagerHookTargetUri(d.Get("target_uri"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("target_uri"); !tpgresource.IsEmptyValue(reflect.ValueOf(targetUriProp)) && (ok || !reflect.DeepEqual(v, targetUriProp)) {
		obj["targetUri"] = targetUriProp
	}
	disabledProp, err := expandSecureSourceManagerHookDisabled(d.Get("disabled"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("disabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(disabledProp)) && (ok || !reflect.DeepEqual(v, disabledProp)) {
		obj["disabled"] = disabledProp
	}
	eventsProp, err := expandSecureSourceManagerHookEvents(d.Get("events"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("events"); !tpgresource.IsEmptyValue(reflect.ValueOf(eventsProp)) && (ok || !reflect.DeepEqual(v, eventsProp)) {
		obj["events"] = eventsProp
	}
	sensitiveQueryStringProp, err := expandSecureSourceManagerHookSensitiveQueryString(d.Get("sensitive_query_string"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("sensitive_query_string"); !tpgresource.IsEmptyValue(reflect.ValueOf(sensitiveQueryStringProp)) && (ok || !reflect.DeepEqual(v, sensitiveQueryStringProp)) {
		obj["sensitiveQueryString"] = sensitiveQueryStringProp
	}
	pushOptionProp, err := expandSecureSourceManagerHookPushOption(d.Get("push_option"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("push_option"); ok || !reflect.DeepEqual(v, pushOptionProp) {
		obj["pushOption"] = pushOptionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{SecureSourceManagerBasePath}}projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks?hook_id={{hook_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Hook: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Hook: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Hook: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = SecureSourceManagerOperationWaitTime(
		config, res, project, "Creating Hook", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create Hook: %s", err)
	}

	log.Printf("[DEBUG] Finished creating Hook %q: %#v", d.Id(), res)

	return resourceSecureSourceManagerHookRead(d, meta)
}

func resourceSecureSourceManagerHookRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{SecureSourceManagerBasePath}}projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Hook: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("SecureSourceManagerHook %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Hook: %s", err)
	}

	if err := d.Set("name", flattenSecureSourceManagerHookName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Hook: %s", err)
	}
	if err := d.Set("target_uri", flattenSecureSourceManagerHookTargetUri(res["targetUri"], d, config)); err != nil {
		return fmt.Errorf("Error reading Hook: %s", err)
	}
	if err := d.Set("disabled", flattenSecureSourceManagerHookDisabled(res["disabled"], d, config)); err != nil {
		return fmt.Errorf("Error reading Hook: %s", err)
	}
	if err := d.Set("events", flattenSecureSourceManagerHookEvents(res["events"], d, config)); err != nil {
		return fmt.Errorf("Error reading Hook: %s", err)
	}
	if err := d.Set("create_time", flattenSecureSourceManagerHookCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Hook: %s", err)
	}
	if err := d.Set("update_time", flattenSecureSourceManagerHookUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Hook: %s", err)
	}
	if err := d.Set("uid", flattenSecureSourceManagerHookUid(res["uid"], d, config)); err != nil {
		return fmt.Errorf("Error reading Hook: %s", err)
	}
	if err := d.Set("push_option", flattenSecureSourceManagerHookPushOption(res["pushOption"], d, config)); err != nil {
		return fmt.Errorf("Error reading Hook: %s", err)
	}

	return nil
}

func resourceSecureSourceManagerHookUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Hook: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	targetUriProp, err := expandSecureSourceManagerHookTargetUri(d.Get("target_uri"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("target_uri"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, targetUriProp)) {
		obj["targetUri"] = targetUriProp
	}
	disabledProp, err := expandSecureSourceManagerHookDisabled(d.Get("disabled"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("disabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, disabledProp)) {
		obj["disabled"] = disabledProp
	}
	eventsProp, err := expandSecureSourceManagerHookEvents(d.Get("events"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("events"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, eventsProp)) {
		obj["events"] = eventsProp
	}
	sensitiveQueryStringProp, err := expandSecureSourceManagerHookSensitiveQueryString(d.Get("sensitive_query_string"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("sensitive_query_string"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, sensitiveQueryStringProp)) {
		obj["sensitiveQueryString"] = sensitiveQueryStringProp
	}
	pushOptionProp, err := expandSecureSourceManagerHookPushOption(d.Get("push_option"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("push_option"); ok || !reflect.DeepEqual(v, pushOptionProp) {
		obj["pushOption"] = pushOptionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{SecureSourceManagerBasePath}}projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Hook %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("target_uri") {
		updateMask = append(updateMask, "targetUri")
	}

	if d.HasChange("disabled") {
		updateMask = append(updateMask, "disabled")
	}

	if d.HasChange("events") {
		updateMask = append(updateMask, "events")
	}

	if d.HasChange("sensitive_query_string") {
		updateMask = append(updateMask, "sensitiveQueryString")
	}

	if d.HasChange("push_option") {
		updateMask = append(updateMask, "pushOption")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Hook %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Hook %q: %#v", d.Id(), res)
		}

	}

	return resourceSecureSourceManagerHookRead(d, meta)
}

func resourceSecureSourceManagerHookDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Hook: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{SecureSourceManagerBasePath}}projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting Hook %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Hook")
	}

	err = SecureSourceManagerOperationWaitTime(
		config, res, project, "Deleting Hook", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting Hook %q: %#v", d.Id(), res)
	return nil
}

func resourceSecureSourceManagerHookImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/repositories/(?P<repository_id>[^/]+)/hooks/(?P<hook_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<repository_id>[^/]+)/(?P<hook_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<repository_id>[^/]+)/(?P<hook_id>[^/]+)$",
		"^(?P<hook_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenSecureSourceManagerHookName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecureSourceManagerHookTargetUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecureSourceManagerHookDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecureSourceManagerHookEvents(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecureSourceManagerHookCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecureSourceManagerHookUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecureSourceManagerHookUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecureSourceManagerHookPushOption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["branch_filter"] =
		flattenSecureSourceManagerHookPushOptionBranchFilter(original["branchFilter"], d, config)
	return []interface{}{transformed}
}
func flattenSecureSourceManagerHookPushOptionBranchFilter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandSecureSourceManagerHookTargetUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSecureSourceManagerHookDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSecureSourceManagerHookEvents(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSecureSourceManagerHookSensitiveQueryString(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSecureSourceManagerHookPushOption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBranchFilter, err := expandSecureSourceManagerHookPushOptionBranchFilter(original["branch_filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBranchFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["branchFilter"] = transformedBranchFilter
	}

	return transformed, nil
}

func expandSecureSourceManagerHookPushOptionBranchFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
