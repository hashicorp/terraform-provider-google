// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apihub/Curation.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apihub

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceApihubCuration() *schema.Resource {
	return &schema.Resource{
		Create: resourceApihubCurationCreate,
		Read:   resourceApihubCurationRead,
		Update: resourceApihubCurationUpdate,
		Delete: resourceApihubCurationDelete,

		Importer: &schema.ResourceImporter{
			State: resourceApihubCurationImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"curation_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The ID to use for the curation resource, which will become the final
component of the curations's resource name. This field is optional.

* If provided, the same will be used. The service will throw an error if
the specified ID is already used by another curation resource in the API
hub.
* If not provided, a system generated ID will be used.

This value should be 4-500 characters, and valid characters
are /a-z[0-9]-_/.`,
			},
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The display name of the curation.`,
			},
			"endpoint": {
				Type:     schema.TypeList,
				Required: true,
				ForceNew: true,
				Description: `The endpoint to be triggered for curation.
The endpoint will be invoked with a request payload containing
ApiMetadata.
Response should contain curated data in the form of
ApiMetadata.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"application_integration_endpoint_details": {
							Type:     schema.TypeList,
							Required: true,
							ForceNew: true,
							Description: `The details of the Application Integration endpoint to be triggered for
curation.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"trigger_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `The API trigger ID of the Application Integration workflow.`,
									},
									"uri": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `The endpoint URI should be a valid REST URI for triggering an Application
Integration.
Format:
'https://integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute'
or
'https://{location}-integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute'`,
									},
								},
							},
						},
					},
				},
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The description of the curation.`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The time at which the curation was created.`,
			},
			"last_execution_error_code": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The error code of the last execution of the curation. The error code is
populated only when the last execution state is failed.
Possible values:
ERROR_CODE_UNSPECIFIED
INTERNAL_ERROR
UNAUTHORIZED`,
			},
			"last_execution_error_message": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Error message describing the failure, if any, during the last execution of
the curation.`,
			},
			"last_execution_state": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The last execution state of the curation.
Possible values:
LAST_EXECUTION_STATE_UNSPECIFIED
SUCCEEDED
FAILED`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The name of the curation.

Format:
'projects/{project}/locations/{location}/curations/{curation}'`,
			},
			"plugin_instance_actions": {
				Type:     schema.TypeList,
				Computed: true,
				Description: `The plugin instances and associated actions that are using the curation.
Note: A particular curation could be used by multiple plugin instances or
multiple actions in a plugin instance.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"action_id": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The action ID that is using the curation.
This should map to one of the action IDs specified
in action configs in the plugin.`,
						},
						"plugin_instance": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `Plugin instance that is using the curation.
Format is
'projects/{project}/locations/{locati on}/plugins/{plugin}/instances/{instance}'`,
						},
					},
				},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The time at which the curation was last updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceApihubCurationCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandApihubCurationDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	endpointProp, err := expandApihubCurationEndpoint(d.Get("endpoint"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("endpoint"); !tpgresource.IsEmptyValue(reflect.ValueOf(endpointProp)) && (ok || !reflect.DeepEqual(v, endpointProp)) {
		obj["endpoint"] = endpointProp
	}
	descriptionProp, err := expandApihubCurationDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/curations?curationId={{curation_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Curation: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Curation: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Curation: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/curations/{{curation_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Curation %q: %#v", d.Id(), res)

	return resourceApihubCurationRead(d, meta)
}

func resourceApihubCurationRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/curations/{{curation_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Curation: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ApihubCuration %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}

	if err := d.Set("name", flattenApihubCurationName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}
	if err := d.Set("display_name", flattenApihubCurationDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}
	if err := d.Set("endpoint", flattenApihubCurationEndpoint(res["endpoint"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}
	if err := d.Set("last_execution_state", flattenApihubCurationLastExecutionState(res["lastExecutionState"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}
	if err := d.Set("last_execution_error_message", flattenApihubCurationLastExecutionErrorMessage(res["lastExecutionErrorMessage"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}
	if err := d.Set("description", flattenApihubCurationDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}
	if err := d.Set("plugin_instance_actions", flattenApihubCurationPluginInstanceActions(res["pluginInstanceActions"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}
	if err := d.Set("last_execution_error_code", flattenApihubCurationLastExecutionErrorCode(res["lastExecutionErrorCode"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}
	if err := d.Set("create_time", flattenApihubCurationCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}
	if err := d.Set("update_time", flattenApihubCurationUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Curation: %s", err)
	}

	return nil
}

func resourceApihubCurationUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Curation: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandApihubCurationDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandApihubCurationDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/curations/{{curation_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Curation %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Curation %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Curation %q: %#v", d.Id(), res)
		}

	}

	return resourceApihubCurationRead(d, meta)
}

func resourceApihubCurationDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Curation: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/curations/{{curation_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting Curation %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Curation")
	}

	log.Printf("[DEBUG] Finished deleting Curation %q: %#v", d.Id(), res)
	return nil
}

func resourceApihubCurationImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/curations/(?P<curation_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<curation_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<curation_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/curations/{{curation_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenApihubCurationName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["application_integration_endpoint_details"] =
		flattenApihubCurationEndpointApplicationIntegrationEndpointDetails(original["applicationIntegrationEndpointDetails"], d, config)
	return []interface{}{transformed}
}
func flattenApihubCurationEndpointApplicationIntegrationEndpointDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["trigger_id"] =
		flattenApihubCurationEndpointApplicationIntegrationEndpointDetailsTriggerId(original["triggerId"], d, config)
	transformed["uri"] =
		flattenApihubCurationEndpointApplicationIntegrationEndpointDetailsUri(original["uri"], d, config)
	return []interface{}{transformed}
}
func flattenApihubCurationEndpointApplicationIntegrationEndpointDetailsTriggerId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationEndpointApplicationIntegrationEndpointDetailsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationLastExecutionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationLastExecutionErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationPluginInstanceActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"plugin_instance": flattenApihubCurationPluginInstanceActionsPluginInstance(original["pluginInstance"], d, config),
			"action_id":       flattenApihubCurationPluginInstanceActionsActionId(original["actionId"], d, config),
		})
	}
	return transformed
}
func flattenApihubCurationPluginInstanceActionsPluginInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationPluginInstanceActionsActionId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationLastExecutionErrorCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubCurationUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandApihubCurationDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubCurationEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedApplicationIntegrationEndpointDetails, err := expandApihubCurationEndpointApplicationIntegrationEndpointDetails(original["application_integration_endpoint_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApplicationIntegrationEndpointDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["applicationIntegrationEndpointDetails"] = transformedApplicationIntegrationEndpointDetails
	}

	return transformed, nil
}

func expandApihubCurationEndpointApplicationIntegrationEndpointDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTriggerId, err := expandApihubCurationEndpointApplicationIntegrationEndpointDetailsTriggerId(original["trigger_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTriggerId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["triggerId"] = transformedTriggerId
	}

	transformedUri, err := expandApihubCurationEndpointApplicationIntegrationEndpointDetailsUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	return transformed, nil
}

func expandApihubCurationEndpointApplicationIntegrationEndpointDetailsTriggerId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubCurationEndpointApplicationIntegrationEndpointDetailsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubCurationDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
