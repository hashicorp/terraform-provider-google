// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apihub/Plugin.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apihub

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceApihubPlugin() *schema.Resource {
	return &schema.Resource{
		Create: resourceApihubPluginCreate,
		Read:   resourceApihubPluginRead,
		Delete: resourceApihubPluginDelete,

		Importer: &schema.ResourceImporter{
			State: resourceApihubPluginImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"display_name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The display name of the plugin. Max length is 50 characters (Unicode code
points).`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"plugin_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The ID to use for the Plugin resource, which will become the final
component of the Plugin's resource name. This field is optional.

* If provided, the same will be used. The service will throw an error if
the specified id is already used by another Plugin resource in the API hub
instance.
* If not provided, a system generated id will be used.

This value should be 4-63 characters, overall resource name which will be
of format
'projects/{project}/locations/{location}/plugins/{plugin}',
its length is limited to 1000 characters and valid characters are
/a-z[0-9]-_/.`,
			},
			"actions_config": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `The configuration of actions supported by the plugin.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"description": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The description of the operation performed by the action.`,
						},
						"display_name": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The display name of the action.`,
						},
						"id": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The id of the action.`,
						},
						"trigger_mode": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `The trigger mode supported by the action.
Possible values:
TRIGGER_MODE_UNSPECIFIED
API_HUB_ON_DEMAND_TRIGGER
API_HUB_SCHEDULE_TRIGGER
NON_API_HUB_MANAGED`,
						},
					},
				},
			},
			"config_template": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `ConfigTemplate represents the configuration template for a plugin.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"additional_config_template": {
							Type:     schema.TypeList,
							Optional: true,
							ForceNew: true,
							Description: `The list of additional configuration variables for the plugin's
configuration.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `ID of the config variable. Must be unique within the configuration.`,
									},
									"value_type": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `Type of the parameter: string, int, bool etc.
Possible values:
VALUE_TYPE_UNSPECIFIED
STRING
INT
BOOL
SECRET
ENUM
MULTI_SELECT
MULTI_STRING
MULTI_INT`,
									},
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										ForceNew:    true,
										Description: `Description.`,
									},
									"enum_options": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Enum options. To be populated if 'ValueType' is 'ENUM'.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"display_name": {
													Type:        schema.TypeString,
													Required:    true,
													ForceNew:    true,
													Description: `Display name of the option.`,
												},
												"id": {
													Type:        schema.TypeString,
													Required:    true,
													ForceNew:    true,
													Description: `Id of the option.`,
												},
												"description": {
													Type:        schema.TypeString,
													Optional:    true,
													ForceNew:    true,
													Description: `Description of the option.`,
												},
											},
										},
									},
									"multi_select_options": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Multi select options. To be populated if 'ValueType' is 'MULTI_SELECT'.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"display_name": {
													Type:        schema.TypeString,
													Required:    true,
													ForceNew:    true,
													Description: `Display name of the option.`,
												},
												"id": {
													Type:        schema.TypeString,
													Required:    true,
													ForceNew:    true,
													Description: `Id of the option.`,
												},
												"description": {
													Type:        schema.TypeString,
													Optional:    true,
													ForceNew:    true,
													Description: `Description of the option.`,
												},
											},
										},
									},
									"required": {
										Type:     schema.TypeBool,
										Optional: true,
										ForceNew: true,
										Description: `Flag represents that this 'ConfigVariable' must be provided for a
PluginInstance.`,
									},
									"validation_regex": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `Regular expression in RE2 syntax used for validating the 'value' of a
'ConfigVariable'.`,
									},
								},
							},
						},
						"auth_config_template": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `AuthConfigTemplate represents the authentication template for a plugin.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"supported_auth_types": {
										Type:        schema.TypeList,
										Required:    true,
										ForceNew:    true,
										Description: `The list of authentication types supported by the plugin.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"service_account": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Config for Google service account authentication.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"service_account": {
													Type:     schema.TypeString,
													Required: true,
													ForceNew: true,
													Description: `The service account to be used for authenticating request.

The 'iam.serviceAccounts.getAccessToken' permission should be granted on
this service account to the impersonator service account.`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `The plugin description. Max length is 2000 characters (Unicode code
points).`,
			},
			"documentation": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `Documentation details.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"external_uri": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `The uri of the externally hosted documentation.`,
						},
					},
				},
			},
			"hosting_service": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Description: `The information related to the service implemented by the plugin
developer, used to invoke the plugin's functionality.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"service_uri": {
							Type:     schema.TypeString,
							Optional: true,
							ForceNew: true,
							Description: `The URI of the service implemented by the plugin developer, used to
invoke the plugin's functionality. This information is only required for
user defined plugins.`,
						},
					},
				},
			},
			"plugin_category": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `Possible values:
PLUGIN_CATEGORY_UNSPECIFIED
API_GATEWAY
API_PRODUCER`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Timestamp indicating when the plugin was created.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The name of the plugin.
Format: 'projects/{project}/locations/{location}/plugins/{plugin}'`,
			},
			"ownership_type": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The type of the plugin, indicating whether it is 'SYSTEM_OWNED' or
'USER_OWNED'.
Possible values:
OWNERSHIP_TYPE_UNSPECIFIED
SYSTEM_OWNED
USER_OWNED`,
			},
			"state": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Represents the state of the plugin.
Note this field will not be set for plugins developed via plugin
framework as the state will be managed at plugin instance level.
Possible values:
STATE_UNSPECIFIED
ENABLED
DISABLED`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Timestamp indicating when the plugin was last updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceApihubPluginCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandApihubPluginDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	actionsConfigProp, err := expandApihubPluginActionsConfig(d.Get("actions_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("actions_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(actionsConfigProp)) && (ok || !reflect.DeepEqual(v, actionsConfigProp)) {
		obj["actionsConfig"] = actionsConfigProp
	}
	documentationProp, err := expandApihubPluginDocumentation(d.Get("documentation"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("documentation"); !tpgresource.IsEmptyValue(reflect.ValueOf(documentationProp)) && (ok || !reflect.DeepEqual(v, documentationProp)) {
		obj["documentation"] = documentationProp
	}
	pluginCategoryProp, err := expandApihubPluginPluginCategory(d.Get("plugin_category"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("plugin_category"); !tpgresource.IsEmptyValue(reflect.ValueOf(pluginCategoryProp)) && (ok || !reflect.DeepEqual(v, pluginCategoryProp)) {
		obj["pluginCategory"] = pluginCategoryProp
	}
	configTemplateProp, err := expandApihubPluginConfigTemplate(d.Get("config_template"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("config_template"); !tpgresource.IsEmptyValue(reflect.ValueOf(configTemplateProp)) && (ok || !reflect.DeepEqual(v, configTemplateProp)) {
		obj["configTemplate"] = configTemplateProp
	}
	displayNameProp, err := expandApihubPluginDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	hostingServiceProp, err := expandApihubPluginHostingService(d.Get("hosting_service"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("hosting_service"); !tpgresource.IsEmptyValue(reflect.ValueOf(hostingServiceProp)) && (ok || !reflect.DeepEqual(v, hostingServiceProp)) {
		obj["hostingService"] = hostingServiceProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/plugins?pluginId={{plugin_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Plugin: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Plugin: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Plugin: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Plugin %q: %#v", d.Id(), res)

	return resourceApihubPluginRead(d, meta)
}

func resourceApihubPluginRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Plugin: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ApihubPlugin %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}

	if err := d.Set("description", flattenApihubPluginDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("state", flattenApihubPluginState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("ownership_type", flattenApihubPluginOwnershipType(res["ownershipType"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("actions_config", flattenApihubPluginActionsConfig(res["actionsConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("documentation", flattenApihubPluginDocumentation(res["documentation"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("plugin_category", flattenApihubPluginPluginCategory(res["pluginCategory"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("config_template", flattenApihubPluginConfigTemplate(res["configTemplate"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("name", flattenApihubPluginName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("display_name", flattenApihubPluginDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("hosting_service", flattenApihubPluginHostingService(res["hostingService"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("create_time", flattenApihubPluginCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}
	if err := d.Set("update_time", flattenApihubPluginUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Plugin: %s", err)
	}

	return nil
}

func resourceApihubPluginDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Plugin: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting Plugin %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Plugin")
	}

	log.Printf("[DEBUG] Finished deleting Plugin %q: %#v", d.Id(), res)
	return nil
}

func resourceApihubPluginImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/plugins/(?P<plugin_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<plugin_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<plugin_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenApihubPluginDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginOwnershipType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginActionsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"id":           flattenApihubPluginActionsConfigId(original["id"], d, config),
			"display_name": flattenApihubPluginActionsConfigDisplayName(original["displayName"], d, config),
			"description":  flattenApihubPluginActionsConfigDescription(original["description"], d, config),
			"trigger_mode": flattenApihubPluginActionsConfigTriggerMode(original["triggerMode"], d, config),
		})
	}
	return transformed
}
func flattenApihubPluginActionsConfigId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginActionsConfigDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginActionsConfigDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginActionsConfigTriggerMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginDocumentation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["external_uri"] =
		flattenApihubPluginDocumentationExternalUri(original["externalUri"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginDocumentationExternalUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginPluginCategory(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["auth_config_template"] =
		flattenApihubPluginConfigTemplateAuthConfigTemplate(original["authConfigTemplate"], d, config)
	transformed["additional_config_template"] =
		flattenApihubPluginConfigTemplateAdditionalConfigTemplate(original["additionalConfigTemplate"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginConfigTemplateAuthConfigTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["supported_auth_types"] =
		flattenApihubPluginConfigTemplateAuthConfigTemplateSupportedAuthTypes(original["supportedAuthTypes"], d, config)
	transformed["service_account"] =
		flattenApihubPluginConfigTemplateAuthConfigTemplateServiceAccount(original["serviceAccount"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginConfigTemplateAuthConfigTemplateSupportedAuthTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAuthConfigTemplateServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service_account"] =
		flattenApihubPluginConfigTemplateAuthConfigTemplateServiceAccountServiceAccount(original["serviceAccount"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginConfigTemplateAuthConfigTemplateServiceAccountServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"required":             flattenApihubPluginConfigTemplateAdditionalConfigTemplateRequired(original["required"], d, config),
			"enum_options":         flattenApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptions(original["enumOptions"], d, config),
			"multi_select_options": flattenApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptions(original["multiSelectOptions"], d, config),
			"id":                   flattenApihubPluginConfigTemplateAdditionalConfigTemplateId(original["id"], d, config),
			"value_type":           flattenApihubPluginConfigTemplateAdditionalConfigTemplateValueType(original["valueType"], d, config),
			"description":          flattenApihubPluginConfigTemplateAdditionalConfigTemplateDescription(original["description"], d, config),
			"validation_regex":     flattenApihubPluginConfigTemplateAdditionalConfigTemplateValidationRegex(original["validationRegex"], d, config),
		})
	}
	return transformed
}
func flattenApihubPluginConfigTemplateAdditionalConfigTemplateRequired(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"id":           flattenApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsId(original["id"], d, config),
			"display_name": flattenApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDisplayName(original["displayName"], d, config),
			"description":  flattenApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDescription(original["description"], d, config),
		})
	}
	return transformed
}
func flattenApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"id":           flattenApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsId(original["id"], d, config),
			"display_name": flattenApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDisplayName(original["displayName"], d, config),
			"description":  flattenApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDescription(original["description"], d, config),
		})
	}
	return transformed
}
func flattenApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateValueType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginConfigTemplateAdditionalConfigTemplateValidationRegex(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginHostingService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service_uri"] =
		flattenApihubPluginHostingServiceServiceUri(original["serviceUri"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginHostingServiceServiceUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandApihubPluginDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginActionsConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedId, err := expandApihubPluginActionsConfigId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedDisplayName, err := expandApihubPluginActionsConfigDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedDescription, err := expandApihubPluginActionsConfigDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedTriggerMode, err := expandApihubPluginActionsConfigTriggerMode(original["trigger_mode"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTriggerMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["triggerMode"] = transformedTriggerMode
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginActionsConfigId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginActionsConfigDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginActionsConfigDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginActionsConfigTriggerMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginDocumentation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExternalUri, err := expandApihubPluginDocumentationExternalUri(original["external_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExternalUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["externalUri"] = transformedExternalUri
	}

	return transformed, nil
}

func expandApihubPluginDocumentationExternalUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginPluginCategory(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAuthConfigTemplate, err := expandApihubPluginConfigTemplateAuthConfigTemplate(original["auth_config_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthConfigTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authConfigTemplate"] = transformedAuthConfigTemplate
	}

	transformedAdditionalConfigTemplate, err := expandApihubPluginConfigTemplateAdditionalConfigTemplate(original["additional_config_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalConfigTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalConfigTemplate"] = transformedAdditionalConfigTemplate
	}

	return transformed, nil
}

func expandApihubPluginConfigTemplateAuthConfigTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSupportedAuthTypes, err := expandApihubPluginConfigTemplateAuthConfigTemplateSupportedAuthTypes(original["supported_auth_types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSupportedAuthTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["supportedAuthTypes"] = transformedSupportedAuthTypes
	}

	transformedServiceAccount, err := expandApihubPluginConfigTemplateAuthConfigTemplateServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	return transformed, nil
}

func expandApihubPluginConfigTemplateAuthConfigTemplateSupportedAuthTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAuthConfigTemplateServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceAccount, err := expandApihubPluginConfigTemplateAuthConfigTemplateServiceAccountServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	return transformed, nil
}

func expandApihubPluginConfigTemplateAuthConfigTemplateServiceAccountServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedRequired, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateRequired(original["required"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRequired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["required"] = transformedRequired
		}

		transformedEnumOptions, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptions(original["enum_options"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnumOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enumOptions"] = transformedEnumOptions
		}

		transformedMultiSelectOptions, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptions(original["multi_select_options"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMultiSelectOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["multiSelectOptions"] = transformedMultiSelectOptions
		}

		transformedId, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedValueType, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateValueType(original["value_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValueType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["valueType"] = transformedValueType
		}

		transformedDescription, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedValidationRegex, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateValidationRegex(original["validation_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValidationRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["validationRegex"] = transformedValidationRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedId, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedDisplayName, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedDescription, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedId, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedDisplayName, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedDescription, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateValueType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateValidationRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginHostingService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceUri, err := expandApihubPluginHostingServiceServiceUri(original["service_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceUri"] = transformedServiceUri
	}

	return transformed, nil
}

func expandApihubPluginHostingServiceServiceUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
