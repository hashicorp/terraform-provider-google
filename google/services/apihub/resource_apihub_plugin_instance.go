// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apihub/PluginInstance.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apihub

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceApihubPluginInstance() *schema.Resource {
	return &schema.Resource{
		Create: resourceApihubPluginInstanceCreate,
		Read:   resourceApihubPluginInstanceRead,
		Update: resourceApihubPluginInstanceUpdate,
		Delete: resourceApihubPluginInstanceDelete,

		Importer: &schema.ResourceImporter{
			State: resourceApihubPluginInstanceImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"actions": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `The action status for the plugin instance.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"action_id": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `This should map to one of the action id specified
in actions_config in the plugin.`,
						},
						"curation_config": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The curation information for this plugin instance.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"curation_type": {
										Type:     schema.TypeString,
										Computed: true,
										Optional: true,
										ForceNew: true,
										Description: `Possible values:
CURATION_TYPE_UNSPECIFIED
DEFAULT_CURATION_FOR_API_METADATA
CUSTOM_CURATION_FOR_API_METADATA`,
									},
									"custom_curation": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Custom curation information for this plugin instance.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"curation": {
													Type:     schema.TypeString,
													Required: true,
													ForceNew: true,
													Description: `The unique name of the curation resource. This will be the name of the
curation resource in the format:
'projects/{project}/locations/{location}/curations/{curation}'`,
												},
											},
										},
									},
								},
							},
						},
						"schedule_cron_expression": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `The schedule for this plugin instance action. This can only be set if the
plugin supports API_HUB_SCHEDULE_TRIGGER mode for this action.`,
						},
						"schedule_time_zone": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `The time zone for the schedule cron expression. If not provided, UTC will
be used.`,
						},
						"hub_instance_action": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The execution status for the plugin instance.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"current_execution_state": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The current state of the execution.
Possible values:
CURRENT_EXECUTION_STATE_UNSPECIFIED
RUNNING
NOT_RUNNING`,
									},
									"last_execution": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The result of the last execution of the plugin instance.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"end_time": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `The last execution end time of the plugin instance.`,
												},
												"error_message": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `Error message describing the failure, if any, during the last
execution.`,
												},
												"result": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The result of the last execution of the plugin instance.
Possible values:
RESULT_UNSPECIFIED
SUCCEEDED
FAILED`,
												},
												"start_time": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `The last execution start time of the plugin instance.`,
												},
											},
										},
									},
								},
							},
						},
						"state": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The current state of the plugin action in the plugin instance.
Possible values:
STATE_UNSPECIFIED
ENABLED
DISABLED
ENABLING
DISABLING
ERROR`,
						},
					},
				},
			},
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The display name for this plugin instance. Max length is 255 characters.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"plugin": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"plugin_instance_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The ID to use for the plugin instance, which will become the final
component of the plugin instance's resource name. This field is optional.

* If provided, the same will be used. The service will throw an error if
the specified id is already used by another plugin instance in the plugin
resource.
* If not provided, a system generated id will be used.

This value should be 4-63 characters, and valid characters
are /a-z[0-9]-_/.`,
			},
			"auth_config": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `AuthConfig represents the authentication information.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"auth_type": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `Possible values:
AUTH_TYPE_UNSPECIFIED
NO_AUTH
GOOGLE_SERVICE_ACCOUNT
USER_PASSWORD
API_KEY
OAUTH2_CLIENT_CREDENTIALS`,
						},
						"api_key_config": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Config for authentication with API key.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"api_key": {
										Type:        schema.TypeList,
										Required:    true,
										ForceNew:    true,
										Description: `Secret provides a reference to entries in Secret Manager.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"secret_version": {
													Type:     schema.TypeString,
													Required: true,
													ForceNew: true,
													Description: `The resource name of the secret version in the format,
format as: 'projects/*/secrets/*/versions/*'.`,
												},
											},
										},
									},
									"http_element_location": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `The location of the API key.
The default value is QUERY.
Possible values:
HTTP_ELEMENT_LOCATION_UNSPECIFIED
QUERY
HEADER
PATH
BODY
COOKIE`,
									},
									"name": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `The parameter name of the API key.
E.g. If the API request is "https://example.com/act?api_key=",
"api_key" would be the parameter name.`,
									},
								},
							},
						},
						"google_service_account_config": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Config for Google service account authentication.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"service_account": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `The service account to be used for authenticating request.

The 'iam.serviceAccounts.getAccessToken' permission should be granted on
this service account to the impersonator service account.`,
									},
								},
							},
						},
						"oauth2_client_credentials_config": {
							Type:     schema.TypeList,
							Optional: true,
							ForceNew: true,
							Description: `Parameters to support Oauth 2.0 client credentials grant authentication.
See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"client_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `The client identifier.`,
									},
									"client_secret": {
										Type:        schema.TypeList,
										Required:    true,
										ForceNew:    true,
										Description: `Secret provides a reference to entries in Secret Manager.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"secret_version": {
													Type:     schema.TypeString,
													Required: true,
													ForceNew: true,
													Description: `The resource name of the secret version in the format,
format as: 'projects/*/secrets/*/versions/*'.`,
												},
											},
										},
									},
								},
							},
						},
						"user_password_config": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Parameters to support Username and Password Authentication.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"password": {
										Type:        schema.TypeList,
										Required:    true,
										ForceNew:    true,
										Description: `Secret provides a reference to entries in Secret Manager.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"secret_version": {
													Type:     schema.TypeString,
													Required: true,
													ForceNew: true,
													Description: `The resource name of the secret version in the format,
format as: 'projects/*/secrets/*/versions/*'.`,
												},
											},
										},
									},
									"username": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `Username.`,
									},
								},
							},
						},
					},
				},
			},
			"disable": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `The display name for this plugin instance. Max length is 255 characters.`,
				Default:     false,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Timestamp indicating when the plugin instance was created.`,
			},
			"error_message": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Error message describing the failure, if any, during Create, Delete or
ApplyConfig operation corresponding to the plugin instance.This field will
only be populated if the plugin instance is in the ERROR or FAILED state.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The unique name of the plugin instance resource.
Format:
'projects/{project}/locations/{location}/plugins/{plugin}/instances/{instance}'`,
			},
			"state": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The current state of the plugin instance (e.g., enabled, disabled,
provisioning).
Possible values:
STATE_UNSPECIFIED
CREATING
ACTIVE
APPLYING_CONFIG
ERROR
FAILED
DELETING`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Timestamp indicating when the plugin instance was last updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceApihubPluginInstanceCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	disableProp, err := expandApihubPluginInstanceDisable(d.Get("disable"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("disable"); !tpgresource.IsEmptyValue(reflect.ValueOf(disableProp)) && (ok || !reflect.DeepEqual(v, disableProp)) {
		obj["disable"] = disableProp
	}
	authConfigProp, err := expandApihubPluginInstanceAuthConfig(d.Get("auth_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("auth_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(authConfigProp)) && (ok || !reflect.DeepEqual(v, authConfigProp)) {
		obj["authConfig"] = authConfigProp
	}
	displayNameProp, err := expandApihubPluginInstanceDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	actionsProp, err := expandApihubPluginInstanceActions(d.Get("actions"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("actions"); !tpgresource.IsEmptyValue(reflect.ValueOf(actionsProp)) && (ok || !reflect.DeepEqual(v, actionsProp)) {
		obj["actions"] = actionsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/plugins/{{plugin}}/instances?pluginInstanceId={{plugin_instance_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new PluginInstance: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for PluginInstance: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating PluginInstance: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/plugins/{{plugin}}/instances/{{plugin_instance_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ApihubOperationWaitTime(
		config, res, project, "Creating PluginInstance", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create PluginInstance: %s", err)
	}

	log.Printf("[DEBUG] Finished creating PluginInstance %q: %#v", d.Id(), res)

	return resourceApihubPluginInstanceRead(d, meta)
}

func resourceApihubPluginInstanceRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/plugins/{{plugin}}/instances/{{plugin_instance_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for PluginInstance: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ApihubPluginInstance %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}

	if err := d.Set("name", flattenApihubPluginInstanceName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}
	if err := d.Set("disable", flattenApihubPluginInstanceDisable(res["disable"], d, config)); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}
	if err := d.Set("auth_config", flattenApihubPluginInstanceAuthConfig(res["authConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}
	if err := d.Set("state", flattenApihubPluginInstanceState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}
	if err := d.Set("create_time", flattenApihubPluginInstanceCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}
	if err := d.Set("update_time", flattenApihubPluginInstanceUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}
	if err := d.Set("display_name", flattenApihubPluginInstanceDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}
	if err := d.Set("error_message", flattenApihubPluginInstanceErrorMessage(res["errorMessage"], d, config)); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}
	if err := d.Set("actions", flattenApihubPluginInstanceActions(res["actions"], d, config)); err != nil {
		return fmt.Errorf("Error reading PluginInstance: %s", err)
	}

	return nil
}

func resourceApihubPluginInstanceUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for PluginInstance: %s", err)
	}
	billingProject = project

	d.Partial(true)

	if d.HasChange("disable") {
		obj := make(map[string]interface{})

		disableProp, err := expandApihubPluginInstanceDisable(d.Get("disable"), d, config)
		if err != nil {
			return err
		} else if v, ok := d.GetOkExists("disable"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, disableProp)) {
			obj["disable"] = disableProp
		}

		url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/plugins/{{plugin}}/instances/{{plugin_instance_id}}:enableAction")
		if err != nil {
			return err
		}

		headers := make(http.Header)

		// err == nil indicates that the billing_project value was found
		if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
			billingProject = bp
		}

		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PUT",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})
		if err != nil {
			return fmt.Errorf("Error updating PluginInstance %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating PluginInstance %q: %#v", d.Id(), res)
		}

		err = ApihubOperationWaitTime(
			config, res, project, "Updating PluginInstance", userAgent,
			d.Timeout(schema.TimeoutUpdate))
		if err != nil {
			return err
		}
	}

	d.Partial(false)

	return resourceApihubPluginInstanceRead(d, meta)
}

func resourceApihubPluginInstanceDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for PluginInstance: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ApihubBasePath}}projects/{{project}}/locations/{{location}}/plugins/{{plugin}}/instances/{{plugin_instance_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting PluginInstance %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "PluginInstance")
	}

	err = ApihubOperationWaitTime(
		config, res, project, "Deleting PluginInstance", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting PluginInstance %q: %#v", d.Id(), res)
	return nil
}

func resourceApihubPluginInstanceImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/plugins/(?P<plugin>[^/]+)/instances/(?P<plugin_instance_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<plugin>[^/]+)/(?P<plugin_instance_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<plugin>[^/]+)/(?P<plugin_instance_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/plugins/{{plugin}}/instances/{{plugin_instance_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenApihubPluginInstanceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceDisable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceAuthConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["google_service_account_config"] =
		flattenApihubPluginInstanceAuthConfigGoogleServiceAccountConfig(original["googleServiceAccountConfig"], d, config)
	transformed["user_password_config"] =
		flattenApihubPluginInstanceAuthConfigUserPasswordConfig(original["userPasswordConfig"], d, config)
	transformed["api_key_config"] =
		flattenApihubPluginInstanceAuthConfigApiKeyConfig(original["apiKeyConfig"], d, config)
	transformed["oauth2_client_credentials_config"] =
		flattenApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfig(original["oauth2ClientCredentialsConfig"], d, config)
	transformed["auth_type"] =
		flattenApihubPluginInstanceAuthConfigAuthType(original["authType"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceAuthConfigGoogleServiceAccountConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service_account"] =
		flattenApihubPluginInstanceAuthConfigGoogleServiceAccountConfigServiceAccount(original["serviceAccount"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceAuthConfigGoogleServiceAccountConfigServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceAuthConfigUserPasswordConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["username"] =
		flattenApihubPluginInstanceAuthConfigUserPasswordConfigUsername(original["username"], d, config)
	transformed["password"] =
		flattenApihubPluginInstanceAuthConfigUserPasswordConfigPassword(original["password"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceAuthConfigUserPasswordConfigUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceAuthConfigUserPasswordConfigPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret_version"] =
		flattenApihubPluginInstanceAuthConfigUserPasswordConfigPasswordSecretVersion(original["secretVersion"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceAuthConfigUserPasswordConfigPasswordSecretVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceAuthConfigApiKeyConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenApihubPluginInstanceAuthConfigApiKeyConfigName(original["name"], d, config)
	transformed["api_key"] =
		flattenApihubPluginInstanceAuthConfigApiKeyConfigApiKey(original["apiKey"], d, config)
	transformed["http_element_location"] =
		flattenApihubPluginInstanceAuthConfigApiKeyConfigHttpElementLocation(original["httpElementLocation"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceAuthConfigApiKeyConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceAuthConfigApiKeyConfigApiKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret_version"] =
		flattenApihubPluginInstanceAuthConfigApiKeyConfigApiKeySecretVersion(original["secretVersion"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceAuthConfigApiKeyConfigApiKeySecretVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceAuthConfigApiKeyConfigHttpElementLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["client_secret"] =
		flattenApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecret(original["clientSecret"], d, config)
	transformed["client_id"] =
		flattenApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientId(original["clientId"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret_version"] =
		flattenApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecretSecretVersion(original["secretVersion"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecretSecretVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceAuthConfigAuthType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"hub_instance_action":      flattenApihubPluginInstanceActionsHubInstanceAction(original["hubInstanceAction"], d, config),
			"action_id":                flattenApihubPluginInstanceActionsActionId(original["actionId"], d, config),
			"state":                    flattenApihubPluginInstanceActionsState(original["state"], d, config),
			"schedule_cron_expression": flattenApihubPluginInstanceActionsScheduleCronExpression(original["scheduleCronExpression"], d, config),
			"curation_config":          flattenApihubPluginInstanceActionsCurationConfig(original["curationConfig"], d, config),
			"schedule_time_zone":       flattenApihubPluginInstanceActionsScheduleTimeZone(original["scheduleTimeZone"], d, config),
		})
	}
	return transformed
}
func flattenApihubPluginInstanceActionsHubInstanceAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["current_execution_state"] =
		flattenApihubPluginInstanceActionsHubInstanceActionCurrentExecutionState(original["currentExecutionState"], d, config)
	transformed["last_execution"] =
		flattenApihubPluginInstanceActionsHubInstanceActionLastExecution(original["lastExecution"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceActionsHubInstanceActionCurrentExecutionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsHubInstanceActionLastExecution(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["result"] =
		flattenApihubPluginInstanceActionsHubInstanceActionLastExecutionResult(original["result"], d, config)
	transformed["error_message"] =
		flattenApihubPluginInstanceActionsHubInstanceActionLastExecutionErrorMessage(original["errorMessage"], d, config)
	transformed["start_time"] =
		flattenApihubPluginInstanceActionsHubInstanceActionLastExecutionStartTime(original["startTime"], d, config)
	transformed["end_time"] =
		flattenApihubPluginInstanceActionsHubInstanceActionLastExecutionEndTime(original["endTime"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceActionsHubInstanceActionLastExecutionResult(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsHubInstanceActionLastExecutionErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsHubInstanceActionLastExecutionStartTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsHubInstanceActionLastExecutionEndTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsActionId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsScheduleCronExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsCurationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["custom_curation"] =
		flattenApihubPluginInstanceActionsCurationConfigCustomCuration(original["customCuration"], d, config)
	transformed["curation_type"] =
		flattenApihubPluginInstanceActionsCurationConfigCurationType(original["curationType"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceActionsCurationConfigCustomCuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["curation"] =
		flattenApihubPluginInstanceActionsCurationConfigCustomCurationCuration(original["curation"], d, config)
	return []interface{}{transformed}
}
func flattenApihubPluginInstanceActionsCurationConfigCustomCurationCuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsCurationConfigCurationType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApihubPluginInstanceActionsScheduleTimeZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandApihubPluginInstanceDisable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGoogleServiceAccountConfig, err := expandApihubPluginInstanceAuthConfigGoogleServiceAccountConfig(original["google_service_account_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGoogleServiceAccountConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["googleServiceAccountConfig"] = transformedGoogleServiceAccountConfig
	}

	transformedUserPasswordConfig, err := expandApihubPluginInstanceAuthConfigUserPasswordConfig(original["user_password_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUserPasswordConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["userPasswordConfig"] = transformedUserPasswordConfig
	}

	transformedApiKeyConfig, err := expandApihubPluginInstanceAuthConfigApiKeyConfig(original["api_key_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiKeyConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiKeyConfig"] = transformedApiKeyConfig
	}

	transformedOauth2ClientCredentialsConfig, err := expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfig(original["oauth2_client_credentials_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauth2ClientCredentialsConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["oauth2ClientCredentialsConfig"] = transformedOauth2ClientCredentialsConfig
	}

	transformedAuthType, err := expandApihubPluginInstanceAuthConfigAuthType(original["auth_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authType"] = transformedAuthType
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigGoogleServiceAccountConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceAccount, err := expandApihubPluginInstanceAuthConfigGoogleServiceAccountConfigServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigGoogleServiceAccountConfigServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigUserPasswordConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUsername, err := expandApihubPluginInstanceAuthConfigUserPasswordConfigUsername(original["username"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["username"] = transformedUsername
	}

	transformedPassword, err := expandApihubPluginInstanceAuthConfigUserPasswordConfigPassword(original["password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["password"] = transformedPassword
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigUserPasswordConfigUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigUserPasswordConfigPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandApihubPluginInstanceAuthConfigUserPasswordConfigPasswordSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigUserPasswordConfigPasswordSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandApihubPluginInstanceAuthConfigApiKeyConfigName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["name"] = transformedName
	}

	transformedApiKey, err := expandApihubPluginInstanceAuthConfigApiKeyConfigApiKey(original["api_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiKey"] = transformedApiKey
	}

	transformedHttpElementLocation, err := expandApihubPluginInstanceAuthConfigApiKeyConfigHttpElementLocation(original["http_element_location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpElementLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpElementLocation"] = transformedHttpElementLocation
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfigName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfigApiKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandApihubPluginInstanceAuthConfigApiKeyConfigApiKeySecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfigApiKeySecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfigHttpElementLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedClientSecret, err := expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecret(original["client_secret"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientSecret); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientSecret"] = transformedClientSecret
	}

	transformedClientId, err := expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientId(original["client_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientId"] = transformedClientId
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecret(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecretSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecretSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigAuthType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedHubInstanceAction, err := expandApihubPluginInstanceActionsHubInstanceAction(original["hub_instance_action"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHubInstanceAction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["hubInstanceAction"] = transformedHubInstanceAction
		}

		transformedActionId, err := expandApihubPluginInstanceActionsActionId(original["action_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedActionId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["actionId"] = transformedActionId
		}

		transformedState, err := expandApihubPluginInstanceActionsState(original["state"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["state"] = transformedState
		}

		transformedScheduleCronExpression, err := expandApihubPluginInstanceActionsScheduleCronExpression(original["schedule_cron_expression"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedScheduleCronExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["scheduleCronExpression"] = transformedScheduleCronExpression
		}

		transformedCurationConfig, err := expandApihubPluginInstanceActionsCurationConfig(original["curation_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCurationConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["curationConfig"] = transformedCurationConfig
		}

		transformedScheduleTimeZone, err := expandApihubPluginInstanceActionsScheduleTimeZone(original["schedule_time_zone"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedScheduleTimeZone); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["scheduleTimeZone"] = transformedScheduleTimeZone
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginInstanceActionsHubInstanceAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCurrentExecutionState, err := expandApihubPluginInstanceActionsHubInstanceActionCurrentExecutionState(original["current_execution_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCurrentExecutionState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["currentExecutionState"] = transformedCurrentExecutionState
	}

	transformedLastExecution, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecution(original["last_execution"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLastExecution); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lastExecution"] = transformedLastExecution
	}

	return transformed, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionCurrentExecutionState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecution(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedResult, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecutionResult(original["result"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResult); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["result"] = transformedResult
	}

	transformedErrorMessage, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecutionErrorMessage(original["error_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedErrorMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["errorMessage"] = transformedErrorMessage
	}

	transformedStartTime, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecutionStartTime(original["start_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["startTime"] = transformedStartTime
	}

	transformedEndTime, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecutionEndTime(original["end_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endTime"] = transformedEndTime
	}

	return transformed, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecutionResult(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecutionErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecutionStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecutionEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsActionId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsScheduleCronExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsCurationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCustomCuration, err := expandApihubPluginInstanceActionsCurationConfigCustomCuration(original["custom_curation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomCuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customCuration"] = transformedCustomCuration
	}

	transformedCurationType, err := expandApihubPluginInstanceActionsCurationConfigCurationType(original["curation_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCurationType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["curationType"] = transformedCurationType
	}

	return transformed, nil
}

func expandApihubPluginInstanceActionsCurationConfigCustomCuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCuration, err := expandApihubPluginInstanceActionsCurationConfigCustomCurationCuration(original["curation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["curation"] = transformedCuration
	}

	return transformed, nil
}

func expandApihubPluginInstanceActionsCurationConfigCustomCurationCuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsCurationConfigCurationType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsScheduleTimeZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
