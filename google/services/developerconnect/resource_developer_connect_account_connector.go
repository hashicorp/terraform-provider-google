// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/developerconnect/AccountConnector.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package developerconnect

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceDeveloperConnectAccountConnector() *schema.Resource {
	return &schema.Resource{
		Create: resourceDeveloperConnectAccountConnectorCreate,
		Read:   resourceDeveloperConnectAccountConnectorRead,
		Update: resourceDeveloperConnectAccountConnectorUpdate,
		Delete: resourceDeveloperConnectAccountConnectorDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDeveloperConnectAccountConnectorImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetAnnotationsDiff,
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"account_connector_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `Required. The ID to use for the AccountConnector, which will become the final
component of the AccountConnector's resource name. Its format should adhere
to https://google.aip.dev/122#resource-id-segments Names must be unique
per-project per-location.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location of the resource.`,
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Optional. Allows users to store small amounts of arbitrary data.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Optional. Labels as key value pairs

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"provider_oauth_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `ProviderOAuthConfig is the OAuth config for a provider.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"scopes": {
							Type:     schema.TypeList,
							Required: true,
							Description: `Required. User selected scopes to apply to the Oauth config
In the event of changing scopes, user records under AccountConnector will
be deleted and users will re-auth again.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"system_provider_id": {
							Type:     schema.TypeString,
							Optional: true,
							ForceNew: true,
							Description: `List of providers that are owned by Developer Connect.

Possible values:
GITHUB
GITLAB
GOOGLE
SENTRY
ROVO
NEW_RELIC
DATASTAX`,
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The timestamp when the userConnection was created.`,
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The resource name of the userConnection, in the format
'projects/{project}/locations/{location}/accountConnectors/{account_connector_id}'.`,
			},
			"oauth_start_uri": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Start OAuth flow by clicking on this URL.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The timestamp when the userConnection was updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDeveloperConnectAccountConnectorCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	providerOauthConfigProp, err := expandDeveloperConnectAccountConnectorProviderOauthConfig(d.Get("provider_oauth_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("provider_oauth_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(providerOauthConfigProp)) && (ok || !reflect.DeepEqual(v, providerOauthConfigProp)) {
		obj["providerOauthConfig"] = providerOauthConfigProp
	}
	annotationsProp, err := expandDeveloperConnectAccountConnectorEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	labelsProp, err := expandDeveloperConnectAccountConnectorEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DeveloperConnectBasePath}}projects/{{project}}/locations/{{location}}/accountConnectors?accountConnectorId={{account_connector_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new AccountConnector: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AccountConnector: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating AccountConnector: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = DeveloperConnectOperationWaitTime(
		config, res, project, "Creating AccountConnector", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create AccountConnector: %s", err)
	}

	log.Printf("[DEBUG] Finished creating AccountConnector %q: %#v", d.Id(), res)

	return resourceDeveloperConnectAccountConnectorRead(d, meta)
}

func resourceDeveloperConnectAccountConnectorRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DeveloperConnectBasePath}}projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AccountConnector: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DeveloperConnectAccountConnector %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}

	if err := d.Set("oauth_start_uri", flattenDeveloperConnectAccountConnectorOauthStartUri(res["oauthStartUri"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}
	if err := d.Set("provider_oauth_config", flattenDeveloperConnectAccountConnectorProviderOauthConfig(res["providerOauthConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}
	if err := d.Set("name", flattenDeveloperConnectAccountConnectorName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}
	if err := d.Set("create_time", flattenDeveloperConnectAccountConnectorCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}
	if err := d.Set("update_time", flattenDeveloperConnectAccountConnectorUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}
	if err := d.Set("annotations", flattenDeveloperConnectAccountConnectorAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}
	if err := d.Set("labels", flattenDeveloperConnectAccountConnectorLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}
	if err := d.Set("effective_annotations", flattenDeveloperConnectAccountConnectorEffectiveAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}
	if err := d.Set("terraform_labels", flattenDeveloperConnectAccountConnectorTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}
	if err := d.Set("effective_labels", flattenDeveloperConnectAccountConnectorEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading AccountConnector: %s", err)
	}

	return nil
}

func resourceDeveloperConnectAccountConnectorUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AccountConnector: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	providerOauthConfigProp, err := expandDeveloperConnectAccountConnectorProviderOauthConfig(d.Get("provider_oauth_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("provider_oauth_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, providerOauthConfigProp)) {
		obj["providerOauthConfig"] = providerOauthConfigProp
	}
	annotationsProp, err := expandDeveloperConnectAccountConnectorEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	labelsProp, err := expandDeveloperConnectAccountConnectorEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DeveloperConnectBasePath}}projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating AccountConnector %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("provider_oauth_config") {
		updateMask = append(updateMask, "providerOauthConfig")
	}

	if d.HasChange("effective_annotations") {
		updateMask = append(updateMask, "annotations")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating AccountConnector %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating AccountConnector %q: %#v", d.Id(), res)
		}

		err = DeveloperConnectOperationWaitTime(
			config, res, project, "Updating AccountConnector", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceDeveloperConnectAccountConnectorRead(d, meta)
}

func resourceDeveloperConnectAccountConnectorDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AccountConnector: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{DeveloperConnectBasePath}}projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting AccountConnector %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "AccountConnector")
	}

	err = DeveloperConnectOperationWaitTime(
		config, res, project, "Deleting AccountConnector", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting AccountConnector %q: %#v", d.Id(), res)
	return nil
}

func resourceDeveloperConnectAccountConnectorImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/accountConnectors/(?P<account_connector_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<account_connector_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<account_connector_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDeveloperConnectAccountConnectorOauthStartUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeveloperConnectAccountConnectorProviderOauthConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["system_provider_id"] =
		flattenDeveloperConnectAccountConnectorProviderOauthConfigSystemProviderId(original["systemProviderId"], d, config)
	transformed["scopes"] =
		flattenDeveloperConnectAccountConnectorProviderOauthConfigScopes(original["scopes"], d, config)
	return []interface{}{transformed}
}
func flattenDeveloperConnectAccountConnectorProviderOauthConfigSystemProviderId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeveloperConnectAccountConnectorProviderOauthConfigScopes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeveloperConnectAccountConnectorName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeveloperConnectAccountConnectorCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeveloperConnectAccountConnectorUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeveloperConnectAccountConnectorAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("annotations"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDeveloperConnectAccountConnectorLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDeveloperConnectAccountConnectorEffectiveAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeveloperConnectAccountConnectorTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDeveloperConnectAccountConnectorEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDeveloperConnectAccountConnectorProviderOauthConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSystemProviderId, err := expandDeveloperConnectAccountConnectorProviderOauthConfigSystemProviderId(original["system_provider_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSystemProviderId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["systemProviderId"] = transformedSystemProviderId
	}

	transformedScopes, err := expandDeveloperConnectAccountConnectorProviderOauthConfigScopes(original["scopes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScopes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scopes"] = transformedScopes
	}

	return transformed, nil
}

func expandDeveloperConnectAccountConnectorProviderOauthConfigSystemProviderId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDeveloperConnectAccountConnectorProviderOauthConfigScopes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDeveloperConnectAccountConnectorEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDeveloperConnectAccountConnectorEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
