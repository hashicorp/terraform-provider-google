// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package oracledatabase

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceOracleDatabaseCloudExadataInfrastructure() *schema.Resource {
	return &schema.Resource{
		Create: resourceOracleDatabaseCloudExadataInfrastructureCreate,
		Read:   resourceOracleDatabaseCloudExadataInfrastructureRead,
		Update: resourceOracleDatabaseCloudExadataInfrastructureUpdate,
		Delete: resourceOracleDatabaseCloudExadataInfrastructureDelete,

		Importer: &schema.ResourceImporter{
			State: resourceOracleDatabaseCloudExadataInfrastructureImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(240 * time.Minute),
			Update: schema.DefaultTimeout(120 * time.Minute),
			Delete: schema.DefaultTimeout(120 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"cloud_exadata_infrastructure_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The ID of the Exadata Infrastructure to create. This value is restricted
to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of 63
characters in length. The value must start with a letter and end with
a letter or a number.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. See documentation for resource type 'oracledatabase.googleapis.com/DbServer'.`,
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `User friendly name for this resource.`,
			},
			"gcp_oracle_zone": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `GCP location where Oracle Exadata is hosted.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Labels or tags associated with the resource. 

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"properties": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `Various properties of Exadata Infrastructure.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"shape": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `The shape of the Exadata Infrastructure. The shape determines the
amount of CPU, storage, and memory resources allocated to the instance.`,
						},
						"compute_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							ForceNew:    true,
							Description: `The number of compute servers for the Exadata Infrastructure.`,
						},
						"customer_contacts": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `The list of customer contacts.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"email": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `The email address used by Oracle to send notifications regarding databases
and infrastructure.`,
									},
								},
							},
						},
						"maintenance_window": {
							Type:     schema.TypeList,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `Maintenance window as defined by Oracle.
https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"custom_action_timeout_mins": {
										Type:     schema.TypeInt,
										Computed: true,
										Optional: true,
										ForceNew: true,
										Description: `Determines the amount of time the system will wait before the start of each
database server patching operation. Custom action timeout is in minutes and
valid value is between 15 to 120 (inclusive).`,
									},
									"days_of_week": {
										Type:        schema.TypeList,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `Days during the week when maintenance should be performed.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"hours_of_day": {
										Type:     schema.TypeList,
										Computed: true,
										Optional: true,
										ForceNew: true,
										Description: `The window of hours during the day when maintenance should be performed.
The window is a 4 hour slot. Valid values are:
  0 - represents time slot 0:00 - 3:59 UTC
  4 - represents time slot 4:00 - 7:59 UTC
  8 - represents time slot 8:00 - 11:59 UTC
  12 - represents time slot 12:00 - 15:59 UTC
  16 - represents time slot 16:00 - 19:59 UTC
  20 - represents time slot 20:00 - 23:59 UTC`,
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
									},
									"is_custom_action_timeout_enabled": {
										Type:     schema.TypeBool,
										Computed: true,
										Optional: true,
										ForceNew: true,
										Description: `If true, enables the configuration of a custom action timeout (waiting
period) between database server patching operations.`,
									},
									"lead_time_week": {
										Type:     schema.TypeInt,
										Computed: true,
										Optional: true,
										ForceNew: true,
										Description: `Lead time window allows user to set a lead time to prepare for a down time.
The lead time is in weeks and valid value is between 1 to 4.`,
									},
									"months": {
										Type:        schema.TypeList,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `Months during the year when maintenance should be performed.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"patching_mode": {
										Type:     schema.TypeString,
										Computed: true,
										Optional: true,
										ForceNew: true,
										Description: `Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
 or "NONROLLING". Default value is ROLLING. 
 Possible values:
 PATCHING_MODE_UNSPECIFIED
ROLLING
NON_ROLLING`,
									},
									"preference": {
										Type:     schema.TypeString,
										Computed: true,
										Optional: true,
										ForceNew: true,
										Description: `The maintenance window scheduling preference. 
 Possible values:
 MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
CUSTOM_PREFERENCE
NO_PREFERENCE`,
									},
									"weeks_of_month": {
										Type:     schema.TypeList,
										Computed: true,
										Optional: true,
										ForceNew: true,
										Description: `Weeks during the month when maintenance should be performed. Weeks start on
the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
days. Weeks start and end based on calendar dates, not days of the week.`,
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
									},
								},
							},
						},
						"storage_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							ForceNew:    true,
							Description: `The number of Cloud Exadata storage servers for the Exadata Infrastructure.`,
						},
						"total_storage_size_gb": {
							Type:     schema.TypeInt,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `The total storage allocated to the Exadata Infrastructure
resource, in gigabytes (GB).`,
						},
						"activated_storage_count": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: `The requested number of additional storage servers activated for the
Exadata Infrastructure.`,
						},
						"additional_storage_count": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: `The requested number of additional storage servers for the Exadata
Infrastructure.`,
						},
						"available_storage_size_gb": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: `The available storage can be allocated to the Exadata Infrastructure
resource, in gigabytes (GB).`,
						},
						"cpu_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of enabled CPU cores.`,
						},
						"data_storage_size_tb": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `Size, in terabytes, of the DATA disk group.`,
						},
						"db_node_storage_size_gb": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The local node storage allocated in GBs.`,
						},
						"db_server_version": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The software version of the database servers (dom0) in the Exadata
Infrastructure.`,
						},
						"max_cpu_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total number of CPU cores available.`,
						},
						"max_data_storage_tb": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: `The total available DATA disk group size.`,
						},
						"max_db_node_storage_size_gb": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total local node storage available in GBs.`,
						},
						"max_memory_gb": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The total memory available in GBs.`,
						},
						"memory_size_gb": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The memory allocated in GBs.`,
						},
						"monthly_db_server_version": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The monthly software version of the database servers (dom0)
in the Exadata Infrastructure. Example: 20.1.15`,
						},
						"monthly_storage_server_version": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The monthly software version of the storage servers (cells)
in the Exadata Infrastructure. Example: 20.1.15`,
						},
						"next_maintenance_run_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The OCID of the next maintenance run.`,
						},
						"next_maintenance_run_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the next maintenance run will occur.`,
						},
						"next_security_maintenance_run_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the next security maintenance run will occur.`,
						},
						"oci_url": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Deep link to the OCI console to view this resource.`,
						},
						"ocid": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `OCID of created infra.
https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle`,
						},
						"state": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The current lifecycle state of the Exadata Infrastructure. 
 Possible values:
 STATE_UNSPECIFIED
PROVISIONING
AVAILABLE
UPDATING
TERMINATING
TERMINATED
FAILED
MAINTENANCE_IN_PROGRESS`,
						},
						"storage_server_version": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The software version of the storage servers (cells) in the Exadata
Infrastructure.`,
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The date and time that the Exadata Infrastructure was created.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				ForceNew:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"entitlement_id": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Entitlement ID of the private offer against which this infrastructure
resource is provisioned.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The name of the Exadata Infrastructure resource with the following format:
projects/{project}/locations/{region}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceOracleDatabaseCloudExadataInfrastructureCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandOracleDatabaseCloudExadataInfrastructureDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	gcpOracleZoneProp, err := expandOracleDatabaseCloudExadataInfrastructureGcpOracleZone(d.Get("gcp_oracle_zone"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("gcp_oracle_zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(gcpOracleZoneProp)) && (ok || !reflect.DeepEqual(v, gcpOracleZoneProp)) {
		obj["gcpOracleZone"] = gcpOracleZoneProp
	}
	propertiesProp, err := expandOracleDatabaseCloudExadataInfrastructureProperties(d.Get("properties"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("properties"); !tpgresource.IsEmptyValue(reflect.ValueOf(propertiesProp)) && (ok || !reflect.DeepEqual(v, propertiesProp)) {
		obj["properties"] = propertiesProp
	}
	labelsProp, err := expandOracleDatabaseCloudExadataInfrastructureEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/cloudExadataInfrastructures?cloudExadataInfrastructureId={{cloud_exadata_infrastructure_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new CloudExadataInfrastructure: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CloudExadataInfrastructure: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating CloudExadataInfrastructure: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/cloudExadataInfrastructures/{{cloud_exadata_infrastructure_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = OracleDatabaseOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating CloudExadataInfrastructure", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create CloudExadataInfrastructure: %s", err)
	}

	if err := d.Set("name", flattenOracleDatabaseCloudExadataInfrastructureName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/cloudExadataInfrastructures/{{cloud_exadata_infrastructure_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating CloudExadataInfrastructure %q: %#v", d.Id(), res)

	return resourceOracleDatabaseCloudExadataInfrastructureRead(d, meta)
}

func resourceOracleDatabaseCloudExadataInfrastructureRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/cloudExadataInfrastructures/{{cloud_exadata_infrastructure_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CloudExadataInfrastructure: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("OracleDatabaseCloudExadataInfrastructure %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}

	if err := d.Set("name", flattenOracleDatabaseCloudExadataInfrastructureName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}
	if err := d.Set("display_name", flattenOracleDatabaseCloudExadataInfrastructureDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}
	if err := d.Set("gcp_oracle_zone", flattenOracleDatabaseCloudExadataInfrastructureGcpOracleZone(res["gcpOracleZone"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}
	if err := d.Set("entitlement_id", flattenOracleDatabaseCloudExadataInfrastructureEntitlementId(res["entitlementId"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}
	if err := d.Set("properties", flattenOracleDatabaseCloudExadataInfrastructureProperties(res["properties"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}
	if err := d.Set("labels", flattenOracleDatabaseCloudExadataInfrastructureLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}
	if err := d.Set("create_time", flattenOracleDatabaseCloudExadataInfrastructureCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}
	if err := d.Set("terraform_labels", flattenOracleDatabaseCloudExadataInfrastructureTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}
	if err := d.Set("effective_labels", flattenOracleDatabaseCloudExadataInfrastructureEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudExadataInfrastructure: %s", err)
	}

	return nil
}

func resourceOracleDatabaseCloudExadataInfrastructureUpdate(d *schema.ResourceData, meta interface{}) error {
	// Only the root field "labels" and "terraform_labels" are mutable
	return resourceOracleDatabaseCloudExadataInfrastructureRead(d, meta)
}

func resourceOracleDatabaseCloudExadataInfrastructureDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CloudExadataInfrastructure: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/cloudExadataInfrastructures/{{cloud_exadata_infrastructure_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting CloudExadataInfrastructure %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "CloudExadataInfrastructure")
	}

	err = OracleDatabaseOperationWaitTime(
		config, res, project, "Deleting CloudExadataInfrastructure", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting CloudExadataInfrastructure %q: %#v", d.Id(), res)
	return nil
}

func resourceOracleDatabaseCloudExadataInfrastructureImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/cloudExadataInfrastructures/(?P<cloud_exadata_infrastructure_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<cloud_exadata_infrastructure_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<cloud_exadata_infrastructure_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/cloudExadataInfrastructures/{{cloud_exadata_infrastructure_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenOracleDatabaseCloudExadataInfrastructureName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructureDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructureGcpOracleZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructureEntitlementId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructureProperties(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["ocid"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesOcid(original["ocid"], d, config)
	transformed["compute_count"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesComputeCount(original["computeCount"], d, config)
	transformed["storage_count"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesStorageCount(original["storageCount"], d, config)
	transformed["total_storage_size_gb"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesTotalStorageSizeGb(original["totalStorageSizeGb"], d, config)
	transformed["available_storage_size_gb"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesAvailableStorageSizeGb(original["availableStorageSizeGb"], d, config)
	transformed["maintenance_window"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindow(original["maintenanceWindow"], d, config)
	transformed["state"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesState(original["state"], d, config)
	transformed["shape"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesShape(original["shape"], d, config)
	transformed["oci_url"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesOciUrl(original["ociUrl"], d, config)
	transformed["cpu_count"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesCpuCount(original["cpuCount"], d, config)
	transformed["max_cpu_count"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaxCpuCount(original["maxCpuCount"], d, config)
	transformed["memory_size_gb"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMemorySizeGb(original["memorySizeGb"], d, config)
	transformed["max_memory_gb"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaxMemoryGb(original["maxMemoryGb"], d, config)
	transformed["db_node_storage_size_gb"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesDbNodeStorageSizeGb(original["dbNodeStorageSizeGb"], d, config)
	transformed["max_db_node_storage_size_gb"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaxDbNodeStorageSizeGb(original["maxDbNodeStorageSizeGb"], d, config)
	transformed["data_storage_size_tb"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesDataStorageSizeTb(original["dataStorageSizeTb"], d, config)
	transformed["max_data_storage_tb"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaxDataStorageTb(original["maxDataStorageTb"], d, config)
	transformed["activated_storage_count"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesActivatedStorageCount(original["activatedStorageCount"], d, config)
	transformed["additional_storage_count"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesAdditionalStorageCount(original["additionalStorageCount"], d, config)
	transformed["db_server_version"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesDbServerVersion(original["dbServerVersion"], d, config)
	transformed["storage_server_version"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesStorageServerVersion(original["storageServerVersion"], d, config)
	transformed["next_maintenance_run_id"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesNextMaintenanceRunId(original["nextMaintenanceRunId"], d, config)
	transformed["next_maintenance_run_time"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesNextMaintenanceRunTime(original["nextMaintenanceRunTime"], d, config)
	transformed["next_security_maintenance_run_time"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesNextSecurityMaintenanceRunTime(original["nextSecurityMaintenanceRunTime"], d, config)
	transformed["customer_contacts"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesCustomerContacts(original["customerContacts"], d, config)
	transformed["monthly_storage_server_version"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMonthlyStorageServerVersion(original["monthlyStorageServerVersion"], d, config)
	transformed["monthly_db_server_version"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMonthlyDbServerVersion(original["monthlyDbServerVersion"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseCloudExadataInfrastructurePropertiesOcid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesComputeCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesStorageCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesTotalStorageSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesAvailableStorageSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["preference"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowPreference(original["preference"], d, config)
	transformed["months"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowMonths(original["months"], d, config)
	transformed["weeks_of_month"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowWeeksOfMonth(original["weeksOfMonth"], d, config)
	transformed["days_of_week"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowDaysOfWeek(original["daysOfWeek"], d, config)
	transformed["hours_of_day"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowHoursOfDay(original["hoursOfDay"], d, config)
	transformed["lead_time_week"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowLeadTimeWeek(original["leadTimeWeek"], d, config)
	transformed["patching_mode"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowPatchingMode(original["patchingMode"], d, config)
	transformed["custom_action_timeout_mins"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowCustomActionTimeoutMins(original["customActionTimeoutMins"], d, config)
	transformed["is_custom_action_timeout_enabled"] =
		flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowIsCustomActionTimeoutEnabled(original["isCustomActionTimeoutEnabled"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowPreference(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowMonths(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowWeeksOfMonth(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowDaysOfWeek(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowHoursOfDay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowLeadTimeWeek(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowPatchingMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowCustomActionTimeoutMins(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowIsCustomActionTimeoutEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesShape(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesOciUrl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesCpuCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaxCpuCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMemorySizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaxMemoryGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesDbNodeStorageSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaxDbNodeStorageSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesDataStorageSizeTb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMaxDataStorageTb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesActivatedStorageCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesAdditionalStorageCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesDbServerVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesStorageServerVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesNextMaintenanceRunId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesNextMaintenanceRunTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesNextSecurityMaintenanceRunTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesCustomerContacts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"email": flattenOracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsEmail(original["email"], d, config),
		})
	}
	return transformed
}
func flattenOracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMonthlyStorageServerVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructurePropertiesMonthlyDbServerVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructureLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenOracleDatabaseCloudExadataInfrastructureCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseCloudExadataInfrastructureTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenOracleDatabaseCloudExadataInfrastructureEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandOracleDatabaseCloudExadataInfrastructureDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructureGcpOracleZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructureProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOcid, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesOcid(original["ocid"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOcid); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ocid"] = transformedOcid
	}

	transformedComputeCount, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesComputeCount(original["compute_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedComputeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["computeCount"] = transformedComputeCount
	}

	transformedStorageCount, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesStorageCount(original["storage_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStorageCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["storageCount"] = transformedStorageCount
	}

	transformedTotalStorageSizeGb, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesTotalStorageSizeGb(original["total_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTotalStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["totalStorageSizeGb"] = transformedTotalStorageSizeGb
	}

	transformedAvailableStorageSizeGb, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesAvailableStorageSizeGb(original["available_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAvailableStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["availableStorageSizeGb"] = transformedAvailableStorageSizeGb
	}

	transformedMaintenanceWindow, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindow(original["maintenance_window"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceWindow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceWindow"] = transformedMaintenanceWindow
	}

	transformedState, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesState(original["state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["state"] = transformedState
	}

	transformedShape, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesShape(original["shape"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedShape); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["shape"] = transformedShape
	}

	transformedOciUrl, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesOciUrl(original["oci_url"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOciUrl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ociUrl"] = transformedOciUrl
	}

	transformedCpuCount, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesCpuCount(original["cpu_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCpuCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cpuCount"] = transformedCpuCount
	}

	transformedMaxCpuCount, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaxCpuCount(original["max_cpu_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxCpuCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxCpuCount"] = transformedMaxCpuCount
	}

	transformedMemorySizeGb, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMemorySizeGb(original["memory_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMemorySizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["memorySizeGb"] = transformedMemorySizeGb
	}

	transformedMaxMemoryGb, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaxMemoryGb(original["max_memory_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxMemoryGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxMemoryGb"] = transformedMaxMemoryGb
	}

	transformedDbNodeStorageSizeGb, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesDbNodeStorageSizeGb(original["db_node_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbNodeStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbNodeStorageSizeGb"] = transformedDbNodeStorageSizeGb
	}

	transformedMaxDbNodeStorageSizeGb, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaxDbNodeStorageSizeGb(original["max_db_node_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxDbNodeStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxDbNodeStorageSizeGb"] = transformedMaxDbNodeStorageSizeGb
	}

	transformedDataStorageSizeTb, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesDataStorageSizeTb(original["data_storage_size_tb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStorageSizeTb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStorageSizeTb"] = transformedDataStorageSizeTb
	}

	transformedMaxDataStorageTb, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaxDataStorageTb(original["max_data_storage_tb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxDataStorageTb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxDataStorageTb"] = transformedMaxDataStorageTb
	}

	transformedActivatedStorageCount, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesActivatedStorageCount(original["activated_storage_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedActivatedStorageCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["activatedStorageCount"] = transformedActivatedStorageCount
	}

	transformedAdditionalStorageCount, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesAdditionalStorageCount(original["additional_storage_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalStorageCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalStorageCount"] = transformedAdditionalStorageCount
	}

	transformedDbServerVersion, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesDbServerVersion(original["db_server_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbServerVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbServerVersion"] = transformedDbServerVersion
	}

	transformedStorageServerVersion, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesStorageServerVersion(original["storage_server_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStorageServerVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["storageServerVersion"] = transformedStorageServerVersion
	}

	transformedNextMaintenanceRunId, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesNextMaintenanceRunId(original["next_maintenance_run_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNextMaintenanceRunId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nextMaintenanceRunId"] = transformedNextMaintenanceRunId
	}

	transformedNextMaintenanceRunTime, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesNextMaintenanceRunTime(original["next_maintenance_run_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNextMaintenanceRunTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nextMaintenanceRunTime"] = transformedNextMaintenanceRunTime
	}

	transformedNextSecurityMaintenanceRunTime, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesNextSecurityMaintenanceRunTime(original["next_security_maintenance_run_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNextSecurityMaintenanceRunTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nextSecurityMaintenanceRunTime"] = transformedNextSecurityMaintenanceRunTime
	}

	transformedCustomerContacts, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesCustomerContacts(original["customer_contacts"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomerContacts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customerContacts"] = transformedCustomerContacts
	}

	transformedMonthlyStorageServerVersion, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMonthlyStorageServerVersion(original["monthly_storage_server_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMonthlyStorageServerVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["monthlyStorageServerVersion"] = transformedMonthlyStorageServerVersion
	}

	transformedMonthlyDbServerVersion, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMonthlyDbServerVersion(original["monthly_db_server_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMonthlyDbServerVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["monthlyDbServerVersion"] = transformedMonthlyDbServerVersion
	}

	return transformed, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesOcid(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesComputeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesStorageCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesTotalStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesAvailableStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPreference, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowPreference(original["preference"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPreference); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["preference"] = transformedPreference
	}

	transformedMonths, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowMonths(original["months"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMonths); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["months"] = transformedMonths
	}

	transformedWeeksOfMonth, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowWeeksOfMonth(original["weeks_of_month"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWeeksOfMonth); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["weeksOfMonth"] = transformedWeeksOfMonth
	}

	transformedDaysOfWeek, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowDaysOfWeek(original["days_of_week"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDaysOfWeek); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["daysOfWeek"] = transformedDaysOfWeek
	}

	transformedHoursOfDay, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowHoursOfDay(original["hours_of_day"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHoursOfDay); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hoursOfDay"] = transformedHoursOfDay
	}

	transformedLeadTimeWeek, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowLeadTimeWeek(original["lead_time_week"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLeadTimeWeek); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["leadTimeWeek"] = transformedLeadTimeWeek
	}

	transformedPatchingMode, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowPatchingMode(original["patching_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPatchingMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["patchingMode"] = transformedPatchingMode
	}

	transformedCustomActionTimeoutMins, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowCustomActionTimeoutMins(original["custom_action_timeout_mins"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomActionTimeoutMins); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customActionTimeoutMins"] = transformedCustomActionTimeoutMins
	}

	transformedIsCustomActionTimeoutEnabled, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowIsCustomActionTimeoutEnabled(original["is_custom_action_timeout_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsCustomActionTimeoutEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isCustomActionTimeoutEnabled"] = transformedIsCustomActionTimeoutEnabled
	}

	return transformed, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowPreference(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowMonths(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowWeeksOfMonth(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowDaysOfWeek(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowHoursOfDay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowLeadTimeWeek(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowPatchingMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowCustomActionTimeoutMins(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowIsCustomActionTimeoutEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesShape(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesOciUrl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesCpuCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaxCpuCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMemorySizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaxMemoryGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesDbNodeStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaxDbNodeStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesDataStorageSizeTb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMaxDataStorageTb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesActivatedStorageCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesAdditionalStorageCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesDbServerVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesStorageServerVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesNextMaintenanceRunId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesNextMaintenanceRunTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesNextSecurityMaintenanceRunTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesCustomerContacts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedEmail, err := expandOracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsEmail(original["email"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEmail); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["email"] = transformedEmail
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsEmail(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMonthlyStorageServerVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructurePropertiesMonthlyDbServerVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseCloudExadataInfrastructureEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
