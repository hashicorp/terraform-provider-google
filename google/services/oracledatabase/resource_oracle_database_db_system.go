// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/oracledatabase/DbSystem.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package oracledatabase

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceOracleDatabaseDbSystem() *schema.Resource {
	return &schema.Resource{
		Create: resourceOracleDatabaseDbSystemCreate,
		Read:   resourceOracleDatabaseDbSystemRead,
		Update: resourceOracleDatabaseDbSystemUpdate,
		Delete: resourceOracleDatabaseDbSystemDelete,

		Importer: &schema.ResourceImporter{
			State: resourceOracleDatabaseDbSystemImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(120 * time.Minute),
			Update: schema.DefaultTimeout(60 * time.Minute),
			Delete: schema.DefaultTimeout(60 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"db_system_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The ID of the DbSystem to create. This value is
restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
63 characters in length. The value must start with a letter and end with a
letter or a number.`,
			},
			"display_name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The display name for the System db. The name does not have to
be unique within your project.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"odb_subnet": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The name of the OdbSubnet associated with the DbSystem for IP
allocation. Format:
projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}`,
			},
			"gcp_oracle_zone": {
				Type:     schema.TypeString,
				Computed: true,
				Optional: true,
				ForceNew: true,
				Description: `The GCP Oracle zone where Oracle DbSystem is hosted.
Example: us-east4-b-r2.
If not specified, the system will pick a zone based on availability.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `The labels or tags associated with the DbSystem.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"odb_network": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `The name of the OdbNetwork associated with the DbSystem.
Format: projects/{project}/locations/{location}/odbNetworks/{odb_network}
It is optional but if specified, this should match the parent ODBNetwork of
the OdbSubnet.`,
			},
			"properties": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `The properties of a DbSystem.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"compute_count": {
							Type:        schema.TypeInt,
							Required:    true,
							ForceNew:    true,
							Description: `The number of CPU cores to enable for the DbSystem.`,
						},
						"database_edition": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `The database edition of the DbSystem.
Possible values:
STANDARD_EDITION
ENTERPRISE_EDITION
ENTERPRISE_EDITION_HIGH_PERFORMANCE`,
						},
						"initial_data_storage_size_gb": {
							Type:        schema.TypeInt,
							Required:    true,
							ForceNew:    true,
							Description: `The initial data storage size in GB.`,
						},
						"license_model": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `The license model of the DbSystem.
Possible values:
LICENSE_INCLUDED
BRING_YOUR_OWN_LICENSE`,
						},
						"shape": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `Shape of DB System.`,
						},
						"ssh_public_keys": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `SSH public keys to be stored with the DbSystem.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"compute_model": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `The compute model of the DbSystem.
Possible values:
ECPU
OCPU`,
						},
						"data_collection_options": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Data collection options for DbSystem.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"is_diagnostics_events_enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										ForceNew:    true,
										Description: `Indicates whether to enable data collection for diagnostics.`,
									},
									"is_incident_logs_enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										ForceNew:    true,
										Description: `Indicates whether to enable incident logs and trace collection.`,
									},
								},
							},
						},
						"data_storage_size_gb": {
							Type:        schema.TypeInt,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The data storage size in GB that is currently available to DbSystems.`,
						},
						"db_home": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Details of the Database Home resource.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"database": {
										Type:     schema.TypeList,
										Required: true,
										ForceNew: true,
										Description: `Details of the Database resource.
https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/Database/`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"admin_password": {
													Type:        schema.TypeString,
													Required:    true,
													ForceNew:    true,
													Description: `The password for the default ADMIN user.`,
												},
												"database_id": {
													Type:        schema.TypeString,
													Required:    true,
													ForceNew:    true,
													Description: `The database ID of the Database.`,
												},
												"character_set": {
													Type:        schema.TypeString,
													Computed:    true,
													Optional:    true,
													ForceNew:    true,
													Description: `The character set for the database. The default is AL32UTF8.`,
												},
												"db_home_name": {
													Type:        schema.TypeString,
													Computed:    true,
													Optional:    true,
													ForceNew:    true,
													Description: `The name of the DbHome resource associated with the Database.`,
												},
												"db_name": {
													Type:     schema.TypeString,
													Optional: true,
													ForceNew: true,
													Description: `The database name. The name must begin with an alphabetic character and can
contain a maximum of eight alphanumeric characters. Special characters are
not permitted.`,
												},
												"db_unique_name": {
													Type:        schema.TypeString,
													Computed:    true,
													Optional:    true,
													ForceNew:    true,
													Description: `The DB_UNIQUE_NAME of the Oracle Database being backed up.`,
												},
												"gcp_oracle_zone": {
													Type:        schema.TypeString,
													Computed:    true,
													Optional:    true,
													ForceNew:    true,
													Description: `The GCP Oracle zone where the Database is created.`,
												},
												"ncharacter_set": {
													Type:        schema.TypeString,
													Computed:    true,
													Optional:    true,
													ForceNew:    true,
													Description: `The national character set for the database. The default is AL16UTF16.`,
												},
												"properties": {
													Type:        schema.TypeList,
													Optional:    true,
													ForceNew:    true,
													Description: `The properties of a Database.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"db_version": {
																Type:        schema.TypeString,
																Required:    true,
																ForceNew:    true,
																Description: `The Oracle Database version.`,
															},
															"database_management_config": {
																Type:        schema.TypeList,
																Optional:    true,
																ForceNew:    true,
																Description: `The configuration of the Database Management service.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"management_state": {
																			Type:     schema.TypeString,
																			Computed: true,
																			Description: `The status of the Database Management service.
Possible values:
ENABLING
ENABLED
DISABLING
DISABLED
UPDATING
FAILED_ENABLING
FAILED_DISABLING
FAILED_UPDATING`,
																		},
																		"management_type": {
																			Type:     schema.TypeString,
																			Computed: true,
																			Description: `The Database Management type.
Possible values:
BASIC
ADVANCED`,
																		},
																	},
																},
															},
															"db_backup_config": {
																Type:        schema.TypeList,
																Optional:    true,
																ForceNew:    true,
																Description: `Backup Options for the Database.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"auto_backup_enabled": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			ForceNew:    true,
																			Description: `If set to true, enables automatic backups on the database.`,
																		},
																		"auto_full_backup_day": {
																			Type:     schema.TypeString,
																			Optional: true,
																			ForceNew: true,
																			Description: `Possible values:
MONDAY
TUESDAY
WEDNESDAY
THURSDAY
FRIDAY
SATURDAY
SUNDAY`,
																		},
																		"auto_full_backup_window": {
																			Type:     schema.TypeString,
																			Computed: true,
																			Optional: true,
																			ForceNew: true,
																			Description: `The window in which the full backup should be performed on the database.
If no value is provided, the default is anytime.
Possible values:
SLOT_ONE
SLOT_TWO
SLOT_THREE
SLOT_FOUR
SLOT_FIVE
SLOT_SIX
SLOT_SEVEN
SLOT_EIGHT
SLOT_NINE
SLOT_TEN
SLOT_ELEVEN
SLOT_TWELVE`,
																		},
																		"auto_incremental_backup_window": {
																			Type:     schema.TypeString,
																			Computed: true,
																			Optional: true,
																			ForceNew: true,
																			Description: `The window in which the incremental backup should be performed on the
database. If no value is provided, the default is anytime except the auto
full backup day.
Possible values:
SLOT_ONE
SLOT_TWO
SLOT_THREE
SLOT_FOUR
SLOT_FIVE
SLOT_SIX
SLOT_SEVEN
SLOT_EIGHT
SLOT_NINE
SLOT_TEN
SLOT_ELEVEN
SLOT_TWELVE`,
																		},
																		"backup_deletion_policy": {
																			Type:     schema.TypeString,
																			Computed: true,
																			Optional: true,
																			ForceNew: true,
																			Description: `This defines when the backups will be deleted after Database termination.
Possible values:
DELETE_IMMEDIATELY
DELETE_AFTER_RETENTION_PERIOD`,
																		},
																		"backup_destination_details": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			ForceNew:    true,
																			Description: `Details of the database backup destinations.`,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"type": {
																						Type:     schema.TypeString,
																						Computed: true,
																						Optional: true,
																						ForceNew: true,
																						Description: `The type of the database backup destination.
Possible values:
NFS
RECOVERY_APPLIANCE
OBJECT_STORE
LOCAL
DBRS`,
																					},
																				},
																			},
																		},
																		"retention_period_days": {
																			Type:     schema.TypeInt,
																			Computed: true,
																			Optional: true,
																			ForceNew: true,
																			Description: `The number of days an automatic backup is retained before being
automatically deleted. This value determines the earliest point in time to
which a database can be restored. Min: 1, Max: 60.`,
																		},
																	},
																},
															},
															"state": {
																Type:     schema.TypeString,
																Computed: true,
																Description: `State of the Database.
Possible values:
PROVISIONING
AVAILABLE
UPDATING
BACKUP_IN_PROGRESS
UPGRADING
CONVERTING
TERMINATING
TERMINATED
RESTORE_FAILED
FAILED`,
															},
														},
													},
												},
												"tde_wallet_password": {
													Type:        schema.TypeString,
													Optional:    true,
													ForceNew:    true,
													Description: `The TDE wallet password for the database.`,
												},
												"create_time": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `The date and time that the Database was created.`,
												},
												"name": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `Identifier. The name of the Database resource in the following format:
projects/{project}/locations/{region}/databases/{database}`,
												},
												"oci_url": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `HTTPS link to OCI resources exposed to Customer via UI Interface.`,
												},
												"ops_insights_status": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The Status of Operations Insights for this Database.
Possible values:
ENABLING
ENABLED
DISABLING
NOT_ENABLED
FAILED_ENABLING
FAILED_DISABLING`,
												},
											},
										},
									},
									"db_version": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `A valid Oracle Database version. For a list of supported versions, use the
ListDbVersions operation.`,
									},
									"display_name": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `The display name for the Database Home. The name does not have to
be unique within your project.`,
									},
									"is_unified_auditing_enabled": {
										Type:        schema.TypeBool,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `Whether unified auditing is enabled for the Database Home.`,
									},
								},
							},
						},
						"db_system_options": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Details of the DbSystem Options.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"storage_management": {
										Type:     schema.TypeString,
										Computed: true,
										Optional: true,
										ForceNew: true,
										Description: `The storage option used in DB system.
Possible values:
ASM
LVM`,
									},
								},
							},
						},
						"domain": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The host domain name of the DbSystem.`,
						},
						"hostname_prefix": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `Prefix for DB System host names.`,
						},
						"memory_size_gb": {
							Type:        schema.TypeInt,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The memory size in GB.`,
						},
						"node_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The number of nodes in the DbSystem.`,
						},
						"private_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The private IP address of the DbSystem.`,
						},
						"reco_storage_size_gb": {
							Type:        schema.TypeInt,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The reco/redo storage size in GB.`,
						},
						"time_zone": {
							Type:     schema.TypeList,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `Represents a time zone from the
[IANA Time Zone Database](https://www.iana.org/time-zones).`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `IANA Time Zone Database time zone. For example "America/New_York".`,
									},
								},
							},
						},
						"hostname": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The hostname of the DbSystem.`,
						},
						"lifecycle_state": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `State of the DbSystem.
Possible values:
PROVISIONING
AVAILABLE
UPDATING
TERMINATING
TERMINATED
FAILED
MIGRATED
MAINTENANCE_IN_PROGRESS
NEEDS_ATTENTION
UPGRADING`,
						},
						"ocid": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `OCID of the DbSystem.`,
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The date and time that the DbSystem was created.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				ForceNew:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"entitlement_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The ID of the subscription entitlement associated with the DbSystem`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The name of the DbSystem resource in the following format:
projects/{project}/locations/{region}/dbSystems/{db_system}`,
			},
			"oci_url": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `HTTPS link to OCI resources exposed to Customer via UI Interface.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"deletion_protection": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a terraform destroy or terraform apply that would delete the instance will fail.`,
				Default:     true,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceOracleDatabaseDbSystemCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandOracleDatabaseDbSystemDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	gcpOracleZoneProp, err := expandOracleDatabaseDbSystemGcpOracleZone(d.Get("gcp_oracle_zone"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("gcp_oracle_zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(gcpOracleZoneProp)) && (ok || !reflect.DeepEqual(v, gcpOracleZoneProp)) {
		obj["gcpOracleZone"] = gcpOracleZoneProp
	}
	odbNetworkProp, err := expandOracleDatabaseDbSystemOdbNetwork(d.Get("odb_network"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("odb_network"); !tpgresource.IsEmptyValue(reflect.ValueOf(odbNetworkProp)) && (ok || !reflect.DeepEqual(v, odbNetworkProp)) {
		obj["odbNetwork"] = odbNetworkProp
	}
	odbSubnetProp, err := expandOracleDatabaseDbSystemOdbSubnet(d.Get("odb_subnet"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("odb_subnet"); !tpgresource.IsEmptyValue(reflect.ValueOf(odbSubnetProp)) && (ok || !reflect.DeepEqual(v, odbSubnetProp)) {
		obj["odbSubnet"] = odbSubnetProp
	}
	propertiesProp, err := expandOracleDatabaseDbSystemProperties(d.Get("properties"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("properties"); !tpgresource.IsEmptyValue(reflect.ValueOf(propertiesProp)) && (ok || !reflect.DeepEqual(v, propertiesProp)) {
		obj["properties"] = propertiesProp
	}
	effectiveLabelsProp, err := expandOracleDatabaseDbSystemEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/dbSystems?dbSystemId={{db_system_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new DbSystem: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DbSystem: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating DbSystem: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/dbSystems/{{db_system_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = OracleDatabaseOperationWaitTime(
		config, res, project, "Creating DbSystem", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create DbSystem: %s", err)
	}

	log.Printf("[DEBUG] Finished creating DbSystem %q: %#v", d.Id(), res)

	return resourceOracleDatabaseDbSystemRead(d, meta)
}

func resourceOracleDatabaseDbSystemRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/dbSystems/{{db_system_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DbSystem: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("OracleDatabaseDbSystem %q", d.Id()))
	}

	// Explicitly set virtual fields to default values if unset
	if _, ok := d.GetOkExists("deletion_protection"); !ok {
		if err := d.Set("deletion_protection", true); err != nil {
			return fmt.Errorf("Error setting deletion_protection: %s", err)
		}
	}
	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}

	if err := d.Set("create_time", flattenOracleDatabaseDbSystemCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("display_name", flattenOracleDatabaseDbSystemDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("entitlement_id", flattenOracleDatabaseDbSystemEntitlementId(res["entitlementId"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("gcp_oracle_zone", flattenOracleDatabaseDbSystemGcpOracleZone(res["gcpOracleZone"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("labels", flattenOracleDatabaseDbSystemLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("name", flattenOracleDatabaseDbSystemName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("oci_url", flattenOracleDatabaseDbSystemOciUrl(res["ociUrl"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("odb_network", flattenOracleDatabaseDbSystemOdbNetwork(res["odbNetwork"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("odb_subnet", flattenOracleDatabaseDbSystemOdbSubnet(res["odbSubnet"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("properties", flattenOracleDatabaseDbSystemProperties(res["properties"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("terraform_labels", flattenOracleDatabaseDbSystemTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}
	if err := d.Set("effective_labels", flattenOracleDatabaseDbSystemEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading DbSystem: %s", err)
	}

	return nil
}

func resourceOracleDatabaseDbSystemUpdate(d *schema.ResourceData, meta interface{}) error {
	// Only the root field "labels" and "terraform_labels" are mutable
	return resourceOracleDatabaseDbSystemRead(d, meta)
}

func resourceOracleDatabaseDbSystemDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DbSystem: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/dbSystems/{{db_system_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	if d.Get("deletion_protection").(bool) {
		return fmt.Errorf("cannot destroy google_oracle_database_db_system resource with id : %q  without setting deletion_protection=false and running `terraform apply`", d.Id())
	}

	log.Printf("[DEBUG] Deleting DbSystem %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "DbSystem")
	}

	err = OracleDatabaseOperationWaitTime(
		config, res, project, "Deleting DbSystem", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting DbSystem %q: %#v", d.Id(), res)
	return nil
}

func resourceOracleDatabaseDbSystemImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/dbSystems/(?P<db_system_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<db_system_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<db_system_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/dbSystems/{{db_system_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Explicitly set virtual fields to default values on import
	if err := d.Set("deletion_protection", true); err != nil {
		return nil, fmt.Errorf("Error setting deletion_protection: %s", err)
	}

	return []*schema.ResourceData{d}, nil
}

func flattenOracleDatabaseDbSystemCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemEntitlementId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemGcpOracleZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenOracleDatabaseDbSystemName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemOciUrl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemOdbNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemOdbSubnet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemProperties(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["compute_count"] =
		flattenOracleDatabaseDbSystemPropertiesComputeCount(original["computeCount"], d, config)
	transformed["compute_model"] =
		flattenOracleDatabaseDbSystemPropertiesComputeModel(original["computeModel"], d, config)
	transformed["data_collection_options"] =
		flattenOracleDatabaseDbSystemPropertiesDataCollectionOptions(original["dataCollectionOptions"], d, config)
	transformed["data_storage_size_gb"] =
		flattenOracleDatabaseDbSystemPropertiesDataStorageSizeGb(original["dataStorageSizeGb"], d, config)
	transformed["database_edition"] =
		flattenOracleDatabaseDbSystemPropertiesDatabaseEdition(original["databaseEdition"], d, config)
	transformed["db_home"] =
		flattenOracleDatabaseDbSystemPropertiesDbHome(original["dbHome"], d, config)
	transformed["db_system_options"] =
		flattenOracleDatabaseDbSystemPropertiesDbSystemOptions(original["dbSystemOptions"], d, config)
	transformed["domain"] =
		flattenOracleDatabaseDbSystemPropertiesDomain(original["domain"], d, config)
	transformed["hostname"] =
		flattenOracleDatabaseDbSystemPropertiesHostname(original["hostname"], d, config)
	transformed["hostname_prefix"] =
		flattenOracleDatabaseDbSystemPropertiesHostnamePrefix(original["hostnamePrefix"], d, config)
	transformed["initial_data_storage_size_gb"] =
		flattenOracleDatabaseDbSystemPropertiesInitialDataStorageSizeGb(original["initialDataStorageSizeGb"], d, config)
	transformed["license_model"] =
		flattenOracleDatabaseDbSystemPropertiesLicenseModel(original["licenseModel"], d, config)
	transformed["lifecycle_state"] =
		flattenOracleDatabaseDbSystemPropertiesLifecycleState(original["lifecycleState"], d, config)
	transformed["memory_size_gb"] =
		flattenOracleDatabaseDbSystemPropertiesMemorySizeGb(original["memorySizeGb"], d, config)
	transformed["node_count"] =
		flattenOracleDatabaseDbSystemPropertiesNodeCount(original["nodeCount"], d, config)
	transformed["ocid"] =
		flattenOracleDatabaseDbSystemPropertiesOcid(original["ocid"], d, config)
	transformed["private_ip"] =
		flattenOracleDatabaseDbSystemPropertiesPrivateIp(original["privateIp"], d, config)
	transformed["reco_storage_size_gb"] =
		flattenOracleDatabaseDbSystemPropertiesRecoStorageSizeGb(original["recoStorageSizeGb"], d, config)
	transformed["shape"] =
		flattenOracleDatabaseDbSystemPropertiesShape(original["shape"], d, config)
	transformed["ssh_public_keys"] =
		flattenOracleDatabaseDbSystemPropertiesSshPublicKeys(original["sshPublicKeys"], d, config)
	transformed["time_zone"] =
		flattenOracleDatabaseDbSystemPropertiesTimeZone(original["timeZone"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseDbSystemPropertiesComputeCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseDbSystemPropertiesComputeModel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDataCollectionOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["is_diagnostics_events_enabled"] =
		flattenOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsDiagnosticsEventsEnabled(original["isDiagnosticsEventsEnabled"], d, config)
	transformed["is_incident_logs_enabled"] =
		flattenOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsIncidentLogsEnabled(original["isIncidentLogsEnabled"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsDiagnosticsEventsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsIncidentLogsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDataStorageSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseDbSystemPropertiesDatabaseEdition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("properties.0.database_edition")
}

func flattenOracleDatabaseDbSystemPropertiesDbHome(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("properties.0.db_home")
}
func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabase(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["admin_password"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseAdminPassword(original["adminPassword"], d, config)
	transformed["character_set"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseCharacterSet(original["characterSet"], d, config)
	transformed["create_time"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseCreateTime(original["createTime"], d, config)
	transformed["database_id"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseDatabaseId(original["databaseId"], d, config)
	transformed["db_home_name"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbHomeName(original["dbHomeName"], d, config)
	transformed["db_name"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbName(original["dbName"], d, config)
	transformed["db_unique_name"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbUniqueName(original["dbUniqueName"], d, config)
	transformed["gcp_oracle_zone"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseGcpOracleZone(original["gcpOracleZone"], d, config)
	transformed["name"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseName(original["name"], d, config)
	transformed["ncharacter_set"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseNcharacterSet(original["ncharacterSet"], d, config)
	transformed["oci_url"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseOciUrl(original["ociUrl"], d, config)
	transformed["ops_insights_status"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseOpsInsightsStatus(original["opsInsightsStatus"], d, config)
	transformed["properties"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseProperties(original["properties"], d, config)
	transformed["tde_wallet_password"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseTdeWalletPassword(original["tdeWalletPassword"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseAdminPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseCharacterSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseDatabaseId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbHomeName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbUniqueName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseGcpOracleZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseNcharacterSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseOciUrl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseOpsInsightsStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseProperties(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["database_management_config"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfig(original["databaseManagementConfig"], d, config)
	transformed["db_backup_config"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfig(original["dbBackupConfig"], d, config)
	transformed["db_version"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbVersion(original["dbVersion"], d, config)
	transformed["state"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesState(original["state"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["management_state"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementState(original["managementState"], d, config)
	transformed["management_type"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementType(original["managementType"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["auto_backup_enabled"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoBackupEnabled(original["autoBackupEnabled"], d, config)
	transformed["auto_full_backup_day"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupDay(original["autoFullBackupDay"], d, config)
	transformed["auto_full_backup_window"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupWindow(original["autoFullBackupWindow"], d, config)
	transformed["auto_incremental_backup_window"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoIncrementalBackupWindow(original["autoIncrementalBackupWindow"], d, config)
	transformed["backup_deletion_policy"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDeletionPolicy(original["backupDeletionPolicy"], d, config)
	transformed["backup_destination_details"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetails(original["backupDestinationDetails"], d, config)
	transformed["retention_period_days"] =
		flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigRetentionPeriodDays(original["retentionPeriodDays"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoBackupEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupDay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupWindow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoIncrementalBackupWindow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDeletionPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type": flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetailsType(original["type"], d, config),
		})
	}
	return transformed
}
func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetailsType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigRetentionPeriodDays(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDatabaseTdeWalletPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDbVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbHomeIsUnifiedAuditingEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDbSystemOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["storage_management"] =
		flattenOracleDatabaseDbSystemPropertiesDbSystemOptionsStorageManagement(original["storageManagement"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseDbSystemPropertiesDbSystemOptionsStorageManagement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesDomain(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesHostname(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesHostnamePrefix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("properties.0.hostname_prefix")
}

func flattenOracleDatabaseDbSystemPropertiesInitialDataStorageSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("properties.0.initial_data_storage_size_gb")
}

func flattenOracleDatabaseDbSystemPropertiesLicenseModel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesLifecycleState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesMemorySizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseDbSystemPropertiesNodeCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseDbSystemPropertiesOcid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesPrivateIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesRecoStorageSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseDbSystemPropertiesShape(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesSshPublicKeys(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemPropertiesTimeZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["id"] =
		flattenOracleDatabaseDbSystemPropertiesTimeZoneId(original["id"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseDbSystemPropertiesTimeZoneId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseDbSystemTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenOracleDatabaseDbSystemEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandOracleDatabaseDbSystemDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemGcpOracleZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemOdbNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemOdbSubnet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedComputeCount, err := expandOracleDatabaseDbSystemPropertiesComputeCount(original["compute_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedComputeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["computeCount"] = transformedComputeCount
	}

	transformedComputeModel, err := expandOracleDatabaseDbSystemPropertiesComputeModel(original["compute_model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedComputeModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["computeModel"] = transformedComputeModel
	}

	transformedDataCollectionOptions, err := expandOracleDatabaseDbSystemPropertiesDataCollectionOptions(original["data_collection_options"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataCollectionOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataCollectionOptions"] = transformedDataCollectionOptions
	}

	transformedDataStorageSizeGb, err := expandOracleDatabaseDbSystemPropertiesDataStorageSizeGb(original["data_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStorageSizeGb"] = transformedDataStorageSizeGb
	}

	transformedDatabaseEdition, err := expandOracleDatabaseDbSystemPropertiesDatabaseEdition(original["database_edition"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseEdition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseEdition"] = transformedDatabaseEdition
	}

	transformedDbHome, err := expandOracleDatabaseDbSystemPropertiesDbHome(original["db_home"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbHome); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbHome"] = transformedDbHome
	}

	transformedDbSystemOptions, err := expandOracleDatabaseDbSystemPropertiesDbSystemOptions(original["db_system_options"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbSystemOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbSystemOptions"] = transformedDbSystemOptions
	}

	transformedDomain, err := expandOracleDatabaseDbSystemPropertiesDomain(original["domain"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDomain); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["domain"] = transformedDomain
	}

	transformedHostname, err := expandOracleDatabaseDbSystemPropertiesHostname(original["hostname"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHostname); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hostname"] = transformedHostname
	}

	transformedHostnamePrefix, err := expandOracleDatabaseDbSystemPropertiesHostnamePrefix(original["hostname_prefix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHostnamePrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hostnamePrefix"] = transformedHostnamePrefix
	}

	transformedInitialDataStorageSizeGb, err := expandOracleDatabaseDbSystemPropertiesInitialDataStorageSizeGb(original["initial_data_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInitialDataStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["initialDataStorageSizeGb"] = transformedInitialDataStorageSizeGb
	}

	transformedLicenseModel, err := expandOracleDatabaseDbSystemPropertiesLicenseModel(original["license_model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLicenseModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["licenseModel"] = transformedLicenseModel
	}

	transformedLifecycleState, err := expandOracleDatabaseDbSystemPropertiesLifecycleState(original["lifecycle_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLifecycleState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lifecycleState"] = transformedLifecycleState
	}

	transformedMemorySizeGb, err := expandOracleDatabaseDbSystemPropertiesMemorySizeGb(original["memory_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMemorySizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["memorySizeGb"] = transformedMemorySizeGb
	}

	transformedNodeCount, err := expandOracleDatabaseDbSystemPropertiesNodeCount(original["node_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodeCount"] = transformedNodeCount
	}

	transformedOcid, err := expandOracleDatabaseDbSystemPropertiesOcid(original["ocid"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOcid); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ocid"] = transformedOcid
	}

	transformedPrivateIp, err := expandOracleDatabaseDbSystemPropertiesPrivateIp(original["private_ip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateIp"] = transformedPrivateIp
	}

	transformedRecoStorageSizeGb, err := expandOracleDatabaseDbSystemPropertiesRecoStorageSizeGb(original["reco_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRecoStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["recoStorageSizeGb"] = transformedRecoStorageSizeGb
	}

	transformedShape, err := expandOracleDatabaseDbSystemPropertiesShape(original["shape"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedShape); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["shape"] = transformedShape
	}

	transformedSshPublicKeys, err := expandOracleDatabaseDbSystemPropertiesSshPublicKeys(original["ssh_public_keys"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSshPublicKeys); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sshPublicKeys"] = transformedSshPublicKeys
	}

	transformedTimeZone, err := expandOracleDatabaseDbSystemPropertiesTimeZone(original["time_zone"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeZone); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeZone"] = transformedTimeZone
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesComputeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesComputeModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDataCollectionOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIsDiagnosticsEventsEnabled, err := expandOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsDiagnosticsEventsEnabled(original["is_diagnostics_events_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsDiagnosticsEventsEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isDiagnosticsEventsEnabled"] = transformedIsDiagnosticsEventsEnabled
	}

	transformedIsIncidentLogsEnabled, err := expandOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsIncidentLogsEnabled(original["is_incident_logs_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsIncidentLogsEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isIncidentLogsEnabled"] = transformedIsIncidentLogsEnabled
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsDiagnosticsEventsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsIncidentLogsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDataStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDatabaseEdition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHome(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatabase, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabase(original["database"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["database"] = transformedDatabase
	}

	transformedDbVersion, err := expandOracleDatabaseDbSystemPropertiesDbHomeDbVersion(original["db_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbVersion"] = transformedDbVersion
	}

	transformedDisplayName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDisplayName(original["display_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["displayName"] = transformedDisplayName
	}

	transformedIsUnifiedAuditingEnabled, err := expandOracleDatabaseDbSystemPropertiesDbHomeIsUnifiedAuditingEnabled(original["is_unified_auditing_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsUnifiedAuditingEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isUnifiedAuditingEnabled"] = transformedIsUnifiedAuditingEnabled
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdminPassword, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseAdminPassword(original["admin_password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdminPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["adminPassword"] = transformedAdminPassword
	}

	transformedCharacterSet, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseCharacterSet(original["character_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCharacterSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["characterSet"] = transformedCharacterSet
	}

	transformedCreateTime, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseCreateTime(original["create_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCreateTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["createTime"] = transformedCreateTime
	}

	transformedDatabaseId, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDatabaseId(original["database_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseId"] = transformedDatabaseId
	}

	transformedDbHomeName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbHomeName(original["db_home_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbHomeName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbHomeName"] = transformedDbHomeName
	}

	transformedDbName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbName(original["db_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbName"] = transformedDbName
	}

	transformedDbUniqueName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbUniqueName(original["db_unique_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbUniqueName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbUniqueName"] = transformedDbUniqueName
	}

	transformedGcpOracleZone, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseGcpOracleZone(original["gcp_oracle_zone"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcpOracleZone); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gcpOracleZone"] = transformedGcpOracleZone
	}

	transformedName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["name"] = transformedName
	}

	transformedNcharacterSet, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseNcharacterSet(original["ncharacter_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNcharacterSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ncharacterSet"] = transformedNcharacterSet
	}

	transformedOciUrl, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseOciUrl(original["oci_url"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOciUrl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ociUrl"] = transformedOciUrl
	}

	transformedOpsInsightsStatus, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseOpsInsightsStatus(original["ops_insights_status"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOpsInsightsStatus); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["opsInsightsStatus"] = transformedOpsInsightsStatus
	}

	transformedProperties, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseProperties(original["properties"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProperties); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["properties"] = transformedProperties
	}

	transformedTdeWalletPassword, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseTdeWalletPassword(original["tde_wallet_password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTdeWalletPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tdeWalletPassword"] = transformedTdeWalletPassword
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseAdminPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseCharacterSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseCreateTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDatabaseId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbHomeName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbUniqueName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseGcpOracleZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseNcharacterSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseOciUrl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseOpsInsightsStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatabaseManagementConfig, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfig(original["database_management_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseManagementConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseManagementConfig"] = transformedDatabaseManagementConfig
	}

	transformedDbBackupConfig, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfig(original["db_backup_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbBackupConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbBackupConfig"] = transformedDbBackupConfig
	}

	transformedDbVersion, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbVersion(original["db_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbVersion"] = transformedDbVersion
	}

	transformedState, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesState(original["state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["state"] = transformedState
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedManagementState, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementState(original["management_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedManagementState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["managementState"] = transformedManagementState
	}

	transformedManagementType, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementType(original["management_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedManagementType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["managementType"] = transformedManagementType
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAutoBackupEnabled, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoBackupEnabled(original["auto_backup_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoBackupEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoBackupEnabled"] = transformedAutoBackupEnabled
	}

	transformedAutoFullBackupDay, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupDay(original["auto_full_backup_day"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoFullBackupDay); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoFullBackupDay"] = transformedAutoFullBackupDay
	}

	transformedAutoFullBackupWindow, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupWindow(original["auto_full_backup_window"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoFullBackupWindow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoFullBackupWindow"] = transformedAutoFullBackupWindow
	}

	transformedAutoIncrementalBackupWindow, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoIncrementalBackupWindow(original["auto_incremental_backup_window"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoIncrementalBackupWindow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoIncrementalBackupWindow"] = transformedAutoIncrementalBackupWindow
	}

	transformedBackupDeletionPolicy, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDeletionPolicy(original["backup_deletion_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBackupDeletionPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["backupDeletionPolicy"] = transformedBackupDeletionPolicy
	}

	transformedBackupDestinationDetails, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetails(original["backup_destination_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBackupDestinationDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["backupDestinationDetails"] = transformedBackupDestinationDetails
	}

	transformedRetentionPeriodDays, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigRetentionPeriodDays(original["retention_period_days"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRetentionPeriodDays); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["retentionPeriodDays"] = transformedRetentionPeriodDays
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoBackupEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupDay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupWindow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoIncrementalBackupWindow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDeletionPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedType, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetailsType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetailsType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigRetentionPeriodDays(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseTdeWalletPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDbVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeIsUnifiedAuditingEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbSystemOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedStorageManagement, err := expandOracleDatabaseDbSystemPropertiesDbSystemOptionsStorageManagement(original["storage_management"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStorageManagement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["storageManagement"] = transformedStorageManagement
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbSystemOptionsStorageManagement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDomain(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesHostname(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesHostnamePrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesInitialDataStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesLicenseModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesLifecycleState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesMemorySizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesNodeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesOcid(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesPrivateIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesRecoStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesShape(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesSshPublicKeys(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesTimeZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedId, err := expandOracleDatabaseDbSystemPropertiesTimeZoneId(original["id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["id"] = transformedId
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesTimeZoneId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
