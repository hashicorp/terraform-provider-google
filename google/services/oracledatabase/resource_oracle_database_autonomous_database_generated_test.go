// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package oracledatabase_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccOracleDatabaseAutonomousDatabase_oracledatabaseAutonomousDatabaseBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"autonomous_database_id": "my-adb-instance-id",
		"project":                "oci-terraform-testing",
		"random_suffix":          acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckOracleDatabaseAutonomousDatabaseDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccOracleDatabaseAutonomousDatabase_oracledatabaseAutonomousDatabaseBasicExample(context),
			},
			{
				ResourceName:            "google_oracle_database_autonomous_database.myADB",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"admin_password", "autonomous_database_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccOracleDatabaseAutonomousDatabase_oracledatabaseAutonomousDatabaseBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_oracle_database_autonomous_database" "myADB"{
  autonomous_database_id = "%{autonomous_database_id}"
  location = "us-east4"
  project = "%{project}"
  database = "testdb"
  admin_password = "123Abpassword"
  network = data.google_compute_network.default.id
  cidr = "10.5.0.0/24"
  properties {
    compute_count = "2"
    data_storage_size_tb="1"
    db_version = "19c"
    db_workload = "OLTP"
    license_type = "LICENSE_INCLUDED"
    }
}

data "google_compute_network" "default" {
  name     = "new"
  project = "%{project}"
}
`, context)
}

func TestAccOracleDatabaseAutonomousDatabase_oracledatabaseAutonomousDatabaseFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"autonomous_database_id": "my-adb-instance-id-2",
		"project":                "oci-terraform-testing",
		"random_suffix":          acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckOracleDatabaseAutonomousDatabaseDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccOracleDatabaseAutonomousDatabase_oracledatabaseAutonomousDatabaseFullExample(context),
			},
			{
				ResourceName:            "google_oracle_database_autonomous_database.myADB",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"admin_password", "autonomous_database_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccOracleDatabaseAutonomousDatabase_oracledatabaseAutonomousDatabaseFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_oracle_database_autonomous_database" "myADB"{
  autonomous_database_id = "%{autonomous_database_id}"
  location = "us-east4"
  project = "%{project}"
  display_name = "autonomousDatabase displayname"
  database = "testdatabase"
  admin_password = "123Abpassword"
  network = data.google_compute_network.default.id
  cidr = "10.5.0.0/24"
  labels = {
    "label-one" = "value-one"
  }
  properties {
    compute_count         = "2"
    data_storage_size_gb   = "48"
    db_version = "19c"
    db_edition = "STANDARD_EDITION"
    db_workload = "OLTP"
    is_auto_scaling_enabled= "true"
    license_type = "BRING_YOUR_OWN_LICENSE"
    backup_retention_period_days    = "60"
    character_set                   = "AL32UTF8"
    is_storage_auto_scaling_enabled = "false"
    maintenance_schedule_type       = "REGULAR"
    mtls_connection_required        = "false"
    n_character_set                 = "AL16UTF16"
    operations_insights_state       = "NOT_ENABLED"
    customer_contacts {
      email = "xyz@example.com"
    }
    private_endpoint_ip    = "10.5.0.11"
    private_endpoint_label = "testhost"
  }
}

data "google_compute_network" "default" {
  name     = "new"
  project = "%{project}"
}
`, context)
}

func testAccCheckOracleDatabaseAutonomousDatabaseDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_oracle_database_autonomous_database" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/autonomousDatabases/{{autonomous_database_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("OracleDatabaseAutonomousDatabase still exists at %s", url)
			}
		}

		return nil
	}
}
