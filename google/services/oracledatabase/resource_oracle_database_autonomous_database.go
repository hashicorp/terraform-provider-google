// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package oracledatabase

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceOracleDatabaseAutonomousDatabase() *schema.Resource {
	return &schema.Resource{
		Create: resourceOracleDatabaseAutonomousDatabaseCreate,
		Read:   resourceOracleDatabaseAutonomousDatabaseRead,
		Update: resourceOracleDatabaseAutonomousDatabaseUpdate,
		Delete: resourceOracleDatabaseAutonomousDatabaseDelete,

		Importer: &schema.ResourceImporter{
			State: resourceOracleDatabaseAutonomousDatabaseImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(240 * time.Minute),
			Update: schema.DefaultTimeout(120 * time.Minute),
			Delete: schema.DefaultTimeout(120 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"autonomous_database_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The ID of the Autonomous Database to create. This value is restricted
to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of 63
characters in length. The value must start with a letter and end with
a letter or a number.`,
			},
			"cidr": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The subnet CIDR range for the Autonmous Database.`,
			},
			"database": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The name of the Autonomous Database. The database name must be unique in
the project. The name must begin with a letter and can
contain a maximum of 30 alphanumeric characters.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. See documentation for resource type 'oracledatabase.googleapis.com/AutonomousDatabaseBackup'.`,
			},
			"network": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The name of the VPC network used by the Autonomous Database.
Format: projects/{project}/global/networks/{network}`,
			},
			"properties": {
				Type:        schema.TypeList,
				Required:    true,
				ForceNew:    true,
				Description: `The properties of an Autonomous Database.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"db_workload": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `Possible values:
 DB_WORKLOAD_UNSPECIFIED
OLTP
DW
AJD
APEX`,
						},
						"license_type": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `The license type used for the Autonomous Database. 
 Possible values:
 LICENSE_TYPE_UNSPECIFIED
LICENSE_INCLUDED
BRING_YOUR_OWN_LICENSE`,
						},
						"backup_retention_period_days": {
							Type:     schema.TypeInt,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `The retention period for the Autonomous Database. This field is specified
in days, can range from 1 day to 60 days, and has a default value of
60 days.`,
						},
						"character_set": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `The character set for the Autonomous Database. The default is AL32UTF8.`,
							Default:     "AL32UTF8",
						},
						"compute_count": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The number of compute servers for the Autonomous Database.`,
						},
						"customer_contacts": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `The list of customer contacts.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"email": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `The email address used by Oracle to send notifications regarding databases
and infrastructure.`,
									},
								},
							},
						},
						"data_storage_size_gb": {
							Type:        schema.TypeInt,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The size of the data stored in the database, in gigabytes.`,
						},
						"data_storage_size_tb": {
							Type:        schema.TypeInt,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The size of the data stored in the database, in terabytes.`,
						},
						"db_edition": {
							Type:     schema.TypeString,
							Optional: true,
							ForceNew: true,
							Description: `The edition of the Autonomous Databases. 
 Possible values:
 DATABASE_EDITION_UNSPECIFIED
STANDARD_EDITION
ENTERPRISE_EDITION`,
						},
						"db_version": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `The Oracle Database version for the Autonomous Database.`,
						},
						"is_auto_scaling_enabled": {
							Type:     schema.TypeBool,
							Optional: true,
							ForceNew: true,
							Description: `This field indicates if auto scaling is enabled for the Autonomous Database
CPU core count.`,
						},
						"is_storage_auto_scaling_enabled": {
							Type:     schema.TypeBool,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `This field indicates if auto scaling is enabled for the Autonomous Database
storage.`,
						},
						"maintenance_schedule_type": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `The maintenance schedule of the Autonomous Database. 
 Possible values:
 MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
EARLY
REGULAR`,
						},
						"mtls_connection_required": {
							Type:        schema.TypeBool,
							Optional:    true,
							ForceNew:    true,
							Description: `This field specifies if the Autonomous Database requires mTLS connections.`,
						},
						"n_character_set": {
							Type:     schema.TypeString,
							Optional: true,
							ForceNew: true,
							Description: `The national character set for the Autonomous Database. The default is
AL16UTF16.`,
							Default: "AL16UTF16",
						},
						"operations_insights_state": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `Possible values:
 OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
ENABLING
ENABLED
DISABLING
NOT_ENABLED
FAILED_ENABLING
FAILED_DISABLING`,
						},
						"private_endpoint_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The private endpoint IP address for the Autonomous Database.`,
						},
						"private_endpoint_label": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `The private endpoint label for the Autonomous Database.`,
						},
						"actual_used_data_storage_size_tb": {
							Type:     schema.TypeFloat,
							Computed: true,
							Description: `The amount of storage currently being used for user and system data, in
terabytes.`,
						},
						"allocated_storage_size_tb": {
							Type:     schema.TypeFloat,
							Computed: true,
							Description: `The amount of storage currently allocated for the database tables and
billed for, rounded up in terabytes.`,
						},
						"apex_details": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `Oracle APEX Application Development.
https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"apex_version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The Oracle APEX Application Development version.`,
									},
									"ords_version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The Oracle REST Data Services (ORDS) version.`,
									},
								},
							},
						},
						"are_primary_allowlisted_ips_used": {
							Type:     schema.TypeBool,
							Computed: true,
							Description: `This field indicates the status of Data Guard and Access control for the
Autonomous Database. The field's value is null if Data Guard is disabled
or Access Control is disabled. The field's value is TRUE if both Data Guard
and Access Control are enabled, and the Autonomous Database is using
primary IP access control list (ACL) for standby. The field's value is
FALSE if both Data Guard and Access Control are enabled, and the Autonomous
Database is using a different IP access control list (ACL) for standby
compared to primary.`,
						},
						"autonomous_container_database_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The Autonomous Container Database OCID.`,
						},
						"available_upgrade_versions": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `The list of available Oracle Database upgrade versions for an Autonomous
Database.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"connection_strings": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `The connection string used to connect to the Autonomous Database.
https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"all_connection_strings": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `A list of all connection strings that can be used to connect to the
Autonomous Database.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"high": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The database service provides the highest level of resources to each SQL
statement.`,
												},
												"low": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The database service provides the least level of resources to each SQL
statement.`,
												},
												"medium": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The database service provides a lower level of resources to each SQL
statement.`,
												},
											},
										},
									},
									"dedicated": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The database service provides the least level of resources to each SQL
statement, but supports the most number of concurrent SQL statements.`,
									},
									"high": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The database service provides the highest level of resources to each SQL
statement.`,
									},
									"low": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The database service provides the least level of resources to each SQL
statement.`,
									},
									"medium": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The database service provides a lower level of resources to each SQL
statement.`,
									},
									"profiles": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `A list of connection string profiles to allow clients to group, filter, and
select values based on the structured metadata.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"consumer_group": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The current consumer group being used by the connection. 
 Possible values:
 CONSUMER_GROUP_UNSPECIFIED
HIGH
MEDIUM
LOW
TP
TPURGENT`,
												},
												"display_name": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `The display name for the database connection.`,
												},
												"host_format": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The host name format being currently used in connection string. 
 Possible values:
 HOST_FORMAT_UNSPECIFIED
FQDN
IP`,
												},
												"is_regional": {
													Type:     schema.TypeBool,
													Computed: true,
													Description: `This field indicates if the connection string is regional and is only
applicable for cross-region Data Guard.`,
												},
												"protocol": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The protocol being used by the connection. 
 Possible values:
 PROTOCOL_UNSPECIFIED
TCP
TCPS`,
												},
												"session_mode": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The current session mode of the connection. 
 Possible values:
 SESSION_MODE_UNSPECIFIED
DIRECT
INDIRECT`,
												},
												"syntax_format": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The syntax of the connection string. 
 Possible values:
 SYNTAX_FORMAT_UNSPECIFIED
LONG
EZCONNECT
EZCONNECTPLUS`,
												},
												"tls_authentication": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `This field indicates the TLS authentication type of the connection. 
 Possible values:
 TLS_AUTHENTICATION_UNSPECIFIED
SERVER
MUTUAL`,
												},
												"value": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `The value of the connection string.`,
												},
											},
										},
									},
								},
							},
						},
						"connection_urls": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `The URLs for accessing Oracle Application Express (APEX) and SQL Developer
Web with a browser from a Compute instance.
https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"apex_uri": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Oracle Application Express (APEX) URL.`,
									},
									"database_transforms_uri": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The URL of the Database Transforms for the Autonomous Database.`,
									},
									"graph_studio_uri": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The URL of the Graph Studio for the Autonomous Database.`,
									},
									"machine_learning_notebook_uri": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
Database.`,
									},
									"machine_learning_user_management_uri": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The URL of Machine Learning user management the Autonomous Database.`,
									},
									"mongo_db_uri": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The URL of the MongoDB API for the Autonomous Database.`,
									},
									"ords_uri": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The Oracle REST Data Services (ORDS) URL of the Web Access for the
Autonomous Database.`,
									},
									"sql_dev_web_uri": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The URL of the Oracle SQL Developer Web for the Autonomous Database.`,
									},
								},
							},
						},
						"data_safe_state": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The current state of the Data Safe registration for the
Autonomous Database. 
 Possible values:
 DATA_SAFE_STATE_UNSPECIFIED
REGISTERING
REGISTERED
DEREGISTERING
NOT_REGISTERED
FAILED`,
						},
						"database_management_state": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The current state of database management for the Autonomous Database. 
 Possible values:
 DATABASE_MANAGEMENT_STATE_UNSPECIFIED
ENABLING
ENABLED
DISABLING
NOT_ENABLED
FAILED_ENABLING
FAILED_DISABLING`,
						},
						"failed_data_recovery_duration": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `This field indicates the number of seconds of data loss during a Data
Guard failover.`,
						},
						"is_local_data_guard_enabled": {
							Type:     schema.TypeBool,
							Computed: true,
							Description: `This field indicates whether the Autonomous Database has local (in-region)
Data Guard enabled.`,
						},
						"lifecycle_details": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The details of the current lifestyle state of the Autonomous Database.`,
						},
						"local_adg_auto_failover_max_data_loss_limit": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: `This field indicates the maximum data loss limit for an Autonomous
Database, in seconds.`,
						},
						"local_disaster_recovery_type": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `This field indicates the local disaster recovery (DR) type of an
Autonomous Database. 
 Possible values:
 LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
ADG
BACKUP_BASED`,
						},
						"local_standby_db": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `Autonomous Data Guard standby database details.
https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"data_guard_role_changed_time": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The date and time the Autonomous Data Guard role was switched for the
standby Autonomous Database.`,
									},
									"disaster_recovery_role_changed_time": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The date and time the Disaster Recovery role was switched for the standby
Autonomous Database.`,
									},
									"lag_time_duration": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The amount of time, in seconds, that the data of the standby database lags
in comparison to the data of the primary database.`,
									},
									"lifecycle_details": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The additional details about the current lifecycle state of the
Autonomous Database.`,
									},
									"state": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `Possible values:
 STATE_UNSPECIFIED
PROVISIONING
AVAILABLE
STOPPING
STOPPED
STARTING
TERMINATING
TERMINATED
UNAVAILABLE
RESTORE_IN_PROGRESS
RESTORE_FAILED
BACKUP_IN_PROGRESS
SCALE_IN_PROGRESS
AVAILABLE_NEEDS_ATTENTION
UPDATING
MAINTENANCE_IN_PROGRESS
RESTARTING
RECREATING
ROLE_CHANGE_IN_PROGRESS
UPGRADING
INACCESSIBLE
STANDBY`,
									},
								},
							},
						},
						"maintenance_begin_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The date and time when maintenance will begin.`,
						},
						"maintenance_end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The date and time when maintenance will end.`,
						},
						"memory_per_oracle_compute_unit_gbs": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The amount of memory enabled per ECPU, in gigabytes.`,
						},
						"memory_table_gbs": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The memory assigned to in-memory tables in an Autonomous Database.`,
						},
						"next_long_term_backup_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The long term backup schedule of the Autonomous Database.`,
						},
						"oci_url": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The Oracle Cloud Infrastructure link for the Autonomous Database.`,
						},
						"ocid": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `OCID of the Autonomous Database.
https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle`,
						},
						"open_mode": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `This field indicates the current mode of the Autonomous Database. 
 Possible values:
 OPEN_MODE_UNSPECIFIED
READ_ONLY
READ_WRITE`,
						},
						"peer_db_ids": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `The list of OCIDs of standby databases located in Autonomous Data Guard
remote regions that are associated with the source database.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"permission_level": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The permission level of the Autonomous Database. 
 Possible values:
 PERMISSION_LEVEL_UNSPECIFIED
RESTRICTED
UNRESTRICTED`,
						},
						"private_endpoint": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The private endpoint for the Autonomous Database.`,
						},
						"refreshable_mode": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The refresh mode of the cloned Autonomous Database. 
 Possible values:
 REFRESHABLE_MODE_UNSPECIFIED
AUTOMATIC
MANUAL`,
						},
						"refreshable_state": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The refresh State of the clone. 
 Possible values:
 REFRESHABLE_STATE_UNSPECIFIED
REFRESHING
NOT_REFRESHING`,
						},
						"role": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The Data Guard role of the Autonomous Database. 
 Possible values:
 ROLE_UNSPECIFIED
PRIMARY
STANDBY
DISABLED_STANDBY
BACKUP_COPY
SNAPSHOT_STANDBY`,
						},
						"scheduled_operation_details": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `The list and details of the scheduled operations of the Autonomous
Database.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"day_of_week": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `Possible values:
 DAY_OF_WEEK_UNSPECIFIED
MONDAY
TUESDAY
WEDNESDAY
THURSDAY
FRIDAY
SATURDAY
SUNDAY`,
									},
									"start_time": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Represents a time of day. The date and time zone are either not significant
or are specified elsewhere. An API may choose to allow leap seconds. Related
types are google.type.Date and 'google.protobuf.Timestamp'.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"hours": {
													Type:     schema.TypeInt,
													Computed: true,
													Description: `Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
to allow the value "24:00:00" for scenarios like business closing time.`,
												},
												"minutes": {
													Type:        schema.TypeInt,
													Computed:    true,
													Description: `Minutes of hour of day. Must be from 0 to 59.`,
												},
												"nanos": {
													Type:        schema.TypeInt,
													Computed:    true,
													Description: `Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.`,
												},
												"seconds": {
													Type:     schema.TypeInt,
													Computed: true,
													Description: `Seconds of minutes of the time. Must normally be from 0 to 59. An API may
allow the value 60 if it allows leap-seconds.`,
												},
											},
										},
									},
									"stop_time": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Represents a time of day. The date and time zone are either not significant
or are specified elsewhere. An API may choose to allow leap seconds. Related
types are google.type.Date and 'google.protobuf.Timestamp'.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"hours": {
													Type:     schema.TypeInt,
													Computed: true,
													Description: `Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
to allow the value "24:00:00" for scenarios like business closing time.`,
												},
												"minutes": {
													Type:        schema.TypeInt,
													Computed:    true,
													Description: `Minutes of hour of day. Must be from 0 to 59.`,
												},
												"nanos": {
													Type:        schema.TypeInt,
													Computed:    true,
													Description: `Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.`,
												},
												"seconds": {
													Type:     schema.TypeInt,
													Computed: true,
													Description: `Seconds of minutes of the time. Must normally be from 0 to 59. An API may
allow the value 60 if it allows leap-seconds.`,
												},
											},
										},
									},
								},
							},
						},
						"sql_web_developer_url": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The SQL Web Developer URL for the Autonomous Database.`,
						},
						"state": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `Possible values:
 STATE_UNSPECIFIED
PROVISIONING
AVAILABLE
STOPPING
STOPPED
STARTING
TERMINATING
TERMINATED
UNAVAILABLE
RESTORE_IN_PROGRESS
RESTORE_FAILED
BACKUP_IN_PROGRESS
SCALE_IN_PROGRESS
AVAILABLE_NEEDS_ATTENTION
UPDATING
MAINTENANCE_IN_PROGRESS
RESTARTING
RECREATING
ROLE_CHANGE_IN_PROGRESS
UPGRADING
INACCESSIBLE
STANDBY`,
						},
						"supported_clone_regions": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `The list of available regions that can be used to create a clone for the
Autonomous Database.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"total_auto_backup_storage_size_gbs": {
							Type:     schema.TypeFloat,
							Computed: true,
							Description: `The storage space used by automatic backups of Autonomous Database, in
gigabytes.`,
						},
						"used_data_storage_size_tbs": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The storage space used by Autonomous Database, in gigabytes.`,
						},
					},
				},
			},
			"admin_password": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `The password for the default ADMIN user.`,
			},
			"display_name": {
				Type:     schema.TypeString,
				Computed: true,
				Optional: true,
				ForceNew: true,
				Description: `The display name for the Autonomous Database. The name does not have to
be unique within your project.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `The labels or tags associated with the Autonomous Database. 

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The date and time that the Autonomous Database was created.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				ForceNew:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"entitlement_id": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The ID of the subscription entitlement associated with the Autonomous
Database.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The name of the Autonomous Database resource in the following format:
projects/{project}/locations/{region}/autonomousDatabases/{autonomous_database}`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceOracleDatabaseAutonomousDatabaseCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	databaseProp, err := expandOracleDatabaseAutonomousDatabaseDatabase(d.Get("database"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("database"); !tpgresource.IsEmptyValue(reflect.ValueOf(databaseProp)) && (ok || !reflect.DeepEqual(v, databaseProp)) {
		obj["database"] = databaseProp
	}
	displayNameProp, err := expandOracleDatabaseAutonomousDatabaseDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	adminPasswordProp, err := expandOracleDatabaseAutonomousDatabaseAdminPassword(d.Get("admin_password"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("admin_password"); !tpgresource.IsEmptyValue(reflect.ValueOf(adminPasswordProp)) && (ok || !reflect.DeepEqual(v, adminPasswordProp)) {
		obj["adminPassword"] = adminPasswordProp
	}
	propertiesProp, err := expandOracleDatabaseAutonomousDatabaseProperties(d.Get("properties"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("properties"); !tpgresource.IsEmptyValue(reflect.ValueOf(propertiesProp)) && (ok || !reflect.DeepEqual(v, propertiesProp)) {
		obj["properties"] = propertiesProp
	}
	networkProp, err := expandOracleDatabaseAutonomousDatabaseNetwork(d.Get("network"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("network"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkProp)) && (ok || !reflect.DeepEqual(v, networkProp)) {
		obj["network"] = networkProp
	}
	cidrProp, err := expandOracleDatabaseAutonomousDatabaseCidr(d.Get("cidr"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("cidr"); !tpgresource.IsEmptyValue(reflect.ValueOf(cidrProp)) && (ok || !reflect.DeepEqual(v, cidrProp)) {
		obj["cidr"] = cidrProp
	}
	labelsProp, err := expandOracleDatabaseAutonomousDatabaseEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/autonomousDatabases?autonomousDatabaseId={{autonomous_database_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new AutonomousDatabase: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AutonomousDatabase: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating AutonomousDatabase: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/autonomousDatabases/{{autonomous_database_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = OracleDatabaseOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating AutonomousDatabase", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create AutonomousDatabase: %s", err)
	}

	if err := d.Set("name", flattenOracleDatabaseAutonomousDatabaseName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/autonomousDatabases/{{autonomous_database_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating AutonomousDatabase %q: %#v", d.Id(), res)

	return resourceOracleDatabaseAutonomousDatabaseRead(d, meta)
}

func resourceOracleDatabaseAutonomousDatabaseRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/autonomousDatabases/{{autonomous_database_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AutonomousDatabase: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("OracleDatabaseAutonomousDatabase %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}

	if err := d.Set("name", flattenOracleDatabaseAutonomousDatabaseName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("database", flattenOracleDatabaseAutonomousDatabaseDatabase(res["database"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("display_name", flattenOracleDatabaseAutonomousDatabaseDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("entitlement_id", flattenOracleDatabaseAutonomousDatabaseEntitlementId(res["entitlementId"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("properties", flattenOracleDatabaseAutonomousDatabaseProperties(res["properties"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("labels", flattenOracleDatabaseAutonomousDatabaseLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("network", flattenOracleDatabaseAutonomousDatabaseNetwork(res["network"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("cidr", flattenOracleDatabaseAutonomousDatabaseCidr(res["cidr"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("create_time", flattenOracleDatabaseAutonomousDatabaseCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("terraform_labels", flattenOracleDatabaseAutonomousDatabaseTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}
	if err := d.Set("effective_labels", flattenOracleDatabaseAutonomousDatabaseEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading AutonomousDatabase: %s", err)
	}

	return nil
}

func resourceOracleDatabaseAutonomousDatabaseUpdate(d *schema.ResourceData, meta interface{}) error {
	// Only the root field "labels" and "terraform_labels" are mutable
	return resourceOracleDatabaseAutonomousDatabaseRead(d, meta)
}

func resourceOracleDatabaseAutonomousDatabaseDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AutonomousDatabase: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/autonomousDatabases/{{autonomous_database_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting AutonomousDatabase %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "AutonomousDatabase")
	}

	err = OracleDatabaseOperationWaitTime(
		config, res, project, "Deleting AutonomousDatabase", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting AutonomousDatabase %q: %#v", d.Id(), res)
	return nil
}

func resourceOracleDatabaseAutonomousDatabaseImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/autonomousDatabases/(?P<autonomous_database_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<autonomous_database_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<autonomous_database_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/autonomousDatabases/{{autonomous_database_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenOracleDatabaseAutonomousDatabaseName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabaseDatabase(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabaseDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabaseEntitlementId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabaseProperties(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["ocid"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesOcid(original["ocid"], d, config)
	transformed["compute_count"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesComputeCount(original["computeCount"], d, config)
	transformed["data_storage_size_tb"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeTb(original["dataStorageSizeTb"], d, config)
	transformed["data_storage_size_gb"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeGb(original["dataStorageSizeGb"], d, config)
	transformed["db_workload"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesDbWorkload(original["dbWorkload"], d, config)
	transformed["db_edition"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesDbEdition(original["dbEdition"], d, config)
	transformed["character_set"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesCharacterSet(original["characterSet"], d, config)
	transformed["n_character_set"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesNCharacterSet(original["nCharacterSet"], d, config)
	transformed["private_endpoint_ip"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointIp(original["privateEndpointIp"], d, config)
	transformed["private_endpoint_label"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointLabel(original["privateEndpointLabel"], d, config)
	transformed["db_version"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesDbVersion(original["dbVersion"], d, config)
	transformed["is_auto_scaling_enabled"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesIsAutoScalingEnabled(original["isAutoScalingEnabled"], d, config)
	transformed["is_storage_auto_scaling_enabled"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesIsStorageAutoScalingEnabled(original["isStorageAutoScalingEnabled"], d, config)
	transformed["license_type"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLicenseType(original["licenseType"], d, config)
	transformed["customer_contacts"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesCustomerContacts(original["customerContacts"], d, config)
	transformed["maintenance_schedule_type"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesMaintenanceScheduleType(original["maintenanceScheduleType"], d, config)
	transformed["mtls_connection_required"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesMtlsConnectionRequired(original["mtlsConnectionRequired"], d, config)
	transformed["backup_retention_period_days"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesBackupRetentionPeriodDays(original["backupRetentionPeriodDays"], d, config)
	transformed["actual_used_data_storage_size_tb"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesActualUsedDataStorageSizeTb(original["actualUsedDataStorageSizeTb"], d, config)
	transformed["allocated_storage_size_tb"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesAllocatedStorageSizeTb(original["allocatedStorageSizeTb"], d, config)
	transformed["apex_details"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesApexDetails(original["apexDetails"], d, config)
	transformed["are_primary_allowlisted_ips_used"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesArePrimaryAllowlistedIpsUsed(original["arePrimaryAllowlistedIpsUsed"], d, config)
	transformed["lifecycle_details"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLifecycleDetails(original["lifecycleDetails"], d, config)
	transformed["state"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesState(original["state"], d, config)
	transformed["autonomous_container_database_id"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesAutonomousContainerDatabaseId(original["autonomousContainerDatabaseId"], d, config)
	transformed["available_upgrade_versions"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesAvailableUpgradeVersions(original["availableUpgradeVersions"], d, config)
	transformed["connection_strings"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStrings(original["connectionStrings"], d, config)
	transformed["connection_urls"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrls(original["connectionUrls"], d, config)
	transformed["failed_data_recovery_duration"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesFailedDataRecoveryDuration(original["failedDataRecoveryDuration"], d, config)
	transformed["memory_table_gbs"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesMemoryTableGbs(original["memoryTableGbs"], d, config)
	transformed["is_local_data_guard_enabled"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesIsLocalDataGuardEnabled(original["isLocalDataGuardEnabled"], d, config)
	transformed["local_adg_auto_failover_max_data_loss_limit"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLocalAdgAutoFailoverMaxDataLossLimit(original["localAdgAutoFailoverMaxDataLossLimit"], d, config)
	transformed["local_standby_db"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDb(original["localStandbyDb"], d, config)
	transformed["memory_per_oracle_compute_unit_gbs"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesMemoryPerOracleComputeUnitGbs(original["memoryPerOracleComputeUnitGbs"], d, config)
	transformed["local_disaster_recovery_type"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLocalDisasterRecoveryType(original["localDisasterRecoveryType"], d, config)
	transformed["data_safe_state"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesDataSafeState(original["dataSafeState"], d, config)
	transformed["database_management_state"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesDatabaseManagementState(original["databaseManagementState"], d, config)
	transformed["open_mode"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesOpenMode(original["openMode"], d, config)
	transformed["operations_insights_state"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesOperationsInsightsState(original["operationsInsightsState"], d, config)
	transformed["peer_db_ids"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesPeerDbIds(original["peerDbIds"], d, config)
	transformed["permission_level"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesPermissionLevel(original["permissionLevel"], d, config)
	transformed["private_endpoint"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesPrivateEndpoint(original["privateEndpoint"], d, config)
	transformed["refreshable_mode"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesRefreshableMode(original["refreshableMode"], d, config)
	transformed["refreshable_state"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesRefreshableState(original["refreshableState"], d, config)
	transformed["role"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesRole(original["role"], d, config)
	transformed["scheduled_operation_details"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetails(original["scheduledOperationDetails"], d, config)
	transformed["sql_web_developer_url"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesSqlWebDeveloperUrl(original["sqlWebDeveloperUrl"], d, config)
	transformed["supported_clone_regions"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesSupportedCloneRegions(original["supportedCloneRegions"], d, config)
	transformed["used_data_storage_size_tbs"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesUsedDataStorageSizeTbs(original["usedDataStorageSizeTbs"], d, config)
	transformed["oci_url"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesOciUrl(original["ociUrl"], d, config)
	transformed["total_auto_backup_storage_size_gbs"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesTotalAutoBackupStorageSizeGbs(original["totalAutoBackupStorageSizeGbs"], d, config)
	transformed["next_long_term_backup_time"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesNextLongTermBackupTime(original["nextLongTermBackupTime"], d, config)
	transformed["maintenance_begin_time"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesMaintenanceBeginTime(original["maintenanceBeginTime"], d, config)
	transformed["maintenance_end_time"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesMaintenanceEndTime(original["maintenanceEndTime"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseAutonomousDatabasePropertiesOcid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesComputeCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeTb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesDbWorkload(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesDbEdition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesCharacterSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesNCharacterSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointLabel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesDbVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesIsAutoScalingEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesIsStorageAutoScalingEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesLicenseType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesCustomerContacts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"email": flattenOracleDatabaseAutonomousDatabasePropertiesCustomerContactsEmail(original["email"], d, config),
		})
	}
	return transformed
}
func flattenOracleDatabaseAutonomousDatabasePropertiesCustomerContactsEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesMaintenanceScheduleType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesMtlsConnectionRequired(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesBackupRetentionPeriodDays(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesActualUsedDataStorageSizeTb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesAllocatedStorageSizeTb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesApexDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["apex_version"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesApexDetailsApexVersion(original["apexVersion"], d, config)
	transformed["ords_version"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesApexDetailsOrdsVersion(original["ordsVersion"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseAutonomousDatabasePropertiesApexDetailsApexVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesApexDetailsOrdsVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesArePrimaryAllowlistedIpsUsed(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesLifecycleDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesAutonomousContainerDatabaseId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesAvailableUpgradeVersions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStrings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["all_connection_strings"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStrings(original["allConnectionStrings"], d, config)
	transformed["dedicated"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsDedicated(original["dedicated"], d, config)
	transformed["high"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsHigh(original["high"], d, config)
	transformed["low"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsLow(original["low"], d, config)
	transformed["medium"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsMedium(original["medium"], d, config)
	transformed["profiles"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfiles(original["profiles"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStrings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["high"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsHigh(original["high"], d, config)
	transformed["low"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsLow(original["low"], d, config)
	transformed["medium"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsMedium(original["medium"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsHigh(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsLow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsMedium(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsDedicated(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsHigh(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsLow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsMedium(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfiles(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"consumer_group":     flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesConsumerGroup(original["consumerGroup"], d, config),
			"display_name":       flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesDisplayName(original["displayName"], d, config),
			"host_format":        flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesHostFormat(original["hostFormat"], d, config),
			"is_regional":        flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesIsRegional(original["isRegional"], d, config),
			"protocol":           flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesProtocol(original["protocol"], d, config),
			"session_mode":       flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSessionMode(original["sessionMode"], d, config),
			"syntax_format":      flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSyntaxFormat(original["syntaxFormat"], d, config),
			"tls_authentication": flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesTlsAuthentication(original["tlsAuthentication"], d, config),
			"value":              flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesConsumerGroup(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesHostFormat(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesIsRegional(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesProtocol(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSessionMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSyntaxFormat(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesTlsAuthentication(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrls(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["apex_uri"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsApexUri(original["apexUri"], d, config)
	transformed["database_transforms_uri"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsDatabaseTransformsUri(original["databaseTransformsUri"], d, config)
	transformed["graph_studio_uri"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsGraphStudioUri(original["graphStudioUri"], d, config)
	transformed["machine_learning_notebook_uri"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningNotebookUri(original["machineLearningNotebookUri"], d, config)
	transformed["machine_learning_user_management_uri"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningUserManagementUri(original["machineLearningUserManagementUri"], d, config)
	transformed["mongo_db_uri"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMongoDbUri(original["mongoDbUri"], d, config)
	transformed["ords_uri"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOrdsUri(original["ordsUri"], d, config)
	transformed["sql_dev_web_uri"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsSqlDevWebUri(original["sqlDevWebUri"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsApexUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsDatabaseTransformsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsGraphStudioUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningNotebookUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningUserManagementUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMongoDbUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOrdsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsSqlDevWebUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesFailedDataRecoveryDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesMemoryTableGbs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesIsLocalDataGuardEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesLocalAdgAutoFailoverMaxDataLossLimit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["lag_time_duration"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLagTimeDuration(original["lagTimeDuration"], d, config)
	transformed["lifecycle_details"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLifecycleDetails(original["lifecycleDetails"], d, config)
	transformed["state"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbState(original["state"], d, config)
	transformed["data_guard_role_changed_time"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDataGuardRoleChangedTime(original["dataGuardRoleChangedTime"], d, config)
	transformed["disaster_recovery_role_changed_time"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDisasterRecoveryRoleChangedTime(original["disasterRecoveryRoleChangedTime"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLagTimeDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLifecycleDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDataGuardRoleChangedTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDisasterRecoveryRoleChangedTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesMemoryPerOracleComputeUnitGbs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesLocalDisasterRecoveryType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesDataSafeState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesDatabaseManagementState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesOpenMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesOperationsInsightsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesPeerDbIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesPermissionLevel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesPrivateEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesRefreshableMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesRefreshableState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesRole(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"day_of_week": flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsDayOfWeek(original["dayOfWeek"], d, config),
			"start_time":  flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTime(original["startTime"], d, config),
			"stop_time":   flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTime(original["stopTime"], d, config),
		})
	}
	return transformed
}
func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsDayOfWeek(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["hours"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeHours(original["hours"], d, config)
	transformed["minutes"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeMinutes(original["minutes"], d, config)
	transformed["seconds"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeSeconds(original["seconds"], d, config)
	transformed["nanos"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeNanos(original["nanos"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeHours(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeMinutes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeSeconds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeNanos(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["hours"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeHours(original["hours"], d, config)
	transformed["minutes"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeMinutes(original["minutes"], d, config)
	transformed["seconds"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeSeconds(original["seconds"], d, config)
	transformed["nanos"] =
		flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeNanos(original["nanos"], d, config)
	return []interface{}{transformed}
}
func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeHours(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeMinutes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeSeconds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeNanos(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesSqlWebDeveloperUrl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesSupportedCloneRegions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesUsedDataStorageSizeTbs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenOracleDatabaseAutonomousDatabasePropertiesOciUrl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesTotalAutoBackupStorageSizeGbs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesNextLongTermBackupTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesMaintenanceBeginTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabasePropertiesMaintenanceEndTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabaseLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenOracleDatabaseAutonomousDatabaseNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabaseCidr(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabaseCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenOracleDatabaseAutonomousDatabaseTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenOracleDatabaseAutonomousDatabaseEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandOracleDatabaseAutonomousDatabaseDatabase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseAdminPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOcid, err := expandOracleDatabaseAutonomousDatabasePropertiesOcid(original["ocid"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOcid); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ocid"] = transformedOcid
	}

	transformedComputeCount, err := expandOracleDatabaseAutonomousDatabasePropertiesComputeCount(original["compute_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedComputeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["computeCount"] = transformedComputeCount
	}

	transformedDataStorageSizeTb, err := expandOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeTb(original["data_storage_size_tb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStorageSizeTb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStorageSizeTb"] = transformedDataStorageSizeTb
	}

	transformedDataStorageSizeGb, err := expandOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeGb(original["data_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStorageSizeGb"] = transformedDataStorageSizeGb
	}

	transformedDbWorkload, err := expandOracleDatabaseAutonomousDatabasePropertiesDbWorkload(original["db_workload"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbWorkload); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbWorkload"] = transformedDbWorkload
	}

	transformedDbEdition, err := expandOracleDatabaseAutonomousDatabasePropertiesDbEdition(original["db_edition"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbEdition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbEdition"] = transformedDbEdition
	}

	transformedCharacterSet, err := expandOracleDatabaseAutonomousDatabasePropertiesCharacterSet(original["character_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCharacterSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["characterSet"] = transformedCharacterSet
	}

	transformedNCharacterSet, err := expandOracleDatabaseAutonomousDatabasePropertiesNCharacterSet(original["n_character_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNCharacterSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nCharacterSet"] = transformedNCharacterSet
	}

	transformedPrivateEndpointIp, err := expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointIp(original["private_endpoint_ip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateEndpointIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateEndpointIp"] = transformedPrivateEndpointIp
	}

	transformedPrivateEndpointLabel, err := expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointLabel(original["private_endpoint_label"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateEndpointLabel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateEndpointLabel"] = transformedPrivateEndpointLabel
	}

	transformedDbVersion, err := expandOracleDatabaseAutonomousDatabasePropertiesDbVersion(original["db_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbVersion"] = transformedDbVersion
	}

	transformedIsAutoScalingEnabled, err := expandOracleDatabaseAutonomousDatabasePropertiesIsAutoScalingEnabled(original["is_auto_scaling_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsAutoScalingEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isAutoScalingEnabled"] = transformedIsAutoScalingEnabled
	}

	transformedIsStorageAutoScalingEnabled, err := expandOracleDatabaseAutonomousDatabasePropertiesIsStorageAutoScalingEnabled(original["is_storage_auto_scaling_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsStorageAutoScalingEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isStorageAutoScalingEnabled"] = transformedIsStorageAutoScalingEnabled
	}

	transformedLicenseType, err := expandOracleDatabaseAutonomousDatabasePropertiesLicenseType(original["license_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLicenseType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["licenseType"] = transformedLicenseType
	}

	transformedCustomerContacts, err := expandOracleDatabaseAutonomousDatabasePropertiesCustomerContacts(original["customer_contacts"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomerContacts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customerContacts"] = transformedCustomerContacts
	}

	transformedMaintenanceScheduleType, err := expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceScheduleType(original["maintenance_schedule_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceScheduleType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceScheduleType"] = transformedMaintenanceScheduleType
	}

	transformedMtlsConnectionRequired, err := expandOracleDatabaseAutonomousDatabasePropertiesMtlsConnectionRequired(original["mtls_connection_required"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMtlsConnectionRequired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["mtlsConnectionRequired"] = transformedMtlsConnectionRequired
	}

	transformedBackupRetentionPeriodDays, err := expandOracleDatabaseAutonomousDatabasePropertiesBackupRetentionPeriodDays(original["backup_retention_period_days"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBackupRetentionPeriodDays); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["backupRetentionPeriodDays"] = transformedBackupRetentionPeriodDays
	}

	transformedActualUsedDataStorageSizeTb, err := expandOracleDatabaseAutonomousDatabasePropertiesActualUsedDataStorageSizeTb(original["actual_used_data_storage_size_tb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedActualUsedDataStorageSizeTb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["actualUsedDataStorageSizeTb"] = transformedActualUsedDataStorageSizeTb
	}

	transformedAllocatedStorageSizeTb, err := expandOracleDatabaseAutonomousDatabasePropertiesAllocatedStorageSizeTb(original["allocated_storage_size_tb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllocatedStorageSizeTb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allocatedStorageSizeTb"] = transformedAllocatedStorageSizeTb
	}

	transformedApexDetails, err := expandOracleDatabaseAutonomousDatabasePropertiesApexDetails(original["apex_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApexDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apexDetails"] = transformedApexDetails
	}

	transformedArePrimaryAllowlistedIpsUsed, err := expandOracleDatabaseAutonomousDatabasePropertiesArePrimaryAllowlistedIpsUsed(original["are_primary_allowlisted_ips_used"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedArePrimaryAllowlistedIpsUsed); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["arePrimaryAllowlistedIpsUsed"] = transformedArePrimaryAllowlistedIpsUsed
	}

	transformedLifecycleDetails, err := expandOracleDatabaseAutonomousDatabasePropertiesLifecycleDetails(original["lifecycle_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLifecycleDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lifecycleDetails"] = transformedLifecycleDetails
	}

	transformedState, err := expandOracleDatabaseAutonomousDatabasePropertiesState(original["state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["state"] = transformedState
	}

	transformedAutonomousContainerDatabaseId, err := expandOracleDatabaseAutonomousDatabasePropertiesAutonomousContainerDatabaseId(original["autonomous_container_database_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutonomousContainerDatabaseId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autonomousContainerDatabaseId"] = transformedAutonomousContainerDatabaseId
	}

	transformedAvailableUpgradeVersions, err := expandOracleDatabaseAutonomousDatabasePropertiesAvailableUpgradeVersions(original["available_upgrade_versions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAvailableUpgradeVersions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["availableUpgradeVersions"] = transformedAvailableUpgradeVersions
	}

	transformedConnectionStrings, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStrings(original["connection_strings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConnectionStrings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["connectionStrings"] = transformedConnectionStrings
	}

	transformedConnectionUrls, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrls(original["connection_urls"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConnectionUrls); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["connectionUrls"] = transformedConnectionUrls
	}

	transformedFailedDataRecoveryDuration, err := expandOracleDatabaseAutonomousDatabasePropertiesFailedDataRecoveryDuration(original["failed_data_recovery_duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFailedDataRecoveryDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["failedDataRecoveryDuration"] = transformedFailedDataRecoveryDuration
	}

	transformedMemoryTableGbs, err := expandOracleDatabaseAutonomousDatabasePropertiesMemoryTableGbs(original["memory_table_gbs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMemoryTableGbs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["memoryTableGbs"] = transformedMemoryTableGbs
	}

	transformedIsLocalDataGuardEnabled, err := expandOracleDatabaseAutonomousDatabasePropertiesIsLocalDataGuardEnabled(original["is_local_data_guard_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsLocalDataGuardEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isLocalDataGuardEnabled"] = transformedIsLocalDataGuardEnabled
	}

	transformedLocalAdgAutoFailoverMaxDataLossLimit, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalAdgAutoFailoverMaxDataLossLimit(original["local_adg_auto_failover_max_data_loss_limit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocalAdgAutoFailoverMaxDataLossLimit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["localAdgAutoFailoverMaxDataLossLimit"] = transformedLocalAdgAutoFailoverMaxDataLossLimit
	}

	transformedLocalStandbyDb, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDb(original["local_standby_db"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocalStandbyDb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["localStandbyDb"] = transformedLocalStandbyDb
	}

	transformedMemoryPerOracleComputeUnitGbs, err := expandOracleDatabaseAutonomousDatabasePropertiesMemoryPerOracleComputeUnitGbs(original["memory_per_oracle_compute_unit_gbs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMemoryPerOracleComputeUnitGbs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["memoryPerOracleComputeUnitGbs"] = transformedMemoryPerOracleComputeUnitGbs
	}

	transformedLocalDisasterRecoveryType, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalDisasterRecoveryType(original["local_disaster_recovery_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocalDisasterRecoveryType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["localDisasterRecoveryType"] = transformedLocalDisasterRecoveryType
	}

	transformedDataSafeState, err := expandOracleDatabaseAutonomousDatabasePropertiesDataSafeState(original["data_safe_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataSafeState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataSafeState"] = transformedDataSafeState
	}

	transformedDatabaseManagementState, err := expandOracleDatabaseAutonomousDatabasePropertiesDatabaseManagementState(original["database_management_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseManagementState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseManagementState"] = transformedDatabaseManagementState
	}

	transformedOpenMode, err := expandOracleDatabaseAutonomousDatabasePropertiesOpenMode(original["open_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOpenMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["openMode"] = transformedOpenMode
	}

	transformedOperationsInsightsState, err := expandOracleDatabaseAutonomousDatabasePropertiesOperationsInsightsState(original["operations_insights_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperationsInsightsState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operationsInsightsState"] = transformedOperationsInsightsState
	}

	transformedPeerDbIds, err := expandOracleDatabaseAutonomousDatabasePropertiesPeerDbIds(original["peer_db_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPeerDbIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["peerDbIds"] = transformedPeerDbIds
	}

	transformedPermissionLevel, err := expandOracleDatabaseAutonomousDatabasePropertiesPermissionLevel(original["permission_level"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPermissionLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["permissionLevel"] = transformedPermissionLevel
	}

	transformedPrivateEndpoint, err := expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpoint(original["private_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateEndpoint"] = transformedPrivateEndpoint
	}

	transformedRefreshableMode, err := expandOracleDatabaseAutonomousDatabasePropertiesRefreshableMode(original["refreshable_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRefreshableMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["refreshableMode"] = transformedRefreshableMode
	}

	transformedRefreshableState, err := expandOracleDatabaseAutonomousDatabasePropertiesRefreshableState(original["refreshable_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRefreshableState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["refreshableState"] = transformedRefreshableState
	}

	transformedRole, err := expandOracleDatabaseAutonomousDatabasePropertiesRole(original["role"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRole); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["role"] = transformedRole
	}

	transformedScheduledOperationDetails, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetails(original["scheduled_operation_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScheduledOperationDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scheduledOperationDetails"] = transformedScheduledOperationDetails
	}

	transformedSqlWebDeveloperUrl, err := expandOracleDatabaseAutonomousDatabasePropertiesSqlWebDeveloperUrl(original["sql_web_developer_url"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSqlWebDeveloperUrl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sqlWebDeveloperUrl"] = transformedSqlWebDeveloperUrl
	}

	transformedSupportedCloneRegions, err := expandOracleDatabaseAutonomousDatabasePropertiesSupportedCloneRegions(original["supported_clone_regions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSupportedCloneRegions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["supportedCloneRegions"] = transformedSupportedCloneRegions
	}

	transformedUsedDataStorageSizeTbs, err := expandOracleDatabaseAutonomousDatabasePropertiesUsedDataStorageSizeTbs(original["used_data_storage_size_tbs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUsedDataStorageSizeTbs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["usedDataStorageSizeTbs"] = transformedUsedDataStorageSizeTbs
	}

	transformedOciUrl, err := expandOracleDatabaseAutonomousDatabasePropertiesOciUrl(original["oci_url"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOciUrl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ociUrl"] = transformedOciUrl
	}

	transformedTotalAutoBackupStorageSizeGbs, err := expandOracleDatabaseAutonomousDatabasePropertiesTotalAutoBackupStorageSizeGbs(original["total_auto_backup_storage_size_gbs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTotalAutoBackupStorageSizeGbs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["totalAutoBackupStorageSizeGbs"] = transformedTotalAutoBackupStorageSizeGbs
	}

	transformedNextLongTermBackupTime, err := expandOracleDatabaseAutonomousDatabasePropertiesNextLongTermBackupTime(original["next_long_term_backup_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNextLongTermBackupTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nextLongTermBackupTime"] = transformedNextLongTermBackupTime
	}

	transformedMaintenanceBeginTime, err := expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceBeginTime(original["maintenance_begin_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceBeginTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceBeginTime"] = transformedMaintenanceBeginTime
	}

	transformedMaintenanceEndTime, err := expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceEndTime(original["maintenance_end_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceEndTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceEndTime"] = transformedMaintenanceEndTime
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesOcid(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesComputeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeTb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDbWorkload(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDbEdition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesCharacterSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesNCharacterSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointLabel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDbVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesIsAutoScalingEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesIsStorageAutoScalingEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLicenseType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesCustomerContacts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedEmail, err := expandOracleDatabaseAutonomousDatabasePropertiesCustomerContactsEmail(original["email"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEmail); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["email"] = transformedEmail
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesCustomerContactsEmail(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceScheduleType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMtlsConnectionRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesBackupRetentionPeriodDays(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesActualUsedDataStorageSizeTb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesAllocatedStorageSizeTb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesApexDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedApexVersion, err := expandOracleDatabaseAutonomousDatabasePropertiesApexDetailsApexVersion(original["apex_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApexVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apexVersion"] = transformedApexVersion
	}

	transformedOrdsVersion, err := expandOracleDatabaseAutonomousDatabasePropertiesApexDetailsOrdsVersion(original["ords_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrdsVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ordsVersion"] = transformedOrdsVersion
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesApexDetailsApexVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesApexDetailsOrdsVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesArePrimaryAllowlistedIpsUsed(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLifecycleDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesAutonomousContainerDatabaseId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesAvailableUpgradeVersions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStrings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllConnectionStrings, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStrings(original["all_connection_strings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllConnectionStrings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allConnectionStrings"] = transformedAllConnectionStrings
	}

	transformedDedicated, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsDedicated(original["dedicated"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDedicated); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dedicated"] = transformedDedicated
	}

	transformedHigh, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsHigh(original["high"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHigh); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["high"] = transformedHigh
	}

	transformedLow, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsLow(original["low"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["low"] = transformedLow
	}

	transformedMedium, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsMedium(original["medium"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMedium); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["medium"] = transformedMedium
	}

	transformedProfiles, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfiles(original["profiles"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProfiles); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["profiles"] = transformedProfiles
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStrings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHigh, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsHigh(original["high"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHigh); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["high"] = transformedHigh
	}

	transformedLow, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsLow(original["low"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["low"] = transformedLow
	}

	transformedMedium, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsMedium(original["medium"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMedium); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["medium"] = transformedMedium
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsHigh(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsLow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsMedium(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsDedicated(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsHigh(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsLow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsMedium(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfiles(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedConsumerGroup, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesConsumerGroup(original["consumer_group"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConsumerGroup); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["consumerGroup"] = transformedConsumerGroup
		}

		transformedDisplayName, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedHostFormat, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesHostFormat(original["host_format"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHostFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["hostFormat"] = transformedHostFormat
		}

		transformedIsRegional, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesIsRegional(original["is_regional"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsRegional); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isRegional"] = transformedIsRegional
		}

		transformedProtocol, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesProtocol(original["protocol"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedProtocol); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["protocol"] = transformedProtocol
		}

		transformedSessionMode, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSessionMode(original["session_mode"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSessionMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["sessionMode"] = transformedSessionMode
		}

		transformedSyntaxFormat, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSyntaxFormat(original["syntax_format"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSyntaxFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["syntaxFormat"] = transformedSyntaxFormat
		}

		transformedTlsAuthentication, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesTlsAuthentication(original["tls_authentication"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTlsAuthentication); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tlsAuthentication"] = transformedTlsAuthentication
		}

		transformedValue, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesConsumerGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesHostFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesIsRegional(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesProtocol(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSessionMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSyntaxFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesTlsAuthentication(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrls(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedApexUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsApexUri(original["apex_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApexUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apexUri"] = transformedApexUri
	}

	transformedDatabaseTransformsUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsDatabaseTransformsUri(original["database_transforms_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseTransformsUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseTransformsUri"] = transformedDatabaseTransformsUri
	}

	transformedGraphStudioUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsGraphStudioUri(original["graph_studio_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGraphStudioUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["graphStudioUri"] = transformedGraphStudioUri
	}

	transformedMachineLearningNotebookUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningNotebookUri(original["machine_learning_notebook_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineLearningNotebookUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["machineLearningNotebookUri"] = transformedMachineLearningNotebookUri
	}

	transformedMachineLearningUserManagementUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningUserManagementUri(original["machine_learning_user_management_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineLearningUserManagementUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["machineLearningUserManagementUri"] = transformedMachineLearningUserManagementUri
	}

	transformedMongoDbUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMongoDbUri(original["mongo_db_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMongoDbUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["mongoDbUri"] = transformedMongoDbUri
	}

	transformedOrdsUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOrdsUri(original["ords_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrdsUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ordsUri"] = transformedOrdsUri
	}

	transformedSqlDevWebUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsSqlDevWebUri(original["sql_dev_web_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSqlDevWebUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sqlDevWebUri"] = transformedSqlDevWebUri
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsApexUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsDatabaseTransformsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsGraphStudioUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningNotebookUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningUserManagementUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMongoDbUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOrdsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsSqlDevWebUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesFailedDataRecoveryDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMemoryTableGbs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesIsLocalDataGuardEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalAdgAutoFailoverMaxDataLossLimit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLagTimeDuration, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLagTimeDuration(original["lag_time_duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLagTimeDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lagTimeDuration"] = transformedLagTimeDuration
	}

	transformedLifecycleDetails, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLifecycleDetails(original["lifecycle_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLifecycleDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lifecycleDetails"] = transformedLifecycleDetails
	}

	transformedState, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbState(original["state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["state"] = transformedState
	}

	transformedDataGuardRoleChangedTime, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDataGuardRoleChangedTime(original["data_guard_role_changed_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataGuardRoleChangedTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataGuardRoleChangedTime"] = transformedDataGuardRoleChangedTime
	}

	transformedDisasterRecoveryRoleChangedTime, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDisasterRecoveryRoleChangedTime(original["disaster_recovery_role_changed_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisasterRecoveryRoleChangedTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disasterRecoveryRoleChangedTime"] = transformedDisasterRecoveryRoleChangedTime
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLagTimeDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLifecycleDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDataGuardRoleChangedTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDisasterRecoveryRoleChangedTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMemoryPerOracleComputeUnitGbs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalDisasterRecoveryType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDataSafeState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDatabaseManagementState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesOpenMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesOperationsInsightsState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPeerDbIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPermissionLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesRefreshableMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesRefreshableState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesRole(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDayOfWeek, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsDayOfWeek(original["day_of_week"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDayOfWeek); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["dayOfWeek"] = transformedDayOfWeek
		}

		transformedStartTime, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTime(original["start_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["startTime"] = transformedStartTime
		}

		transformedStopTime, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTime(original["stop_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStopTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stopTime"] = transformedStopTime
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsDayOfWeek(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHours, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeHours(original["hours"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHours); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hours"] = transformedHours
	}

	transformedMinutes, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeMinutes(original["minutes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinutes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minutes"] = transformedMinutes
	}

	transformedSeconds, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeSeconds(original["seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["seconds"] = transformedSeconds
	}

	transformedNanos, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeNanos(original["nanos"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNanos); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nanos"] = transformedNanos
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeHours(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeMinutes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeNanos(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHours, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeHours(original["hours"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHours); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hours"] = transformedHours
	}

	transformedMinutes, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeMinutes(original["minutes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinutes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minutes"] = transformedMinutes
	}

	transformedSeconds, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeSeconds(original["seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["seconds"] = transformedSeconds
	}

	transformedNanos, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeNanos(original["nanos"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNanos); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nanos"] = transformedNanos
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeHours(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeMinutes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeNanos(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesSqlWebDeveloperUrl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesSupportedCloneRegions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesUsedDataStorageSizeTbs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesOciUrl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesTotalAutoBackupStorageSizeGbs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesNextLongTermBackupTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceBeginTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseCidr(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
