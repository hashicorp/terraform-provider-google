// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package oracledatabase_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccOracleDatabaseDbSystem_oracledatabaseDbSystemBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"database_id":         fmt.Sprintf("ofake-tf-test-database-basic-%s", acctest.RandString(t, 10)),
		"db_system_id":        fmt.Sprintf("ofake-tf-test-dbsystem-basic-%s", acctest.RandString(t, 10)),
		"deletion_protection": false,
		"odb_network":         "projects/oci-terraform-testing-prod/locations/europe-west2/odbNetworks/tf-test-permanent-odbnetwork",
		"odb_subnet":          "projects/oci-terraform-testing-prod/locations/europe-west2/odbNetworks/tf-test-permanent-odbnetwork/odbSubnets/tf-test-permanent-client-odbsubnet",
		"project":             "oci-terraform-testing-prod",
		"random_suffix":       acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckOracleDatabaseDbSystemDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccOracleDatabaseDbSystem_oracledatabaseDbSystemBasicExample(context),
			},
			{
				ResourceName:            "google_oracle_database_db_system.my_db_system",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"db_system_id", "deletion_protection", "labels", "location", "properties.0.database_edition", "properties.0.db_home", "properties.0.hostname_prefix", "properties.0.initial_data_storage_size_gb", "terraform_labels"},
			},
		},
	})
}

func testAccOracleDatabaseDbSystem_oracledatabaseDbSystemBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_oracle_database_db_system" "my_db_system"{
    db_system_id = "%{db_system_id}"
    display_name = "%{db_system_id} displayname"
    location = "europe-west2"
    project = "%{project}"
    odb_network = "%{odb_network}"
    odb_subnet = "%{odb_subnet}"
    properties {
        ssh_public_keys = ["ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCz1X2744t+6vRLmE5u6nHi6/QWh8bQDgHmd+OIxRQIGA/IWUtCs2FnaCNZcqvZkaeyjk5v0lTA/n+9jvO42Ipib53athrfVG8gRt8fzPL66C6ZqHq+6zZophhrCdfJh/0G4x9xJh5gdMprlaCR1P8yAaVvhBQSKGc4SiIkyMNBcHJ5YTtMQMTfxaB4G1sHZ6SDAY9a6Cq/zNjDwfPapWLsiP4mRhE5SSjJX6l6EYbkm0JeLQg+AbJiNEPvrvDp1wtTxzlPJtIivthmLMThFxK7+DkrYFuLvN5AHUdo9KTDLvHtDCvV70r8v0gafsrKkM/OE9Jtzoo0e1N/5K/ZdyFRbAkFT4QSF3nwpbmBWLf2Evg//YyEuxnz4CwPqFST2mucnrCCGCVWp1vnHZ0y30nM35njLOmWdRDFy5l27pKUTwLp02y3UYiiZyP7d3/u5pKiN4vC27VuvzprSdJxWoAvluOiDeRh+/oeQDowxoT/Oop8DzB9uJmjktXw8jyMW2+Rpg+ENQqeNgF1OGlEzypaWiRskEFlkpLb4v/s3ZDYkL1oW0Nv/J8LTjTOTEaYt2Udjoe9x2xWiGnQixhdChWuG+MaoWffzUgx1tsVj/DBXijR5DjkPkrA1GA98zd3q8GKEaAdcDenJjHhNYSd4+rE9pIsnYn7fo5X/tFfcQH1XQ== nobody@google.com"]
        compute_count = "4"
        hostname_prefix = "hostname1"
        shape = "VM.Standard.x86"
        initial_data_storage_size_gb = "256"
        database_edition = "STANDARD_EDITION"
        license_model = "LICENSE_INCLUDED"
        time_zone {
            id = "UTC"
        }
        db_home {
            db_version = "19.0.0.0"
            database {
                admin_password = "ABcde_1#234"
                database_id = "%{database_id}"
                db_name = "db"
            }
        }
    }
    deletion_protection = "%{deletion_protection}"
}


`, context)
}

func TestAccOracleDatabaseDbSystem_oracledatabaseDbSystemFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"database_id":         fmt.Sprintf("ofake-tf-test-database-basic-%s", acctest.RandString(t, 10)),
		"db_system_id":        fmt.Sprintf("ofake-tf-test-dbsystem-basic-%s", acctest.RandString(t, 10)),
		"deletion_protection": false,
		"odb_network":         "projects/oci-terraform-testing-prod/locations/europe-west2/odbNetworks/tf-test-permanent-odbnetwork",
		"odb_subnet":          "projects/oci-terraform-testing-prod/locations/europe-west2/odbNetworks/tf-test-permanent-odbnetwork/odbSubnets/tf-test-permanent-client-odbsubnet",
		"project":             "oci-terraform-testing-prod",
		"random_suffix":       acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckOracleDatabaseDbSystemDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccOracleDatabaseDbSystem_oracledatabaseDbSystemFullExample(context),
			},
			{
				ResourceName:            "google_oracle_database_db_system.my_db_system",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"db_system_id", "deletion_protection", "labels", "location", "properties.0.database_edition", "properties.0.db_home", "properties.0.hostname_prefix", "properties.0.initial_data_storage_size_gb", "terraform_labels"},
			},
		},
	})
}

func testAccOracleDatabaseDbSystem_oracledatabaseDbSystemFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_oracle_database_db_system" "my_db_system"{
    db_system_id = "%{db_system_id}"
    display_name = "%{db_system_id} displayname"
    location = "europe-west2"
    project = "%{project}"
    odb_network = "%{odb_network}"
    odb_subnet = "%{odb_subnet}"
    properties {
        ssh_public_keys = ["ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCz1X2744t+6vRLmE5u6nHi6/QWh8bQDgHmd+OIxRQIGA/IWUtCs2FnaCNZcqvZkaeyjk5v0lTA/n+9jvO42Ipib53athrfVG8gRt8fzPL66C6ZqHq+6zZophhrCdfJh/0G4x9xJh5gdMprlaCR1P8yAaVvhBQSKGc4SiIkyMNBcHJ5YTtMQMTfxaB4G1sHZ6SDAY9a6Cq/zNjDwfPapWLsiP4mRhE5SSjJX6l6EYbkm0JeLQg+AbJiNEPvrvDp1wtTxzlPJtIivthmLMThFxK7+DkrYFuLvN5AHUdo9KTDLvHtDCvV70r8v0gafsrKkM/OE9Jtzoo0e1N/5K/ZdyFRbAkFT4QSF3nwpbmBWLf2Evg//YyEuxnz4CwPqFST2mucnrCCGCVWp1vnHZ0y30nM35njLOmWdRDFy5l27pKUTwLp02y3UYiiZyP7d3/u5pKiN4vC27VuvzprSdJxWoAvluOiDeRh+/oeQDowxoT/Oop8DzB9uJmjktXw8jyMW2+Rpg+ENQqeNgF1OGlEzypaWiRskEFlkpLb4v/s3ZDYkL1oW0Nv/J8LTjTOTEaYt2Udjoe9x2xWiGnQixhdChWuG+MaoWffzUgx1tsVj/DBXijR5DjkPkrA1GA98zd3q8GKEaAdcDenJjHhNYSd4+rE9pIsnYn7fo5X/tFfcQH1XQ== nobody@google.com"]
        compute_count = "4"
        hostname_prefix = "hostname3"
        compute_model = "ECPU"
        data_storage_size_gb = "256"
        memory_size_gb = "8"
        shape = "VM.Standard.x86"
        initial_data_storage_size_gb = "256"
        database_edition = "STANDARD_EDITION"
        license_model = "LICENSE_INCLUDED"
        private_ip = "10.1.2.127"
        db_home {
            db_version = "19.0.0.0"
            database {
                db_name = "db"
                db_unique_name = "dbunique"
                admin_password = "ABcde_1#2345"
                tde_wallet_password = "ABcde_1#2345"
                database_id = "%{database_id}"
            }
            is_unified_auditing_enabled = "true"
        }
    }
  deletion_protection = "%{deletion_protection}"
}
`, context)
}

func testAccCheckOracleDatabaseDbSystemDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_oracle_database_db_system" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{OracleDatabaseBasePath}}projects/{{project}}/locations/{{location}}/dbSystems/{{db_system_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("OracleDatabaseDbSystem still exists at %s", url)
			}
		}

		return nil
	}
}
