// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package vmwareengine

import (
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceVmwareengineNetworkPeering() *schema.Resource {
	return &schema.Resource{
		Create: resourceVmwareengineNetworkPeeringCreate,
		Read:   resourceVmwareengineNetworkPeeringRead,
		Update: resourceVmwareengineNetworkPeeringUpdate,
		Delete: resourceVmwareengineNetworkPeeringDelete,

		Importer: &schema.ResourceImporter{
			State: resourceVmwareengineNetworkPeeringImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the Network Peering.`,
			},
			"peer_network": {
				Type:     schema.TypeString,
				Required: true,
				Description: `The relative resource name of the network to peer with a standard VMware Engine network.
The provided network can be a consumer VPC network or another standard VMware Engine network.`,
			},
			"peer_network_type": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: verify.ValidateEnum([]string{"STANDARD", "VMWARE_ENGINE_NETWORK", "PRIVATE_SERVICES_ACCESS", "NETAPP_CLOUD_VOLUMES", "THIRD_PARTY_SERVICE", "DELL_POWERSCALE"}),
				Description:  `The type of the network to peer with the VMware Engine network. Possible values: ["STANDARD", "VMWARE_ENGINE_NETWORK", "PRIVATE_SERVICES_ACCESS", "NETAPP_CLOUD_VOLUMES", "THIRD_PARTY_SERVICE", "DELL_POWERSCALE"]`,
			},
			"vmware_engine_network": {
				Type:     schema.TypeString,
				Required: true,
				Description: `The relative resource name of the VMware Engine network. Specify the name in the following form:
projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
can either be a project number or a project ID.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `User-provided description for this network peering.`,
			},
			"export_custom_routes": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `True if custom routes are exported to the peered network; false otherwise.`,
				Default:     true,
			},
			"export_custom_routes_with_public_ip": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `True if all subnet routes with a public IP address range are exported; false otherwise.`,
				Default:     true,
			},
			"import_custom_routes": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `True if custom routes are imported from the peered network; false otherwise.`,
				Default:     true,
			},
			"import_custom_routes_with_public_ip": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `True if custom routes are imported from the peered network; false otherwise.`,
				Default:     true,
			},
			"create_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Creation time of this resource.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".`,
			},
			"state": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `State of the network peering.
This field has a value of 'ACTIVE' when there's a matching configuration in the peer network.
New values may be added to this enum when appropriate.`,
			},
			"state_details": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Details about the current state of the network peering.`,
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `System-generated unique identifier for the resource.`,
			},
			"update_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Last updated time of this resource.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".`,
			},
			"vmware_engine_network_canonical": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The canonical name of the VMware Engine network in the form:
projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceVmwareengineNetworkPeeringCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	peerNetworkProp, err := expandVmwareengineNetworkPeeringPeerNetwork(d.Get("peer_network"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("peer_network"); !tpgresource.IsEmptyValue(reflect.ValueOf(peerNetworkProp)) && (ok || !reflect.DeepEqual(v, peerNetworkProp)) {
		obj["peerNetwork"] = peerNetworkProp
	}
	exportCustomRoutesProp, err := expandVmwareengineNetworkPeeringExportCustomRoutes(d.Get("export_custom_routes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("export_custom_routes"); ok || !reflect.DeepEqual(v, exportCustomRoutesProp) {
		obj["exportCustomRoutes"] = exportCustomRoutesProp
	}
	importCustomRoutesProp, err := expandVmwareengineNetworkPeeringImportCustomRoutes(d.Get("import_custom_routes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("import_custom_routes"); ok || !reflect.DeepEqual(v, importCustomRoutesProp) {
		obj["importCustomRoutes"] = importCustomRoutesProp
	}
	exportCustomRoutesWithPublicIpProp, err := expandVmwareengineNetworkPeeringExportCustomRoutesWithPublicIp(d.Get("export_custom_routes_with_public_ip"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("export_custom_routes_with_public_ip"); ok || !reflect.DeepEqual(v, exportCustomRoutesWithPublicIpProp) {
		obj["exportCustomRoutesWithPublicIp"] = exportCustomRoutesWithPublicIpProp
	}
	importCustomRoutesWithPublicIpProp, err := expandVmwareengineNetworkPeeringImportCustomRoutesWithPublicIp(d.Get("import_custom_routes_with_public_ip"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("import_custom_routes_with_public_ip"); ok || !reflect.DeepEqual(v, importCustomRoutesWithPublicIpProp) {
		obj["importCustomRoutesWithPublicIp"] = importCustomRoutesWithPublicIpProp
	}
	peerNetworkTypeProp, err := expandVmwareengineNetworkPeeringPeerNetworkType(d.Get("peer_network_type"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("peer_network_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(peerNetworkTypeProp)) && (ok || !reflect.DeepEqual(v, peerNetworkTypeProp)) {
		obj["peerNetworkType"] = peerNetworkTypeProp
	}
	vmwareEngineNetworkProp, err := expandVmwareengineNetworkPeeringVmwareEngineNetwork(d.Get("vmware_engine_network"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("vmware_engine_network"); !tpgresource.IsEmptyValue(reflect.ValueOf(vmwareEngineNetworkProp)) && (ok || !reflect.DeepEqual(v, vmwareEngineNetworkProp)) {
		obj["vmwareEngineNetwork"] = vmwareEngineNetworkProp
	}
	descriptionProp, err := expandVmwareengineNetworkPeeringDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VmwareengineBasePath}}projects/{{project}}/locations/global/networkPeerings?networkPeeringId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new NetworkPeering: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NetworkPeering: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating NetworkPeering: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/global/networkPeerings/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = VmwareengineOperationWaitTime(
		config, res, project, "Creating NetworkPeering", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create NetworkPeering: %s", err)
	}

	log.Printf("[DEBUG] Finished creating NetworkPeering %q: %#v", d.Id(), res)

	return resourceVmwareengineNetworkPeeringRead(d, meta)
}

func resourceVmwareengineNetworkPeeringRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VmwareengineBasePath}}projects/{{project}}/locations/global/networkPeerings/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NetworkPeering: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("VmwareengineNetworkPeering %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}

	if err := d.Set("create_time", flattenVmwareengineNetworkPeeringCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("update_time", flattenVmwareengineNetworkPeeringUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("peer_network", flattenVmwareengineNetworkPeeringPeerNetwork(res["peerNetwork"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("export_custom_routes", flattenVmwareengineNetworkPeeringExportCustomRoutes(res["exportCustomRoutes"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("import_custom_routes", flattenVmwareengineNetworkPeeringImportCustomRoutes(res["importCustomRoutes"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("export_custom_routes_with_public_ip", flattenVmwareengineNetworkPeeringExportCustomRoutesWithPublicIp(res["exportCustomRoutesWithPublicIp"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("import_custom_routes_with_public_ip", flattenVmwareengineNetworkPeeringImportCustomRoutesWithPublicIp(res["importCustomRoutesWithPublicIp"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("state", flattenVmwareengineNetworkPeeringState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("state_details", flattenVmwareengineNetworkPeeringStateDetails(res["stateDetails"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("peer_network_type", flattenVmwareengineNetworkPeeringPeerNetworkType(res["peerNetworkType"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("uid", flattenVmwareengineNetworkPeeringUid(res["uid"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("vmware_engine_network", flattenVmwareengineNetworkPeeringVmwareEngineNetwork(res["vmwareEngineNetwork"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("description", flattenVmwareengineNetworkPeeringDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}
	if err := d.Set("vmware_engine_network_canonical", flattenVmwareengineNetworkPeeringVmwareEngineNetworkCanonical(res["vmwareEngineNetworkCanonical"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkPeering: %s", err)
	}

	return nil
}

func resourceVmwareengineNetworkPeeringUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NetworkPeering: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	peerNetworkProp, err := expandVmwareengineNetworkPeeringPeerNetwork(d.Get("peer_network"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("peer_network"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, peerNetworkProp)) {
		obj["peerNetwork"] = peerNetworkProp
	}
	exportCustomRoutesProp, err := expandVmwareengineNetworkPeeringExportCustomRoutes(d.Get("export_custom_routes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("export_custom_routes"); ok || !reflect.DeepEqual(v, exportCustomRoutesProp) {
		obj["exportCustomRoutes"] = exportCustomRoutesProp
	}
	importCustomRoutesProp, err := expandVmwareengineNetworkPeeringImportCustomRoutes(d.Get("import_custom_routes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("import_custom_routes"); ok || !reflect.DeepEqual(v, importCustomRoutesProp) {
		obj["importCustomRoutes"] = importCustomRoutesProp
	}
	exportCustomRoutesWithPublicIpProp, err := expandVmwareengineNetworkPeeringExportCustomRoutesWithPublicIp(d.Get("export_custom_routes_with_public_ip"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("export_custom_routes_with_public_ip"); ok || !reflect.DeepEqual(v, exportCustomRoutesWithPublicIpProp) {
		obj["exportCustomRoutesWithPublicIp"] = exportCustomRoutesWithPublicIpProp
	}
	importCustomRoutesWithPublicIpProp, err := expandVmwareengineNetworkPeeringImportCustomRoutesWithPublicIp(d.Get("import_custom_routes_with_public_ip"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("import_custom_routes_with_public_ip"); ok || !reflect.DeepEqual(v, importCustomRoutesWithPublicIpProp) {
		obj["importCustomRoutesWithPublicIp"] = importCustomRoutesWithPublicIpProp
	}
	peerNetworkTypeProp, err := expandVmwareengineNetworkPeeringPeerNetworkType(d.Get("peer_network_type"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("peer_network_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, peerNetworkTypeProp)) {
		obj["peerNetworkType"] = peerNetworkTypeProp
	}
	vmwareEngineNetworkProp, err := expandVmwareengineNetworkPeeringVmwareEngineNetwork(d.Get("vmware_engine_network"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("vmware_engine_network"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, vmwareEngineNetworkProp)) {
		obj["vmwareEngineNetwork"] = vmwareEngineNetworkProp
	}
	descriptionProp, err := expandVmwareengineNetworkPeeringDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VmwareengineBasePath}}projects/{{project}}/locations/global/networkPeerings/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating NetworkPeering %q: %#v", d.Id(), obj)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
	})

	if err != nil {
		return fmt.Errorf("Error updating NetworkPeering %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating NetworkPeering %q: %#v", d.Id(), res)
	}

	err = VmwareengineOperationWaitTime(
		config, res, project, "Updating NetworkPeering", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceVmwareengineNetworkPeeringRead(d, meta)
}

func resourceVmwareengineNetworkPeeringDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NetworkPeering: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{VmwareengineBasePath}}projects/{{project}}/locations/global/networkPeerings/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	log.Printf("[DEBUG] Deleting NetworkPeering %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "NetworkPeering")
	}

	err = VmwareengineOperationWaitTime(
		config, res, project, "Deleting NetworkPeering", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting NetworkPeering %q: %#v", d.Id(), res)
	return nil
}

func resourceVmwareengineNetworkPeeringImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/global/networkPeerings/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/global/networkPeerings/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenVmwareengineNetworkPeeringCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringPeerNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringExportCustomRoutes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringImportCustomRoutes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringExportCustomRoutesWithPublicIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringImportCustomRoutesWithPublicIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringStateDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringPeerNetworkType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringVmwareEngineNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareengineNetworkPeeringVmwareEngineNetworkCanonical(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandVmwareengineNetworkPeeringPeerNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVmwareengineNetworkPeeringExportCustomRoutes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVmwareengineNetworkPeeringImportCustomRoutes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVmwareengineNetworkPeeringExportCustomRoutesWithPublicIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVmwareengineNetworkPeeringImportCustomRoutesWithPublicIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVmwareengineNetworkPeeringPeerNetworkType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVmwareengineNetworkPeeringVmwareEngineNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVmwareengineNetworkPeeringDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
