// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package databasemigrationservice_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDatabaseMigrationServiceMigrationJob_databaseMigrationServiceMigrationJobMysqlToMysqlExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDatabaseMigrationServiceMigrationJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatabaseMigrationServiceMigrationJob_databaseMigrationServiceMigrationJobMysqlToMysqlExample(context),
			},
			{
				ResourceName:            "google_database_migration_service_migration_job.mysqltomysql",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "migration_job_id", "terraform_labels"},
			},
		},
	})
}

func testAccDatabaseMigrationServiceMigrationJob_databaseMigrationServiceMigrationJobMysqlToMysqlExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_sql_database_instance" "source_csql" {
  name             = "tf-test-source-csql%{random_suffix}"
  database_version = "MYSQL_5_7"
  settings {
    tier = "db-n1-standard-1"
    deletion_protection_enabled = false
  }
  deletion_protection = false
}

resource "google_sql_ssl_cert" "source_sql_client_cert" {
  common_name = "cert%{random_suffix}"
  instance    = google_sql_database_instance.source_csql.name

  depends_on = [google_sql_database_instance.source_csql]
}

resource "google_sql_user" "source_sqldb_user" {
  name     = "username%{random_suffix}"
  instance = google_sql_database_instance.source_csql.name
  password = "password%{random_suffix}"

  depends_on = [google_sql_ssl_cert.source_sql_client_cert]
}

resource "google_database_migration_service_connection_profile" "source_cp" {
  location              = "us-central1"
  connection_profile_id = "tf-test-source-cp%{random_suffix}"
  display_name          = "tf-test-source-cp%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  mysql {
    host     = google_sql_database_instance.source_csql.ip_address.0.ip_address
    port     = 3306
    username = google_sql_user.source_sqldb_user.name
    password = google_sql_user.source_sqldb_user.password
    ssl {
      client_key         = google_sql_ssl_cert.source_sql_client_cert.private_key
      client_certificate = google_sql_ssl_cert.source_sql_client_cert.cert
      ca_certificate     = google_sql_ssl_cert.source_sql_client_cert.server_ca_cert
    }
    cloud_sql_id = "tf-test-source-csql%{random_suffix}"
  }

  depends_on = [google_sql_user.source_sqldb_user]
}

resource "google_sql_database_instance" "destination_csql" {
  name             = "tf-test-destination-csql%{random_suffix}"
  database_version = "MYSQL_5_7"
  settings {
    tier = "db-n1-standard-1"
    deletion_protection_enabled = false
  }
  deletion_protection = false
}

resource "google_database_migration_service_connection_profile" "destination_cp" {
  location              = "us-central1"
  connection_profile_id = "tf-test-destination-cp%{random_suffix}"
  display_name          = "tf-test-destination-cp%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  mysql {
    cloud_sql_id = "tf-test-destination-csql%{random_suffix}"
  }
  depends_on = [google_sql_database_instance.destination_csql]
}

resource "google_compute_network" "default" {
  name = "tf-test-destination-csql%{random_suffix}"
}

resource "google_database_migration_service_migration_job" "mysqltomysql" {
  location              = "us-central1"
  migration_job_id = "tf-test-my-migrationid%{random_suffix}"
  display_name = "tf-test-my-migrationid%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  performance_config {
    dump_parallel_level = "MAX"
  }
  vpc_peering_connectivity {
    vpc = google_compute_network.default.id
  }
  dump_type = "LOGICAL"
  dump_flags {
    dump_flags {
      name = "max-allowed-packet"
      value = "1073741824"
    }
  }
  source          = google_database_migration_service_connection_profile.source_cp.name
  destination     = google_database_migration_service_connection_profile.destination_cp.name
  type            = "CONTINUOUS"
}


`, context)
}

func TestAccDatabaseMigrationServiceMigrationJob_databaseMigrationServiceMigrationJobPostgresToPostgresExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDatabaseMigrationServiceMigrationJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatabaseMigrationServiceMigrationJob_databaseMigrationServiceMigrationJobPostgresToPostgresExample(context),
			},
			{
				ResourceName:            "google_database_migration_service_migration_job.psqltopsql",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "migration_job_id", "terraform_labels"},
			},
		},
	})
}

func testAccDatabaseMigrationServiceMigrationJob_databaseMigrationServiceMigrationJobPostgresToPostgresExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_sql_database_instance" "source_csql" {
  name             = "tf-test-source-csql%{random_suffix}"
  database_version = "POSTGRES_15"
  settings {
    tier = "db-custom-2-13312"
    deletion_protection_enabled = false
  }
  deletion_protection = false
}

resource "google_sql_ssl_cert" "source_sql_client_cert" {
  common_name = "cert%{random_suffix}"
  instance    = google_sql_database_instance.source_csql.name

  depends_on = [google_sql_database_instance.source_csql]
}

resource "google_sql_user" "source_sqldb_user" {
  name     = "username%{random_suffix}"
  instance = google_sql_database_instance.source_csql.name
  password = "password%{random_suffix}"

  depends_on = [google_sql_ssl_cert.source_sql_client_cert]
}

resource "google_database_migration_service_connection_profile" "source_cp" {
  location              = "us-central1"
  connection_profile_id = "tf-test-source-cp%{random_suffix}"
  display_name          = "tf-test-source-cp%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  postgresql {
    host     = google_sql_database_instance.source_csql.ip_address.0.ip_address
    port     = 3306
    username = google_sql_user.source_sqldb_user.name
    password = google_sql_user.source_sqldb_user.password
    ssl {
      client_key         = google_sql_ssl_cert.source_sql_client_cert.private_key
      client_certificate = google_sql_ssl_cert.source_sql_client_cert.cert
      ca_certificate     = google_sql_ssl_cert.source_sql_client_cert.server_ca_cert
    }
    cloud_sql_id = "tf-test-source-csql%{random_suffix}"
  }

  depends_on = [google_sql_user.source_sqldb_user]
}

resource "google_sql_database_instance" "destination_csql" {
  name             = "tf-test-destination-csql%{random_suffix}"
  database_version = "POSTGRES_15"
  settings {
    tier = "db-custom-2-13312"
    deletion_protection_enabled = false
  }
  deletion_protection = false
}

resource "google_database_migration_service_connection_profile" "destination_cp" {
  location              = "us-central1"
  connection_profile_id = "tf-test-destination-cp%{random_suffix}"
  display_name          = "tf-test-destination-cp%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  postgresql {
    cloud_sql_id = "tf-test-destination-csql%{random_suffix}"
  }
  depends_on = [google_sql_database_instance.destination_csql]
}

resource "google_database_migration_service_migration_job" "psqltopsql" {
  location              = "us-central1"
  migration_job_id = "tf-test-my-migrationid%{random_suffix}"
  display_name = "tf-test-my-migrationid%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  static_ip_connectivity {
  }
  source          = google_database_migration_service_connection_profile.source_cp.name
  destination     = google_database_migration_service_connection_profile.destination_cp.name
  type            = "CONTINUOUS"
}


`, context)
}

func TestAccDatabaseMigrationServiceMigrationJob_databaseMigrationServiceMigrationJobPostgresToAlloydbExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDatabaseMigrationServiceMigrationJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatabaseMigrationServiceMigrationJob_databaseMigrationServiceMigrationJobPostgresToAlloydbExample(context),
			},
			{
				ResourceName:            "google_database_migration_service_migration_job.psqltoalloydb",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "migration_job_id", "terraform_labels"},
			},
		},
	})
}

func testAccDatabaseMigrationServiceMigrationJob_databaseMigrationServiceMigrationJobPostgresToAlloydbExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_sql_database_instance" "source_csql" {
  name             = "tf-test-source-csql%{random_suffix}"
  database_version = "POSTGRES_15"
  settings {
    tier = "db-custom-2-13312"
    deletion_protection_enabled = false
  }
  deletion_protection = false
}

resource "google_sql_ssl_cert" "source_sql_client_cert" {
  common_name = "cert%{random_suffix}"
  instance    = google_sql_database_instance.source_csql.name

  depends_on = [google_sql_database_instance.source_csql]
}

resource "google_sql_user" "source_sqldb_user" {
  name     = "username%{random_suffix}"
  instance = google_sql_database_instance.source_csql.name
  password = "password%{random_suffix}"

  depends_on = [google_sql_ssl_cert.source_sql_client_cert]
}

resource "google_database_migration_service_connection_profile" "source_cp" {
  location              = "us-central1"
  connection_profile_id = "tf-test-source-cp%{random_suffix}"
  display_name          = "tf-test-source-cp%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  postgresql {
    host     = google_sql_database_instance.source_csql.ip_address.0.ip_address
    port     = 3306
    username = google_sql_user.source_sqldb_user.name
    password = google_sql_user.source_sqldb_user.password
    ssl {
      client_key         = google_sql_ssl_cert.source_sql_client_cert.private_key
      client_certificate = google_sql_ssl_cert.source_sql_client_cert.cert
      ca_certificate     = google_sql_ssl_cert.source_sql_client_cert.server_ca_cert
    }
    cloud_sql_id = "tf-test-source-csql%{random_suffix}"
  }

  depends_on = [google_sql_user.source_sqldb_user]
}

resource "google_alloydb_cluster" "destination_alloydb" {
  cluster_id = "tf-test-destination-alloydb%{random_suffix}"
  location   = "us-central1"
  network_config {
    network = google_compute_network.default.id
  }
  database_version = "POSTGRES_15"

  initial_user {
    user     = "tf-test-destination-alloydb%{random_suffix}"
    password = "tf-test-destination-alloydb%{random_suffix}"
  }
}

resource "google_alloydb_instance" "destination_alloydb_primary" {
  cluster       = google_alloydb_cluster.destination_alloydb.name
  instance_id   = "tf-test-destination-alloydb%{random_suffix}-primary"
  instance_type = "PRIMARY"

  depends_on = [google_service_networking_connection.vpc_connection]
}

resource "google_compute_global_address" "private_ip_alloc" {
  name          =  "tf-test-destination-alloydb%{random_suffix}"
  address_type  = "INTERNAL"
  purpose       = "VPC_PEERING"
  prefix_length = 16
  network       = google_compute_network.default.id
}

resource "google_service_networking_connection" "vpc_connection" {
  network                 = google_compute_network.default.id
  service                 = "servicenetworking.googleapis.com"
  reserved_peering_ranges = [google_compute_global_address.private_ip_alloc.name]
}

resource "google_compute_network" "default" {
  name = "tf-test-destination-alloydb%{random_suffix}"
}

resource "google_database_migration_service_connection_profile" "destination_cp" {
  location              = "us-central1"
  connection_profile_id = "tf-test-destination-cp%{random_suffix}"
  display_name          = "tf-test-destination-cp%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  postgresql {
    alloydb_cluster_id = "tf-test-destination-alloydb%{random_suffix}"
  }
  depends_on = [google_alloydb_cluster.destination_alloydb, google_alloydb_instance.destination_alloydb_primary]
}

resource "google_database_migration_service_migration_job" "psqltoalloydb" {
  location              = "us-central1"
  migration_job_id = "tf-test-my-migrationid%{random_suffix}"
  display_name = "tf-test-my-migrationid%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  static_ip_connectivity {
  }
  source          = google_database_migration_service_connection_profile.source_cp.name
  destination     = google_database_migration_service_connection_profile.destination_cp.name
  type            = "CONTINUOUS"
}


`, context)
}

func testAccCheckDatabaseMigrationServiceMigrationJobDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_database_migration_service_migration_job" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DatabaseMigrationServiceBasePath}}projects/{{project}}/locations/{{location}}/migrationJobs/{{migration_job_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DatabaseMigrationServiceMigrationJob still exists at %s", url)
			}
		}

		return nil
	}
}
