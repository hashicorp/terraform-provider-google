// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package databasemigrationservice

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceDatabaseMigrationServiceConnectionProfile() *schema.Resource {
	return &schema.Resource{
		Create: resourceDatabaseMigrationServiceConnectionProfileCreate,
		Read:   resourceDatabaseMigrationServiceConnectionProfileRead,
		Update: resourceDatabaseMigrationServiceConnectionProfileUpdate,
		Delete: resourceDatabaseMigrationServiceConnectionProfileDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDatabaseMigrationServiceConnectionProfileImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(60 * time.Minute),
			Update: schema.DefaultTimeout(60 * time.Minute),
			Delete: schema.DefaultTimeout(60 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"connection_profile_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the connection profile.`,
			},
			"alloydb": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cluster_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Required. The AlloyDB cluster ID that this connection profile is associated with.`,
						},
						"settings": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Immutable. Metadata used to create the destination AlloyDB cluster.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"initial_user": {
										Type:        schema.TypeList,
										Required:    true,
										ForceNew:    true,
										Description: `Required. Input only. Initial user to setup during cluster creation.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"password": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The initial password for the user.`,
													Sensitive:   true,
												},
												"user": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The database username.`,
												},
												"password_set": {
													Type:        schema.TypeBool,
													Computed:    true,
													Description: `Output only. Indicates if the initialUser.password field has been set.`,
												},
											},
										},
									},
									"vpc_network": {
										Type:     schema.TypeString,
										Required: true,
										Description: `Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster.
It is specified in the form: 'projects/{project_number}/global/networks/{network_id}'. This is required to create a cluster.`,
									},
									"labels": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: `Labels for the AlloyDB cluster created by DMS.`,
										Elem:        &schema.Schema{Type: schema.TypeString},
									},
									"primary_instance_settings": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Settings for the cluster's primary instance`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"id": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The database username.`,
												},
												"machine_config": {
													Type:        schema.TypeList,
													Required:    true,
													ForceNew:    true,
													Description: `Configuration for the machines that host the underlying database engine.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"cpu_count": {
																Type:        schema.TypeInt,
																Required:    true,
																Description: `The number of CPU's in the VM instance.`,
															},
														},
													},
												},
												"database_flags": {
													Type:        schema.TypeMap,
													Optional:    true,
													Description: `Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.`,
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"labels": {
													Type:        schema.TypeMap,
													Optional:    true,
													Description: `Labels for the AlloyDB primary instance created by DMS.`,
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"private_ip": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `Output only. The private IP address for the Instance. This is the connection endpoint for an end-user application.`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
				ExactlyOneOf: []string{"mysql", "postgresql", "cloudsql", "alloydb"},
			},
			"cloudsql": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"settings": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Immutable. Metadata used to create the destination Cloud SQL database.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"source_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The Database Migration Service source connection profile ID, in the format: projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`,
									},
									"activation_policy": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"ALWAYS", "NEVER", ""}),
										Description:  `The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Possible values: ["ALWAYS", "NEVER"]`,
									},
									"auto_storage_increase": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity.
If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.`,
									},
									"cmek_key_name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The KMS key name used for the csql instance.`,
									},
									"collation": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The Cloud SQL default instance level collation.`,
									},
									"data_disk_size_gb": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.`,
									},
									"data_disk_type": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"PD_SSD", "PD_HDD", ""}),
										Description:  `The type of storage. Possible values: ["PD_SSD", "PD_HDD"]`,
									},
									"database_flags": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: `The database flags passed to the Cloud SQL instance at startup.`,
										Elem:        &schema.Schema{Type: schema.TypeString},
									},
									"database_version": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The database engine type and version.
Currently supported values located at https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.connectionProfiles#sqldatabaseversion`,
									},
									"ip_config": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"authorized_networks": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The list of external networks that are allowed to connect to the instance using the IP.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"value": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `The allowlisted value for the access control list.`,
															},
															"expire_time": {
																Type:         schema.TypeString,
																Optional:     true,
																Description:  `The time when this access control entry expires in RFC 3339 format.`,
																ExactlyOneOf: []string{},
															},
															"label": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `A label to identify this entry.`,
															},
															"ttl": {
																Type:        schema.TypeString,
																Optional:    true,
																ForceNew:    true,
																Description: `Input only. The time-to-leave of this access control entry.`,
															},
														},
													},
												},
												"enable_ipv4": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `Whether the instance should be assigned an IPv4 address or not.`,
												},
												"private_network": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, projects/myProject/global/networks/default.
This setting can be updated, but it cannot be removed after it is set.`,
												},
												"require_ssl": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `Whether SSL connections over IP should be enforced or not.`,
												},
											},
										},
									},
									"root_password": {
										Type:        schema.TypeString,
										Optional:    true,
										ForceNew:    true,
										Description: `Input only. Initial root password.`,
										Sensitive:   true,
									},
									"storage_auto_resize_limit": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.`,
									},
									"tier": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The tier (or machine type) for this instance, for example: db-n1-standard-1 (MySQL instances) or db-custom-1-3840 (PostgreSQL instances).
For more information, see https://cloud.google.com/sql/docs/mysql/instance-settings`,
									},
									"user_labels": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: `The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs.`,
										Elem:        &schema.Schema{Type: schema.TypeString},
									},
									"zone": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The Google Cloud Platform zone where your Cloud SQL datdabse instance is located.`,
									},
									"root_password_set": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Output only. Indicates If this connection profile root password is stored.`,
									},
								},
							},
						},
						"cloud_sql_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. The Cloud SQL instance ID that this connection profile is associated with.`,
						},
						"private_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. The Cloud SQL database instance's private IP.`,
						},
						"public_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. The Cloud SQL database instance's public IP.`,
						},
					},
				},
				ExactlyOneOf: []string{"mysql", "postgresql", "cloudsql", "alloydb"},
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The connection profile display name.`,
			},
			"labels": {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: `The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"location": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `The location where the connection profile should reside.`,
			},
			"mysql": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies connection parameters required specifically for MySQL databases.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Required. The IP or hostname of the source MySQL database.`,
						},
						"password": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
This field is not returned on request, and the value is encrypted when stored in Database Migration Service.`,
							Sensitive: true,
						},
						"port": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: `Required. The network port of the source MySQL database.`,
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.`,
						},
						"cloud_sql_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.`,
						},
						"ssl": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `SSL configuration for the destination to connect to the source database.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ca_certificate": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate.
The replica will use this certificate to verify it's connecting to the right host.`,
										Sensitive: true,
									},
									"client_certificate": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.
If this field is used then the 'clientKey' field is mandatory`,
										Sensitive: true,
									},
									"client_key": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate.
If this field is used then the 'clientCertificate' field is mandatory.`,
										Sensitive: true,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The current connection profile state.`,
									},
								},
							},
						},
						"password_set": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Output only. Indicates If this connection profile password is stored.`,
						},
					},
				},
				ExactlyOneOf: []string{"mysql", "postgresql", "cloudsql", "alloydb"},
			},
			"postgresql": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Specifies connection parameters required specifically for PostgreSQL databases.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Required. The IP or hostname of the source MySQL database.`,
						},
						"password": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
							Description: `Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
This field is not returned on request, and the value is encrypted when stored in Database Migration Service.`,
							Sensitive: true,
						},
						"port": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: `Required. The network port of the source MySQL database.`,
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.`,
						},
						"cloud_sql_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.`,
						},
						"ssl": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `SSL configuration for the destination to connect to the source database.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ca_certificate": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate.
The replica will use this certificate to verify it's connecting to the right host.`,
										Sensitive: true,
									},
									"client_certificate": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.
If this field is used then the 'clientKey' field is mandatory`,
										Sensitive:    true,
										RequiredWith: []string{},
									},
									"client_key": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate.
If this field is used then the 'clientCertificate' field is mandatory.`,
										Sensitive:    true,
										RequiredWith: []string{},
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The current connection profile state.`,
									},
								},
							},
						},
						"network_architecture": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.`,
						},
						"password_set": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Output only. Indicates If this connection profile password is stored.`,
						},
					},
				},
				ExactlyOneOf: []string{"mysql", "postgresql", "cloudsql", "alloydb"},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC 'Zulu' format, accurate to nanoseconds. Example: '2014-10-02T15:01:23.045123456Z'.`,
			},
			"dbprovider": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The database provider.`,
			},
			"error": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Output only. The error details in case of state FAILED.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"code": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The status code, which should be an enum value of google.rpc.Code.`,
						},
						"details": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `A list of messages that carry the error details.`,
							Elem: &schema.Schema{
								Type: schema.TypeMap,
							},
						},
						"message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Human readable message indicating details about the current status.`,
						},
					},
				},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The current connection profile state.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDatabaseMigrationServiceConnectionProfileCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandDatabaseMigrationServiceConnectionProfileDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	labelsProp, err := expandDatabaseMigrationServiceConnectionProfileLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	mysqlProp, err := expandDatabaseMigrationServiceConnectionProfileMysql(d.Get("mysql"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("mysql"); !tpgresource.IsEmptyValue(reflect.ValueOf(mysqlProp)) && (ok || !reflect.DeepEqual(v, mysqlProp)) {
		obj["mysql"] = mysqlProp
	}
	postgresqlProp, err := expandDatabaseMigrationServiceConnectionProfilePostgresql(d.Get("postgresql"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("postgresql"); !tpgresource.IsEmptyValue(reflect.ValueOf(postgresqlProp)) && (ok || !reflect.DeepEqual(v, postgresqlProp)) {
		obj["postgresql"] = postgresqlProp
	}
	cloudsqlProp, err := expandDatabaseMigrationServiceConnectionProfileCloudsql(d.Get("cloudsql"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("cloudsql"); !tpgresource.IsEmptyValue(reflect.ValueOf(cloudsqlProp)) && (ok || !reflect.DeepEqual(v, cloudsqlProp)) {
		obj["cloudsql"] = cloudsqlProp
	}
	alloydbProp, err := expandDatabaseMigrationServiceConnectionProfileAlloydb(d.Get("alloydb"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("alloydb"); !tpgresource.IsEmptyValue(reflect.ValueOf(alloydbProp)) && (ok || !reflect.DeepEqual(v, alloydbProp)) {
		obj["alloydb"] = alloydbProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DatabaseMigrationServiceBasePath}}projects/{{project}}/locations/{{location}}/connectionProfiles?connectionProfileId={{connection_profile_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new ConnectionProfile: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectionProfile: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating ConnectionProfile: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = DatabaseMigrationServiceOperationWaitTime(
		config, res, project, "Creating ConnectionProfile", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create ConnectionProfile: %s", err)
	}

	log.Printf("[DEBUG] Finished creating ConnectionProfile %q: %#v", d.Id(), res)

	return resourceDatabaseMigrationServiceConnectionProfileRead(d, meta)
}

func resourceDatabaseMigrationServiceConnectionProfileRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DatabaseMigrationServiceBasePath}}projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectionProfile: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DatabaseMigrationServiceConnectionProfile %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}

	if err := d.Set("name", flattenDatabaseMigrationServiceConnectionProfileName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("display_name", flattenDatabaseMigrationServiceConnectionProfileDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("create_time", flattenDatabaseMigrationServiceConnectionProfileCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("labels", flattenDatabaseMigrationServiceConnectionProfileLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("state", flattenDatabaseMigrationServiceConnectionProfileState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("error", flattenDatabaseMigrationServiceConnectionProfileError(res["error"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("dbprovider", flattenDatabaseMigrationServiceConnectionProfileDbprovider(res["provider"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("mysql", flattenDatabaseMigrationServiceConnectionProfileMysql(res["mysql"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("postgresql", flattenDatabaseMigrationServiceConnectionProfilePostgresql(res["postgresql"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("cloudsql", flattenDatabaseMigrationServiceConnectionProfileCloudsql(res["cloudsql"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}
	if err := d.Set("alloydb", flattenDatabaseMigrationServiceConnectionProfileAlloydb(res["alloydb"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectionProfile: %s", err)
	}

	return nil
}

func resourceDatabaseMigrationServiceConnectionProfileUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectionProfile: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandDatabaseMigrationServiceConnectionProfileDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	labelsProp, err := expandDatabaseMigrationServiceConnectionProfileLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	mysqlProp, err := expandDatabaseMigrationServiceConnectionProfileMysql(d.Get("mysql"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("mysql"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, mysqlProp)) {
		obj["mysql"] = mysqlProp
	}
	postgresqlProp, err := expandDatabaseMigrationServiceConnectionProfilePostgresql(d.Get("postgresql"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("postgresql"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, postgresqlProp)) {
		obj["postgresql"] = postgresqlProp
	}
	cloudsqlProp, err := expandDatabaseMigrationServiceConnectionProfileCloudsql(d.Get("cloudsql"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("cloudsql"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, cloudsqlProp)) {
		obj["cloudsql"] = cloudsqlProp
	}
	alloydbProp, err := expandDatabaseMigrationServiceConnectionProfileAlloydb(d.Get("alloydb"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("alloydb"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, alloydbProp)) {
		obj["alloydb"] = alloydbProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DatabaseMigrationServiceBasePath}}projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating ConnectionProfile %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("labels") {
		updateMask = append(updateMask, "labels")
	}

	if d.HasChange("mysql") {
		updateMask = append(updateMask, "mysql")
	}

	if d.HasChange("postgresql") {
		updateMask = append(updateMask, "postgresql")
	}

	if d.HasChange("cloudsql") {
		updateMask = append(updateMask, "cloudsql")
	}

	if d.HasChange("alloydb") {
		updateMask = append(updateMask, "alloydb")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
	})

	if err != nil {
		return fmt.Errorf("Error updating ConnectionProfile %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating ConnectionProfile %q: %#v", d.Id(), res)
	}

	err = DatabaseMigrationServiceOperationWaitTime(
		config, res, project, "Updating ConnectionProfile", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceDatabaseMigrationServiceConnectionProfileRead(d, meta)
}

func resourceDatabaseMigrationServiceConnectionProfileDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectionProfile: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{DatabaseMigrationServiceBasePath}}projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting ConnectionProfile %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "ConnectionProfile")
	}

	err = DatabaseMigrationServiceOperationWaitTime(
		config, res, project, "Deleting ConnectionProfile", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting ConnectionProfile %q: %#v", d.Id(), res)
	return nil
}

func resourceDatabaseMigrationServiceConnectionProfileImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/connectionProfiles/(?P<connection_profile_id>[^/]+)",
		"(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<connection_profile_id>[^/]+)",
		"(?P<location>[^/]+)/(?P<connection_profile_id>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDatabaseMigrationServiceConnectionProfileName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileError(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["code"] =
		flattenDatabaseMigrationServiceConnectionProfileErrorCode(original["code"], d, config)
	transformed["message"] =
		flattenDatabaseMigrationServiceConnectionProfileErrorMessage(original["message"], d, config)
	transformed["details"] =
		flattenDatabaseMigrationServiceConnectionProfileErrorDetails(original["details"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileErrorCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfileErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileErrorDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileDbprovider(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysql(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["host"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlHost(original["host"], d, config)
	transformed["port"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlPort(original["port"], d, config)
	transformed["username"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlUsername(original["username"], d, config)
	transformed["password"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlPassword(original["password"], d, config)
	transformed["password_set"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlPasswordSet(original["passwordSet"], d, config)
	transformed["ssl"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSsl(original["ssl"], d, config)
	transformed["cloud_sql_id"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlCloudSqlId(original["cloudSqlId"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileMysqlHost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql.0.password")
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlPasswordSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlSsl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSslType(original["type"], d, config)
	transformed["client_key"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSslClientKey(original["clientKey"], d, config)
	transformed["client_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSslClientCertificate(original["clientCertificate"], d, config)
	transformed["ca_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSslCaCertificate(original["caCertificate"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileMysqlSslType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlSslClientKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql.0.ssl.0.client_key")
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlSslClientCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql.0.ssl.0.client_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlSslCaCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql.0.ssl.0.ca_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlCloudSqlId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresql(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["host"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlHost(original["host"], d, config)
	transformed["port"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlPort(original["port"], d, config)
	transformed["username"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlUsername(original["username"], d, config)
	transformed["password"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlPassword(original["password"], d, config)
	transformed["password_set"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlPasswordSet(original["passwordSet"], d, config)
	transformed["ssl"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSsl(original["ssl"], d, config)
	transformed["cloud_sql_id"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlCloudSqlId(original["cloudSqlId"], d, config)
	transformed["network_architecture"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlNetworkArchitecture(original["networkArchitecture"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfilePostgresqlHost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("postgresql.0.password")
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlPasswordSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSsl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslType(original["type"], d, config)
	transformed["client_key"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslClientKey(original["clientKey"], d, config)
	transformed["client_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslClientCertificate(original["clientCertificate"], d, config)
	transformed["ca_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslCaCertificate(original["caCertificate"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslClientKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("postgresql.0.ssl.0.client_key")
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslClientCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("postgresql.0.ssl.0.client_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslCaCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("postgresql.0.ssl.0.ca_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlCloudSqlId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlNetworkArchitecture(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsql(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cloud_sql_id"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlCloudSqlId(original["cloudSqlId"], d, config)
	transformed["settings"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettings(original["settings"], d, config)
	transformed["private_ip"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlPrivateIp(original["privateIp"], d, config)
	transformed["public_ip"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlPublicIp(original["publicIp"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileCloudsqlCloudSqlId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["database_version"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseVersion(original["databaseVersion"], d, config)
	transformed["user_labels"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsUserLabels(original["userLabels"], d, config)
	transformed["tier"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsTier(original["tier"], d, config)
	transformed["storage_auto_resize_limit"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsStorageAutoResizeLimit(original["storageAutoResizeLimit"], d, config)
	transformed["activation_policy"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsActivationPolicy(original["activationPolicy"], d, config)
	transformed["ip_config"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfig(original["ipConfig"], d, config)
	transformed["auto_storage_increase"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsAutoStorageIncrease(original["autoStorageIncrease"], d, config)
	transformed["database_flags"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseFlags(original["databaseFlags"], d, config)
	transformed["data_disk_type"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskType(original["dataDiskType"], d, config)
	transformed["data_disk_size_gb"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskSizeGb(original["dataDiskSizeGb"], d, config)
	transformed["zone"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsZone(original["zone"], d, config)
	transformed["source_id"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsSourceId(original["sourceId"], d, config)
	transformed["root_password"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPassword(original["rootPassword"], d, config)
	transformed["root_password_set"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPasswordSet(original["rootPasswordSet"], d, config)
	transformed["collation"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCollation(original["collation"], d, config)
	transformed["cmek_key_name"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCmekKeyName(original["cmekKeyName"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsUserLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsTier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsStorageAutoResizeLimit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsActivationPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_ipv4"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigEnableIpv4(original["enableIpv4"], d, config)
	transformed["private_network"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigPrivateNetwork(original["privateNetwork"], d, config)
	transformed["require_ssl"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigRequireSsl(original["requireSsl"], d, config)
	transformed["authorized_networks"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworks(original["authorizedNetworks"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigEnableIpv4(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigPrivateNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigRequireSsl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"value":       flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksValue(original["value"], d, config),
			"label":       flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksLabel(original["label"], d, config),
			"expire_time": flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksExpireTime(original["expireTime"], d, config),
			"ttl":         flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksTtl(original["ttl"], d, config),
		})
	}
	return transformed
}
func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksLabel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksExpireTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksTtl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsAutoStorageIncrease(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseFlags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsSourceId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("cloudsql.0.settings.0.root_password")
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPasswordSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCollation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCmekKeyName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlPrivateIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlPublicIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cluster_id"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbClusterId(original["clusterId"], d, config)
	transformed["settings"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettings(original["settings"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbClusterId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["initial_user"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUser(original["initialUser"], d, config)
	transformed["vpc_network"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsVpcNetwork(original["vpcNetwork"], d, config)
	transformed["labels"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsLabels(original["labels"], d, config)
	transformed["primary_instance_settings"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettings(original["primaryInstanceSettings"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUser(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["user"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserUser(original["user"], d, config)
	transformed["password"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPassword(original["password"], d, config)
	transformed["password_set"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPasswordSet(original["passwordSet"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserUser(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("alloydb.0.settings.0.initial_user.0.password")
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPasswordSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsVpcNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["id"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsId(original["id"], d, config)
	transformed["machine_config"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfig(original["machineConfig"], d, config)
	transformed["database_flags"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsDatabaseFlags(original["databaseFlags"], d, config)
	transformed["labels"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsLabels(original["labels"], d, config)
	transformed["private_ip"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsPrivateIp(original["privateIp"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cpu_count"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigCpuCount(original["cpuCount"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigCpuCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsDatabaseFlags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsPrivateIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDatabaseMigrationServiceConnectionProfileDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysql(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHost, err := expandDatabaseMigrationServiceConnectionProfileMysqlHost(original["host"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["host"] = transformedHost
	}

	transformedPort, err := expandDatabaseMigrationServiceConnectionProfileMysqlPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedUsername, err := expandDatabaseMigrationServiceConnectionProfileMysqlUsername(original["username"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["username"] = transformedUsername
	}

	transformedPassword, err := expandDatabaseMigrationServiceConnectionProfileMysqlPassword(original["password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["password"] = transformedPassword
	}

	transformedPasswordSet, err := expandDatabaseMigrationServiceConnectionProfileMysqlPasswordSet(original["password_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPasswordSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["passwordSet"] = transformedPasswordSet
	}

	transformedSsl, err := expandDatabaseMigrationServiceConnectionProfileMysqlSsl(original["ssl"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSsl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ssl"] = transformedSsl
	}

	transformedCloudSqlId, err := expandDatabaseMigrationServiceConnectionProfileMysqlCloudSqlId(original["cloud_sql_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudSqlId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudSqlId"] = transformedCloudSqlId
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlPasswordSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlSsl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandDatabaseMigrationServiceConnectionProfileMysqlSslType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedClientKey, err := expandDatabaseMigrationServiceConnectionProfileMysqlSslClientKey(original["client_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientKey"] = transformedClientKey
	}

	transformedClientCertificate, err := expandDatabaseMigrationServiceConnectionProfileMysqlSslClientCertificate(original["client_certificate"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientCertificate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientCertificate"] = transformedClientCertificate
	}

	transformedCaCertificate, err := expandDatabaseMigrationServiceConnectionProfileMysqlSslCaCertificate(original["ca_certificate"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCaCertificate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["caCertificate"] = transformedCaCertificate
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlSslType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlSslClientKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlSslClientCertificate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlSslCaCertificate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileMysqlCloudSqlId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresql(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHost, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlHost(original["host"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["host"] = transformedHost
	}

	transformedPort, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedUsername, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlUsername(original["username"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["username"] = transformedUsername
	}

	transformedPassword, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlPassword(original["password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["password"] = transformedPassword
	}

	transformedPasswordSet, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlPasswordSet(original["password_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPasswordSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["passwordSet"] = transformedPasswordSet
	}

	transformedSsl, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlSsl(original["ssl"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSsl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ssl"] = transformedSsl
	}

	transformedCloudSqlId, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlCloudSqlId(original["cloud_sql_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudSqlId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudSqlId"] = transformedCloudSqlId
	}

	transformedNetworkArchitecture, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlNetworkArchitecture(original["network_architecture"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetworkArchitecture); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["networkArchitecture"] = transformedNetworkArchitecture
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlPasswordSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlSsl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlSslType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedClientKey, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlSslClientKey(original["client_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientKey"] = transformedClientKey
	}

	transformedClientCertificate, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlSslClientCertificate(original["client_certificate"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientCertificate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientCertificate"] = transformedClientCertificate
	}

	transformedCaCertificate, err := expandDatabaseMigrationServiceConnectionProfilePostgresqlSslCaCertificate(original["ca_certificate"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCaCertificate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["caCertificate"] = transformedCaCertificate
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlSslType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlSslClientKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlSslClientCertificate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlSslCaCertificate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlCloudSqlId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfilePostgresqlNetworkArchitecture(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsql(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCloudSqlId, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlCloudSqlId(original["cloud_sql_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudSqlId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudSqlId"] = transformedCloudSqlId
	}

	transformedSettings, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettings(original["settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["settings"] = transformedSettings
	}

	transformedPrivateIp, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlPrivateIp(original["private_ip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateIp"] = transformedPrivateIp
	}

	transformedPublicIp, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlPublicIp(original["public_ip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPublicIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["publicIp"] = transformedPublicIp
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlCloudSqlId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatabaseVersion, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseVersion(original["database_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseVersion"] = transformedDatabaseVersion
	}

	transformedUserLabels, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsUserLabels(original["user_labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUserLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["userLabels"] = transformedUserLabels
	}

	transformedTier, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsTier(original["tier"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTier); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tier"] = transformedTier
	}

	transformedStorageAutoResizeLimit, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsStorageAutoResizeLimit(original["storage_auto_resize_limit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStorageAutoResizeLimit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["storageAutoResizeLimit"] = transformedStorageAutoResizeLimit
	}

	transformedActivationPolicy, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsActivationPolicy(original["activation_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedActivationPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["activationPolicy"] = transformedActivationPolicy
	}

	transformedIpConfig, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfig(original["ip_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIpConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ipConfig"] = transformedIpConfig
	}

	transformedAutoStorageIncrease, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsAutoStorageIncrease(original["auto_storage_increase"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoStorageIncrease); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoStorageIncrease"] = transformedAutoStorageIncrease
	}

	transformedDatabaseFlags, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseFlags(original["database_flags"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseFlags); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseFlags"] = transformedDatabaseFlags
	}

	transformedDataDiskType, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskType(original["data_disk_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataDiskType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataDiskType"] = transformedDataDiskType
	}

	transformedDataDiskSizeGb, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskSizeGb(original["data_disk_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataDiskSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataDiskSizeGb"] = transformedDataDiskSizeGb
	}

	transformedZone, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsZone(original["zone"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedZone); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["zone"] = transformedZone
	}

	transformedSourceId, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsSourceId(original["source_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSourceId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sourceId"] = transformedSourceId
	}

	transformedRootPassword, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPassword(original["root_password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRootPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rootPassword"] = transformedRootPassword
	}

	transformedRootPasswordSet, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPasswordSet(original["root_password_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRootPasswordSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rootPasswordSet"] = transformedRootPasswordSet
	}

	transformedCollation, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCollation(original["collation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCollation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["collation"] = transformedCollation
	}

	transformedCmekKeyName, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCmekKeyName(original["cmek_key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCmekKeyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cmekKeyName"] = transformedCmekKeyName
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsUserLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsTier(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsStorageAutoResizeLimit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsActivationPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableIpv4, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigEnableIpv4(original["enable_ipv4"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableIpv4); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableIpv4"] = transformedEnableIpv4
	}

	transformedPrivateNetwork, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigPrivateNetwork(original["private_network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateNetwork"] = transformedPrivateNetwork
	}

	transformedRequireSsl, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigRequireSsl(original["require_ssl"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequireSsl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["requireSsl"] = transformedRequireSsl
	}

	transformedAuthorizedNetworks, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworks(original["authorized_networks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthorizedNetworks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authorizedNetworks"] = transformedAuthorizedNetworks
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigEnableIpv4(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigPrivateNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigRequireSsl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedValue, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedLabel, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksLabel(original["label"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLabel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["label"] = transformedLabel
		}

		transformedExpireTime, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksExpireTime(original["expire_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExpireTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["expireTime"] = transformedExpireTime
		}

		transformedTtl, err := expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksTtl(original["ttl"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTtl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ttl"] = transformedTtl
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksLabel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksExpireTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksTtl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsAutoStorageIncrease(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseFlags(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsSourceId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPasswordSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCollation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCmekKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlPrivateIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileCloudsqlPublicIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedClusterId, err := expandDatabaseMigrationServiceConnectionProfileAlloydbClusterId(original["cluster_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClusterId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clusterId"] = transformedClusterId
	}

	transformedSettings, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettings(original["settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["settings"] = transformedSettings
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbClusterId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInitialUser, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUser(original["initial_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInitialUser); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["initialUser"] = transformedInitialUser
	}

	transformedVpcNetwork, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsVpcNetwork(original["vpc_network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVpcNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vpcNetwork"] = transformedVpcNetwork
	}

	transformedLabels, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsLabels(original["labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["labels"] = transformedLabels
	}

	transformedPrimaryInstanceSettings, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettings(original["primary_instance_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrimaryInstanceSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["primaryInstanceSettings"] = transformedPrimaryInstanceSettings
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUser, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserUser(original["user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUser); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["user"] = transformedUser
	}

	transformedPassword, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPassword(original["password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["password"] = transformedPassword
	}

	transformedPasswordSet, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPasswordSet(original["password_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPasswordSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["passwordSet"] = transformedPasswordSet
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPasswordSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsVpcNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedId, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsId(original["id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["id"] = transformedId
	}

	transformedMachineConfig, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfig(original["machine_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["machineConfig"] = transformedMachineConfig
	}

	transformedDatabaseFlags, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsDatabaseFlags(original["database_flags"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseFlags); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseFlags"] = transformedDatabaseFlags
	}

	transformedLabels, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsLabels(original["labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["labels"] = transformedLabels
	}

	transformedPrivateIp, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsPrivateIp(original["private_ip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateIp"] = transformedPrivateIp
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCpuCount, err := expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigCpuCount(original["cpu_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCpuCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cpuCount"] = transformedCpuCount
	}

	return transformed, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigCpuCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsDatabaseFlags(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsPrivateIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
