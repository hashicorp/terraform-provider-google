// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package databasemigrationservice_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileCloudsqlExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDatabaseMigrationServiceConnectionProfileDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileCloudsqlExample(context),
			},
			{
				ResourceName:            "google_database_migration_service_connection_profile.cloudsqlprofile",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"connection_profile_id", "labels", "location", "mysql.0.password", "mysql.0.ssl.0.ca_certificate", "mysql.0.ssl.0.client_certificate", "mysql.0.ssl.0.client_key", "terraform_labels"},
			},
		},
	})
}

func testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileCloudsqlExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_sql_database_instance" "cloudsqldb" {
  name             = "tf-test-my-database%{random_suffix}"
  database_version = "MYSQL_5_7"
  settings {
    tier = "db-n1-standard-1"
    deletion_protection_enabled = false
  }
  deletion_protection = false
}

resource "google_sql_ssl_cert" "sql_client_cert" {
  common_name = "tf-test-my-cert%{random_suffix}"
  instance    = google_sql_database_instance.cloudsqldb.name
  
  depends_on = [google_sql_database_instance.cloudsqldb]
}

resource "google_sql_user" "sqldb_user" {
  name     = "tf-test-my-username%{random_suffix}"
  instance = google_sql_database_instance.cloudsqldb.name
  password = "tf-test-my-password%{random_suffix}"
  
  depends_on = [google_sql_ssl_cert.sql_client_cert]
}



resource "google_database_migration_service_connection_profile" "cloudsqlprofile" {
  location              = "us-central1"
  connection_profile_id = "tf-test-my-fromprofileid%{random_suffix}"
  display_name          = "tf-test-my-fromprofileid%{random_suffix}_display"
  labels = { 
    foo = "bar"
  }
  mysql {
    host     = google_sql_database_instance.cloudsqldb.ip_address.0.ip_address
    port     = 3306
    username = google_sql_user.sqldb_user.name
    password = google_sql_user.sqldb_user.password
    ssl {
      client_key         = google_sql_ssl_cert.sql_client_cert.private_key
      client_certificate = google_sql_ssl_cert.sql_client_cert.cert
      ca_certificate     = google_sql_ssl_cert.sql_client_cert.server_ca_cert
    }
    cloud_sql_id = "tf-test-my-database%{random_suffix}"
  }

  depends_on = [google_sql_user.sqldb_user]
}


resource "google_database_migration_service_connection_profile" "cloudsqlprofile_destination" {
  location              = "us-central1"
  connection_profile_id = "tf-test-my-toprofileid%{random_suffix}"
  display_name          = "tf-test-my-toprofileid%{random_suffix}_displayname"
  labels = { 
    foo = "bar"
  }
  cloudsql {
    settings {
      database_version = "MYSQL_5_7"
      user_labels = { 
        cloudfoo = "cloudbar"
      }
      tier                      = "db-n1-standard-1"
      edition                   = "ENTERPRISE"
      storage_auto_resize_limit = "0"
      activation_policy         = "ALWAYS"
      ip_config {
        enable_ipv4 = true
        require_ssl = true
      }
      auto_storage_increase = true
      data_disk_type        = "PD_HDD"
      data_disk_size_gb     = "11"
      zone                  = "us-central1-b"
      source_id             = "projects/${data.google_project.project.project_id}/locations/us-central1/connectionProfiles/tf-test-my-fromprofileid%{random_suffix}"
      root_password         = "testpasscloudsql"
    }
  }
  depends_on = [google_database_migration_service_connection_profile.cloudsqlprofile]
}
`, context)
}

func TestAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfilePostgresExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDatabaseMigrationServiceConnectionProfileDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfilePostgresExample(context),
			},
			{
				ResourceName:            "google_database_migration_service_connection_profile.postgresprofile",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"connection_profile_id", "labels", "location", "postgresql.0.password", "postgresql.0.ssl.0.ca_certificate", "postgresql.0.ssl.0.client_certificate", "postgresql.0.ssl.0.client_key", "terraform_labels"},
			},
		},
	})
}

func testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfilePostgresExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_sql_database_instance" "postgresqldb" {
  name             = "tf-test-my-database%{random_suffix}"
  database_version = "POSTGRES_12"
  settings {
    tier = "db-custom-2-13312"
  }
  deletion_protection = false
}

resource "google_sql_ssl_cert" "sql_client_cert" {
  common_name = "tf-test-my-cert%{random_suffix}"
  instance    = google_sql_database_instance.postgresqldb.name

  depends_on = [google_sql_database_instance.postgresqldb]
}

resource "google_sql_user" "sqldb_user" {
  name     = "tf-test-my-username%{random_suffix}"
  instance = google_sql_database_instance.postgresqldb.name
  password = "tf-test-my-password%{random_suffix}"


  depends_on = [google_sql_ssl_cert.sql_client_cert]
}

resource "google_database_migration_service_connection_profile" "postgresprofile" {
  location = "us-central1"
  connection_profile_id = "tf-test-my-profileid%{random_suffix}"
  display_name = "tf-test-my-profileid%{random_suffix}_display"
  labels = { 
    foo = "bar" 
  }
  postgresql {
    host = google_sql_database_instance.postgresqldb.ip_address.0.ip_address
    port = 5432
    username = google_sql_user.sqldb_user.name
    password = google_sql_user.sqldb_user.password
    ssl {
      client_key = google_sql_ssl_cert.sql_client_cert.private_key
      client_certificate = google_sql_ssl_cert.sql_client_cert.cert
      ca_certificate = google_sql_ssl_cert.sql_client_cert.server_ca_cert
    }
    cloud_sql_id = "tf-test-my-database%{random_suffix}"
  }
  depends_on = [google_sql_user.sqldb_user]
}
`, context)
}

func TestAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileExistingMysqlExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDatabaseMigrationServiceConnectionProfileDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileExistingMysqlExample(context),
			},
			{
				ResourceName:            "google_database_migration_service_connection_profile.existing-mysql",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"connection_profile_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileExistingMysqlExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_sql_database_instance" "destination_csql" {
  name             = "tf-test-destination-csql%{random_suffix}"
  database_version = "MYSQL_5_7"
  settings {
    tier = "db-n1-standard-1"
    deletion_protection_enabled = false
  }
  deletion_protection = false
}

resource "google_database_migration_service_connection_profile" "existing-mysql" {
  location              = "us-central1"
  connection_profile_id = "tf-test-destination-cp%{random_suffix}"
  display_name          = "tf-test-destination-cp%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  mysql {
    cloud_sql_id = "tf-test-destination-csql%{random_suffix}"
  }
  depends_on = [google_sql_database_instance.destination_csql]
}
`, context)
}

func TestAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileExistingPostgresExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDatabaseMigrationServiceConnectionProfileDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileExistingPostgresExample(context),
			},
			{
				ResourceName:            "google_database_migration_service_connection_profile.existing-psql",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"connection_profile_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileExistingPostgresExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_sql_database_instance" "destination_csql" {
  name             = "tf-test-destination-csql%{random_suffix}"
  database_version = "POSTGRES_15"
  settings {
    tier = "db-custom-2-13312"
    deletion_protection_enabled = false
  }
  deletion_protection = false
}

resource "google_database_migration_service_connection_profile" "existing-psql" {
  location              = "us-central1"
  connection_profile_id = "tf-test-destination-cp%{random_suffix}"
  display_name          = "tf-test-destination-cp%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  postgresql {
    cloud_sql_id = "tf-test-destination-csql%{random_suffix}"
  }
  depends_on = [google_sql_database_instance.destination_csql]
}
`, context)
}

func TestAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileExistingAlloydbExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDatabaseMigrationServiceConnectionProfileDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileExistingAlloydbExample(context),
			},
			{
				ResourceName:            "google_database_migration_service_connection_profile.existing-alloydb",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"connection_profile_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccDatabaseMigrationServiceConnectionProfile_databaseMigrationServiceConnectionProfileExistingAlloydbExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_alloydb_cluster" "destination_alloydb" {
  cluster_id = "tf-test-destination-alloydb%{random_suffix}"
  location   = "us-central1"
  network_config {
    network = google_compute_network.default.id
  }
  database_version = "POSTGRES_15"

  initial_user {
    user     = "tf-test-destination-alloydb%{random_suffix}"
    password = "tf-test-destination-alloydb%{random_suffix}"
  }
}

resource "google_alloydb_instance" "destination_alloydb_primary" {
  cluster       = google_alloydb_cluster.destination_alloydb.name
  instance_id   = "tf-test-destination-alloydb%{random_suffix}-primary"
  instance_type = "PRIMARY"

  depends_on = [google_service_networking_connection.vpc_connection]
}

resource "google_compute_global_address" "private_ip_alloc" {
  name          =  "tf-test-destination-alloydb%{random_suffix}"
  address_type  = "INTERNAL"
  purpose       = "VPC_PEERING"
  prefix_length = 16
  network       = google_compute_network.default.id
}

resource "google_service_networking_connection" "vpc_connection" {
  network                 = google_compute_network.default.id
  service                 = "servicenetworking.googleapis.com"
  reserved_peering_ranges = [google_compute_global_address.private_ip_alloc.name]
}

resource "google_compute_network" "default" {
  name = "tf-test-destination-alloydb%{random_suffix}"
}

resource "google_database_migration_service_connection_profile" "existing-alloydb" {
  location              = "us-central1"
  connection_profile_id = "tf-test-destination-cp%{random_suffix}"
  display_name          = "tf-test-destination-cp%{random_suffix}_display"
  labels = {
    foo = "bar"
  }
  postgresql {
    alloydb_cluster_id = "tf-test-destination-alloydb%{random_suffix}"
  }
  depends_on = [google_alloydb_cluster.destination_alloydb, google_alloydb_instance.destination_alloydb_primary]
}
`, context)
}

func testAccCheckDatabaseMigrationServiceConnectionProfileDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_database_migration_service_connection_profile" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DatabaseMigrationServiceBasePath}}projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DatabaseMigrationServiceConnectionProfile still exists at %s", url)
			}
		}

		return nil
	}
}
