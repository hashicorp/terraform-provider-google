// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package bigtable_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccBigtableLogicalView_bigtableLogicalViewExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckBigtableLogicalViewDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBigtableLogicalView_bigtableLogicalViewExample(context),
			},
			{
				ResourceName:            "google_bigtable_logical_view.logical_view",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"instance", "logical_view_id"},
			},
		},
	})
}

func testAccBigtableLogicalView_bigtableLogicalViewExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigtable_instance" "instance" {
  name = "tf-test-bt-instance%{random_suffix}"
  cluster {
    cluster_id   = "cluster-1"
    zone         = "us-east1-b"
    num_nodes    = 3
    storage_type = "HDD"
  }

  deletion_protection  = false
}

resource "google_bigtable_table" "table" {
  name          = "tf-test-bt-table%{random_suffix}"
  instance_name = google_bigtable_instance.instance.name

  column_family {
	family = "CF"
  }
}

resource "google_bigtable_logical_view" "logical_view" {
  logical_view_id = "tf-test-bt-logical-view%{random_suffix}"
  instance        = google_bigtable_instance.instance.name
  query = <<EOT
SELECT _key, CF
FROM `+"`tf-test-bt-table%{random_suffix}`"+`
EOT

  depends_on = [
    google_bigtable_table.table
  ]
}
`, context)
}

func testAccCheckBigtableLogicalViewDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_bigtable_logical_view" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{BigtableBasePath}}projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("BigtableLogicalView still exists at %s", url)
			}
		}

		return nil
	}
}
