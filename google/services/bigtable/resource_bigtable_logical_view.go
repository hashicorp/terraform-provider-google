// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/bigtable/LogicalView.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package bigtable

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceBigtableLogicalView() *schema.Resource {
	return &schema.Resource{
		Create: resourceBigtableLogicalViewCreate,
		Read:   resourceBigtableLogicalViewRead,
		Update: resourceBigtableLogicalViewUpdate,
		Delete: resourceBigtableLogicalViewDelete,

		Importer: &schema.ResourceImporter{
			State: resourceBigtableLogicalViewImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(120 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"logical_view_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The unique name of the logical view in the form '[_a-zA-Z0-9][-_.a-zA-Z0-9]*'.`,
			},
			"query": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The logical view's select query.`,
			},
			"deletion_protection": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Set to true to make the logical view protected against deletion.`,
			},
			"instance": {
				Type:             schema.TypeString,
				Optional:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.CompareResourceNames,
				Description:      `The name of the instance to create the logical view within.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The unique name of the requested logical view. Values are of the form 'projects/<project>/instances/<instance>/logicalViews/<logicalViewId>'.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceBigtableLogicalViewCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	queryProp, err := expandBigtableLogicalViewQuery(d.Get("query"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("query"); !tpgresource.IsEmptyValue(reflect.ValueOf(queryProp)) && (ok || !reflect.DeepEqual(v, queryProp)) {
		obj["query"] = queryProp
	}
	deletionProtectionProp, err := expandBigtableLogicalViewDeletionProtection(d.Get("deletion_protection"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("deletion_protection"); !tpgresource.IsEmptyValue(reflect.ValueOf(deletionProtectionProp)) && (ok || !reflect.DeepEqual(v, deletionProtectionProp)) {
		obj["deletionProtection"] = deletionProtectionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigtableBasePath}}projects/{{project}}/instances/{{instance}}/logicalViews?logicalViewId={{logical_view_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new LogicalView: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LogicalView: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating LogicalView: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating LogicalView %q: %#v", d.Id(), res)

	return resourceBigtableLogicalViewRead(d, meta)
}

func resourceBigtableLogicalViewRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigtableBasePath}}projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LogicalView: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("BigtableLogicalView %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading LogicalView: %s", err)
	}

	if err := d.Set("name", flattenBigtableLogicalViewName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading LogicalView: %s", err)
	}
	if err := d.Set("query", flattenBigtableLogicalViewQuery(res["query"], d, config)); err != nil {
		return fmt.Errorf("Error reading LogicalView: %s", err)
	}
	if err := d.Set("deletion_protection", flattenBigtableLogicalViewDeletionProtection(res["deletionProtection"], d, config)); err != nil {
		return fmt.Errorf("Error reading LogicalView: %s", err)
	}

	return nil
}

func resourceBigtableLogicalViewUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LogicalView: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	queryProp, err := expandBigtableLogicalViewQuery(d.Get("query"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("query"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, queryProp)) {
		obj["query"] = queryProp
	}
	deletionProtectionProp, err := expandBigtableLogicalViewDeletionProtection(d.Get("deletion_protection"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("deletion_protection"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, deletionProtectionProp)) {
		obj["deletionProtection"] = deletionProtectionProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigtableBasePath}}projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating LogicalView %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("query") {
		updateMask = append(updateMask, "query")
	}

	if d.HasChange("deletion_protection") {
		updateMask = append(updateMask, "deletionProtection")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating LogicalView %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating LogicalView %q: %#v", d.Id(), res)
		}

	}

	return resourceBigtableLogicalViewRead(d, meta)
}

func resourceBigtableLogicalViewDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for LogicalView: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{BigtableBasePath}}projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting LogicalView %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "LogicalView")
	}

	log.Printf("[DEBUG] Finished deleting LogicalView %q: %#v", d.Id(), res)
	return nil
}

func resourceBigtableLogicalViewImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/instances/(?P<instance>[^/]+)/logicalViews/(?P<logical_view_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<instance>[^/]+)/(?P<logical_view_id>[^/]+)$",
		"^(?P<instance>[^/]+)/(?P<logical_view_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenBigtableLogicalViewName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigtableLogicalViewQuery(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigtableLogicalViewDeletionProtection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandBigtableLogicalViewQuery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigtableLogicalViewDeletionProtection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
