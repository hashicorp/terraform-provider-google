// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package blockchainnodeengine

import (
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceBlockchainNodeEngineBlockchainNodes() *schema.Resource {
	return &schema.Resource{
		Create: resourceBlockchainNodeEngineBlockchainNodesCreate,
		Read:   resourceBlockchainNodeEngineBlockchainNodesRead,
		Update: resourceBlockchainNodeEngineBlockchainNodesUpdate,
		Delete: resourceBlockchainNodeEngineBlockchainNodesDelete,

		Importer: &schema.ResourceImporter{
			State: resourceBlockchainNodeEngineBlockchainNodesImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(45 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(35 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"blockchain_node_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `ID of the requesting object.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Location of Blockchain Node being created.`,
			},
			"blockchain_type": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidateEnum([]string{"ETHEREUM", ""}),
				Description:  `User-provided key-value pairs Possible values: ["ETHEREUM"]`,
			},
			"ethereum_details": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `User-provided key-value pairs`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"api_enable_admin": {
							Type:        schema.TypeBool,
							Optional:    true,
							ForceNew:    true,
							Description: `Enables JSON-RPC access to functions in the admin namespace. Defaults to false.`,
						},
						"api_enable_debug": {
							Type:        schema.TypeBool,
							Optional:    true,
							ForceNew:    true,
							Description: `Enables JSON-RPC access to functions in the debug namespace. Defaults to false.`,
						},
						"consensus_client": {
							Type:         schema.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateEnum([]string{"CONSENSUS_CLIENT_UNSPECIFIED", "LIGHTHOUSE", ""}),
							Description:  `The consensus client Possible values: ["CONSENSUS_CLIENT_UNSPECIFIED", "LIGHTHOUSE"]`,
						},
						"execution_client": {
							Type:         schema.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateEnum([]string{"EXECUTION_CLIENT_UNSPECIFIED", "GETH", "ERIGON", ""}),
							Description:  `The execution client Possible values: ["EXECUTION_CLIENT_UNSPECIFIED", "GETH", "ERIGON"]`,
						},
						"geth_details": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `User-provided key-value pairs`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"garbage_collection_mode": {
										Type:         schema.TypeString,
										Optional:     true,
										ForceNew:     true,
										ValidateFunc: verify.ValidateEnum([]string{"FULL", "ARCHIVE", ""}),
										Description:  `Blockchain garbage collection modes. Only applicable when NodeType is FULL or ARCHIVE. Possible values: ["FULL", "ARCHIVE"]`,
									},
								},
							},
						},
						"network": {
							Type:         schema.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateEnum([]string{"MAINNET", "TESTNET_GOERLI_PRATER", "TESTNET_SEPOLIA", ""}),
							Description:  `The Ethereum environment being accessed. Possible values: ["MAINNET", "TESTNET_GOERLI_PRATER", "TESTNET_SEPOLIA"]`,
						},
						"node_type": {
							Type:         schema.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateEnum([]string{"LIGHT", "FULL", "ARCHIVE", ""}),
							Description:  `The type of Ethereum node. Possible values: ["LIGHT", "FULL", "ARCHIVE"]`,
						},
						"validator_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for validator-related parameters on the beacon client, and for any managed validator client.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"mev_relay_urls": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `URLs for MEV-relay services to use for block building. When set, a managed MEV-boost service is configured on the beacon client.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"additional_endpoints": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `User-provided key-value pairs`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"beacon_api_endpoint": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The assigned URL for the node's Beacon API endpoint.`,
									},
									"beacon_prometheus_metrics_api_endpoint": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The assigned URL for the node's Beacon Prometheus metrics endpoint.`,
									},
									"execution_client_prometheus_metrics_api_endpoint": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The assigned URL for the node's execution client's Prometheus metrics endpoint.`,
									},
								},
							},
						},
					},
				},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `User-provided key-value pairs


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"connection_info": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The connection information through which to interact with a blockchain node.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"endpoint_info": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The endpoint information through which to interact with a blockchain node.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"json_rpc_api_endpoint": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The assigned URL for the node JSON-RPC API endpoint.`,
									},
									"websockets_api_endpoint": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The assigned URL for the node WebSockets API endpoint.`,
									},
								},
							},
						},
						"service_attachment": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `A service attachment that exposes a node, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}`,
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp at which the blockchain node was first created.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp at which the blockchain node was last updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceBlockchainNodeEngineBlockchainNodesCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	ethereumDetailsProp, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetails(d.Get("ethereum_details"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("ethereum_details"); !tpgresource.IsEmptyValue(reflect.ValueOf(ethereumDetailsProp)) && (ok || !reflect.DeepEqual(v, ethereumDetailsProp)) {
		obj["ethereumDetails"] = ethereumDetailsProp
	}
	blockchainTypeProp, err := expandBlockchainNodeEngineBlockchainNodesBlockchainType(d.Get("blockchain_type"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("blockchain_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(blockchainTypeProp)) && (ok || !reflect.DeepEqual(v, blockchainTypeProp)) {
		obj["blockchainType"] = blockchainTypeProp
	}
	labelsProp, err := expandBlockchainNodeEngineBlockchainNodesEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BlockchainNodeEngineBasePath}}projects/{{project}}/locations/{{location}}/blockchainNodes?blockchain_node_id={{blockchain_node_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new BlockchainNodes: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for BlockchainNodes: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating BlockchainNodes: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = BlockchainNodeEngineOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating BlockchainNodes", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create BlockchainNodes: %s", err)
	}

	if err := d.Set("name", flattenBlockchainNodeEngineBlockchainNodesName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating BlockchainNodes %q: %#v", d.Id(), res)

	return resourceBlockchainNodeEngineBlockchainNodesRead(d, meta)
}

func resourceBlockchainNodeEngineBlockchainNodesRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BlockchainNodeEngineBasePath}}projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for BlockchainNodes: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("BlockchainNodeEngineBlockchainNodes %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}

	if err := d.Set("name", flattenBlockchainNodeEngineBlockchainNodesName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}
	if err := d.Set("create_time", flattenBlockchainNodeEngineBlockchainNodesCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}
	if err := d.Set("update_time", flattenBlockchainNodeEngineBlockchainNodesUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}
	if err := d.Set("labels", flattenBlockchainNodeEngineBlockchainNodesLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}
	if err := d.Set("connection_info", flattenBlockchainNodeEngineBlockchainNodesConnectionInfo(res["connectionInfo"], d, config)); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}
	if err := d.Set("ethereum_details", flattenBlockchainNodeEngineBlockchainNodesEthereumDetails(res["ethereumDetails"], d, config)); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}
	if err := d.Set("blockchain_type", flattenBlockchainNodeEngineBlockchainNodesBlockchainType(res["blockchainType"], d, config)); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}
	if err := d.Set("terraform_labels", flattenBlockchainNodeEngineBlockchainNodesTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}
	if err := d.Set("effective_labels", flattenBlockchainNodeEngineBlockchainNodesEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading BlockchainNodes: %s", err)
	}

	return nil
}

func resourceBlockchainNodeEngineBlockchainNodesUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for BlockchainNodes: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	ethereumDetailsProp, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetails(d.Get("ethereum_details"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("ethereum_details"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, ethereumDetailsProp)) {
		obj["ethereumDetails"] = ethereumDetailsProp
	}
	blockchainTypeProp, err := expandBlockchainNodeEngineBlockchainNodesBlockchainType(d.Get("blockchain_type"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("blockchain_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, blockchainTypeProp)) {
		obj["blockchainType"] = blockchainTypeProp
	}
	labelsProp, err := expandBlockchainNodeEngineBlockchainNodesEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BlockchainNodeEngineBasePath}}projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating BlockchainNodes %q: %#v", d.Id(), obj)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PUT",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
	})

	if err != nil {
		return fmt.Errorf("Error updating BlockchainNodes %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating BlockchainNodes %q: %#v", d.Id(), res)
	}

	err = BlockchainNodeEngineOperationWaitTime(
		config, res, project, "Updating BlockchainNodes", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceBlockchainNodeEngineBlockchainNodesRead(d, meta)
}

func resourceBlockchainNodeEngineBlockchainNodesDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for BlockchainNodes: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{BlockchainNodeEngineBasePath}}projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	log.Printf("[DEBUG] Deleting BlockchainNodes %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "BlockchainNodes")
	}

	err = BlockchainNodeEngineOperationWaitTime(
		config, res, project, "Deleting BlockchainNodes", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting BlockchainNodes %q: %#v", d.Id(), res)
	return nil
}

func resourceBlockchainNodeEngineBlockchainNodesImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/blockchainNodes/(?P<blockchain_node_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<blockchain_node_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<blockchain_node_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenBlockchainNodeEngineBlockchainNodesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenBlockchainNodeEngineBlockchainNodesConnectionInfo(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service_attachment"] =
		flattenBlockchainNodeEngineBlockchainNodesConnectionInfoServiceAttachment(original["serviceAttachment"], d, config)
	transformed["endpoint_info"] =
		flattenBlockchainNodeEngineBlockchainNodesConnectionInfoEndpointInfo(original["endpointInfo"], d, config)
	return []interface{}{transformed}
}
func flattenBlockchainNodeEngineBlockchainNodesConnectionInfoServiceAttachment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesConnectionInfoEndpointInfo(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["json_rpc_api_endpoint"] =
		flattenBlockchainNodeEngineBlockchainNodesConnectionInfoEndpointInfoJsonRpcApiEndpoint(original["jsonRpcApiEndpoint"], d, config)
	transformed["websockets_api_endpoint"] =
		flattenBlockchainNodeEngineBlockchainNodesConnectionInfoEndpointInfoWebsocketsApiEndpoint(original["websocketsApiEndpoint"], d, config)
	return []interface{}{transformed}
}
func flattenBlockchainNodeEngineBlockchainNodesConnectionInfoEndpointInfoJsonRpcApiEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesConnectionInfoEndpointInfoWebsocketsApiEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["validator_config"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfig(original["validatorConfig"], d, config)
	transformed["geth_details"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetails(original["gethDetails"], d, config)
	transformed["additional_endpoints"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpoints(original["additionalEndpoints"], d, config)
	transformed["network"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsNetwork(original["network"], d, config)
	transformed["node_type"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsNodeType(original["nodeType"], d, config)
	transformed["execution_client"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsExecutionClient(original["executionClient"], d, config)
	transformed["consensus_client"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsConsensusClient(original["consensusClient"], d, config)
	transformed["api_enable_admin"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableAdmin(original["apiEnableAdmin"], d, config)
	transformed["api_enable_debug"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableDebug(original["apiEnableDebug"], d, config)
	return []interface{}{transformed}
}
func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["mev_relay_urls"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfigMevRelayUrls(original["mevRelayUrls"], d, config)
	return []interface{}{transformed}
}
func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfigMevRelayUrls(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["garbage_collection_mode"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetailsGarbageCollectionMode(original["garbageCollectionMode"], d, config)
	return []interface{}{transformed}
}
func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetailsGarbageCollectionMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpoints(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["beacon_api_endpoint"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconApiEndpoint(original["beaconApiEndpoint"], d, config)
	transformed["beacon_prometheus_metrics_api_endpoint"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconPrometheusMetricsApiEndpoint(original["beaconPrometheusMetricsApiEndpoint"], d, config)
	transformed["execution_client_prometheus_metrics_api_endpoint"] =
		flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsExecutionClientPrometheusMetricsApiEndpoint(original["executionClientPrometheusMetricsApiEndpoint"], d, config)
	return []interface{}{transformed}
}
func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconApiEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconPrometheusMetricsApiEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsExecutionClientPrometheusMetricsApiEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsNodeType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsExecutionClient(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsConsensusClient(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableAdmin(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableDebug(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesBlockchainType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBlockchainNodeEngineBlockchainNodesTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenBlockchainNodeEngineBlockchainNodesEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValidatorConfig, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfig(original["validator_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValidatorConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["validatorConfig"] = transformedValidatorConfig
	}

	transformedGethDetails, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetails(original["geth_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGethDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gethDetails"] = transformedGethDetails
	}

	transformedAdditionalEndpoints, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpoints(original["additional_endpoints"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalEndpoints); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalEndpoints"] = transformedAdditionalEndpoints
	}

	transformedNetwork, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsNetwork(original["network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["network"] = transformedNetwork
	}

	transformedNodeType, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsNodeType(original["node_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodeType"] = transformedNodeType
	}

	transformedExecutionClient, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsExecutionClient(original["execution_client"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExecutionClient); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["executionClient"] = transformedExecutionClient
	}

	transformedConsensusClient, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsConsensusClient(original["consensus_client"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConsensusClient); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["consensusClient"] = transformedConsensusClient
	}

	transformedApiEnableAdmin, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableAdmin(original["api_enable_admin"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiEnableAdmin); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiEnableAdmin"] = transformedApiEnableAdmin
	}

	transformedApiEnableDebug, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableDebug(original["api_enable_debug"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiEnableDebug); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiEnableDebug"] = transformedApiEnableDebug
	}

	return transformed, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMevRelayUrls, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfigMevRelayUrls(original["mev_relay_urls"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMevRelayUrls); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["mevRelayUrls"] = transformedMevRelayUrls
	}

	return transformed, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfigMevRelayUrls(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGarbageCollectionMode, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetailsGarbageCollectionMode(original["garbage_collection_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGarbageCollectionMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["garbageCollectionMode"] = transformedGarbageCollectionMode
	}

	return transformed, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetailsGarbageCollectionMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpoints(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBeaconApiEndpoint, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconApiEndpoint(original["beacon_api_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBeaconApiEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["beaconApiEndpoint"] = transformedBeaconApiEndpoint
	}

	transformedBeaconPrometheusMetricsApiEndpoint, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconPrometheusMetricsApiEndpoint(original["beacon_prometheus_metrics_api_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBeaconPrometheusMetricsApiEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["beaconPrometheusMetricsApiEndpoint"] = transformedBeaconPrometheusMetricsApiEndpoint
	}

	transformedExecutionClientPrometheusMetricsApiEndpoint, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsExecutionClientPrometheusMetricsApiEndpoint(original["execution_client_prometheus_metrics_api_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExecutionClientPrometheusMetricsApiEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["executionClientPrometheusMetricsApiEndpoint"] = transformedExecutionClientPrometheusMetricsApiEndpoint
	}

	return transformed, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconApiEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconPrometheusMetricsApiEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsExecutionClientPrometheusMetricsApiEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsNodeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsExecutionClient(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsConsensusClient(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableAdmin(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableDebug(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesBlockchainType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
