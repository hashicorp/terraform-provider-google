// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/backupdr/data_source_backup_dr_data_source_test.go.tmpl
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package backupdr_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

// this test cannot be ran locally without seeding your environment with a backup vault and scheduling the backup of a compute instance
// to generate a unique datasourceId, that this test would need to be modified to use. the values in this test correspond to those used
// in our testing processes.
func TestAccDataSourceGoogleCloudBackupDRDataSource_basic(t *testing.T) {
	t.Parallel()

	data_source_id := "56b93b14529b77d764b21b2251e1ea8f0006e8dd"
	context := map[string]interface{}{
		"random_suffix":  acctest.RandString(t, 10),
		"data_source_id": data_source_id,
	}

	stepChecks := func(wantName string, wantState string) []resource.TestCheckFunc {
		stepCheck := []resource.TestCheckFunc{
			resource.TestCheckResourceAttr("data.google_backup_dr_data_source.foo", "name", wantName),
			resource.TestCheckResourceAttr("data.google_backup_dr_data_source.foo", "state", wantState),
		}
		return stepCheck
	}
	project := envvar.GetTestProjectFromEnv()
	expectedName := fmt.Sprintf("projects/%s/locations/us-central1/backupVaults/bv-test/dataSources/%s", project, data_source_id)
	expectedState := "ACTIVE"

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceGoogleCloudBackupDRDataSource_basic(context),
				Check:  resource.ComposeTestCheckFunc(stepChecks(expectedName, expectedState)...),
			},
		},
	})
}

func testAccDataSourceGoogleCloudBackupDRDataSource_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

data "google_backup_dr_data_source" "foo" {
  project = data.google_project.project.project_id
  location      = "us-central1"
  backup_vault_id = "bv-test"
  data_source_id = "%{data_source_id}"
}
`, context)
}
