// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package backupdr_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccBackupDRBackupPlanAssociation_backupDrBpaExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckBackupDRBackupPlanAssociationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBackupDRBackupPlanAssociation_backupDrBpaExample(context),
			},
			{
				ResourceName:            "google_backup_dr_backup_plan_association.my-backup-plan-association",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"backup_plan_association_id", "location", "resource"},
			},
		},
	})
}

func testAccBackupDRBackupPlanAssociation_backupDrBpaExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
 resource "google_service_account" "mySA" {
  account_id   = "tf-test-my-custom%{random_suffix}"
  display_name = "Custom SA for VM Instance"
}

resource "google_compute_instance" "myinstance" {
  name         = "tf-test-test-instance%{random_suffix}"
  machine_type = "n2-standard-2"
  zone         = "us-central1-a"
  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
      labels = {
        my_label = "value"
      }
    }
  }
  // Local SSD disk
  scratch_disk {
    interface = "NVME"
  }
  network_interface {
    network = "default"
    access_config {
      // Ephemeral public IP
    }
  }
  service_account {
    email  = google_service_account.mySA.email
    scopes = ["cloud-platform"]
  }
}

resource "google_backup_dr_backup_vault" "bv1" {
  location                                      = "us-central1"
  backup_vault_id                               = "tf-test-bv-bpa%{random_suffix}"
  backup_minimum_enforced_retention_duration    = "100000s"
   force_delete = "true"
}

resource "google_backup_dr_backup_plan" "bp1" {
  location       = "us-central1"
  backup_plan_id = "tf-test-bp-bpa-test%{random_suffix}"
  resource_type  = "compute.googleapis.com/Instance"
  backup_vault   = google_backup_dr_backup_vault.bv1.id

  backup_rules {
    rule_id                = "rule-1"
    backup_retention_days  = 2

    standard_schedule {
      recurrence_type     = "HOURLY"
      hourly_frequency    = 6
      time_zone           = "UTC"

      backup_window {
        start_hour_of_day = 12
        end_hour_of_day   = 18
      }
    }
  }
}
resource "google_backup_dr_backup_plan_association" "my-backup-plan-association" {
  location = "us-central1"
  resource_type= "compute.googleapis.com/Instance"
  backup_plan_association_id          = "tf-test-my-bpa%{random_suffix}"
  resource      = google_compute_instance.myinstance.id
  backup_plan  = google_backup_dr_backup_plan.bp1.name
}
`, context)
}

func testAccCheckBackupDRBackupPlanAssociationDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_backup_dr_backup_plan_association" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{BackupDRBasePath}}projects/{{project}}/locations/{{location}}/backupPlanAssociations/{{backup_plan_association_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("BackupDRBackupPlanAssociation still exists at %s", url)
			}
		}

		return nil
	}
}
