// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/backupdr/resource_backup_dr_backup_plan_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package backupdr_test

import (
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"testing"
)

func TestAccBackupDRBackupPlan_fullUpdate(t *testing.T) {

	t.Parallel()

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBackupDRBackupPlan_fullCreate(context),
			},
			{
				ResourceName:            "google_backup_dr_backup_plan.bp",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"resource"},
			},
			{
				Config: testAccBackupDRBackupPlan_fullUpdate(context),
			},
			{
				ResourceName:            "google_backup_dr_backup_plan.bp",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"resource"},
			},
		},
	})
}

func testAccBackupDRBackupPlan_fullCreate(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_service_account" "default" {
  account_id   = "tf-test-my-custom-%{random_suffix}"
  display_name = "Custom SA for VM Instance"
}

resource "google_compute_instance" "default" {
  name         = "tf-test-compute-instance-%{random_suffix}"
  machine_type = "n2-standard-2"
  zone         = "us-central1-a"
  tags = ["foo", "bar"]
  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
      labels = {
        my_label = "value"
      }
    }
  }
  // Local SSD disk
  scratch_disk {
    interface = "NVME"
  }
  network_interface {
    network = "default"
    access_config {
      // Ephemeral public IP
    }
  }
  service_account {
    # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
    email  = google_service_account.default.email
    scopes = ["cloud-platform"]
  }
}
resource "google_backup_dr_backup_vault" "my-backup-vault" {
    location ="us-central1"
    backup_vault_id    = "tf-test-bv-%{random_suffix}"
    description = "This is a second backup vault built by Terraform."
    backup_minimum_enforced_retention_duration = "100000s"
    labels = {
      foo = "bar1"
      bar = "baz1"
    }
    annotations = {
      annotations1 = "bar1"
      annotations2 = "baz1"
    }
    force_update = "true"
    force_delete = "true"
    allow_missing = "true" 
}

resource "google_backup_dr_backup_plan" "bp" {
  location       = "us-central1"
  backup_plan_id = "tf-test-bp-test-%{random_suffix}"
  resource_type  = "compute.googleapis.com/Instance"
  backup_vault   = google_backup_dr_backup_vault.my-backup-vault.name

  backup_rules {
    rule_id                = "rule-1"
    backup_retention_days  = 366

    standard_schedule {
      recurrence_type = "YEARLY"
      months          = ["JANUARY"]
      days_of_month   = [15]
      time_zone       = "UTC"

      backup_window {
        start_hour_of_day = 2  # Backup starts at 2:00 AM UTC
        end_hour_of_day   = 8  # Optional, backup window ends at 3:00 AM
      }
    }
  }
}

`, context)
}

func testAccBackupDRBackupPlan_fullUpdate(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_service_account" "default" {
  account_id   = "tf-test-my-custom-%{random_suffix}"
  display_name = "Custom SA for VM Instance"
}

resource "google_compute_instance" "default" {
  name         = "tf-test-compute-instance-%{random_suffix}"
  machine_type = "n2-standard-2"
  zone         = "us-central1-a"
  tags = ["foo", "bar"]
  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
      labels = {
        my_label = "value"
      }
    }
  }
  // Local SSD disk
  scratch_disk {
    interface = "NVME"
  }
  network_interface {
    network = "default"
    access_config {
      // Ephemeral public IP
    }
  }
  service_account {
    # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
    email  = google_service_account.default.email
    scopes = ["cloud-platform"]
  }
}

resource "google_backup_dr_backup_vault" "my-backup-vault" {
    location ="us-central1"
    backup_vault_id    = "tf-test-bv-%{random_suffix}"
    description = "This is a second backup vault built by Terraform."
    backup_minimum_enforced_retention_duration = "100000s"
    labels = {
      foo = "bar1"
      bar = "baz1"
    }
    annotations = {
      annotations1 = "bar1"
      annotations2 = "baz1"
    }
    force_update = "true"
    force_delete = "true"
    allow_missing = "true" 
}

resource "google_backup_dr_backup_plan" "bp" {
  location       = "us-central1"
  backup_plan_id = "tf-test-bp-test-%{random_suffix}"
  resource_type  = "compute.googleapis.com/Instance"
  backup_vault   = google_backup_dr_backup_vault.my-backup-vault.name

  backup_rules {
    rule_id                = "rule-1"
    backup_retention_days  = 366
    standard_schedule {
      recurrence_type = "MONTHLY" # Updated recurrence_type from YEARLY
      days_of_month   = [1, 15]   # Updated days_of_month
      time_zone       = "America/New_York" # Updated time_zone

      backup_window {
        start_hour_of_day = 1  # Updated start hour
        end_hour_of_day   = 7 # Updated end hour
      }
    }
  }
  backup_rules {
   # Adding a second rule to test weekly schedule
    rule_id                = "rule-2"
    backup_retention_days  = 60 # Different retention for rule-2

    standard_schedule {
      recurrence_type = "WEEKLY"
      days_of_week    = ["MONDAY", "FRIDAY"] # Added days_of_week
      time_zone       = "UTC"

      backup_window {
        start_hour_of_day = 1  # Different backup window for rule-2
        end_hour_of_day   = 7
      }
    }
  }
}
`, context)
}
