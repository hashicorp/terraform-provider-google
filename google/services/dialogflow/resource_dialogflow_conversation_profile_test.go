// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/dialogflow/resource_dialogflow_conversation_profile_test.go
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflow_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccDialogflowConversationProfile_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowConversationProfile_dialogflowAgentFull1(context),
			},
			{
				ResourceName:            "google_dialogflow_conversation_profile.profile",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "logging_config", "logging_config.0", "logging_config.0.enable_stackdriver_logging"},
			},
			{
				Config: testAccDialogflowConversationProfile_dialogflowAgentFull2(context),
			},
			{
				ResourceName:            "google_dialogflow_conversation_profile.profile",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "logging_config", "logging_config.0", "logging_config.0.enable_stackdriver_logging"},
			},
		},
	})
}

func testAccDialogflowConversationProfile_dialogflowAgentFull1(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_project" "agent_project" {
		name = "tf-test-dialogflow-%{random_suffix}"
		project_id = "tf-test-dialogflow-%{random_suffix}"
		org_id     = "%{org_id}"
		billing_account = "%{billing_account}"
		deletion_policy = "DELETE"
	}

	resource "google_project_service" "agent_project" {
		service = "dialogflow.googleapis.com"
		disable_dependent_services = false
		project = "${google_project.agent_project.id}"
	}
	
	resource "google_service_account" "dialogflow_service_account" {
		account_id = "tf-test-dialogflow-%{random_suffix}"
	}

	resource "google_project_iam_member" "agent_create" {
		role    = "roles/dialogflow.admin"
		member  = "serviceAccount:${google_service_account.dialogflow_service_account.email}"
		project = "${google_project.agent_project.id}"
	}

	resource "google_dialogflow_agent" "agent" {
		display_name = "tf-test-agent-%{random_suffix}"
		default_language_code = "en-us"
		time_zone = "America/New_York"
		project = google_project.agent_project.name
	}

	resource "google_pubsub_topic" "topic" {
		name = "tf-test-topic-%{random_suffix}"
		project = google_project.agent_project.project_id
		depends_on = [google_project.agent_project, time_sleep.wait_120_seconds]
		message_retention_duration = "8000s"
	}
	resource "google_dialogflow_cx_security_settings" "security_setting" {
		display_name          = "tf-test-setting-%{random_suffix}"
		location              = "global"
		purge_data_types      = []
		retention_window_days = 7
		project = google_project.agent_project.project_id
		depends_on = [time_sleep.wait_120_seconds]
	}
	resource "time_sleep" "wait_120_seconds" {
		create_duration = "120s"
		depends_on = [google_dialogflow_agent.agent]
	}
	resource "google_dialogflow_conversation_profile" "profile" {
		depends_on    = [google_dialogflow_agent.agent, google_dialogflow_cx_security_settings.security_setting,time_sleep.wait_120_seconds]
		project       = google_project.agent_project.name
		display_name  = "tf-test-conversation-profile-%{random_suffix}"
		location = "global"
		language_code = "en-US"
		automated_agent_config {
			agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
			session_ttl = "30s"
		}
		human_agent_assistant_config {
			end_user_suggestion_config {
				disable_high_latency_features_sync_delivery = true
				feature_configs {
					conversation_process_config {
						recent_sentences_count = 1
					}
					disable_agent_query_logging            = false
					enable_conversation_augmented_query    = false
					enable_event_based_suggestion          = false
					enable_query_suggestion_when_no_answer = false
					enable_query_suggestion_only            = false
					query_config {
						confidence_threshold = "1.0"
						context_filter_settings {
							drop_handoff_messages       = true
							drop_ivr_messages           = true
							drop_virtual_agent_messages = true
						}
						dialogflow_query_source {
							agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
							human_agent_side_config {
								agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
							}
						}
						max_results = 1
						sections {
							section_types = ["SECTION_TYPE_UNSPECIFIED"]
						}
					}
					suggestion_feature {
						type =  "CONVERSATION_SUMMARIZATION"
					}
					suggestion_trigger_settings {
						no_small_talk = false
						only_end_user = true
					}
				}
				group_suggestion_responses = true
			}
			human_agent_suggestion_config {
				disable_high_latency_features_sync_delivery = true
				feature_configs {
					conversation_process_config {
						recent_sentences_count = 1
					}
					disable_agent_query_logging            = false
					enable_conversation_augmented_query    = false
					enable_event_based_suggestion          = false
					enable_query_suggestion_when_no_answer = false
					enable_query_suggestion_only           = false
					query_config {
						confidence_threshold = 0.1
						context_filter_settings {
							drop_handoff_messages       = true
							drop_ivr_messages           = true
							drop_virtual_agent_messages = true
						}
						dialogflow_query_source {
							agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
							human_agent_side_config {
								agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
							}
						}
						max_results = 1
						sections {
							section_types = ["SECTION_TYPE_UNSPECIFIED"]
						}
					}
					suggestion_feature {
						type = "CONVERSATION_SUMMARIZATION"
					}
					suggestion_trigger_settings {
						no_small_talk = false
						only_end_user = true
					}
				}
				group_suggestion_responses = true
			}
			notification_config {
				message_format = "JSON"
				topic          = google_pubsub_topic.topic.id
			}
		}
		human_agent_handoff_config {
			live_person_config {
				account_number = "00"
			}
		}
		logging_config {
			enable_stackdriver_logging = true
		}
		new_message_event_notification_config {
			message_format = "JSON"
			topic          = google_pubsub_topic.topic.id
		}
		notification_config {
			message_format = "JSON"
			topic          = google_pubsub_topic.topic.id
		}
		security_settings = google_dialogflow_cx_security_settings.security_setting.id
		stt_config {
			enable_word_info              = true
			language_code                 = "en-US"
			model                         = "phone_call"
			sample_rate_hertz             = 1000
			speech_model_variant          = "USE_ENHANCED"
			use_timeout_based_endpointing = true
		}
		tts_config {
			effects_profile_id = ["id"]
			pitch              = 1
			speaking_rate      = 1
			voice {
			name        = "john"
			ssml_gender = "SSML_VOICE_GENDER_MALE"
		}
			volume_gain_db = 5
		}
	}
`, context)
}
func testAccDialogflowConversationProfile_dialogflowAgentFull2(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_project" "agent_project" {
		name = "tf-test-dialogflow-%{random_suffix}"
		project_id = "tf-test-dialogflow-%{random_suffix}"
		org_id     = "%{org_id}"
		billing_account = "%{billing_account}"
		deletion_policy = "DELETE"
	}
	resource "google_project_service" "agent_project" {
		project = "${google_project.agent_project.id}"
		service = "dialogflow.googleapis.com"
		disable_dependent_services = false
	}

	resource "google_service_account" "dialogflow_service_account" {
		account_id = "tf-test-dialogflow-%{random_suffix}"
	}

	resource "google_project_iam_member" "agent_create" {
		project = "${google_project.agent_project.id}"
		role    = "roles/dialogflow.admin"
		member  = "serviceAccount:${google_service_account.dialogflow_service_account.email}"
	}

	resource "google_dialogflow_agent" "agent" {
		display_name = "tf-test-agent-%{random_suffix}"
		default_language_code = "en-us"
		time_zone = "America/New_York"
		project = google_project.agent_project.name
	}
	resource "google_pubsub_topic" "topic_diff" {
		name = "tf-test-topic-%{random_suffix}-diff"
		project = google_project.agent_project.project_id
		depends_on = [google_project.agent_project, time_sleep.wait_120_seconds]
		message_retention_duration = "8000s"
	}
	resource "google_dialogflow_cx_security_settings" "security_setting_diff" {
		display_name          = "tf-test-setting-%{random_suffix}-diff"
		location              = "global"
		purge_data_types      = []
		retention_window_days = 7
		project = google_project.agent_project.project_id
		depends_on = [time_sleep.wait_120_seconds]
	}
	resource "time_sleep" "wait_120_seconds" {
		create_duration = "120s"
		depends_on = [google_dialogflow_agent.agent]
	}
	resource "google_dialogflow_conversation_profile" "profile" {
		depends_on    = [google_dialogflow_agent.agent, google_dialogflow_cx_security_settings.security_setting_diff, time_sleep.wait_120_seconds]
		project = "${google_project.agent_project.name}"
		display_name  = "tf-test-conversation-profile-%{random_suffix}-new"
		location = "global"
		language_code = "fr"
		automated_agent_config {
			agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
			session_ttl = "31s"
		}
		human_agent_assistant_config {
			end_user_suggestion_config {
				disable_high_latency_features_sync_delivery = false
				feature_configs {
					conversation_process_config {
						recent_sentences_count = 2
					}
					disable_agent_query_logging            = false
					enable_conversation_augmented_query    = false
					enable_event_based_suggestion          = false
					enable_query_suggestion_when_no_answer = false
					enable_query_suggestion_only           = false
					query_config {
						confidence_threshold = "0.9"
						context_filter_settings {
							drop_handoff_messages       = false
							drop_ivr_messages           = false
							drop_virtual_agent_messages = false
						}
						dialogflow_query_source {
							agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
							human_agent_side_config {
								agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
							}
						}
						max_results = 2
						sections {
							section_types = ["SITUATION"]
						}
					}
					suggestion_feature {
						type =  "CONVERSATION_SUMMARIZATION"
					}
					suggestion_trigger_settings {
						no_small_talk = false
						only_end_user = false
					}
				}
				group_suggestion_responses = false
			}
			human_agent_suggestion_config {
				disable_high_latency_features_sync_delivery = false
				feature_configs {
					conversation_process_config {
						recent_sentences_count = 2
					}
					disable_agent_query_logging            = false
					enable_conversation_augmented_query    = false
					enable_event_based_suggestion          = false
					enable_query_suggestion_when_no_answer = false
					enable_query_suggestion_only            = false
					query_config {
						confidence_threshold = 0.2
						context_filter_settings {
							drop_handoff_messages       = false
							drop_ivr_messages           = false
							drop_virtual_agent_messages = false
						}
						dialogflow_query_source {
							agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
							human_agent_side_config {
								agent = "projects/tf-test-dialogflow-%{random_suffix}/locations/global/agent/environments/draft"
							}
						}
						max_results = 2
						sections {
							section_types = ["SITUATION"]
						}
					}
					suggestion_feature {
						type = "CONVERSATION_SUMMARIZATION"
					}
					suggestion_trigger_settings {
						no_small_talk = false
						only_end_user = false
					}
				}
				group_suggestion_responses = false
			}
			notification_config {
				message_format = "PROTO"
				topic          = google_pubsub_topic.topic_diff.id
			}
		}
		human_agent_handoff_config {
			live_person_config {
				account_number = "01"
			}
		}
		logging_config {
			enable_stackdriver_logging = false
		}
		new_message_event_notification_config {
			message_format = "PROTO"
			topic          = google_pubsub_topic.topic_diff.id
		}
		notification_config {
			message_format = "PROTO"
			topic          = google_pubsub_topic.topic_diff.id
		}
		security_settings = google_dialogflow_cx_security_settings.security_setting_diff.id
	}
`, context)
}
