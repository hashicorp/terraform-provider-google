// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dialogflow/ConversationProfile.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package dialogflow

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceDialogflowConversationProfile() *schema.Resource {
	return &schema.Resource{
		Create: resourceDialogflowConversationProfileCreate,
		Read:   resourceDialogflowConversationProfileRead,
		Update: resourceDialogflowConversationProfileUpdate,
		Delete: resourceDialogflowConversationProfileDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDialogflowConversationProfileImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(40 * time.Minute),
			Update: schema.DefaultTimeout(40 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Required. Human readable name for this profile. Max length 1024 bytes.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `desc`,
			},
			"automated_agent_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for an automated agent to use with this profile`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"agent": {
							Type:     schema.TypeString,
							Required: true,
							Description: `ID of the Dialogflow agent environment to use.
Expects the format "projects/<Project ID>/locations/<Location ID>/agent/environments/<EnvironmentID>"`,
						},
						"session_ttl": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Configure lifetime of the Dialogflow session.`,
						},
					},
				},
			},
			"human_agent_assistant_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for connecting to a live agent`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"end_user_suggestion_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for agent assistance of end user participant.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"disable_high_latency_features_sync_delivery": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `When disableHighLatencyFeaturesSyncDelivery is true and using the AnalyzeContent API, we will not deliver the responses from high latency features in the API response. The humanAgentAssistantConfig.notification_config must be configured and enableEventBasedSuggestion must be set to true to receive the responses from high latency features in Pub/Sub. High latency feature(s): KNOWLEDGE_ASSIST`,
									},
									"feature_configs": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Configuration of different suggestion features. One feature can have only one config.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"conversation_model_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs of custom conversation model.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"baseline_model_version": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Version of current baseline model. It will be ignored if model is set. Valid versions are: Article Suggestion baseline model: - 0.9 - 1.0 (default) Summarization baseline model: - 1.0`,
															},
															"model": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Conversation model resource name. Format: projects/<Project ID>/conversationModels/<Model ID>.`,
															},
														},
													},
												},
												"conversation_process_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Config to process conversation.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"recent_sentences_count": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Number of recent non-small-talk sentences to use as context for article and FAQ suggestion`,
															},
														},
													},
												},
												"disable_agent_query_logging": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Disable the logging of search queries sent by human agents. It can prevent those queries from being stored at answer records.
This feature is only supported for types: KNOWLEDGE_SEARCH.`,
												},
												"enable_conversation_augmented_query": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Enable including conversation context during query answer generation.
This feature is only supported for types: KNOWLEDGE_SEARCH.`,
												},
												"enable_event_based_suggestion": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Automatically iterates all participants and tries to compile suggestions.
This feature is only supported for types: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST, KNOWLEDGE_ASSIST.`,
												},
												"enable_query_suggestion_only": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Enable query suggestion only.
This feature is only supported for types: KNOWLEDGE_ASSIST`,
												},
												"enable_query_suggestion_when_no_answer": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Enable query suggestion even if we can't find its answer. By default, queries are suggested only if we find its answer.
This feature is only supported for types: KNOWLEDGE_ASSIST.`,
												},
												"query_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs of query.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"confidence_threshold": {
																Type:     schema.TypeFloat,
																Optional: true,
																Description: `Confidence threshold of query result.
This feature is only supported for types: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE, KNOWLEDGE_SEARCH, KNOWLEDGE_ASSIST, ENTITY_EXTRACTION.`,
															},
															"context_filter_settings": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Determines how recent conversation context is filtered when generating suggestions. If unspecified, no messages will be dropped.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"drop_handoff_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, the last message from virtual agent (hand off message) and the message before it (trigger message of hand off) are dropped.`,
																		},
																		"drop_ivr_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, all messages from ivr stage are dropped.`,
																		},
																		"drop_virtual_agent_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, all messages from virtual agent are dropped.`,
																		},
																	},
																},
															},
															"dialogflow_query_source": {
																Type:     schema.TypeList,
																Optional: true,
																Description: `Query from Dialogflow agent.
This feature is supported for types: DIALOGFLOW_ASSIST.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"agent": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `he name of a Dialogflow virtual agent used for end user side intent detection and suggestion. Format: projects/<Project ID>/locations/<Location ID>/agent.`,
																		},
																		"human_agent_side_config": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `The Dialogflow assist configuration for human agent.`,
																			MaxItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"agent": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `The name of a dialogflow virtual agent used for intent detection and suggestion triggered by human agent. Format: projects/<Project ID>/locations/<Location ID>/agent.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
															"document_query_source": {
																Type:     schema.TypeList,
																Optional: true,
																Description: `Query from knowledge base document.
This feature is supported for types: SMART_REPLY, SMART_COMPOSE.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"documents": {
																			Type:        schema.TypeList,
																			Required:    true,
																			Description: `Knowledge documents to query from. Format: projects/<Project ID>/locations/<Location ID>/knowledgeBases/<KnowledgeBase ID>/documents/<Document ID>.`,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
															"knowledge_base_query_source": {
																Type:     schema.TypeList,
																Optional: true,
																Description: `Query from knowledgebase.
This feature is only supported for types: ARTICLE_SUGGESTION, FAQ.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"knowledge_bases": {
																			Type:        schema.TypeList,
																			Required:    true,
																			Description: `Knowledge bases to query. Format: projects/<Project ID>/locations/<Location ID>/knowledgeBases/<Knowledge Base ID>.`,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
															"max_results": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Maximum number of results to return.`,
																Default:     10,
															},
															"sections": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `he customized sections chosen to return when requesting a summary of a conversation.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"section_types": {
																			Type:     schema.TypeList,
																			Optional: true,
																			Description: `The selected sections chosen to return when requesting a summary of a conversation
If not provided the default selection will be "{SITUATION, ACTION, RESULT}". Possible values: ["SECTION_TYPE_UNSPECIFIED", "SITUATION", "ACTION", "RESOLUTION", "REASON_FOR_CANCELLATION", "CUSTOMER_SATISFACTION", "ENTITIES"]`,
																			Elem: &schema.Schema{
																				Type:         schema.TypeString,
																				ValidateFunc: verify.ValidateEnum([]string{"SECTION_TYPE_UNSPECIFIED", "SITUATION", "ACTION", "RESOLUTION", "REASON_FOR_CANCELLATION", "CUSTOMER_SATISFACTION", "ENTITIES"}),
																			},
																		},
																	},
																},
															},
														},
													},
												},
												"suggestion_feature": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The suggestion feature.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"type": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Type of Human Agent Assistant API feature to request.`,
															},
														},
													},
												},
												"suggestion_trigger_settings": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Settings of suggestion trigger.
This feature is only supported for types: ARTICLE_SUGGESTION, FAQ.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"no_small_talk": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Do not trigger if last utterance is small talk.`,
															},
															"only_end_user": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Only trigger suggestion if participant role of last utterance is END_USER.`,
															},
														},
													},
												},
											},
										},
									},
									"generators": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `List of various generator resource names used in the conversation profile.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"group_suggestion_responses": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `If groupSuggestionResponses is false, and there are multiple featureConfigs in event based suggestion or StreamingAnalyzeContent, we will try to deliver suggestions to customers as soon as we get new suggestion. Different type of suggestions based on the same context will be in separate Pub/Sub event or StreamingAnalyzeContentResponse.

If groupSuggestionResponses set to true. All the suggestions to the same participant based on the same context will be grouped into a single Pub/Sub event or StreamingAnalyzeContentResponse.`,
									},
								},
							},
						},
						"human_agent_suggestion_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for agent assistance of human agent participant.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"disable_high_latency_features_sync_delivery": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `When disableHighLatencyFeaturesSyncDelivery is true and using the AnalyzeContent API, we will not deliver the responses from high latency features in the API response. The humanAgentAssistantConfig.notification_config must be configured and enableEventBasedSuggestion must be set to true to receive the responses from high latency features in Pub/Sub. High latency feature(s): KNOWLEDGE_ASSIST`,
									},
									"feature_configs": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Configuration of different suggestion features. One feature can have only one config.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"conversation_model_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs of custom conversation model.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"baseline_model_version": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Version of current baseline model. It will be ignored if model is set. Valid versions are: Article Suggestion baseline model: - 0.9 - 1.0 (default) Summarization baseline model: - 1.0`,
															},
															"model": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Conversation model resource name. Format: projects/<Project ID>/conversationModels/<Model ID>.`,
															},
														},
													},
												},
												"conversation_process_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Config to process conversation.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"recent_sentences_count": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Number of recent non-small-talk sentences to use as context for article and FAQ suggestion`,
															},
														},
													},
												},
												"disable_agent_query_logging": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Disable the logging of search queries sent by human agents. It can prevent those queries from being stored at answer records.
This feature is only supported for types: KNOWLEDGE_SEARCH.`,
												},
												"enable_conversation_augmented_query": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Enable including conversation context during query answer generation.
This feature is only supported for types: KNOWLEDGE_SEARCH.`,
												},
												"enable_event_based_suggestion": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Automatically iterates all participants and tries to compile suggestions.
This feature is only supported for types: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST, KNOWLEDGE_ASSIST.`,
												},
												"enable_query_suggestion_only": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Enable query suggestion only.
This feature is only supported for types: KNOWLEDGE_ASSIST`,
												},
												"enable_query_suggestion_when_no_answer": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Enable query suggestion even if we can't find its answer. By default, queries are suggested only if we find its answer.
This feature is only supported for types: KNOWLEDGE_ASSIST.`,
												},
												"query_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs of query.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"confidence_threshold": {
																Type:     schema.TypeFloat,
																Optional: true,
																Description: `Confidence threshold of query result.
This feature is only supported for types: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE, KNOWLEDGE_SEARCH, KNOWLEDGE_ASSIST, ENTITY_EXTRACTION.`,
															},
															"context_filter_settings": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Determines how recent conversation context is filtered when generating suggestions. If unspecified, no messages will be dropped.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"drop_handoff_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, the last message from virtual agent (hand off message) and the message before it (trigger message of hand off) are dropped.`,
																		},
																		"drop_ivr_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, all messages from ivr stage are dropped.`,
																		},
																		"drop_virtual_agent_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, all messages from virtual agent are dropped.`,
																		},
																	},
																},
															},
															"dialogflow_query_source": {
																Type:     schema.TypeList,
																Optional: true,
																Description: `Query from Dialogflow agent.
This feature is supported for types: DIALOGFLOW_ASSIST.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"agent": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `he name of a Dialogflow virtual agent used for end user side intent detection and suggestion. Format: projects/<Project ID>/locations/<Location ID>/agent.`,
																		},
																		"human_agent_side_config": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `The Dialogflow assist configuration for human agent.`,
																			MaxItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"agent": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `The name of a dialogflow virtual agent used for intent detection and suggestion triggered by human agent. Format: projects/<Project ID>/locations/<Location ID>/agent.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
															"max_results": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Maximum number of results to return.`,
																Default:     10,
															},
															"sections": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `he customized sections chosen to return when requesting a summary of a conversation.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"section_types": {
																			Type:     schema.TypeList,
																			Optional: true,
																			Description: `The selected sections chosen to return when requesting a summary of a conversation
If not provided the default selection will be "{SITUATION, ACTION, RESULT}". Possible values: ["SECTION_TYPE_UNSPECIFIED", "SITUATION", "ACTION", "RESOLUTION", "REASON_FOR_CANCELLATION", "CUSTOMER_SATISFACTION", "ENTITIES"]`,
																			Elem: &schema.Schema{
																				Type:         schema.TypeString,
																				ValidateFunc: verify.ValidateEnum([]string{"SECTION_TYPE_UNSPECIFIED", "SITUATION", "ACTION", "RESOLUTION", "REASON_FOR_CANCELLATION", "CUSTOMER_SATISFACTION", "ENTITIES"}),
																			},
																		},
																	},
																},
															},
														},
													},
												},
												"suggestion_feature": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The suggestion feature.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"type": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Type of Human Agent Assistant API feature to request.`,
															},
														},
													},
												},
												"suggestion_trigger_settings": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Settings of suggestion trigger.
This feature is only supported for types: ARTICLE_SUGGESTION, FAQ.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"no_small_talk": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Do not trigger if last utterance is small talk.`,
															},
															"only_end_user": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Only trigger suggestion if participant role of last utterance is END_USER.`,
															},
														},
													},
												},
											},
										},
									},
									"generators": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `List of various generator resource names used in the conversation profile.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"group_suggestion_responses": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `If groupSuggestionResponses is false, and there are multiple featureConfigs in event based suggestion or StreamingAnalyzeContent, we will try to deliver suggestions to customers as soon as we get new suggestion. Different type of suggestions based on the same context will be in separate Pub/Sub event or StreamingAnalyzeContentResponse.

If groupSuggestionResponses set to true. All the suggestions to the same participant based on the same context will be grouped into a single Pub/Sub event or StreamingAnalyzeContentResponse.`,
									},
								},
							},
						},
						"message_analysis_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `desc`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enable_entity_extraction": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Enable entity extraction in conversation messages on agent assist stage.`,
										Default:     false,
									},
									"enable_sentiment_analysis": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Enable sentiment analysis in conversation messages on agent assist stage. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral.`,
										Default:     false,
									},
								},
							},
						},
						"notification_config": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Pub/Sub topic on which to publish new agent assistant events.
Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"message_format": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"MESSAGE_FORMAT_UNSPECIFIED", "PROTO", "JSON", ""}),
										Description:  `Format of the message Possible values: ["MESSAGE_FORMAT_UNSPECIFIED", "PROTO", "JSON"]`,
									},
									"topic": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Name of the Pub/Sub topic to publish conversation events`,
									},
								},
							},
						},
					},
				},
			},
			"human_agent_handoff_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"live_person_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Config for using LivePerson.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"account_number": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Account number of the LivePerson account to connect.`,
									},
								},
							},
						},
					},
				},
			},
			"language_code": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				Description: `Language code for the conversation profile. This should be a BCP-47 language tag.`,
			},
			"logging_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Defines logging behavior for conversation lifecycle events.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enable_stackdriver_logging": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to log conversation events`,
						},
					},
				},
			},
			"new_message_event_notification_config": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Pub/Sub topic on which to publish new agent assistant events.
Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"message_format": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"MESSAGE_FORMAT_UNSPECIFIED", "PROTO", "JSON", ""}),
							Description:  `Format of the message Possible values: ["MESSAGE_FORMAT_UNSPECIFIED", "PROTO", "JSON"]`,
						},
						"topic": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Name of the Pub/Sub topic to publish conversation events`,
						},
					},
				},
			},
			"notification_config": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Pub/Sub topic on which to publish new agent assistant events.
Expects the format "projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>"`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"message_format": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"MESSAGE_FORMAT_UNSPECIFIED", "PROTO", "JSON", ""}),
							Description:  `Format of the message Possible values: ["MESSAGE_FORMAT_UNSPECIFIED", "PROTO", "JSON"]`,
						},
						"topic": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Name of the Pub/Sub topic to publish conversation events`,
						},
					},
				},
			},
			"security_settings": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Name of the CX SecuritySettings reference for the agent.`,
			},
			"stt_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Settings for speech transcription.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"audio_encoding": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"AUDIO_ENCODING_UNSPECIFIED", "AUDIO_ENCODING_LINEAR_16", "AUDIO_ENCODING_FLAC", "AUDIO_ENCODING_MULAW", "AUDIO_ENCODING_AMR", "AUDIO_ENCODING_AMR_WB", "AUDIO_ENCODING_OGG_OPUS", "AUDIOENCODING_SPEEX_WITH_HEADER_BYTE", ""}),
							Description:  `Audio encoding of the audio content to process. Possible values: ["AUDIO_ENCODING_UNSPECIFIED", "AUDIO_ENCODING_LINEAR_16", "AUDIO_ENCODING_FLAC", "AUDIO_ENCODING_MULAW", "AUDIO_ENCODING_AMR", "AUDIO_ENCODING_AMR_WB", "AUDIO_ENCODING_OGG_OPUS", "AUDIOENCODING_SPEEX_WITH_HEADER_BYTE"]`,
						},
						"enable_word_info": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `If true, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words.`,
						},
						"language_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `The language of the supplied audio.`,
						},
						"model": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Which Speech model to select.
Leave this field unspecified to use Agent Speech settings for model selection.`,
						},
						"sample_rate_hertz": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Sample rate (in Hertz) of the audio content sent in the query.`,
						},
						"speech_model_variant": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"SPEECH_MODEL_VARIANT_UNSPECIFIED", "USE_BEST_AVAILABLE", "USE_STANDARD", "USE_ENHANCED", ""}),
							Description:  `The speech model used in speech to text. Possible values: ["SPEECH_MODEL_VARIANT_UNSPECIFIED", "USE_BEST_AVAILABLE", "USE_STANDARD", "USE_ENHANCED"]`,
						},
						"use_timeout_based_endpointing": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.`,
						},
					},
				},
			},
			"time_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The time zone of this conversational profile.`,
			},
			"tts_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"effects_profile_id": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"pitch": {
							Type:        schema.TypeFloat,
							Optional:    true,
							Description: `Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.`,
						},
						"speaking_rate": {
							Type:        schema.TypeFloat,
							Optional:    true,
							Description: `Speaking rate/speed, in the range [0.25, 4.0].`,
						},
						"voice": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The desired voice of the synthesized audio.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The name of the voice.`,
									},
									"ssml_gender": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"SSML_VOICE_GENDER_UNSPECIFIED", "SSML_VOICE_GENDER_MALE", "SSML_VOICE_GENDER_FEMALE", "SSML_VOICE_GENDER_NEUTRAL", ""}),
										Description:  `The preferred gender of the voice. Possible values: ["SSML_VOICE_GENDER_UNSPECIFIED", "SSML_VOICE_GENDER_MALE", "SSML_VOICE_GENDER_FEMALE", "SSML_VOICE_GENDER_NEUTRAL"]`,
									},
								},
							},
						},
						"volume_gain_db": {
							Type:        schema.TypeFloat,
							Optional:    true,
							Description: `Volume gain (in dB) of the normal native volume supported by the specific voice.`,
						},
					},
				},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `name`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDialogflowConversationProfileCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandDialogflowConversationProfileDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	automatedAgentConfigProp, err := expandDialogflowConversationProfileAutomatedAgentConfig(d.Get("automated_agent_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("automated_agent_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(automatedAgentConfigProp)) && (ok || !reflect.DeepEqual(v, automatedAgentConfigProp)) {
		obj["automatedAgentConfig"] = automatedAgentConfigProp
	}
	humanAgentAssistantConfigProp, err := expandDialogflowConversationProfileHumanAgentAssistantConfig(d.Get("human_agent_assistant_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("human_agent_assistant_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(humanAgentAssistantConfigProp)) && (ok || !reflect.DeepEqual(v, humanAgentAssistantConfigProp)) {
		obj["humanAgentAssistantConfig"] = humanAgentAssistantConfigProp
	}
	humanAgentHandoffConfigProp, err := expandDialogflowConversationProfileHumanAgentHandoffConfig(d.Get("human_agent_handoff_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("human_agent_handoff_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(humanAgentHandoffConfigProp)) && (ok || !reflect.DeepEqual(v, humanAgentHandoffConfigProp)) {
		obj["humanAgentHandoffConfig"] = humanAgentHandoffConfigProp
	}
	notificationConfigProp, err := expandDialogflowConversationProfileNotificationConfig(d.Get("notification_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("notification_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(notificationConfigProp)) && (ok || !reflect.DeepEqual(v, notificationConfigProp)) {
		obj["notificationConfig"] = notificationConfigProp
	}
	loggingConfigProp, err := expandDialogflowConversationProfileLoggingConfig(d.Get("logging_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("logging_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(loggingConfigProp)) && (ok || !reflect.DeepEqual(v, loggingConfigProp)) {
		obj["loggingConfig"] = loggingConfigProp
	}
	newMessageEventNotificationConfigProp, err := expandDialogflowConversationProfileNewMessageEventNotificationConfig(d.Get("new_message_event_notification_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("new_message_event_notification_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(newMessageEventNotificationConfigProp)) && (ok || !reflect.DeepEqual(v, newMessageEventNotificationConfigProp)) {
		obj["newMessageEventNotificationConfig"] = newMessageEventNotificationConfigProp
	}
	sttConfigProp, err := expandDialogflowConversationProfileSttConfig(d.Get("stt_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("stt_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(sttConfigProp)) && (ok || !reflect.DeepEqual(v, sttConfigProp)) {
		obj["sttConfig"] = sttConfigProp
	}
	languageCodeProp, err := expandDialogflowConversationProfileLanguageCode(d.Get("language_code"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("language_code"); !tpgresource.IsEmptyValue(reflect.ValueOf(languageCodeProp)) && (ok || !reflect.DeepEqual(v, languageCodeProp)) {
		obj["languageCode"] = languageCodeProp
	}
	timeZoneProp, err := expandDialogflowConversationProfileTimeZone(d.Get("time_zone"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("time_zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(timeZoneProp)) && (ok || !reflect.DeepEqual(v, timeZoneProp)) {
		obj["timeZone"] = timeZoneProp
	}
	securitySettingsProp, err := expandDialogflowConversationProfileSecuritySettings(d.Get("security_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("security_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(securitySettingsProp)) && (ok || !reflect.DeepEqual(v, securitySettingsProp)) {
		obj["securitySettings"] = securitySettingsProp
	}
	ttsConfigProp, err := expandDialogflowConversationProfileTtsConfig(d.Get("tts_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("tts_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(ttsConfigProp)) && (ok || !reflect.DeepEqual(v, ttsConfigProp)) {
		obj["ttsConfig"] = ttsConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowBasePath}}projects/{{project}}/locations/{{location}}/conversationProfiles")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new ConversationProfile: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConversationProfile: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating ConversationProfile: %s", err)
	}
	// Set computed resource properties from create API response so that they're available on the subsequent Read
	// call.
	err = resourceDialogflowConversationProfilePostCreateSetComputedFields(d, meta, res)
	if err != nil {
		return fmt.Errorf("setting computed ID format fields: %w", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// `name` is autogenerated from the api so needs to be set post-create
	name, ok := res["name"]
	if !ok {
		respBody, ok := res["response"]
		if !ok {
			return fmt.Errorf("Create response didn't contain critical fields. Create may not have succeeded.")
		}

		name, ok = respBody.(map[string]interface{})["name"]
		if !ok {
			return fmt.Errorf("Create response didn't contain critical fields. Create may not have succeeded.")
		}
	}
	if err := d.Set("name", name.(string)); err != nil {
		return fmt.Errorf("Error setting name: %s", err)
	}
	d.SetId(name.(string))

	log.Printf("[DEBUG] Finished creating ConversationProfile %q: %#v", d.Id(), res)

	return resourceDialogflowConversationProfileRead(d, meta)
}

func resourceDialogflowConversationProfileRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowBasePath}}{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConversationProfile: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DialogflowConversationProfile %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}

	if err := d.Set("name", flattenDialogflowConversationProfileName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("display_name", flattenDialogflowConversationProfileDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("automated_agent_config", flattenDialogflowConversationProfileAutomatedAgentConfig(res["automatedAgentConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("human_agent_assistant_config", flattenDialogflowConversationProfileHumanAgentAssistantConfig(res["humanAgentAssistantConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("human_agent_handoff_config", flattenDialogflowConversationProfileHumanAgentHandoffConfig(res["humanAgentHandoffConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("notification_config", flattenDialogflowConversationProfileNotificationConfig(res["notificationConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("new_message_event_notification_config", flattenDialogflowConversationProfileNewMessageEventNotificationConfig(res["newMessageEventNotificationConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("stt_config", flattenDialogflowConversationProfileSttConfig(res["sttConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("language_code", flattenDialogflowConversationProfileLanguageCode(res["languageCode"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("time_zone", flattenDialogflowConversationProfileTimeZone(res["timeZone"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("security_settings", flattenDialogflowConversationProfileSecuritySettings(res["securitySettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("tts_config", flattenDialogflowConversationProfileTtsConfig(res["ttsConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}

	return nil
}

func resourceDialogflowConversationProfileUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConversationProfile: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandDialogflowConversationProfileDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	automatedAgentConfigProp, err := expandDialogflowConversationProfileAutomatedAgentConfig(d.Get("automated_agent_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("automated_agent_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, automatedAgentConfigProp)) {
		obj["automatedAgentConfig"] = automatedAgentConfigProp
	}
	humanAgentAssistantConfigProp, err := expandDialogflowConversationProfileHumanAgentAssistantConfig(d.Get("human_agent_assistant_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("human_agent_assistant_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, humanAgentAssistantConfigProp)) {
		obj["humanAgentAssistantConfig"] = humanAgentAssistantConfigProp
	}
	humanAgentHandoffConfigProp, err := expandDialogflowConversationProfileHumanAgentHandoffConfig(d.Get("human_agent_handoff_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("human_agent_handoff_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, humanAgentHandoffConfigProp)) {
		obj["humanAgentHandoffConfig"] = humanAgentHandoffConfigProp
	}
	notificationConfigProp, err := expandDialogflowConversationProfileNotificationConfig(d.Get("notification_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("notification_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, notificationConfigProp)) {
		obj["notificationConfig"] = notificationConfigProp
	}
	loggingConfigProp, err := expandDialogflowConversationProfileLoggingConfig(d.Get("logging_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("logging_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, loggingConfigProp)) {
		obj["loggingConfig"] = loggingConfigProp
	}
	newMessageEventNotificationConfigProp, err := expandDialogflowConversationProfileNewMessageEventNotificationConfig(d.Get("new_message_event_notification_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("new_message_event_notification_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, newMessageEventNotificationConfigProp)) {
		obj["newMessageEventNotificationConfig"] = newMessageEventNotificationConfigProp
	}
	sttConfigProp, err := expandDialogflowConversationProfileSttConfig(d.Get("stt_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("stt_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, sttConfigProp)) {
		obj["sttConfig"] = sttConfigProp
	}
	languageCodeProp, err := expandDialogflowConversationProfileLanguageCode(d.Get("language_code"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("language_code"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, languageCodeProp)) {
		obj["languageCode"] = languageCodeProp
	}
	timeZoneProp, err := expandDialogflowConversationProfileTimeZone(d.Get("time_zone"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("time_zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, timeZoneProp)) {
		obj["timeZone"] = timeZoneProp
	}
	securitySettingsProp, err := expandDialogflowConversationProfileSecuritySettings(d.Get("security_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("security_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, securitySettingsProp)) {
		obj["securitySettings"] = securitySettingsProp
	}
	ttsConfigProp, err := expandDialogflowConversationProfileTtsConfig(d.Get("tts_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("tts_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, ttsConfigProp)) {
		obj["ttsConfig"] = ttsConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowBasePath}}{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating ConversationProfile %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("automated_agent_config") {
		updateMask = append(updateMask, "automatedAgentConfig")
	}

	if d.HasChange("human_agent_assistant_config") {
		updateMask = append(updateMask, "humanAgentAssistantConfig")
	}

	if d.HasChange("human_agent_handoff_config") {
		updateMask = append(updateMask, "humanAgentHandoffConfig")
	}

	if d.HasChange("notification_config") {
		updateMask = append(updateMask, "notificationConfig")
	}

	if d.HasChange("logging_config") {
		updateMask = append(updateMask, "loggingConfig")
	}

	if d.HasChange("new_message_event_notification_config") {
		updateMask = append(updateMask, "newMessageEventNotificationConfig")
	}

	if d.HasChange("stt_config") {
		updateMask = append(updateMask, "sttConfig")
	}

	if d.HasChange("language_code") {
		updateMask = append(updateMask, "languageCode")
	}

	if d.HasChange("time_zone") {
		updateMask = append(updateMask, "timeZone")
	}

	if d.HasChange("security_settings") {
		updateMask = append(updateMask, "securitySettings")
	}

	if d.HasChange("tts_config") {
		updateMask = append(updateMask, "ttsConfig")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating ConversationProfile %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating ConversationProfile %q: %#v", d.Id(), res)
		}

	}

	return resourceDialogflowConversationProfileRead(d, meta)
}

func resourceDialogflowConversationProfileDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConversationProfile: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowBasePath}}{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting ConversationProfile %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "ConversationProfile")
	}

	log.Printf("[DEBUG] Finished deleting ConversationProfile %q: %#v", d.Id(), res)
	return nil
}

func resourceDialogflowConversationProfileImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {

	config := meta.(*transport_tpg.Config)

	// current import_formats can't import fields with forward slashes in their value
	if err := tpgresource.ParseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
		return nil, err
	}

	stringParts := strings.Split(d.Get("name").(string), "/")
	if len(stringParts) < 2 {
		return nil, fmt.Errorf(
			"Could not split project from name: %s",
			d.Get("name"),
		)
	}

	if err := d.Set("project", stringParts[1]); err != nil {
		return nil, fmt.Errorf("Error setting project: %s", err)
	}
	return []*schema.ResourceData{d}, nil
}

func flattenDialogflowConversationProfileName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileAutomatedAgentConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["agent"] =
		flattenDialogflowConversationProfileAutomatedAgentConfigAgent(original["agent"], d, config)
	transformed["session_ttl"] =
		flattenDialogflowConversationProfileAutomatedAgentConfigSessionTtl(original["sessionTtl"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileAutomatedAgentConfigAgent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileAutomatedAgentConfigSessionTtl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["notification_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(original["notificationConfig"], d, config)
	transformed["human_agent_suggestion_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(original["humanAgentSuggestionConfig"], d, config)
	transformed["end_user_suggestion_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(original["endUserSuggestionConfig"], d, config)
	transformed["message_analysis_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(original["messageAnalysisConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["topic"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(original["topic"], d, config)
	transformed["message_format"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(original["messageFormat"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["feature_configs"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(original["featureConfigs"], d, config)
	transformed["group_suggestion_responses"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(original["groupSuggestionResponses"], d, config)
	transformed["generators"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGenerators(original["generators"], d, config)
	transformed["disable_high_latency_features_sync_delivery"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(original["disableHighLatencyFeaturesSyncDelivery"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"suggestion_feature":                     flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestionFeature"], d, config),
			"enable_event_based_suggestion":          flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enableEventBasedSuggestion"], d, config),
			"disable_agent_query_logging":            flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsDisableAgentQueryLogging(original["disableAgentQueryLogging"], d, config),
			"enable_query_suggestion_when_no_answer": flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(original["enableQuerySuggestionWhenNoAnswer"], d, config),
			"enable_conversation_augmented_query":    flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(original["enableConversationAugmentedQuery"], d, config),
			"enable_query_suggestion_only":           flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(original["enableQuerySuggestionOnly"], d, config),
			"suggestion_trigger_settings":            flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestionTriggerSettings"], d, config),
			"query_config":                           flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(original["queryConfig"], d, config),
			"conversation_model_config":              flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(original["conversationModelConfig"], d, config),
			"conversation_process_config":            flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversationProcessConfig"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsDisableAgentQueryLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	transformed := make(map[string]interface{})
	if v == nil {
		transformed["no_small_talk"] = false
		transformed["only_end_user"] = false
		return []interface{}{transformed}
	}
	original := v.(map[string]interface{})
	transformed["no_small_talk"] = original["noSmallTalk"]
	transformed["only_end_user"] = original["onlyEndUser"]
	return []interface{}{transformed}
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["max_results"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["maxResults"], d, config)
	transformed["confidence_threshold"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidenceThreshold"], d, config)
	transformed["context_filter_settings"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["contextFilterSettings"], d, config)
	transformed["sections"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSections(original["sections"], d, config)
	transformed["dialogflow_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflowQuerySource"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	transformed := make(map[string]interface{})
	if v == nil {
		transformed["drop_handoff_messages"] = false
		transformed["drop_ivr_messages"] = false
		transformed["drop_virtual_agent_messages"] = false
		return []interface{}{transformed}
	}
	original := v.(map[string]interface{})
	transformed["drop_handoff_messages"] = original["dropHandoffMessages"]
	transformed["drop_ivr_messages"] = original["dropIvrMessages"]
	transformed["drop_virtual_agent_messages"] = original["dropVirtualAgentMessages"]
	return []interface{}{transformed}
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSections(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["section_types"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(original["sectionTypes"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["agent"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	transformed["human_agent_side_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(original["humanAgentSideConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["agent"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(original["agent"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["model"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	transformed["baseline_model_version"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(original["baselineModelVersion"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["recent_sentences_count"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recentSentencesCount"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGenerators(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["feature_configs"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(original["featureConfigs"], d, config)
	transformed["group_suggestion_responses"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(original["groupSuggestionResponses"], d, config)
	transformed["generators"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGenerators(original["generators"], d, config)
	transformed["disable_high_latency_features_sync_delivery"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(original["disableHighLatencyFeaturesSyncDelivery"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"suggestion_feature":                     flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestionFeature"], d, config),
			"enable_event_based_suggestion":          flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enableEventBasedSuggestion"], d, config),
			"disable_agent_query_logging":            flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsDisableAgentQueryLogging(original["disableAgentQueryLogging"], d, config),
			"enable_query_suggestion_when_no_answer": flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(original["enableQuerySuggestionWhenNoAnswer"], d, config),
			"enable_conversation_augmented_query":    flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(original["enableConversationAugmentedQuery"], d, config),
			"enable_query_suggestion_only":           flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(original["enableQuerySuggestionOnly"], d, config),
			"suggestion_trigger_settings":            flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestionTriggerSettings"], d, config),
			"query_config":                           flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(original["queryConfig"], d, config),
			"conversation_model_config":              flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(original["conversationModelConfig"], d, config),
			"conversation_process_config":            flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversationProcessConfig"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsDisableAgentQueryLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	transformed := make(map[string]interface{})
	if v == nil {
		transformed["no_small_talk"] = false
		transformed["only_end_user"] = false
		return []interface{}{transformed}
	}
	original := v.(map[string]interface{})
	transformed["no_small_talk"] = original["noSmallTalk"]
	transformed["only_end_user"] = original["onlyEndUser"]
	return []interface{}{transformed}
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["max_results"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["maxResults"], d, config)
	transformed["confidence_threshold"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidenceThreshold"], d, config)
	transformed["context_filter_settings"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["contextFilterSettings"], d, config)
	transformed["sections"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSections(original["sections"], d, config)
	transformed["knowledge_base_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(original["knowledgeBaseQuerySource"], d, config)
	transformed["document_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(original["documentQuerySource"], d, config)
	transformed["dialogflow_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflowQuerySource"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	transformed := make(map[string]interface{})
	if v == nil {
		transformed["drop_handoff_messages"] = false
		transformed["drop_ivr_messages"] = false
		transformed["drop_virtual_agent_messages"] = false
		return []interface{}{transformed}
	}
	original := v.(map[string]interface{})
	transformed["drop_handoff_messages"] = original["dropHandoffMessages"]
	transformed["drop_ivr_messages"] = original["dropIvrMessages"]
	transformed["drop_virtual_agent_messages"] = original["dropVirtualAgentMessages"]
	return []interface{}{transformed}
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSections(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["section_types"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(original["sectionTypes"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["knowledge_bases"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(original["knowledgeBases"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["documents"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(original["documents"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["agent"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	transformed["human_agent_side_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(original["humanAgentSideConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["agent"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(original["agent"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["model"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	transformed["baseline_model_version"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(original["baselineModelVersion"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["recent_sentences_count"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recentSentencesCount"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGenerators(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_entity_extraction"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(original["enableEntityExtraction"], d, config)
	transformed["enable_sentiment_analysis"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(original["enableSentimentAnalysis"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentHandoffConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["live_person_config"] =
		flattenDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(original["livePersonConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["account_number"] =
		flattenDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(original["accountNumber"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileNotificationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["topic"] =
		flattenDialogflowConversationProfileNotificationConfigTopic(original["topic"], d, config)
	transformed["message_format"] =
		flattenDialogflowConversationProfileNotificationConfigMessageFormat(original["messageFormat"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileNotificationConfigTopic(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileNotificationConfigMessageFormat(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileNewMessageEventNotificationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["topic"] =
		flattenDialogflowConversationProfileNewMessageEventNotificationConfigTopic(original["topic"], d, config)
	transformed["message_format"] =
		flattenDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(original["messageFormat"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileNewMessageEventNotificationConfigTopic(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileSttConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["speech_model_variant"] =
		flattenDialogflowConversationProfileSttConfigSpeechModelVariant(original["speechModelVariant"], d, config)
	transformed["model"] =
		flattenDialogflowConversationProfileSttConfigModel(original["model"], d, config)
	transformed["audio_encoding"] =
		flattenDialogflowConversationProfileSttConfigAudioEncoding(original["audioEncoding"], d, config)
	transformed["sample_rate_hertz"] =
		flattenDialogflowConversationProfileSttConfigSampleRateHertz(original["sampleRateHertz"], d, config)
	transformed["language_code"] =
		flattenDialogflowConversationProfileSttConfigLanguageCode(original["languageCode"], d, config)
	transformed["enable_word_info"] =
		flattenDialogflowConversationProfileSttConfigEnableWordInfo(original["enableWordInfo"], d, config)
	transformed["use_timeout_based_endpointing"] =
		flattenDialogflowConversationProfileSttConfigUseTimeoutBasedEndpointing(original["useTimeoutBasedEndpointing"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileSttConfigSpeechModelVariant(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileSttConfigModel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileSttConfigAudioEncoding(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileSttConfigSampleRateHertz(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowConversationProfileSttConfigLanguageCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileSttConfigEnableWordInfo(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileSttConfigUseTimeoutBasedEndpointing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileLanguageCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileTimeZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileSecuritySettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileTtsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["speaking_rate"] =
		flattenDialogflowConversationProfileTtsConfigSpeakingRate(original["speakingRate"], d, config)
	transformed["pitch"] =
		flattenDialogflowConversationProfileTtsConfigPitch(original["pitch"], d, config)
	transformed["volume_gain_db"] =
		flattenDialogflowConversationProfileTtsConfigVolumeGainDb(original["volumeGainDb"], d, config)
	transformed["effects_profile_id"] =
		flattenDialogflowConversationProfileTtsConfigEffectsProfileId(original["effectsProfileId"], d, config)
	transformed["voice"] =
		flattenDialogflowConversationProfileTtsConfigVoice(original["voice"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileTtsConfigSpeakingRate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileTtsConfigPitch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileTtsConfigVolumeGainDb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileTtsConfigEffectsProfileId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileTtsConfigVoice(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDialogflowConversationProfileTtsConfigVoiceName(original["name"], d, config)
	transformed["ssml_gender"] =
		flattenDialogflowConversationProfileTtsConfigVoiceSsmlGender(original["ssmlGender"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileTtsConfigVoiceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileTtsConfigVoiceSsmlGender(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDialogflowConversationProfileDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileAutomatedAgentConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileAutomatedAgentConfigAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	transformedSessionTtl, err := expandDialogflowConversationProfileAutomatedAgentConfigSessionTtl(original["session_ttl"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSessionTtl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sessionTtl"] = transformedSessionTtl
	}

	return transformed, nil
}

func expandDialogflowConversationProfileAutomatedAgentConfigAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileAutomatedAgentConfigSessionTtl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNotificationConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(original["notification_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNotificationConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["notificationConfig"] = transformedNotificationConfig
	}

	transformedHumanAgentSuggestionConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(original["human_agent_suggestion_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHumanAgentSuggestionConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["humanAgentSuggestionConfig"] = transformedHumanAgentSuggestionConfig
	}

	transformedEndUserSuggestionConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(original["end_user_suggestion_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndUserSuggestionConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endUserSuggestionConfig"] = transformedEndUserSuggestionConfig
	}

	transformedMessageAnalysisConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(original["message_analysis_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageAnalysisConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messageAnalysisConfig"] = transformedMessageAnalysisConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedMessageFormat, err := expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(original["message_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messageFormat"] = transformedMessageFormat
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureConfigs, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(original["feature_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureConfigs"] = transformedFeatureConfigs
	}

	transformedGroupSuggestionResponses, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(original["group_suggestion_responses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGroupSuggestionResponses); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["groupSuggestionResponses"] = transformedGroupSuggestionResponses
	}

	transformedGenerators, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGenerators(original["generators"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGenerators); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generators"] = transformedGenerators
	}

	transformedDisableHighLatencyFeaturesSyncDelivery, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(original["disable_high_latency_features_sync_delivery"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableHighLatencyFeaturesSyncDelivery); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableHighLatencyFeaturesSyncDelivery"] = transformedDisableHighLatencyFeaturesSyncDelivery
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedSuggestionFeature, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestion_feature"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionFeature); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suggestionFeature"] = transformedSuggestionFeature
		}

		transformedEnableEventBasedSuggestion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enable_event_based_suggestion"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableEventBasedSuggestion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableEventBasedSuggestion"] = transformedEnableEventBasedSuggestion
		}

		transformedDisableAgentQueryLogging, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsDisableAgentQueryLogging(original["disable_agent_query_logging"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisableAgentQueryLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["disableAgentQueryLogging"] = transformedDisableAgentQueryLogging
		}

		transformedEnableQuerySuggestionWhenNoAnswer, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(original["enable_query_suggestion_when_no_answer"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableQuerySuggestionWhenNoAnswer); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableQuerySuggestionWhenNoAnswer"] = transformedEnableQuerySuggestionWhenNoAnswer
		}

		transformedEnableConversationAugmentedQuery, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(original["enable_conversation_augmented_query"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableConversationAugmentedQuery); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableConversationAugmentedQuery"] = transformedEnableConversationAugmentedQuery
		}

		transformedEnableQuerySuggestionOnly, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(original["enable_query_suggestion_only"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableQuerySuggestionOnly); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableQuerySuggestionOnly"] = transformedEnableQuerySuggestionOnly
		}

		transformedSuggestionTriggerSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestion_trigger_settings"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionTriggerSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suggestionTriggerSettings"] = transformedSuggestionTriggerSettings
		}

		transformedQueryConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(original["query_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryConfig"] = transformedQueryConfig
		}

		transformedConversationModelConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(original["conversation_model_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationModelConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationModelConfig"] = transformedConversationModelConfig
		}

		transformedConversationProcessConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversation_process_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationProcessConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationProcessConfig"] = transformedConversationProcessConfig
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsDisableAgentQueryLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNoSmallTalk, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmallTalk(original["no_small_talk"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoSmallTalk); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["noSmallTalk"] = transformedNoSmallTalk
	}

	transformedOnlyEndUser, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(original["only_end_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOnlyEndUser); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["onlyEndUser"] = transformedOnlyEndUser
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmallTalk(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaxResults, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["max_results"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxResults); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxResults"] = transformedMaxResults
	}

	transformedConfidenceThreshold, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidence_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["confidenceThreshold"] = transformedConfidenceThreshold
	}

	transformedContextFilterSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["context_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContextFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contextFilterSettings"] = transformedContextFilterSettings
	}

	transformedSections, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSections(original["sections"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSections); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sections"] = transformedSections
	}

	transformedDialogflowQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflow_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDialogflowQuerySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dialogflowQuerySource"] = transformedDialogflowQuerySource
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDropHandoffMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(original["drop_handoff_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropHandoffMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropHandoffMessages"] = transformedDropHandoffMessages
	}

	transformedDropVirtualAgentMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(original["drop_virtual_agent_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropVirtualAgentMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropVirtualAgentMessages"] = transformedDropVirtualAgentMessages
	}

	transformedDropIvrMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(original["drop_ivr_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropIvrMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropIvrMessages"] = transformedDropIvrMessages
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSections(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSectionTypes, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(original["section_types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSectionTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sectionTypes"] = transformedSectionTypes
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	transformedHumanAgentSideConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(original["human_agent_side_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHumanAgentSideConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["humanAgentSideConfig"] = transformedHumanAgentSideConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedBaselineModelVersion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(original["baseline_model_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBaselineModelVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["baselineModelVersion"] = transformedBaselineModelVersion
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRecentSentencesCount, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recent_sentences_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRecentSentencesCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["recentSentencesCount"] = transformedRecentSentencesCount
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGenerators(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureConfigs, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(original["feature_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureConfigs"] = transformedFeatureConfigs
	}

	transformedGroupSuggestionResponses, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(original["group_suggestion_responses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGroupSuggestionResponses); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["groupSuggestionResponses"] = transformedGroupSuggestionResponses
	}

	transformedGenerators, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGenerators(original["generators"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGenerators); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generators"] = transformedGenerators
	}

	transformedDisableHighLatencyFeaturesSyncDelivery, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(original["disable_high_latency_features_sync_delivery"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableHighLatencyFeaturesSyncDelivery); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableHighLatencyFeaturesSyncDelivery"] = transformedDisableHighLatencyFeaturesSyncDelivery
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedSuggestionFeature, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestion_feature"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionFeature); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suggestionFeature"] = transformedSuggestionFeature
		}

		transformedEnableEventBasedSuggestion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enable_event_based_suggestion"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableEventBasedSuggestion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableEventBasedSuggestion"] = transformedEnableEventBasedSuggestion
		}

		transformedDisableAgentQueryLogging, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsDisableAgentQueryLogging(original["disable_agent_query_logging"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisableAgentQueryLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["disableAgentQueryLogging"] = transformedDisableAgentQueryLogging
		}

		transformedEnableQuerySuggestionWhenNoAnswer, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(original["enable_query_suggestion_when_no_answer"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableQuerySuggestionWhenNoAnswer); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableQuerySuggestionWhenNoAnswer"] = transformedEnableQuerySuggestionWhenNoAnswer
		}

		transformedEnableConversationAugmentedQuery, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(original["enable_conversation_augmented_query"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableConversationAugmentedQuery); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableConversationAugmentedQuery"] = transformedEnableConversationAugmentedQuery
		}

		transformedEnableQuerySuggestionOnly, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(original["enable_query_suggestion_only"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableQuerySuggestionOnly); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableQuerySuggestionOnly"] = transformedEnableQuerySuggestionOnly
		}

		transformedSuggestionTriggerSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestion_trigger_settings"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionTriggerSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suggestionTriggerSettings"] = transformedSuggestionTriggerSettings
		}

		transformedQueryConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(original["query_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryConfig"] = transformedQueryConfig
		}

		transformedConversationModelConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(original["conversation_model_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationModelConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationModelConfig"] = transformedConversationModelConfig
		}

		transformedConversationProcessConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversation_process_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationProcessConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationProcessConfig"] = transformedConversationProcessConfig
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsDisableAgentQueryLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNoSmallTalk, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmallTalk(original["no_small_talk"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoSmallTalk); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["noSmallTalk"] = transformedNoSmallTalk
	}

	transformedOnlyEndUser, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(original["only_end_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOnlyEndUser); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["onlyEndUser"] = transformedOnlyEndUser
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmallTalk(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaxResults, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["max_results"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxResults); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxResults"] = transformedMaxResults
	}

	transformedConfidenceThreshold, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidence_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["confidenceThreshold"] = transformedConfidenceThreshold
	}

	transformedContextFilterSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["context_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContextFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contextFilterSettings"] = transformedContextFilterSettings
	}

	transformedSections, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSections(original["sections"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSections); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sections"] = transformedSections
	}

	transformedKnowledgeBaseQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(original["knowledge_base_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKnowledgeBaseQuerySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["knowledgeBaseQuerySource"] = transformedKnowledgeBaseQuerySource
	}

	transformedDocumentQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(original["document_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocumentQuerySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["documentQuerySource"] = transformedDocumentQuerySource
	}

	transformedDialogflowQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflow_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDialogflowQuerySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dialogflowQuerySource"] = transformedDialogflowQuerySource
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDropHandoffMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(original["drop_handoff_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropHandoffMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropHandoffMessages"] = transformedDropHandoffMessages
	}

	transformedDropVirtualAgentMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(original["drop_virtual_agent_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropVirtualAgentMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropVirtualAgentMessages"] = transformedDropVirtualAgentMessages
	}

	transformedDropIvrMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(original["drop_ivr_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropIvrMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropIvrMessages"] = transformedDropIvrMessages
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSections(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSectionTypes, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(original["section_types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSectionTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sectionTypes"] = transformedSectionTypes
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKnowledgeBases, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(original["knowledge_bases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKnowledgeBases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["knowledgeBases"] = transformedKnowledgeBases
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDocuments, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(original["documents"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocuments); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["documents"] = transformedDocuments
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	transformedHumanAgentSideConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(original["human_agent_side_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHumanAgentSideConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["humanAgentSideConfig"] = transformedHumanAgentSideConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedBaselineModelVersion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(original["baseline_model_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBaselineModelVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["baselineModelVersion"] = transformedBaselineModelVersion
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRecentSentencesCount, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recent_sentences_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRecentSentencesCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["recentSentencesCount"] = transformedRecentSentencesCount
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGenerators(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableEntityExtraction, err := expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(original["enable_entity_extraction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableEntityExtraction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableEntityExtraction"] = transformedEnableEntityExtraction
	}

	transformedEnableSentimentAnalysis, err := expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(original["enable_sentiment_analysis"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableSentimentAnalysis); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableSentimentAnalysis"] = transformedEnableSentimentAnalysis
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLivePersonConfig, err := expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(original["live_person_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLivePersonConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["livePersonConfig"] = transformedLivePersonConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAccountNumber, err := expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(original["account_number"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccountNumber); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["accountNumber"] = transformedAccountNumber
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNotificationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDialogflowConversationProfileNotificationConfigTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedMessageFormat, err := expandDialogflowConversationProfileNotificationConfigMessageFormat(original["message_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messageFormat"] = transformedMessageFormat
	}

	return transformed, nil
}

func expandDialogflowConversationProfileNotificationConfigTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNotificationConfigMessageFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileLoggingConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableStackdriverLogging, err := expandDialogflowConversationProfileLoggingConfigEnableStackdriverLogging(original["enable_stackdriver_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableStackdriverLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableStackdriverLogging"] = transformedEnableStackdriverLogging
	}

	return transformed, nil
}

func expandDialogflowConversationProfileLoggingConfigEnableStackdriverLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNewMessageEventNotificationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDialogflowConversationProfileNewMessageEventNotificationConfigTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedMessageFormat, err := expandDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(original["message_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messageFormat"] = transformedMessageFormat
	}

	return transformed, nil
}

func expandDialogflowConversationProfileNewMessageEventNotificationConfigTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSpeechModelVariant, err := expandDialogflowConversationProfileSttConfigSpeechModelVariant(original["speech_model_variant"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSpeechModelVariant); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["speechModelVariant"] = transformedSpeechModelVariant
	}

	transformedModel, err := expandDialogflowConversationProfileSttConfigModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedAudioEncoding, err := expandDialogflowConversationProfileSttConfigAudioEncoding(original["audio_encoding"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAudioEncoding); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["audioEncoding"] = transformedAudioEncoding
	}

	transformedSampleRateHertz, err := expandDialogflowConversationProfileSttConfigSampleRateHertz(original["sample_rate_hertz"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSampleRateHertz); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sampleRateHertz"] = transformedSampleRateHertz
	}

	transformedLanguageCode, err := expandDialogflowConversationProfileSttConfigLanguageCode(original["language_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLanguageCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["languageCode"] = transformedLanguageCode
	}

	transformedEnableWordInfo, err := expandDialogflowConversationProfileSttConfigEnableWordInfo(original["enable_word_info"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableWordInfo); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableWordInfo"] = transformedEnableWordInfo
	}

	transformedUseTimeoutBasedEndpointing, err := expandDialogflowConversationProfileSttConfigUseTimeoutBasedEndpointing(original["use_timeout_based_endpointing"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUseTimeoutBasedEndpointing); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["useTimeoutBasedEndpointing"] = transformedUseTimeoutBasedEndpointing
	}

	return transformed, nil
}

func expandDialogflowConversationProfileSttConfigSpeechModelVariant(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigAudioEncoding(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigSampleRateHertz(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigEnableWordInfo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigUseTimeoutBasedEndpointing(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTimeZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSecuritySettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSpeakingRate, err := expandDialogflowConversationProfileTtsConfigSpeakingRate(original["speaking_rate"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSpeakingRate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["speakingRate"] = transformedSpeakingRate
	}

	transformedPitch, err := expandDialogflowConversationProfileTtsConfigPitch(original["pitch"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPitch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pitch"] = transformedPitch
	}

	transformedVolumeGainDb, err := expandDialogflowConversationProfileTtsConfigVolumeGainDb(original["volume_gain_db"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumeGainDb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumeGainDb"] = transformedVolumeGainDb
	}

	transformedEffectsProfileId, err := expandDialogflowConversationProfileTtsConfigEffectsProfileId(original["effects_profile_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEffectsProfileId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["effectsProfileId"] = transformedEffectsProfileId
	}

	transformedVoice, err := expandDialogflowConversationProfileTtsConfigVoice(original["voice"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVoice); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["voice"] = transformedVoice
	}

	return transformed, nil
}

func expandDialogflowConversationProfileTtsConfigSpeakingRate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigPitch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigVolumeGainDb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigEffectsProfileId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigVoice(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDialogflowConversationProfileTtsConfigVoiceName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["name"] = transformedName
	}

	transformedSsmlGender, err := expandDialogflowConversationProfileTtsConfigVoiceSsmlGender(original["ssml_gender"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSsmlGender); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ssmlGender"] = transformedSsmlGender
	}

	return transformed, nil
}

func expandDialogflowConversationProfileTtsConfigVoiceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigVoiceSsmlGender(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func resourceDialogflowConversationProfilePostCreateSetComputedFields(d *schema.ResourceData, meta interface{}, res map[string]interface{}) error {
	config := meta.(*transport_tpg.Config)
	if err := d.Set("name", flattenDialogflowConversationProfileName(res["name"], d, config)); err != nil {
		return fmt.Errorf(`Error setting computed identity field "name": %s`, err)
	}
	return nil
}
