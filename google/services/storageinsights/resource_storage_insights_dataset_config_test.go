// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/storageinsights/resource_storage_insights_dataset_config_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package storageinsights_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/plancheck"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/hashicorp/terraform-provider-google/google/acctest"

	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccStorageInsightsDatasetConfigExample_update_scope(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccStorageInsightsDatasetConfigExample_update_project(context),
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location"},
			},
			{
				Config: testAccStorageInsightsDatasetConfigExample_update_org(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_storage_insights_dataset_config.config", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location"},
			},
			{
				Config: testAccStorageInsightsDatasetConfigExample_update_folder(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_storage_insights_dataset_config.config", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location"},
			},
			{
				Config: testAccStorageInsightsDatasetConfigExample_update_org(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_storage_insights_dataset_config.config", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location"},
			},
			{
				Config: testAccStorageInsightsDatasetConfigExample_update_project(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_storage_insights_dataset_config.config", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location"},
			},
			{
				Config: testAccStorageInsightsDatasetConfigExample_update_folder(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_storage_insights_dataset_config.config", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location"},
			},
			{
				Config: testAccStorageInsightsDatasetConfigExample_update_project(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_storage_insights_dataset_config.config", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location"},
			},
		},
	})
}

func TestAccStorageInsightsDatasetConfigExample_update_filters(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccStorageInsightsDatasetConfigExample_full_filters(context),
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location"},
			},
			{
				Config: testAccStorageInsightsDatasetConfigExample_update_filters(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_storage_insights_dataset_config.config", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location"},
			},
		},
	})
}

func TestAccStorageInsightsDatasetConfigExample_update_link(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"project_id":    envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccStorageInsightsDatasetConfigExample_full_link(context),
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location", "link_dataset"},
			},
			{
				Config: testAccStorageInsightsDatasetConfigExample_update_unlink(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_storage_insights_dataset_config.config", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_storage_insights_dataset_config.config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dataset_config_id", "location", "link_dataset"},
			},
		},
	})
}

func testAccStorageInsightsDatasetConfigExample_update_project(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_insights_dataset_config" "config" {
  location = "us-central1"
  dataset_config_id = "tf_test_my_config%{random_suffix}"
  retention_period_days = 1
  source_projects {
    project_numbers = ["123", "456"]
  }
  identity {
    type = "IDENTITY_TYPE_PER_CONFIG"
  }
}
`, context)
}

func testAccStorageInsightsDatasetConfigExample_update_folder(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_insights_dataset_config" "config" {
  location = "us-central1"
  dataset_config_id = "tf_test_my_config%{random_suffix}"
  retention_period_days = 1
  activity_data_retention_period_days = 2
  source_folders {
    folder_numbers = ["123", "456"]
  }
  identity {
    type = "IDENTITY_TYPE_PER_CONFIG"
  }
}
`, context)
}

func testAccStorageInsightsDatasetConfigExample_update_org(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_insights_dataset_config" "config" {
  location = "us-central1"
  dataset_config_id = "tf_test_my_config%{random_suffix}"
  retention_period_days = 1
  activity_data_retention_period_days = 0
  organization_scope = true
  identity {
    type = "IDENTITY_TYPE_PER_CONFIG"
  }
}
`, context)
}

func testAccStorageInsightsDatasetConfigExample_full_link(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_insights_dataset_config" "config" {
  location = "us-central1"
  dataset_config_id = "tf_test_my_config%{random_suffix}"
  retention_period_days = 1
  organization_scope = true
  identity {
    type = "IDENTITY_TYPE_PER_CONFIG"
  }
  link_dataset = true
  organization_number = "%{org_id}"
  project = "%{project_id}"
}
`, context)
}

func testAccStorageInsightsDatasetConfigExample_update_unlink(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_insights_dataset_config" "config" {
  location = "us-central1"
  dataset_config_id = "tf_test_my_config%{random_suffix}"
  retention_period_days = 1
  organization_scope = true
  identity {
    type = "IDENTITY_TYPE_PER_CONFIG"
  }
  link_dataset = false
  project = "%{project_id}"
}
`, context)
}

func testAccStorageInsightsDatasetConfigExample_full_filters(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_insights_dataset_config" "config" {
  location = "us-central1"
  dataset_config_id = "tf_test_my_config%{random_suffix}"
  retention_period_days = 1
  organization_scope = true
  identity {
    type = "IDENTITY_TYPE_PER_CONFIG"
  }
  description = "A sample description for dataset"
  include_newly_created_buckets = true
  include_cloud_storage_locations {
    locations = ["us-east1", "europe-west2"]
  }
  exclude_cloud_storage_buckets {
    cloud_storage_buckets {
      bucket_name = "gs://sample-bucket1/"
    }
    cloud_storage_buckets {
      bucket_prefix_regex = "gs://sample*/"
    }
  }
}
`, context)
}

func testAccStorageInsightsDatasetConfigExample_update_filters(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_insights_dataset_config" "config" {
  location = "us-central1"
  dataset_config_id = "tf_test_my_config%{random_suffix}"
  retention_period_days = 1
  organization_scope = true
  identity {
    type = "IDENTITY_TYPE_PER_CONFIG"
  }
  include_newly_created_buckets = false
  exclude_cloud_storage_locations {
    locations = ["us-east1", "europe-west2"]
  }
  include_cloud_storage_buckets {
    cloud_storage_buckets {
      bucket_name = "gs://sample-bucket1/"
    }
    cloud_storage_buckets {
      bucket_prefix_regex = "gs://sample*/"
    }
  }
}
`, context)
}
