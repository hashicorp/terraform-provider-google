// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package ces_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccCESToolset_cesToolsetOpenapiServiceAccountAuthConfigExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCESToolsetDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCESToolset_cesToolsetOpenapiServiceAccountAuthConfigExample(context),
			},
			{
				ResourceName:            "google_ces_toolset.ces_toolset_openapi_service_account_auth_config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"app", "location", "toolset_id"},
			},
		},
	})
}

func testAccCESToolset_cesToolsetOpenapiServiceAccountAuthConfigExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_ces_app" "ces_app_for_toolset" {
  app_id = "tf-test-app-id%{random_suffix}"
  location = "us"
  description = "App used as parent for CES Toolset example"
  display_name = "tf-test-my-app%{random_suffix}"

  language_settings {
    default_language_code    = "en-US"
    supported_language_codes = ["es-ES", "fr-FR"]
    enable_multilingual_support = true
    fallback_action          = "escalate"
  }
  time_zone_settings {
    time_zone = "America/Los_Angeles"
  }
}

resource "google_ces_toolset" "ces_toolset_openapi_service_account_auth_config" {
  toolset_id = "toolset1%{random_suffix}"
  location = "us"
  app      = google_ces_app.ces_app_for_toolset.app_id
  display_name = "Basic toolset display name"

  open_api_toolset {
    open_api_schema = <<-EOT
      openapi: 3.0.0
      info:
        title: My Sample API
        version: 1.0.0
        description: A simple API example
      servers:
        - url: https://api.example.com/v1
      paths: {}
    EOT
    ignore_unknown_fields = false
    tls_config {
        ca_certs {
          display_name="example"
          cert="ZXhhbXBsZQ=="
        }
    }
    service_directory_config {
      service = "projects/example/locations/us/namespaces/namespace/services/service"
    }
    api_authentication {
        service_account_auth_config {
            service_account = "testaccount@gmail.com"
        }
    }
  }
}
`, context)
}

func TestAccCESToolset_cesToolsetOpenapiOauthConfigExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCESToolsetDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCESToolset_cesToolsetOpenapiOauthConfigExample(context),
			},
			{
				ResourceName:            "google_ces_toolset.ces_toolset_openapi_oauth_config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"app", "location", "toolset_id"},
			},
		},
	})
}

func testAccCESToolset_cesToolsetOpenapiOauthConfigExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_ces_app" "ces_app_for_toolset" {
  app_id = "tf-test-app-id%{random_suffix}"
  location = "us"
  description = "App used as parent for CES Toolset example"
  display_name = "tf-test-my-app%{random_suffix}"

  language_settings {
    default_language_code    = "en-US"
    supported_language_codes = ["es-ES", "fr-FR"]
    enable_multilingual_support = true
    fallback_action          = "escalate"
  }
  time_zone_settings {
    time_zone = "America/Los_Angeles"
  }
}

resource "google_ces_toolset" "ces_toolset_openapi_oauth_config" {
  toolset_id = "toolset1%{random_suffix}"
  location = "us"
  app      = google_ces_app.ces_app_for_toolset.app_id
  display_name = "Basic toolset display name"

  open_api_toolset {
    open_api_schema = <<-EOT
      openapi: 3.0.0
      info:
        title: My Sample API
        version: 1.0.0
        description: A simple API example
      servers:
        - url: https://api.example.com/v1
      paths: {}
    EOT
    ignore_unknown_fields = false
    tls_config {
        ca_certs {
          display_name="example"
          cert="ZXhhbXBsZQ=="
        }
    }
    service_directory_config {
      service = "projects/example/locations/us/namespaces/namespace/services/service"
    }
    api_authentication {
        oauth_config {
            oauth_grant_type = "CLIENT_CREDENTIAL"
            client_id = "example_client_id"
            client_secret_version = "projects/fake-project/secrets/fake-secret/versions/version1"
            token_endpoint = "123"
            scopes = ["scope1"]
        }
    }
  }
}
`, context)
}

func TestAccCESToolset_cesToolsetOpenapiServiceAgentIdTokenAuthConfigExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCESToolsetDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCESToolset_cesToolsetOpenapiServiceAgentIdTokenAuthConfigExample(context),
			},
			{
				ResourceName:            "google_ces_toolset.ces_toolset_openapi_service_agent_id_token_auth_config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"app", "location", "toolset_id"},
			},
		},
	})
}

func testAccCESToolset_cesToolsetOpenapiServiceAgentIdTokenAuthConfigExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_ces_app" "ces_app_for_toolset" {
  app_id = "tf-test-app-id%{random_suffix}"
  location = "us"
  description = "App used as parent for CES Toolset example"
  display_name = "tf-test-my-app%{random_suffix}"

  language_settings {
    default_language_code    = "en-US"
    supported_language_codes = ["es-ES", "fr-FR"]
    enable_multilingual_support = true
    fallback_action          = "escalate"
  }
  time_zone_settings {
    time_zone = "America/Los_Angeles"
  }
}

resource "google_ces_toolset" "ces_toolset_openapi_service_agent_id_token_auth_config" {
  toolset_id = "toolset1%{random_suffix}"
  location = "us"
  app      = google_ces_app.ces_app_for_toolset.app_id
  display_name = "Basic toolset display name"

  open_api_toolset {
    open_api_schema = <<-EOT
      openapi: 3.0.0
      info:
        title: My Sample API
        version: 1.0.0
        description: A simple API example
      servers:
        - url: https://api.example.com/v1
      paths: {}
    EOT
    ignore_unknown_fields = false
    tls_config {
        ca_certs {
          display_name="example"
          cert="ZXhhbXBsZQ=="
        }
    }
    service_directory_config {
      service = "projects/example/locations/us/namespaces/namespace/services/service"
    }
    api_authentication {
        service_agent_id_token_auth_config {
        }
    }
  }
}
`, context)
}

func TestAccCESToolset_cesToolsetOpenapiApiKeyConfigExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCESToolsetDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCESToolset_cesToolsetOpenapiApiKeyConfigExample(context),
			},
			{
				ResourceName:            "google_ces_toolset.ces_toolset_openapi_api_key_config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"app", "location", "toolset_id"},
			},
		},
	})
}

func testAccCESToolset_cesToolsetOpenapiApiKeyConfigExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_ces_app" "ces_app_for_toolset" {
  app_id = "tf-test-app-id%{random_suffix}"
  location = "us"
  description = "App used as parent for CES Toolset example"
  display_name = "tf-test-my-app%{random_suffix}"

  language_settings {
    default_language_code    = "en-US"
    supported_language_codes = ["es-ES", "fr-FR"]
    enable_multilingual_support = true
    fallback_action          = "escalate"
  }
  time_zone_settings {
    time_zone = "America/Los_Angeles"
  }
}

resource "google_ces_toolset" "ces_toolset_openapi_api_key_config" {
  toolset_id = "toolset1%{random_suffix}"
  location = "us"
  app      = google_ces_app.ces_app_for_toolset.app_id
  display_name = "Basic toolset display name"
  description = "Test description"
  execution_type = "SYNCHRONOUS"

  open_api_toolset {
    open_api_schema = <<-EOT
      openapi: 3.0.0
      info:
        title: My Sample API
        version: 1.0.0
        description: A simple API example
      servers:
        - url: https://api.example.com/v1
      paths: {}
    EOT
    ignore_unknown_fields = false
    tls_config {
        ca_certs {
          display_name="example"
          cert="ZXhhbXBsZQ=="
        }
    }
    service_directory_config {
      service = "projects/example/locations/us/namespaces/namespace/services/service"
    }
    api_authentication {
        api_key_config {
            key_name = "ExampleKey"
            api_key_secret_version = "projects/fake-project/secrets/fake-secret/versions/version-1"
            request_location = "HEADER"
        }
    }
  }
}
`, context)
}

func testAccCheckCESToolsetDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_ces_toolset" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{CESBasePath}}projects/{{project}}/locations/{{location}}/apps/{{app}}/toolsets/{{toolset_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("CESToolset still exists at %s", url)
			}
		}

		return nil
	}
}
