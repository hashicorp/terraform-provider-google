// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package ces_test

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"

	"google.golang.org/api/googleapi"
)

var (
	_ = fmt.Sprintf
	_ = log.Print
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = resource.TestMain
	_ = terraform.NewState
	_ = envvar.TestEnvVar
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = googleapi.Error{}
)

func TestAccCESApp_cesAppBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCESAppDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCESApp_cesAppBasicExample(context),
			},
			{
				ResourceName:            "google_ces_app.ces_app_basic",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"app_id", "location"},
			},
		},
	})
}

func testAccCESApp_cesAppBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_ces_app" "ces_app_basic" {
  app_id = "tf-test-app-id%{random_suffix}"
  location = "us"
  description = "Basic CES App example"
  display_name = "tf-test-my-app%{random_suffix}"

  language_settings {
    default_language_code    = "en-US"
    supported_language_codes = ["es-ES", "fr-FR"]
    enable_multilingual_support = true
    fallback_action          = "escalate"
  }

  audio_processing_config {
    synthesize_speech_configs {
      language_code = "en-US"
      voice         = "en-US-Standard-A"
      speaking_rate = 1.0
    }
    synthesize_speech_configs {
      language_code = "es-ES"
      voice         = "es-ES-Standard-A"
      speaking_rate = 0.95
    }

    barge_in_config {
      barge_in_awareness = true
    }

    inactivity_timeout = "300s"

    ambient_sound_config {
      prebuilt_ambient_sound = "room_2"
      volume_gain_db         = -6.0
    }
  }

  logging_settings {
    redaction_config {
      enable_redaction   = true
      inspect_template   = "projects/fake-project/locations/us/inspectTemplates/example-inspect"
      deidentify_template = "projects/fake-project/locations/us/deidentifyTemplates/example-deidentify"
    }

    audio_recording_config {
      gcs_bucket      = "gs://fake-app-audio-recordings"
      gcs_path_prefix = "projects/fake-project/location/us/app/test-app/123/$session/123"
    }

    bigquery_export_settings {
      dataset = "projects/fake-project/datasets/fake_app_logs"
      enabled = false
      project = "projects/fake-project"
    }

    cloud_logging_settings {
      enable_cloud_logging = true
    }

    conversation_logging_settings {
      disable_conversation_logging = true
    }
  }

  model_settings {
    model       = "gemini-1.5-flash"
    temperature = 0.5
  }

  evaluation_metrics_thresholds {
    golden_evaluation_metrics_thresholds {
      turn_level_metrics_thresholds {
        semantic_similarity_success_threshold        = 3
        overall_tool_invocation_correctness_threshold = 1.0
      }
      expectation_level_metrics_thresholds {
        tool_invocation_parameter_correctness_threshold = 1.0
      }
    }
  }

variable_declarations {
    name        = "test"
    description = "test"
    schema {
      description = "schema description"
      type        = "ARRAY"
      nullable    = true
      required = ["some_property"]
      enum = ["VALUE_A", "VALUE_B"]
      ref = "#/defs/MyDefinition"
      unique_items = true
      defs = jsonencode({
        SimpleString = {
          type        = "STRING"
          description = "A simple string definition"
      }})
      any_of = jsonencode([
        {
          type        = "STRING"
          description = "any_of option 1: string"
        },])
      default = jsonencode(
        false)
      prefix_items = jsonencode([
        {
          type        = "ARRAY"
          description = "prefix item 1"
        },])
      additional_properties = jsonencode(
        {
          type        = "BOOLEAN"
        })
      properties = jsonencode({
        name = {
          type        = "STRING"
          description = "A name"
      }})
      items = jsonencode({
          type        = "ARRAY"
          description = "An array"
      })
    }
  }

  global_instruction = "You are a virtual assistant for an e-commerce platform. Be friendly and helpful."

  guardrails = [
  ]

  default_channel_profile {
    channel_type = "WEB_UI"
    disable_barge_in_control = false
    disable_dtmf = true
    persona_property {
      persona = "CONCISE"
    }
    profile_id = "profile-id"
    web_widget_config {
      modality = "CHAT_ONLY"
      theme    = "LIGHT"
      web_widget_title = "Help Assistant"
    }
  }

  metadata = {
    "deployment_env" = "test"
  }

  time_zone_settings {
    time_zone = "America/Los_Angeles"
  }

  # Root agent should not be specified when creating an app
}
`, context)
}

func TestAccCESApp_cesAppAmbientSoundGcsUriExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCESAppDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCESApp_cesAppAmbientSoundGcsUriExample(context),
			},
			{
				ResourceName:            "google_ces_app.ces_app_ambient_sound_gcs_uri",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"app_id", "location"},
			},
		},
	})
}

func testAccCESApp_cesAppAmbientSoundGcsUriExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_ces_app" "ces_app_ambient_sound_gcs_uri" {
  app_id = "tf-test-app-id%{random_suffix}"
  location = "us"
  description = "Basic CES App example"
  display_name = "tf-test-my-app-ambient-sound-gcs-uri%{random_suffix}"

  language_settings {
    default_language_code    = "en-US"
    supported_language_codes = ["es-ES", "fr-FR"]
    enable_multilingual_support = true
    fallback_action          = "escalate"
  }

  audio_processing_config {
    synthesize_speech_configs {
      language_code = "en-US"
      voice         = "en-US-Standard-A"
      speaking_rate = 1.0
    }
    synthesize_speech_configs {
      language_code = "es-ES"
      voice         = "es-ES-Standard-A"
      speaking_rate = 0.95
    }

    barge_in_config {
      barge_in_awareness = true
    }

    inactivity_timeout = "300s"

    ambient_sound_config {
      gcs_uri = "gs://fake-bucket/sounds/ambient.wav"
      volume_gain_db         = -6.0
    }
  }

  logging_settings {
    redaction_config {
      enable_redaction   = true
      inspect_template   = "projects/fake-project/locations/us/inspectTemplates/example-inspect"
      deidentify_template = "projects/fake-project/locations/us/deidentifyTemplates/example-deidentify"
    }

    audio_recording_config {
      gcs_bucket      = "gs://fake-app-audio-recordings"
      gcs_path_prefix = "projects/fake-project/location/us/app/fake-app/123/$session/123"
    }

    bigquery_export_settings {
      dataset = "projects/fake-project/datasets/fake_app_logs"
      enabled = false
      project = "projects/fake-project"
    }

    cloud_logging_settings {
      enable_cloud_logging = true
    }

    conversation_logging_settings {
      disable_conversation_logging = true
    }
  }

  model_settings {
    model       = "gemini-1.5-flash"
    temperature = 0.5
  }

  evaluation_metrics_thresholds {
    golden_evaluation_metrics_thresholds {
      turn_level_metrics_thresholds {
        semantic_similarity_success_threshold        = 3
        overall_tool_invocation_correctness_threshold = 1.0
      }
      expectation_level_metrics_thresholds {
        tool_invocation_parameter_correctness_threshold = 1.0
      }
    }
  }

variable_declarations {
    name        = "test"
    description = "test"
    schema {
      description = "schema description"
      type        = "ARRAY"
      nullable    = true
      required = ["some_property"]
      enum = ["VALUE_A", "VALUE_B"]
      ref = "#/defs/MyDefinition"
      unique_items = true
      defs = jsonencode({
        SimpleString = {
          type        = "STRING"
          description = "A simple string definition"
      }})
      any_of = jsonencode([
        {
          type        = "STRING"
          description = "any_of option 1: string"
        },])
      default = jsonencode(
        false)
      prefix_items = jsonencode([
        {
          type        = "ARRAY"
          description = "prefix item 1"
        },])
      additional_properties = jsonencode(
        {
          type        = "BOOLEAN"
        })
      properties = jsonencode({
        name = {
          type        = "STRING"
          description = "A name"
      }})
      items = jsonencode({
          type        = "ARRAY"
          description = "An array"
      })
    }
  }

  global_instruction = "You are a virtual assistant for an e-commerce platform. Be friendly and helpful."

  guardrails = [
  ]

  default_channel_profile {
    channel_type = "WEB_UI"
    disable_barge_in_control = false
    disable_dtmf = true
    persona_property {
      persona = "CONCISE"
    }
    profile_id = "profile-id"
    web_widget_config {
      modality = "CHAT_ONLY"
      theme    = "LIGHT"
      web_widget_title = "Help Assistant"
    }
  }

  metadata = {
    "deployment_env" = "test"
  }

  time_zone_settings {
    time_zone = "America/Los_Angeles"
  }

  # Root agent should not be specified when creating an app
}
`, context)
}

func testAccCheckCESAppDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_ces_app" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{CESBasePath}}projects/{{project}}/locations/{{location}}/apps/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("CESApp still exists at %s", url)
			}
		}

		return nil
	}
}
