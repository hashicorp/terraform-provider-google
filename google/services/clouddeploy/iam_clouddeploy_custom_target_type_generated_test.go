// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package clouddeploy_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccClouddeployCustomTargetTypeIamBindingGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
		"role":          "roles/viewer",
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccClouddeployCustomTargetTypeIamBinding_basicGenerated(context),
			},
			{
				ResourceName:      "google_clouddeploy_custom_target_type_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/customTargetTypes/%s roles/viewer", envvar.GetTestProjectFromEnv(), envvar.GetTestRegionFromEnv(), fmt.Sprintf("tf-test-my-custom-target-type%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				// Test Iam Binding update
				Config: testAccClouddeployCustomTargetTypeIamBinding_updateGenerated(context),
			},
			{
				ResourceName:      "google_clouddeploy_custom_target_type_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/customTargetTypes/%s roles/viewer", envvar.GetTestProjectFromEnv(), envvar.GetTestRegionFromEnv(), fmt.Sprintf("tf-test-my-custom-target-type%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccClouddeployCustomTargetTypeIamMemberGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
		"role":          "roles/viewer",
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAccClouddeployCustomTargetTypeIamMember_basicGenerated(context),
			},
			{
				ResourceName:      "google_clouddeploy_custom_target_type_iam_member.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/customTargetTypes/%s roles/viewer user:admin@hashicorptest.com", envvar.GetTestProjectFromEnv(), envvar.GetTestRegionFromEnv(), fmt.Sprintf("tf-test-my-custom-target-type%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccClouddeployCustomTargetTypeIamPolicyGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
		"role":          "roles/viewer",
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccClouddeployCustomTargetTypeIamPolicy_basicGenerated(context),
				Check:  resource.TestCheckResourceAttrSet("data.google_clouddeploy_custom_target_type_iam_policy.foo", "policy_data"),
			},
			{
				ResourceName:      "google_clouddeploy_custom_target_type_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/customTargetTypes/%s", envvar.GetTestProjectFromEnv(), envvar.GetTestRegionFromEnv(), fmt.Sprintf("tf-test-my-custom-target-type%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccClouddeployCustomTargetTypeIamPolicy_emptyBinding(context),
			},
			{
				ResourceName:      "google_clouddeploy_custom_target_type_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/customTargetTypes/%s", envvar.GetTestProjectFromEnv(), envvar.GetTestRegionFromEnv(), fmt.Sprintf("tf-test-my-custom-target-type%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccClouddeployCustomTargetTypeIamMember_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_clouddeploy_custom_target_type" "custom-target-type" {
    location = "us-central1"
    name = "tf-test-my-custom-target-type%{random_suffix}"
    description = "My custom target type"
    annotations = {
      my_first_annotation = "example-annotation-1"
      my_second_annotation = "example-annotation-2"
    }
    labels = {
      my_first_label = "example-label-1"
      my_second_label = "example-label-2"
    }
    custom_actions {
      render_action = "renderAction"
      deploy_action = "deployAction"
    }
}

resource "google_clouddeploy_custom_target_type_iam_member" "foo" {
  project = google_clouddeploy_custom_target_type.custom-target-type.project
  location = google_clouddeploy_custom_target_type.custom-target-type.location
  name = google_clouddeploy_custom_target_type.custom-target-type.name
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAccClouddeployCustomTargetTypeIamPolicy_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_clouddeploy_custom_target_type" "custom-target-type" {
    location = "us-central1"
    name = "tf-test-my-custom-target-type%{random_suffix}"
    description = "My custom target type"
    annotations = {
      my_first_annotation = "example-annotation-1"
      my_second_annotation = "example-annotation-2"
    }
    labels = {
      my_first_label = "example-label-1"
      my_second_label = "example-label-2"
    }
    custom_actions {
      render_action = "renderAction"
      deploy_action = "deployAction"
    }
}

data "google_iam_policy" "foo" {
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
}

resource "google_clouddeploy_custom_target_type_iam_policy" "foo" {
  project = google_clouddeploy_custom_target_type.custom-target-type.project
  location = google_clouddeploy_custom_target_type.custom-target-type.location
  name = google_clouddeploy_custom_target_type.custom-target-type.name
  policy_data = data.google_iam_policy.foo.policy_data
}

data "google_clouddeploy_custom_target_type_iam_policy" "foo" {
  project = google_clouddeploy_custom_target_type.custom-target-type.project
  location = google_clouddeploy_custom_target_type.custom-target-type.location
  name = google_clouddeploy_custom_target_type.custom-target-type.name
  depends_on = [
    google_clouddeploy_custom_target_type_iam_policy.foo
  ]
}
`, context)
}

func testAccClouddeployCustomTargetTypeIamPolicy_emptyBinding(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_clouddeploy_custom_target_type" "custom-target-type" {
    location = "us-central1"
    name = "tf-test-my-custom-target-type%{random_suffix}"
    description = "My custom target type"
    annotations = {
      my_first_annotation = "example-annotation-1"
      my_second_annotation = "example-annotation-2"
    }
    labels = {
      my_first_label = "example-label-1"
      my_second_label = "example-label-2"
    }
    custom_actions {
      render_action = "renderAction"
      deploy_action = "deployAction"
    }
}

data "google_iam_policy" "foo" {
}

resource "google_clouddeploy_custom_target_type_iam_policy" "foo" {
  project = google_clouddeploy_custom_target_type.custom-target-type.project
  location = google_clouddeploy_custom_target_type.custom-target-type.location
  name = google_clouddeploy_custom_target_type.custom-target-type.name
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccClouddeployCustomTargetTypeIamBinding_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_clouddeploy_custom_target_type" "custom-target-type" {
    location = "us-central1"
    name = "tf-test-my-custom-target-type%{random_suffix}"
    description = "My custom target type"
    annotations = {
      my_first_annotation = "example-annotation-1"
      my_second_annotation = "example-annotation-2"
    }
    labels = {
      my_first_label = "example-label-1"
      my_second_label = "example-label-2"
    }
    custom_actions {
      render_action = "renderAction"
      deploy_action = "deployAction"
    }
}

resource "google_clouddeploy_custom_target_type_iam_binding" "foo" {
  project = google_clouddeploy_custom_target_type.custom-target-type.project
  location = google_clouddeploy_custom_target_type.custom-target-type.location
  name = google_clouddeploy_custom_target_type.custom-target-type.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAccClouddeployCustomTargetTypeIamBinding_updateGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_clouddeploy_custom_target_type" "custom-target-type" {
    location = "us-central1"
    name = "tf-test-my-custom-target-type%{random_suffix}"
    description = "My custom target type"
    annotations = {
      my_first_annotation = "example-annotation-1"
      my_second_annotation = "example-annotation-2"
    }
    labels = {
      my_first_label = "example-label-1"
      my_second_label = "example-label-2"
    }
    custom_actions {
      render_action = "renderAction"
      deploy_action = "deployAction"
    }
}

resource "google_clouddeploy_custom_target_type_iam_binding" "foo" {
  project = google_clouddeploy_custom_target_type.custom-target-type.project
  location = google_clouddeploy_custom_target_type.custom-target-type.location
  name = google_clouddeploy_custom_target_type.custom-target-type.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:gterraformtest1@gmail.com"]
}
`, context)
}
