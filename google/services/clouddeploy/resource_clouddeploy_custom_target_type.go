// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package clouddeploy

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceClouddeployCustomTargetType() *schema.Resource {
	return &schema.Resource{
		Create: resourceClouddeployCustomTargetTypeCreate,
		Read:   resourceClouddeployCustomTargetTypeRead,
		Update: resourceClouddeployCustomTargetTypeUpdate,
		Delete: resourceClouddeployCustomTargetTypeDelete,

		Importer: &schema.ResourceImporter{
			State: resourceClouddeployCustomTargetTypeImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetAnnotationsDiff,
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location of the source.`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Name of the 'CustomTargetType'.`,
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"custom_actions": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configures render and deploy for the 'CustomTargetType' using Skaffold custom actions.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"deploy_action": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The Skaffold custom action responsible for deploy operations.`,
						},
						"include_skaffold_modules": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `List of Skaffold modules Cloud Deploy will include in the Skaffold Config as required before performing diagnose.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"configs": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The Skaffold Config modules to use from the specified source.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"git": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Remote git repository containing the Skaffold Config modules.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"repo": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Git repository the package should be cloned from.`,
												},
												"path": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Relative path from the repository root to the Skaffold file.`,
												},
												"ref": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Git ref the package should be cloned from.`,
												},
											},
										},
										ExactlyOneOf: []string{},
									},
									"google_cloud_storage": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Cloud Storage bucket containing Skaffold Config modules.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"source": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Cloud Storage source paths to copy recursively. For example, providing 'gs://my-bucket/dir/configs/*' will result in Skaffold copying all files within the 'dir/configs' directory in the bucket 'my-bucket'.`,
												},
												"path": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Relative path from the source to the Skaffold file.`,
												},
											},
										},
										ExactlyOneOf: []string{},
									},
								},
							},
						},
						"render_action": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The Skaffold custom action responsible for render operations. If not provided then Cloud Deploy will perform the render operations via 'skaffold render'.`,
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Description of the 'CustomTargetType'. Max length is 255 characters.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the 'CustomTargetType' was created.`,
			},
			"custom_target_type_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Resource id of the 'CustomTargetType'.`,
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"etag": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The weak etag of the 'CustomTargetType' resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Unique identifier of the 'CustomTargetType'.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the 'CustomTargetType' was updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceClouddeployCustomTargetTypeCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandClouddeployCustomTargetTypeDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	customActionsProp, err := expandClouddeployCustomTargetTypeCustomActions(d.Get("custom_actions"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("custom_actions"); !tpgresource.IsEmptyValue(reflect.ValueOf(customActionsProp)) && (ok || !reflect.DeepEqual(v, customActionsProp)) {
		obj["customActions"] = customActionsProp
	}
	annotationsProp, err := expandClouddeployCustomTargetTypeEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	labelsProp, err := expandClouddeployCustomTargetTypeEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ClouddeployBasePath}}projects/{{project}}/locations/{{location}}/customTargetTypes?customTargetTypeId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new CustomTargetType: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CustomTargetType: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating CustomTargetType: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/customTargetTypes/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ClouddeployOperationWaitTime(
		config, res, project, "Creating CustomTargetType", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create CustomTargetType: %s", err)
	}

	log.Printf("[DEBUG] Finished creating CustomTargetType %q: %#v", d.Id(), res)

	return resourceClouddeployCustomTargetTypeRead(d, meta)
}

func resourceClouddeployCustomTargetTypeRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ClouddeployBasePath}}projects/{{project}}/locations/{{location}}/customTargetTypes/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CustomTargetType: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ClouddeployCustomTargetType %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}

	if err := d.Set("custom_target_type_id", flattenClouddeployCustomTargetTypeCustomTargetTypeId(res["customTargetTypeId"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("uid", flattenClouddeployCustomTargetTypeUid(res["uid"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("description", flattenClouddeployCustomTargetTypeDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("annotations", flattenClouddeployCustomTargetTypeAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("labels", flattenClouddeployCustomTargetTypeLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("create_time", flattenClouddeployCustomTargetTypeCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("update_time", flattenClouddeployCustomTargetTypeUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("etag", flattenClouddeployCustomTargetTypeEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("custom_actions", flattenClouddeployCustomTargetTypeCustomActions(res["customActions"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("effective_annotations", flattenClouddeployCustomTargetTypeEffectiveAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("terraform_labels", flattenClouddeployCustomTargetTypeTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}
	if err := d.Set("effective_labels", flattenClouddeployCustomTargetTypeEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading CustomTargetType: %s", err)
	}

	return nil
}

func resourceClouddeployCustomTargetTypeUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CustomTargetType: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandClouddeployCustomTargetTypeDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	customActionsProp, err := expandClouddeployCustomTargetTypeCustomActions(d.Get("custom_actions"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("custom_actions"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, customActionsProp)) {
		obj["customActions"] = customActionsProp
	}
	annotationsProp, err := expandClouddeployCustomTargetTypeEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	labelsProp, err := expandClouddeployCustomTargetTypeEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ClouddeployBasePath}}projects/{{project}}/locations/{{location}}/customTargetTypes/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating CustomTargetType %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("custom_actions") {
		updateMask = append(updateMask, "customActions")
	}

	if d.HasChange("effective_annotations") {
		updateMask = append(updateMask, "annotations")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
		})

		if err != nil {
			return fmt.Errorf("Error updating CustomTargetType %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating CustomTargetType %q: %#v", d.Id(), res)
		}

		err = ClouddeployOperationWaitTime(
			config, res, project, "Updating CustomTargetType", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceClouddeployCustomTargetTypeRead(d, meta)
}

func resourceClouddeployCustomTargetTypeDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for CustomTargetType: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ClouddeployBasePath}}projects/{{project}}/locations/{{location}}/customTargetTypes/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	log.Printf("[DEBUG] Deleting CustomTargetType %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "CustomTargetType")
	}

	err = ClouddeployOperationWaitTime(
		config, res, project, "Deleting CustomTargetType", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting CustomTargetType %q: %#v", d.Id(), res)
	return nil
}

func resourceClouddeployCustomTargetTypeImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/customTargetTypes/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/customTargetTypes/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenClouddeployCustomTargetTypeCustomTargetTypeId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("annotations"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenClouddeployCustomTargetTypeLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenClouddeployCustomTargetTypeCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeCustomActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["render_action"] =
		flattenClouddeployCustomTargetTypeCustomActionsRenderAction(original["renderAction"], d, config)
	transformed["deploy_action"] =
		flattenClouddeployCustomTargetTypeCustomActionsDeployAction(original["deployAction"], d, config)
	transformed["include_skaffold_modules"] =
		flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModules(original["includeSkaffoldModules"], d, config)
	return []interface{}{transformed}
}
func flattenClouddeployCustomTargetTypeCustomActionsRenderAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeCustomActionsDeployAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"configs":              flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesConfigs(original["configs"], d, config),
			"git":                  flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGit(original["git"], d, config),
			"google_cloud_storage": flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStorage(original["googleCloudStorage"], d, config),
		})
	}
	return transformed
}
func flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesConfigs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["repo"] =
		flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitRepo(original["repo"], d, config)
	transformed["path"] =
		flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitPath(original["path"], d, config)
	transformed["ref"] =
		flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitRef(original["ref"], d, config)
	return []interface{}{transformed}
}
func flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitRepo(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitRef(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStorage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["source"] =
		flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStorageSource(original["source"], d, config)
	transformed["path"] =
		flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStoragePath(original["path"], d, config)
	return []interface{}{transformed}
}
func flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStorageSource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStoragePath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeEffectiveAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenClouddeployCustomTargetTypeTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenClouddeployCustomTargetTypeEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandClouddeployCustomTargetTypeDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandClouddeployCustomTargetTypeCustomActions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRenderAction, err := expandClouddeployCustomTargetTypeCustomActionsRenderAction(original["render_action"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRenderAction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["renderAction"] = transformedRenderAction
	}

	transformedDeployAction, err := expandClouddeployCustomTargetTypeCustomActionsDeployAction(original["deploy_action"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeployAction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deployAction"] = transformedDeployAction
	}

	transformedIncludeSkaffoldModules, err := expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModules(original["include_skaffold_modules"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludeSkaffoldModules); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includeSkaffoldModules"] = transformedIncludeSkaffoldModules
	}

	return transformed, nil
}

func expandClouddeployCustomTargetTypeCustomActionsRenderAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandClouddeployCustomTargetTypeCustomActionsDeployAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedConfigs, err := expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesConfigs(original["configs"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["configs"] = transformedConfigs
		}

		transformedGit, err := expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGit(original["git"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedGit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["git"] = transformedGit
		}

		transformedGoogleCloudStorage, err := expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStorage(original["google_cloud_storage"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedGoogleCloudStorage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["googleCloudStorage"] = transformedGoogleCloudStorage
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRepo, err := expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitRepo(original["repo"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRepo); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["repo"] = transformedRepo
	}

	transformedPath, err := expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitPath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	transformedRef, err := expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitRef(original["ref"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRef); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ref"] = transformedRef
	}

	return transformed, nil
}

func expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitRepo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGitRef(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStorage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSource, err := expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStorageSource(original["source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["source"] = transformedSource
	}

	transformedPath, err := expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStoragePath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	return transformed, nil
}

func expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStorageSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandClouddeployCustomTargetTypeCustomActionsIncludeSkaffoldModulesGoogleCloudStoragePath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandClouddeployCustomTargetTypeEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandClouddeployCustomTargetTypeEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
