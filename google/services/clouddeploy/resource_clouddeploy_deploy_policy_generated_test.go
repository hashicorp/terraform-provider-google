// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package clouddeploy_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccClouddeployDeployPolicy_clouddeployDeployPolicyBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckClouddeployDeployPolicyDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccClouddeployDeployPolicy_clouddeployDeployPolicyBasicExample(context),
			},
			{
				ResourceName:            "google_clouddeploy_deploy_policy.b-deploy-policy",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccClouddeployDeployPolicy_clouddeployDeployPolicyBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_clouddeploy_deploy_policy" "b-deploy-policy" {
  name     = "tf-test-cd-policy%{random_suffix}"
  location = "us-central1"
  selectors {
    delivery_pipeline {
      id = "tf-test-cd-pipeline%{random_suffix}"
    }
  }
  rules {
    rollout_restriction {
      id = "rule"
      time_windows {
        time_zone = "America/Los_Angeles"
        weekly_windows {
            start_time {
                hours = "12"
                minutes = "00"
            }
            end_time {
                hours = "13"
                minutes = "00"
            }
        }
      }
    }
  }
}
`, context)
}

func TestAccClouddeployDeployPolicy_clouddeployDeployPolicyFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckClouddeployDeployPolicyDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccClouddeployDeployPolicy_clouddeployDeployPolicyFullExample(context),
			},
			{
				ResourceName:            "google_clouddeploy_deploy_policy.f-deploy-policy",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccClouddeployDeployPolicy_clouddeployDeployPolicyFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_clouddeploy_deploy_policy" "f-deploy-policy" {
  name     = "tf-test-cd-policy%{random_suffix}"
  location = "us-central1"
  annotations = {
    my_first_annotation = "example-annotation-1"
    my_second_annotation = "example-annotation-2"
  }
  labels = {
    my_first_label = "example-label-1"
    my_second_label = "example-label-2"
  }
  description = "policy resource"
  selectors {
    delivery_pipeline {
      id = "tf-test-cd-pipeline%{random_suffix}"
      labels = {
      	foo = "bar"
      }
    }
   }
  selectors {
    target {
      id = "dev"
      labels = {
      	foo = "bar"
      }
    }
  }
  suspended = true
  rules {
    rollout_restriction {
      id = "rule"
      time_windows {
        time_zone = "America/Los_Angeles"
        weekly_windows {
            start_time {
                hours = "12"
                minutes = "00"
                seconds = "00"
                nanos = "00"
            }
            end_time {
                hours = "13"
                minutes = "00"
                seconds = "00"
                nanos = "00"
            }
        }
      }
    }
  }
  rules {
    rollout_restriction {
        id = "rule2"
        invokers = ["USER"] 
        actions = ["CREATE"]
        time_windows {
        time_zone = "America/Los_Angeles"
        weekly_windows {
            start_time {
                hours = "13"
                minutes = "00"
                seconds = "00"
                nanos = "00"
            }
            end_time {
                hours = "14"
                minutes = "00"
                seconds = "00"
                nanos = "00"
            }
            days_of_week = ["MONDAY"]
          }

        one_time_windows {
        start_time {
            hours = "15"
            minutes = "00"
            seconds = "00"
            nanos = "00"
        }
        end_time {
            hours = "16"
            minutes = "00"
            seconds = "00"
            nanos = "00"
        }
        start_date {
            year = "2019"
            month = "01"
            day = "01"
        }
        end_date {
            year = "2019"
            month = "12"
            day = "31"
        }
      }
     }
    }
  }
}
`, context)
}

func testAccCheckClouddeployDeployPolicyDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_clouddeploy_deploy_policy" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ClouddeployBasePath}}projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ClouddeployDeployPolicy still exists at %s", url)
			}
		}

		return nil
	}
}
