// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflowcx_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDialogflowCXSecuritySettings_dialogflowcxSecuritySettingsBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDialogflowCXSecuritySettingsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowCXSecuritySettings_dialogflowcxSecuritySettingsBasicExample(context),
			},
			{
				ResourceName:            "google_dialogflow_cx_security_settings.basic_security_settings",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
		},
	})
}

func testAccDialogflowCXSecuritySettings_dialogflowcxSecuritySettingsBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dialogflow_cx_security_settings" "basic_security_settings" {
  display_name          = "tf-test-dialogflowcx-security-settings%{random_suffix}"
  location              = "global"
  purge_data_types      = []
  retention_window_days = 7
}
`, context)
}

func TestAccDialogflowCXSecuritySettings_dialogflowcxSecuritySettingsFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDialogflowCXSecuritySettingsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowCXSecuritySettings_dialogflowcxSecuritySettingsFullExample(context),
			},
			{
				ResourceName:            "google_dialogflow_cx_security_settings.basic_security_settings",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
		},
	})
}

func testAccDialogflowCXSecuritySettings_dialogflowcxSecuritySettingsFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_data_loss_prevention_inspect_template" "inspect" {
  parent       = "projects/%{project}/locations/global"
  display_name = "tf-test-dialogflowcx-inspect-template%{random_suffix}"
  inspect_config {
    info_types {
      name = "EMAIL_ADDRESS"
    }
  }
}

resource "google_data_loss_prevention_deidentify_template" "deidentify" {
  parent       = "projects/%{project}/locations/global"
  display_name = "tf-test-dialogflowcx-deidentify-template%{random_suffix}"
  deidentify_config {
    info_type_transformations {
      transformations {
        primitive_transformation {
          replace_config {
            new_value {
              string_value = "[REDACTED]"
            }
          }
        }
      }
    }
  }
}

resource "google_storage_bucket" "bucket" {
  name                        = "tf-test-dialogflowcx-bucket%{random_suffix}"
  location                    = "US"
  uniform_bucket_level_access = true
}

resource "google_dialogflow_cx_security_settings" "basic_security_settings" {
  display_name        = "tf-test-dialogflowcx-security-settings%{random_suffix}"
  location            = "global"
  redaction_strategy  = "REDACT_WITH_SERVICE"
  redaction_scope     = "REDACT_DISK_STORAGE"
  inspect_template    = google_data_loss_prevention_inspect_template.inspect.id
  deidentify_template = google_data_loss_prevention_deidentify_template.deidentify.id
  purge_data_types    = ["DIALOGFLOW_HISTORY"]
  audio_export_settings {
    gcs_bucket             = google_storage_bucket.bucket.id
    audio_export_pattern   = "export"
    enable_audio_redaction = true
    audio_format           = "OGG"
  }
  insights_export_settings {
    enable_insights_export = true
  }
  retention_strategy = "REMOVE_AFTER_CONVERSATION"
}
`, context)
}

func testAccCheckDialogflowCXSecuritySettingsDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_dialogflow_cx_security_settings" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DialogflowCXBasePath}}projects/{{project}}/locations/{{location}}/securitySettings/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DialogflowCXSecuritySettings still exists at %s", url)
			}
		}

		return nil
	}
}
