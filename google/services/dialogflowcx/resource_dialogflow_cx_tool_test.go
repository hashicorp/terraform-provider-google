// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/dialogflowcx/resource_dialogflow_cx_tool_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package dialogflowcx_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccDialogflowCXTool_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowCXTool_basic(context),
			},
			{
				ResourceName:      "google_dialogflow_cx_tool.my_tool",
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccDialogflowCXTool_full_api_key(context),
			},
			{
				ResourceName:            "google_dialogflow_cx_tool.my_tool",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"open_api_spec.0.authentication.0.api_key_config.0.api_key"},
			},
			{
				Config: testAccDialogflowCXTool_full_service_agent_auth(context),
			},
			{
				ResourceName:      "google_dialogflow_cx_tool.my_tool",
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccDialogflowCXTool_full_bearer_token(context),
			},
			{
				ResourceName:            "google_dialogflow_cx_tool.my_tool",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"open_api_spec.0.authentication.0.bearer_token_config.0.token"},
			},
		},
	})
}

func testAccDialogflowCXTool_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_dialogflow_cx_agent" "agent_tool" {
		display_name             = "tf-test-%{random_suffix}"
		location                 = "global"
		default_language_code    = "en"
		time_zone                = "America/New_York"
		description              = "ageng for tool test"
	}

	resource "google_dialogflow_cx_tool" "my_tool" {
		parent       = google_dialogflow_cx_agent.agent_tool.id
		display_name = "Example"
		description  = "Example Description"
	}
	`, context)
}

func testAccDialogflowCXTool_full_api_key(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_dialogflow_cx_agent" "agent_tool" {
		display_name             = "tf-test-%{random_suffix}"
		location                 = "global"
		default_language_code    = "en"
		time_zone                = "America/New_York"
		description              = "ageng for tool test"
	}

	resource "google_dialogflow_cx_tool" "my_tool" {
		parent       = google_dialogflow_cx_agent.agent_tool.id
		display_name = "Example Open API Tool with api_key_config"
		description  = "Example Description"
		open_api_spec {
			authentication {
				api_key_config {
					key_name = "example key name"
					api_key = "example key"
					secret_version_for_api_key = "projects/-/secrets/-/versions/-"
					request_location = "HEADER"
				}
			}
			tls_config {
				ca_certs {
					display_name = "example ca cert name"
					cert = base64encode("example cert")
				}
			}
			service_directory_config {
				service = "projects/-/locations/-/namespaces/-/services/-"
			}
			text_schema = <<EOF
			{
				"openapi": "3.0.0",
				"info": {
					"title": "Time API",
					"version": "1.0.0",
					"description": "A simple API to get the current time."
				},
				"servers": [
					{
						"url": "https://example-api-endpoint.com"
					}
				],
				"paths": {
					"/time": {
						"get": {
							"operationId": "getCurrentTime",
							"summary": "Gets the current server time.",
							"responses": {
								"200": {
									"description": "Successful response with the current time.",
									"content": {
										"application/json": {
											"schema": {
												"type": "object",
												"properties": {
													"currentTime": {
														"type": "string",
														"format": "date-time",
														"description": "The current time in ISO 8601 format."
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			EOF
		}
	}
	`, context)
}

func testAccDialogflowCXTool_full_service_agent_auth(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_dialogflow_cx_agent" "agent_tool" {
		display_name             = "tf-test-%{random_suffix}"
		location                 = "global"
		default_language_code    = "en"
		time_zone                = "America/New_York"
		description              = "ageng for tool test"
	}

	resource "google_dialogflow_cx_tool" "my_tool" {
		parent       = google_dialogflow_cx_agent.agent_tool.id
		display_name = "Example Open API Tool with service_agent_auth_config"
		description  = "Example Description"
		open_api_spec {
			authentication {
				service_agent_auth_config {
					service_agent_auth = "ID_TOKEN"
				}
			}
			tls_config {
				ca_certs {
					display_name = "example ca cert name"
					cert = base64encode("example cert")
				}
			}
			service_directory_config {
				service = "projects/-/locations/-/namespaces/-/services/-"
			}
			text_schema = <<EOF
			{
				"openapi": "3.0.0",
				"info": {
					"title": "Time API",
					"version": "1.0.0",
					"description": "A simple API to get the current time."
				},
				"servers": [
					{
						"url": "https://example-api-endpoint.com"
					}
				],
				"paths": {
					"/time": {
						"get": {
							"operationId": "getCurrentTime",
							"summary": "Gets the current server time.",
							"responses": {
								"200": {
									"description": "Successful response with the current time.",
									"content": {
										"application/json": {
											"schema": {
												"type": "object",
												"properties": {
													"currentTime": {
														"type": "string",
														"format": "date-time",
														"description": "The current time in ISO 8601 format."
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			EOF
		}
	}
	`, context)
}

func testAccDialogflowCXTool_full_bearer_token(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_dialogflow_cx_agent" "agent_tool" {
		display_name             = "tf-test-%{random_suffix}"
		location                 = "global"
		default_language_code    = "en"
		time_zone                = "America/New_York"
		description              = "ageng for tool test"
	}

	resource "google_dialogflow_cx_tool" "my_tool" {
		parent       = google_dialogflow_cx_agent.agent_tool.id
		display_name = "Example Open API Tool with bearer_token_config"
		description  = "Example Description"
		open_api_spec {
			authentication {
				bearer_token_config {
					token = "example token"
					secret_version_for_token = "projects/-/secrets/-/versions/-"
				}
			}
			tls_config {
				ca_certs {
					display_name = "example ca cert name"
					cert = base64encode("example cert")
				}
			}
			service_directory_config {
				service = "projects/-/locations/-/namespaces/-/services/-"
			}
			text_schema = <<EOF
			{
				"openapi": "3.0.0",
				"info": {
					"title": "Time API",
					"version": "1.0.0",
					"description": "A simple API to get the current time."
				},
				"servers": [
					{
						"url": "https://example-api-endpoint.com"
					}
				],
				"paths": {
					"/time": {
						"get": {
							"operationId": "getCurrentTime",
							"summary": "Gets the current server time.",
							"responses": {
								"200": {
									"description": "Successful response with the current time.",
									"content": {
										"application/json": {
											"schema": {
												"type": "object",
												"properties": {
													"currentTime": {
														"type": "string",
														"format": "date-time",
														"description": "The current time in ISO 8601 format."
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			EOF
		}
  }
	`, context)
}
