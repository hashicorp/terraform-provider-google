// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dialogflowcx/Flow.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package dialogflowcx

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"reflect"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceDialogflowCXFlow() *schema.Resource {
	return &schema.Resource{
		Create: resourceDialogflowCXFlowCreate,
		Read:   resourceDialogflowCXFlowRead,
		Update: resourceDialogflowCXFlowUpdate,
		Delete: resourceDialogflowCXFlowDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDialogflowCXFlowImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(40 * time.Minute),
			Update: schema.DefaultTimeout(40 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The human-readable name of the flow.`,
			},
			"advanced_settings": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Hierarchical advanced settings for this flow. The settings exposed at the lower level overrides the settings exposed at the higher level.
Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"audio_export_gcs_destination": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
* Agent level
* Flow level`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"uri": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
Format: gs://bucket/object-name-or-prefix`,
									},
								},
							},
						},
						"dtmf_settings": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
* Agent level
* Flow level
* Page level
* Parameter level`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).`,
									},
									"finish_digit": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The digit that terminates a DTMF digit sequence.`,
									},
									"max_digits": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: `Max length of DTMF digits.`,
									},
								},
							},
						},
						"logging_settings": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Settings for logging. Settings for Dialogflow History, Contact Center messages, StackDriver logs, and speech logging. Exposed at the following levels:
* Agent level`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enable_consent_based_redaction": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Enables consent-based end-user input redaction, if true, a pre-defined session parameter **$session.params.conversation-redaction** will be used to determine if the utterance should be redacted.`,
									},
									"enable_interaction_logging": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Enables DF Interaction logging.`,
									},
									"enable_stackdriver_logging": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Enables Google Cloud Logging.`,
									},
								},
							},
						},
						"speech_settings": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Settings for speech to text detection. Exposed at the following levels:
* Agent level
* Flow level
* Page level
* Parameter level`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"endpointer_sensitivity": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: `Sensitivity of the speech model that detects the end of speech. Scale from 0 to 100.`,
									},
									"models": {
										Type:     schema.TypeMap,
										Optional: true,
										Description: `Mapping from language to Speech-to-Text model. The mapped Speech-to-Text model will be selected for requests from its corresponding language. For more information, see [Speech models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models).
An object containing a list of **"key": value** pairs. Example: **{ "name": "wrench", "mass": "1.3kg", "count": "3" }**.`,
										Elem: &schema.Schema{Type: schema.TypeString},
									},
									"no_speech_timeout": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Timeout before detecting no speech.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".`,
									},
									"use_timeout_based_endpointing": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Use timeout based endpointing, interpreting endpointer sensitivity as seconds of timeout value.`,
									},
								},
							},
						},
					},
				},
			},
			"description": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: validation.StringLenBetween(0, 500),
				Description:  `The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.`,
			},
			"event_handlers": {
				Type:     schema.TypeList,
				Computed: true,
				Optional: true,
				Description: `A flow's event handlers serve two purposes:
They are responsible for handling events (e.g. no match, webhook errors) in the flow.
They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"event": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The name of the event to handle.`,
						},
						"target_flow": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The target flow to transition to.
Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.`,
						},
						"target_page": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The target page to transition to.
Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.`,
						},
						"trigger_fulfillment": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"conditional_cases": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Conditional cases for this fulfillment.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"cases": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsJSON,
													StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
													Description: `A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.`,
												},
											},
										},
									},
									"enable_generative_fallback": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `If the flag is true, the agent will utilize LLM to generate a text response.
If LLM generation fails, the defined responses in the fulfillment will be respected.
This flag is only useful for fulfillments associated with no-match event handlers.`,
									},
									"messages": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The list of rich message responses to present to the user.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"channel": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.`,
												},
												"conversation_success": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
You may set this, for example:
* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
* In a webhook response when you determine that you handled the customer issue.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"metadata": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: validation.StringIsJSON,
																StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
																Description:  `Custom metadata. Dialogflow doesn't impose any structure on this.`,
															},
														},
													},
												},
												"live_agent_handoff": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Indicates that the conversation should be handed off to a live agent.
Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
You may set this, for example:
* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
* In a webhook response when you determine that the customer issue can only be handled by a human.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"metadata": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: validation.StringIsJSON,
																StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
																Description:  `Custom metadata. Dialogflow doesn't impose any structure on this.`,
															},
														},
													},
												},
												"output_audio_text": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"ssml": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `The SSML text to be synthesized. For more information, see SSML.`,
															},
															"text": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `The raw text to be synthesized.`,
															},
															"allow_playback_interruption": {
																Type:        schema.TypeBool,
																Computed:    true,
																Description: `Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.`,
															},
														},
													},
												},
												"payload": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsJSON,
													StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
													Description:  `A custom, platform-specific payload.`,
												},
												"play_audio": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specifies an audio clip to be played by the client as part of the response.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"audio_uri": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.`,
															},
															"allow_playback_interruption": {
																Type:        schema.TypeBool,
																Computed:    true,
																Description: `Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.`,
															},
														},
													},
												},
												"telephony_transfer_call": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"phone_number": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Transfer the call to a phone number in E.164 format.`,
															},
														},
													},
												},
												"text": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The text response message.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"text": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `A collection of text responses.`,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
															"allow_playback_interruption": {
																Type:        schema.TypeBool,
																Computed:    true,
																Description: `Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.`,
															},
														},
													},
												},
											},
										},
									},
									"return_partial_responses": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.`,
									},
									"set_parameter_actions": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Set parameter values before executing the webhook.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"parameter": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Display name of the parameter.`,
												},
												"value": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsJSON,
													StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
													Description:  `The new JSON-encoded value of the parameter. A null value clears the parameter.`,
												},
											},
										},
									},
									"tag": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.`,
									},
									"webhook": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.`,
									},
								},
							},
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The unique identifier of this event handler.`,
						},
					},
				},
			},
			"knowledge_connector_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Knowledge connector configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"data_store_connections": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Optional. List of related data store connections.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"data_store": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The full name of the referenced data store. Formats: projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore} projects/{project}/locations/{location}/dataStores/{dataStore}`,
									},
									"data_store_type": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"PUBLIC_WEB", "UNSTRUCTURED", "STRUCTURED", ""}),
										Description: `The type of the connected data store.
* PUBLIC_WEB: A data store that contains public web content.
* UNSTRUCTURED: A data store that contains unstructured private data.
* STRUCTURED: A data store that contains structured data (for example FAQ). Possible values: ["PUBLIC_WEB", "UNSTRUCTURED", "STRUCTURED"]`,
									},
									"document_processing_mode": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"DOCUMENTS", "CHUNKS", ""}),
										Description: `The document processing mode for the data store connection. Should only be set for PUBLIC_WEB and UNSTRUCTURED data stores. If not set it is considered as DOCUMENTS, as this is the legacy mode.
* DOCUMENTS: Documents are processed as documents.
* CHUNKS: Documents are converted to chunks. Possible values: ["DOCUMENTS", "CHUNKS"]`,
									},
								},
							},
						},
						"enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether Knowledge Connector is enabled or not.`,
						},
						"target_flow": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The target flow to transition to. Format: projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>.
This field is part of a union field 'target': Only one of 'targetPage' or 'targetFlow' may be set.`,
						},
						"target_page": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The target page to transition to. Format: projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>.
The page must be in the same host flow (the flow that owns this 'KnowledgeConnectorSettings').
This field is part of a union field 'target': Only one of 'targetPage' or 'targetFlow' may be set.`,
						},
						"trigger_fulfillment": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `The fulfillment to be triggered.
When the answers from the Knowledge Connector are selected by Dialogflow, you can utitlize the request scoped parameter $request.knowledge.answers (contains up to the 5 highest confidence answers) and $request.knowledge.questions (contains the corresponding questions) to construct the fulfillment.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"advanced_settings": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playbackInterruptionSettings at fulfillment level only overrides the playbackInterruptionSettings at the agent level, leaving other settings at the agent level unchanged.
DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel.
Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"dtmf_settings": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
* Agent level
* Flow level
* Page level
* Parameter level`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"enabled": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `If true, incoming audio is processed for DTMF (dual tone multi frequtectency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will de the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).`,
															},
															"endpointing_timeout_duration": {
																Type:     schema.TypeString,
																Optional: true,
																Description: `Endpoint timeout setting for matching dtmf input to regex.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.500s".`,
															},
															"finish_digit": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `The digit that terminates a DTMF digit sequence.`,
															},
															"interdigit_timeout_duration": {
																Type:     schema.TypeString,
																Optional: true,
																Description: `Interdigit timeout setting for matching dtmf input to regex.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.500s".`,
															},
															"max_digits": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Max length of DTMF digits.`,
															},
														},
													},
												},
												"logging_settings": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Settings for logging. Settings for Dialogflow History, Contact Center messages, StackDriver logs, and speech logging. Exposed at the following levels:
* Agent level`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"enable_consent_based_redaction": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Enables consent-based end-user input redaction, if true, a pre-defined session parameter **$session.params.conversation-redaction** will be used to determine if the utterance should be redacted.`,
															},
															"enable_interaction_logging": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Enables DF Interaction logging.`,
															},
															"enable_stackdriver_logging": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Enables Google Cloud Logging.`,
															},
														},
													},
												},
												"speech_settings": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Settings for speech to text detection. Exposed at the following levels:
* Agent level
* Flow level
* Page level
* Parameter level`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"endpointer_sensitivity": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Sensitivity of the speech model that detects the end of speech. Scale from 0 to 100.`,
															},
															"models": {
																Type:     schema.TypeMap,
																Optional: true,
																Description: `Mapping from language to Speech-to-Text model. The mapped Speech-to-Text model will be selected for requests from its corresponding language. For more information, see [Speech models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models).
An object containing a list of **"key": value** pairs. Example: **{ "name": "wrench", "mass": "1.3kg", "count": "3" }**.`,
																Elem: &schema.Schema{Type: schema.TypeString},
															},
															"no_speech_timeout": {
																Type:     schema.TypeString,
																Optional: true,
																Description: `Timeout before detecting no speech.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.500s".`,
															},
															"use_timeout_based_endpointing": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Use timeout based endpointing, interpreting endpointer sensitivity as seconds of timeout value.`,
															},
														},
													},
												},
											},
										},
									},
									"conditional_cases": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Conditional cases for this fulfillment.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"cases": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsJSON,
													StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
													Description: `A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.`,
												},
											},
										},
									},
									"enable_generative_fallback": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers.`,
									},
									"messages": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The list of rich message responses to present to the user.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"channel": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.`,
												},
												"conversation_success": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
You may set this, for example:
* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
* In a webhook response when you determine that you handled the customer issue.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"metadata": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: validation.StringIsJSON,
																StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
																Description:  `Custom metadata. Dialogflow doesn't impose any structure on this.`,
															},
														},
													},
												},
												"knowledge_info_card": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `This type has no fields.
Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card.
Otherwise, the info card response is skipped.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},
												"live_agent_handoff": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Indicates that the conversation should be handed off to a live agent.
Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
You may set this, for example:
* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
* In a webhook response when you determine that the customer issue can only be handled by a human.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"metadata": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: validation.StringIsJSON,
																StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
																Description:  `Custom metadata. Dialogflow doesn't impose any structure on this.`,
															},
														},
													},
												},
												"output_audio_text": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"ssml": {
																Type:     schema.TypeString,
																Optional: true,
																Description: `The SSML text to be synthesized. For more information, see SSML.
This field is part of a union field 'source': Only one of 'text' or 'ssml' may be set.`,
															},
															"text": {
																Type:     schema.TypeString,
																Optional: true,
																Description: `The raw text to be synthesized.
This field is part of a union field 'source': Only one of 'text' or 'ssml' may be set.`,
															},
															"allow_playback_interruption": {
																Type:        schema.TypeBool,
																Computed:    true,
																Description: `Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.`,
															},
														},
													},
												},
												"payload": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsJSON,
													StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
													Description: `Returns a response containing a custom, platform-specific payload.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
												},
												"play_audio": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Specifies an audio clip to be played by the client as part of the response.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"audio_uri": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.`,
															},
															"allow_playback_interruption": {
																Type:        schema.TypeBool,
																Computed:    true,
																Description: `Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.`,
															},
														},
													},
												},
												"telephony_transfer_call": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"phone_number": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Transfer the call to a phone number in E.164 format.`,
															},
														},
													},
												},
												"text": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `The text response message.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"text": {
																Type:     schema.TypeList,
																Optional: true,
																Description: `A collection of text response variants. If multiple variants are defined, only one text response variant is returned at runtime.
required: true`,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
															"allow_playback_interruption": {
																Type:        schema.TypeBool,
																Computed:    true,
																Description: `Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.`,
															},
														},
													},
												},
												"end_interaction": {
													Type:     schema.TypeList,
													Computed: true,
													Description: `This type has no fields.
Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},
												"mixed_audio": {
													Type:     schema.TypeList,
													Computed: true,
													Description: `Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via playAudio. This message is generated by Dialogflow only and not supposed to be defined by the user.
This field is part of a union field 'message': Only one of 'text', 'payload', 'conversationSuccess', 'outputAudioText', 'liveAgentHandoff', 'endInteraction', 'playAudio', 'mixedAudio', 'telephonyTransferCall', or 'knowledgeInfoCard' may be set.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"segments": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Segments this audio response is composed of.`,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"audio": {
																			Type:     schema.TypeString,
																			Optional: true,
																			Description: `Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request.
A base64-encoded string.
This field is part of a union field 'content': Only one of 'audio' or 'uri' may be set.`,
																		},
																		"uri": {
																			Type:     schema.TypeString,
																			Optional: true,
																			Description: `Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it.
This field is part of a union field 'content': Only one of 'audio' or 'uri' may be set.`,
																		},
																		"allow_playback_interruption": {
																			Type:        schema.TypeBool,
																			Computed:    true,
																			Description: `Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request.`,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"return_partial_responses": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.`,
									},
									"set_parameter_actions": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Set parameter values before executing the webhook.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"parameter": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Display name of the parameter.`,
												},
												"value": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsJSON,
													StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
													Description:  `The new JSON-encoded value of the parameter. A null value clears the parameter.`,
												},
											},
										},
									},
									"tag": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.`,
									},
									"webhook": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.`,
									},
								},
							},
						},
					},
				},
			},
			"language_code": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `The language of the following fields in flow:
Flow.event_handlers.trigger_fulfillment.messages
Flow.event_handlers.trigger_fulfillment.conditional_cases
Flow.transition_routes.trigger_fulfillment.messages
Flow.transition_routes.trigger_fulfillment.conditional_cases
If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.`,
			},
			"nlu_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `NLU related settings of the flow.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"classification_threshold": {
							Type:     schema.TypeFloat,
							Optional: true,
							Description: `To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.`,
						},
						"model_training_mode": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"MODEL_TRAINING_MODE_AUTOMATIC", "MODEL_TRAINING_MODE_MANUAL", ""}),
							Description: `Indicates NLU model training mode.
* MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
* MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train. Possible values: ["MODEL_TRAINING_MODE_AUTOMATIC", "MODEL_TRAINING_MODE_MANUAL"]`,
						},
						"model_type": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"MODEL_TYPE_STANDARD", "MODEL_TYPE_ADVANCED", ""}),
							Description: `Indicates the type of NLU model.
* MODEL_TYPE_STANDARD: Use standard NLU model.
* MODEL_TYPE_ADVANCED: Use advanced NLU model. Possible values: ["MODEL_TYPE_STANDARD", "MODEL_TYPE_ADVANCED"]`,
						},
					},
				},
			},
			"parent": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `The agent to create a flow for.
Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.`,
			},
			"transition_route_groups": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `A flow's transition route group serve two purposes:
They are responsible for matching the user's first utterances in the flow.
They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"transition_routes": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `A flow's transition routes serve two purposes:
They are responsible for matching the user's first utterances in the flow.
They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.

TransitionRoutes are evalauted in the following order:
  TransitionRoutes with intent specified.
  TransitionRoutes with only condition specified.
  TransitionRoutes with intent specified are inherited by pages in the flow.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"condition": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The condition to evaluate against form parameters or session parameters.
At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.`,
						},
						"intent": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The unique identifier of an Intent.
Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.`,
						},
						"target_flow": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The target flow to transition to.
Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.`,
						},
						"target_page": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The target page to transition to.
Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.`,
						},
						"trigger_fulfillment": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"conditional_cases": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Conditional cases for this fulfillment.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"cases": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsJSON,
													StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
													Description: `A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
See [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.`,
												},
											},
										},
									},
									"messages": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The list of rich message responses to present to the user.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"channel": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.`,
												},
												"conversation_success": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.
You may set this, for example:
* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
* In a webhook response when you determine that you handled the customer issue.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"metadata": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: validation.StringIsJSON,
																StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
																Description:  `Custom metadata. Dialogflow doesn't impose any structure on this.`,
															},
														},
													},
												},
												"live_agent_handoff": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Indicates that the conversation should be handed off to a live agent.
Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
You may set this, for example:
* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
* In a webhook response when you determine that the customer issue can only be handled by a human.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"metadata": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: validation.StringIsJSON,
																StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
																Description:  `Custom metadata. Dialogflow doesn't impose any structure on this.`,
															},
														},
													},
												},
												"output_audio_text": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"ssml": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `The SSML text to be synthesized. For more information, see SSML.`,
															},
															"text": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `The raw text to be synthesized.`,
															},
															"allow_playback_interruption": {
																Type:        schema.TypeBool,
																Computed:    true,
																Description: `Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.`,
															},
														},
													},
												},
												"payload": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsJSON,
													StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
													Description:  `A custom, platform-specific payload.`,
												},
												"play_audio": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Specifies an audio clip to be played by the client as part of the response.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"audio_uri": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.`,
															},
															"allow_playback_interruption": {
																Type:        schema.TypeBool,
																Computed:    true,
																Description: `Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.`,
															},
														},
													},
												},
												"telephony_transfer_call": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"phone_number": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Transfer the call to a phone number in E.164 format.`,
															},
														},
													},
												},
												"text": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The text response message.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"text": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `A collection of text responses.`,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
															"allow_playback_interruption": {
																Type:        schema.TypeBool,
																Computed:    true,
																Description: `Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.`,
															},
														},
													},
												},
											},
										},
									},
									"return_partial_responses": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.`,
									},
									"set_parameter_actions": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Set parameter values before executing the webhook.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"parameter": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Display name of the parameter.`,
												},
												"value": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: validation.StringIsJSON,
													StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
													Description:  `The new JSON-encoded value of the parameter. A null value clears the parameter.`,
												},
											},
										},
									},
									"tag": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.`,
									},
									"webhook": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.`,
									},
								},
							},
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The unique identifier of this transition route.`,
						},
					},
				},
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The unique identifier of the flow.
Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.`,
			},
			"is_default_start_flow": {
				Type:     schema.TypeBool,
				Optional: true,
				ForceNew: true,
				Description: `Marks this as the [Default Start Flow](https://cloud.google.com/dialogflow/cx/docs/concept/flow#start) for an agent. When you create an agent, the Default Start Flow is created automatically.
The Default Start Flow cannot be deleted; deleting the 'google_dialogflow_cx_flow' resource does nothing to the underlying GCP resources.

~> Avoid having multiple 'google_dialogflow_cx_flow' resources linked to the same agent with 'is_default_start_flow = true' because they will compete to control a single Default Start Flow resource in GCP.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDialogflowCXFlowCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandDialogflowCXFlowDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandDialogflowCXFlowDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	transitionRoutesProp, err := expandDialogflowCXFlowTransitionRoutes(d.Get("transition_routes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("transition_routes"); !tpgresource.IsEmptyValue(reflect.ValueOf(transitionRoutesProp)) && (ok || !reflect.DeepEqual(v, transitionRoutesProp)) {
		obj["transitionRoutes"] = transitionRoutesProp
	}
	eventHandlersProp, err := expandDialogflowCXFlowEventHandlers(d.Get("event_handlers"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("event_handlers"); !tpgresource.IsEmptyValue(reflect.ValueOf(eventHandlersProp)) && (ok || !reflect.DeepEqual(v, eventHandlersProp)) {
		obj["eventHandlers"] = eventHandlersProp
	}
	transitionRouteGroupsProp, err := expandDialogflowCXFlowTransitionRouteGroups(d.Get("transition_route_groups"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("transition_route_groups"); !tpgresource.IsEmptyValue(reflect.ValueOf(transitionRouteGroupsProp)) && (ok || !reflect.DeepEqual(v, transitionRouteGroupsProp)) {
		obj["transitionRouteGroups"] = transitionRouteGroupsProp
	}
	nluSettingsProp, err := expandDialogflowCXFlowNluSettings(d.Get("nlu_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("nlu_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(nluSettingsProp)) && (ok || !reflect.DeepEqual(v, nluSettingsProp)) {
		obj["nluSettings"] = nluSettingsProp
	}
	advancedSettingsProp, err := expandDialogflowCXFlowAdvancedSettings(d.Get("advanced_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("advanced_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(advancedSettingsProp)) && (ok || !reflect.DeepEqual(v, advancedSettingsProp)) {
		obj["advancedSettings"] = advancedSettingsProp
	}
	knowledgeConnectorSettingsProp, err := expandDialogflowCXFlowKnowledgeConnectorSettings(d.Get("knowledge_connector_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("knowledge_connector_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(knowledgeConnectorSettingsProp)) && (ok || !reflect.DeepEqual(v, knowledgeConnectorSettingsProp)) {
		obj["knowledgeConnectorSettings"] = knowledgeConnectorSettingsProp
	}
	languageCodeProp, err := expandDialogflowCXFlowLanguageCode(d.Get("language_code"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("language_code"); !tpgresource.IsEmptyValue(reflect.ValueOf(languageCodeProp)) && (ok || !reflect.DeepEqual(v, languageCodeProp)) {
		obj["languageCode"] = languageCodeProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowCXBasePath}}{{parent}}/flows")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Flow: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	// extract location from the parent
	location := ""

	if parts := regexp.MustCompile(`locations\/([^\/]*)\/`).FindStringSubmatch(d.Get("parent").(string)); parts != nil {
		location = parts[1]
	} else {
		return fmt.Errorf(
			"Saw %s when the parent is expected to contains location %s",
			d.Get("parent"),
			"projects/{{project}}/locations/{{location}}/...",
		)
	}

	// only insert location into url if the base_url in products/dialogflowcx/product.yaml is used
	if strings.HasPrefix(url, "https://-dialogflow.googleapis.com/v3/") {
		url = strings.Replace(url, "-dialogflow", fmt.Sprintf("%s-dialogflow", location), 1)
	}

	// if it's a default object Dialogflow creates for you, "Update" instead of "Create"
	// Note: below we try to access fields that aren't present in the resource, because this custom code is reused across multiple Dialogflow resources that contain different fields. When the field isn't present, we deliberately ignore the error and the boolean is false.
	isDefaultStartFlow, _ := d.Get("is_default_start_flow").(bool)
	isDefaultWelcomeIntent, _ := d.Get("is_default_welcome_intent").(bool)
	isDefaultNegativeIntent, _ := d.Get("is_default_negative_intent").(bool)
	if isDefaultStartFlow || isDefaultWelcomeIntent || isDefaultNegativeIntent {
		// hardcode the default object ID:
		var defaultObjName string
		if isDefaultStartFlow || isDefaultWelcomeIntent {
			defaultObjName = "00000000-0000-0000-0000-000000000000"
		}
		if isDefaultNegativeIntent {
			defaultObjName = "00000000-0000-0000-0000-000000000001"
		}

		// Store the ID
		d.Set("name", defaultObjName)
		id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/flows/{{name}}")
		if err != nil {
			return fmt.Errorf("Error constructing id: %s", err)
		}
		d.SetId(id)

		// and defer to the Update method:
		log.Printf("[DEBUG] Updating default DialogflowCXFlow")
		return resourceDialogflowCXFlowUpdate(d, meta)
	}
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Flow: %s", err)
	}
	// Set computed resource properties from create API response so that they're available on the subsequent Read
	// call.
	err = resourceDialogflowCXFlowPostCreateSetComputedFields(d, meta, res)
	if err != nil {
		return fmt.Errorf("setting computed ID format fields: %w", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/flows/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Flow %q: %#v", d.Id(), res)

	return resourceDialogflowCXFlowRead(d, meta)
}

func resourceDialogflowCXFlowRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowCXBasePath}}{{parent}}/flows/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	// extract location from the parent
	location := ""

	if parts := regexp.MustCompile(`locations\/([^\/]*)\/`).FindStringSubmatch(d.Get("parent").(string)); parts != nil {
		location = parts[1]
	} else {
		return fmt.Errorf(
			"Saw %s when the parent is expected to contains location %s",
			d.Get("parent"),
			"projects/{{project}}/locations/{{location}}/...",
		)
	}

	// only insert location into url if the base_url in products/dialogflowcx/product.yaml is used
	if strings.HasPrefix(url, "https://-dialogflow.googleapis.com/v3/") {
		url = strings.Replace(url, "-dialogflow", fmt.Sprintf("%s-dialogflow", location), 1)
	}
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DialogflowCXFlow %q", d.Id()))
	}

	// Explicitly set virtual fields to default values if unset

	if err := d.Set("name", flattenDialogflowCXFlowName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}
	if err := d.Set("display_name", flattenDialogflowCXFlowDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}
	if err := d.Set("description", flattenDialogflowCXFlowDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}
	if err := d.Set("transition_routes", flattenDialogflowCXFlowTransitionRoutes(res["transitionRoutes"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}
	if err := d.Set("event_handlers", flattenDialogflowCXFlowEventHandlers(res["eventHandlers"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}
	if err := d.Set("transition_route_groups", flattenDialogflowCXFlowTransitionRouteGroups(res["transitionRouteGroups"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}
	if err := d.Set("nlu_settings", flattenDialogflowCXFlowNluSettings(res["nluSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}
	if err := d.Set("advanced_settings", flattenDialogflowCXFlowAdvancedSettings(res["advancedSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}
	if err := d.Set("knowledge_connector_settings", flattenDialogflowCXFlowKnowledgeConnectorSettings(res["knowledgeConnectorSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}
	if err := d.Set("language_code", flattenDialogflowCXFlowLanguageCode(res["languageCode"], d, config)); err != nil {
		return fmt.Errorf("Error reading Flow: %s", err)
	}

	return nil
}

func resourceDialogflowCXFlowUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	displayNameProp, err := expandDialogflowCXFlowDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandDialogflowCXFlowDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	transitionRoutesProp, err := expandDialogflowCXFlowTransitionRoutes(d.Get("transition_routes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("transition_routes"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, transitionRoutesProp)) {
		obj["transitionRoutes"] = transitionRoutesProp
	}
	eventHandlersProp, err := expandDialogflowCXFlowEventHandlers(d.Get("event_handlers"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("event_handlers"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, eventHandlersProp)) {
		obj["eventHandlers"] = eventHandlersProp
	}
	transitionRouteGroupsProp, err := expandDialogflowCXFlowTransitionRouteGroups(d.Get("transition_route_groups"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("transition_route_groups"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, transitionRouteGroupsProp)) {
		obj["transitionRouteGroups"] = transitionRouteGroupsProp
	}
	nluSettingsProp, err := expandDialogflowCXFlowNluSettings(d.Get("nlu_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("nlu_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nluSettingsProp)) {
		obj["nluSettings"] = nluSettingsProp
	}
	advancedSettingsProp, err := expandDialogflowCXFlowAdvancedSettings(d.Get("advanced_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("advanced_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, advancedSettingsProp)) {
		obj["advancedSettings"] = advancedSettingsProp
	}
	knowledgeConnectorSettingsProp, err := expandDialogflowCXFlowKnowledgeConnectorSettings(d.Get("knowledge_connector_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("knowledge_connector_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, knowledgeConnectorSettingsProp)) {
		obj["knowledgeConnectorSettings"] = knowledgeConnectorSettingsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowCXBasePath}}{{parent}}/flows/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Flow %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("transition_routes") {
		updateMask = append(updateMask, "transitionRoutes")
	}

	if d.HasChange("event_handlers") {
		updateMask = append(updateMask, "eventHandlers")
	}

	if d.HasChange("transition_route_groups") {
		updateMask = append(updateMask, "transitionRouteGroups")
	}

	if d.HasChange("nlu_settings") {
		updateMask = append(updateMask, "nluSettings")
	}

	if d.HasChange("advanced_settings") {
		updateMask = append(updateMask, "advancedSettings")
	}

	if d.HasChange("knowledge_connector_settings") {
		updateMask = append(updateMask, "knowledgeConnectorSettings")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}
	// extract location from the parent
	location := ""

	if parts := regexp.MustCompile(`locations\/([^\/]*)\/`).FindStringSubmatch(d.Get("parent").(string)); parts != nil {
		location = parts[1]
	} else {
		return fmt.Errorf(
			"Saw %s when the parent is expected to contains location %s",
			d.Get("parent"),
			"projects/{{project}}/locations/{{location}}/...",
		)
	}

	// only insert location into url if the base_url in products/dialogflowcx/product.yaml is used
	if strings.HasPrefix(url, "https://-dialogflow.googleapis.com/v3/") {
		url = strings.Replace(url, "-dialogflow", fmt.Sprintf("%s-dialogflow", location), 1)
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Flow %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Flow %q: %#v", d.Id(), res)
		}

	}

	return resourceDialogflowCXFlowRead(d, meta)
}

func resourceDialogflowCXFlowDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowCXBasePath}}{{parent}}/flows/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	// extract location from the parent
	location := ""

	if parts := regexp.MustCompile(`locations\/([^\/]*)\/`).FindStringSubmatch(d.Get("parent").(string)); parts != nil {
		location = parts[1]
	} else {
		return fmt.Errorf(
			"Saw %s when the parent is expected to contains location %s",
			d.Get("parent"),
			"projects/{{project}}/locations/{{location}}/...",
		)
	}

	url = strings.Replace(url, "-dialogflow", fmt.Sprintf("%s-dialogflow", location), 1)

	// if it's a default object Dialogflow creates for you, skip deletion
	// Note: below we try to access fields that aren't present in the resource, because this custom code is reused across multiple Dialogflow resources that contain different fields. When the field isn't present, we deliberately ignore the error and the boolean is false.
	isDefaultStartFlow, _ := d.Get("is_default_start_flow").(bool)
	isDefaultWelcomeIntent, _ := d.Get("is_default_welcome_intent").(bool)
	isDefaultNegativeIntent, _ := d.Get("is_default_negative_intent").(bool)
	if isDefaultStartFlow || isDefaultWelcomeIntent || isDefaultNegativeIntent {
		// we can't delete these resources so do nothing
		log.Printf("[DEBUG] Not deleting default DialogflowCXFlow")
		return nil
	}

	log.Printf("[DEBUG] Deleting Flow %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Flow")
	}

	log.Printf("[DEBUG] Finished deleting Flow %q: %#v", d.Id(), res)
	return nil
}

func resourceDialogflowCXFlowImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	// current import_formats can't import fields with forward slashes in their value and parent contains slashes
	if err := tpgresource.ParseImportId([]string{
		"(?P<parent>.+)/flows/(?P<name>[^/]+)",
		"(?P<parent>.+)/(?P<name>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/flows/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Set is_default_start_flow if the resource is actually the Default Start Flow
	if d.Get("name").(string) == "00000000-0000-0000-0000-000000000000" {
		d.Set("is_default_start_flow", true)
	}

	return []*schema.ResourceData{d}, nil
}

func flattenDialogflowCXFlowName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.GetResourceNameFromSelfLink(v.(string))
}

func flattenDialogflowCXFlowDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":                flattenDialogflowCXFlowTransitionRoutesName(original["name"], d, config),
			"intent":              flattenDialogflowCXFlowTransitionRoutesIntent(original["intent"], d, config),
			"condition":           flattenDialogflowCXFlowTransitionRoutesCondition(original["condition"], d, config),
			"trigger_fulfillment": flattenDialogflowCXFlowTransitionRoutesTriggerFulfillment(original["triggerFulfillment"], d, config),
			"target_page":         flattenDialogflowCXFlowTransitionRoutesTargetPage(original["targetPage"], d, config),
			"target_flow":         flattenDialogflowCXFlowTransitionRoutesTargetFlow(original["targetFlow"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowTransitionRoutesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesIntent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["messages"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessages(original["messages"], d, config)
	transformed["webhook"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentWebhook(original["webhook"], d, config)
	transformed["return_partial_responses"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentReturnPartialResponses(original["returnPartialResponses"], d, config)
	transformed["tag"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentTag(original["tag"], d, config)
	transformed["set_parameter_actions"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActions(original["setParameterActions"], d, config)
	transformed["conditional_cases"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentConditionalCases(original["conditionalCases"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessages(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"channel":                 flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesChannel(original["channel"], d, config),
			"text":                    flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesText(original["text"], d, config),
			"payload":                 flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPayload(original["payload"], d, config),
			"conversation_success":    flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesConversationSuccess(original["conversationSuccess"], d, config),
			"output_audio_text":       flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioText(original["outputAudioText"], d, config),
			"live_agent_handoff":      flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff(original["liveAgentHandoff"], d, config),
			"play_audio":              flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudio(original["playAudio"], d, config),
			"telephony_transfer_call": flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall(original["telephonyTransferCall"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesChannel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTextText(original["text"], d, config)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPayload(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesConversationSuccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesConversationSuccessMetadata(original["metadata"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesConversationSuccessMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config)
	transformed["text"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextText(original["text"], d, config)
	transformed["ssml"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextSsml(original["ssml"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextSsml(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffMetadata(original["metadata"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_uri"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudioAudioUri(original["audioUri"], d, config)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudioAudioUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["phone_number"] =
		flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(original["phoneNumber"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentWebhook(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentReturnPartialResponses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"parameter": flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActionsParameter(original["parameter"], d, config),
			"value":     flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActionsValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActionsParameter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActionsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentConditionalCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"cases": flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentConditionalCasesCases(original["cases"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowTransitionRoutesTriggerFulfillmentConditionalCasesCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowTransitionRoutesTargetPage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRoutesTargetFlow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":                flattenDialogflowCXFlowEventHandlersName(original["name"], d, config),
			"event":               flattenDialogflowCXFlowEventHandlersEvent(original["event"], d, config),
			"trigger_fulfillment": flattenDialogflowCXFlowEventHandlersTriggerFulfillment(original["triggerFulfillment"], d, config),
			"target_page":         flattenDialogflowCXFlowEventHandlersTargetPage(original["targetPage"], d, config),
			"target_flow":         flattenDialogflowCXFlowEventHandlersTargetFlow(original["targetFlow"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowEventHandlersName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersEvent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["messages"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessages(original["messages"], d, config)
	transformed["webhook"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentWebhook(original["webhook"], d, config)
	transformed["return_partial_responses"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentReturnPartialResponses(original["returnPartialResponses"], d, config)
	transformed["tag"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentTag(original["tag"], d, config)
	transformed["set_parameter_actions"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActions(original["setParameterActions"], d, config)
	transformed["conditional_cases"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentConditionalCases(original["conditionalCases"], d, config)
	transformed["enable_generative_fallback"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentEnableGenerativeFallback(original["enableGenerativeFallback"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessages(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"channel":                 flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesChannel(original["channel"], d, config),
			"text":                    flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesText(original["text"], d, config),
			"payload":                 flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPayload(original["payload"], d, config),
			"conversation_success":    flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesConversationSuccess(original["conversationSuccess"], d, config),
			"output_audio_text":       flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioText(original["outputAudioText"], d, config),
			"live_agent_handoff":      flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff(original["liveAgentHandoff"], d, config),
			"play_audio":              flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudio(original["playAudio"], d, config),
			"telephony_transfer_call": flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall(original["telephonyTransferCall"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesChannel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTextText(original["text"], d, config)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPayload(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesConversationSuccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesConversationSuccessMetadata(original["metadata"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesConversationSuccessMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config)
	transformed["text"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextText(original["text"], d, config)
	transformed["ssml"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextSsml(original["ssml"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextSsml(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffMetadata(original["metadata"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_uri"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudioAudioUri(original["audioUri"], d, config)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudioAudioUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["phone_number"] =
		flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(original["phoneNumber"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentWebhook(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentReturnPartialResponses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"parameter": flattenDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActionsParameter(original["parameter"], d, config),
			"value":     flattenDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActionsValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActionsParameter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActionsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentConditionalCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"cases": flattenDialogflowCXFlowEventHandlersTriggerFulfillmentConditionalCasesCases(original["cases"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentConditionalCasesCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowEventHandlersTriggerFulfillmentEnableGenerativeFallback(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTargetPage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowEventHandlersTargetFlow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowTransitionRouteGroups(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowNluSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["model_type"] =
		flattenDialogflowCXFlowNluSettingsModelType(original["modelType"], d, config)
	transformed["classification_threshold"] =
		flattenDialogflowCXFlowNluSettingsClassificationThreshold(original["classificationThreshold"], d, config)
	transformed["model_training_mode"] =
		flattenDialogflowCXFlowNluSettingsModelTrainingMode(original["modelTrainingMode"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowNluSettingsModelType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowNluSettingsClassificationThreshold(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowNluSettingsModelTrainingMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowAdvancedSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_export_gcs_destination"] =
		flattenDialogflowCXFlowAdvancedSettingsAudioExportGcsDestination(original["audioExportGcsDestination"], d, config)
	transformed["speech_settings"] =
		flattenDialogflowCXFlowAdvancedSettingsSpeechSettings(original["speechSettings"], d, config)
	transformed["dtmf_settings"] =
		flattenDialogflowCXFlowAdvancedSettingsDtmfSettings(original["dtmfSettings"], d, config)
	transformed["logging_settings"] =
		flattenDialogflowCXFlowAdvancedSettingsLoggingSettings(original["loggingSettings"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowAdvancedSettingsAudioExportGcsDestination(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["uri"] =
		flattenDialogflowCXFlowAdvancedSettingsAudioExportGcsDestinationUri(original["uri"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowAdvancedSettingsAudioExportGcsDestinationUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowAdvancedSettingsSpeechSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["endpointer_sensitivity"] =
		flattenDialogflowCXFlowAdvancedSettingsSpeechSettingsEndpointerSensitivity(original["endpointerSensitivity"], d, config)
	transformed["no_speech_timeout"] =
		flattenDialogflowCXFlowAdvancedSettingsSpeechSettingsNoSpeechTimeout(original["noSpeechTimeout"], d, config)
	transformed["use_timeout_based_endpointing"] =
		flattenDialogflowCXFlowAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(original["useTimeoutBasedEndpointing"], d, config)
	transformed["models"] =
		flattenDialogflowCXFlowAdvancedSettingsSpeechSettingsModels(original["models"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowAdvancedSettingsSpeechSettingsEndpointerSensitivity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXFlowAdvancedSettingsSpeechSettingsNoSpeechTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowAdvancedSettingsSpeechSettingsModels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowAdvancedSettingsDtmfSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenDialogflowCXFlowAdvancedSettingsDtmfSettingsEnabled(original["enabled"], d, config)
	transformed["max_digits"] =
		flattenDialogflowCXFlowAdvancedSettingsDtmfSettingsMaxDigits(original["maxDigits"], d, config)
	transformed["finish_digit"] =
		flattenDialogflowCXFlowAdvancedSettingsDtmfSettingsFinishDigit(original["finishDigit"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowAdvancedSettingsDtmfSettingsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowAdvancedSettingsDtmfSettingsMaxDigits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXFlowAdvancedSettingsDtmfSettingsFinishDigit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowAdvancedSettingsLoggingSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("advanced_settings.0.logging_settings")
}
func flattenDialogflowCXFlowAdvancedSettingsLoggingSettingsEnableStackdriverLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowAdvancedSettingsLoggingSettingsEnableInteractionLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowAdvancedSettingsLoggingSettingsEnableConsentBasedRedaction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsEnabled(original["enabled"], d, config)
	transformed["trigger_fulfillment"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillment(original["triggerFulfillment"], d, config)
	transformed["data_store_connections"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnections(original["dataStoreConnections"], d, config)
	transformed["target_page"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTargetPage(original["targetPage"], d, config)
	transformed["target_flow"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTargetFlow(original["targetFlow"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["messages"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessages(original["messages"], d, config)
	transformed["webhook"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentWebhook(original["webhook"], d, config)
	transformed["return_partial_responses"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentReturnPartialResponses(original["returnPartialResponses"], d, config)
	transformed["tag"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentTag(original["tag"], d, config)
	transformed["set_parameter_actions"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActions(original["setParameterActions"], d, config)
	transformed["conditional_cases"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentConditionalCases(original["conditionalCases"], d, config)
	transformed["advanced_settings"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettings(original["advancedSettings"], d, config)
	transformed["enable_generative_fallback"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentEnableGenerativeFallback(original["enableGenerativeFallback"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessages(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"channel":                 flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesChannel(original["channel"], d, config),
			"text":                    flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesText(original["text"], d, config),
			"payload":                 flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPayload(original["payload"], d, config),
			"conversation_success":    flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesConversationSuccess(original["conversationSuccess"], d, config),
			"output_audio_text":       flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioText(original["outputAudioText"], d, config),
			"live_agent_handoff":      flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesLiveAgentHandoff(original["liveAgentHandoff"], d, config),
			"end_interaction":         flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesEndInteraction(original["endInteraction"], d, config),
			"play_audio":              flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudio(original["playAudio"], d, config),
			"mixed_audio":             flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudio(original["mixedAudio"], d, config),
			"telephony_transfer_call": flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTelephonyTransferCall(original["telephonyTransferCall"], d, config),
			"knowledge_info_card":     flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesKnowledgeInfoCard(original["knowledgeInfoCard"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesChannel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTextText(original["text"], d, config)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPayload(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesConversationSuccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesConversationSuccessMetadata(original["metadata"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesConversationSuccessMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config)
	transformed["text"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextText(original["text"], d, config)
	transformed["ssml"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextSsml(original["ssml"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextSsml(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesLiveAgentHandoff(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesLiveAgentHandoffMetadata(original["metadata"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesLiveAgentHandoffMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesEndInteraction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_uri"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudioAudioUri(original["audioUri"], d, config)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudioAudioUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["segments"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegments(original["segments"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegments(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"allow_playback_interruption": flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config),
			"audio":                       flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsAudio(original["audio"], d, config),
			"uri":                         flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsUri(original["uri"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTelephonyTransferCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["phone_number"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(original["phoneNumber"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesKnowledgeInfoCard(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentWebhook(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentReturnPartialResponses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"parameter": flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActionsParameter(original["parameter"], d, config),
			"value":     flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActionsValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActionsParameter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActionsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentConditionalCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"cases": flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentConditionalCasesCases(original["cases"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentConditionalCasesCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["speech_settings"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettings(original["speechSettings"], d, config)
	transformed["dtmf_settings"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettings(original["dtmfSettings"], d, config)
	transformed["logging_settings"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettings(original["loggingSettings"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["endpointer_sensitivity"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsEndpointerSensitivity(original["endpointerSensitivity"], d, config)
	transformed["no_speech_timeout"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsNoSpeechTimeout(original["noSpeechTimeout"], d, config)
	transformed["use_timeout_based_endpointing"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(original["useTimeoutBasedEndpointing"], d, config)
	transformed["models"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsModels(original["models"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsEndpointerSensitivity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsNoSpeechTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsModels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsEnabled(original["enabled"], d, config)
	transformed["max_digits"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsMaxDigits(original["maxDigits"], d, config)
	transformed["finish_digit"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsFinishDigit(original["finishDigit"], d, config)
	transformed["interdigit_timeout_duration"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsInterdigitTimeoutDuration(original["interdigitTimeoutDuration"], d, config)
	transformed["endpointing_timeout_duration"] =
		flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsEndpointingTimeoutDuration(original["endpointingTimeoutDuration"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsMaxDigits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsFinishDigit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsInterdigitTimeoutDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsEndpointingTimeoutDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("knowledge_connector_settings.0.trigger_fulfillment.0.advanced_settings.0.logging_settings")
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsEnableStackdriverLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsEnableInteractionLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsEnableConsentBasedRedaction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentEnableGenerativeFallback(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnections(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"data_store_type":          flattenDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDataStoreType(original["dataStoreType"], d, config),
			"data_store":               flattenDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDataStore(original["dataStore"], d, config),
			"document_processing_mode": flattenDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDocumentProcessingMode(original["documentProcessingMode"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDataStoreType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDataStore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDocumentProcessingMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTargetPage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowKnowledgeConnectorSettingsTargetFlow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXFlowLanguageCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDialogflowCXFlowDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandDialogflowCXFlowTransitionRoutesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedIntent, err := expandDialogflowCXFlowTransitionRoutesIntent(original["intent"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIntent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["intent"] = transformedIntent
		}

		transformedCondition, err := expandDialogflowCXFlowTransitionRoutesCondition(original["condition"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCondition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["condition"] = transformedCondition
		}

		transformedTriggerFulfillment, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillment(original["trigger_fulfillment"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTriggerFulfillment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["triggerFulfillment"] = transformedTriggerFulfillment
		}

		transformedTargetPage, err := expandDialogflowCXFlowTransitionRoutesTargetPage(original["target_page"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTargetPage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["targetPage"] = transformedTargetPage
		}

		transformedTargetFlow, err := expandDialogflowCXFlowTransitionRoutesTargetFlow(original["target_flow"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTargetFlow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["targetFlow"] = transformedTargetFlow
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowTransitionRoutesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesIntent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesCondition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMessages, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessages(original["messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messages"] = transformedMessages
	}

	transformedWebhook, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentWebhook(original["webhook"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWebhook); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["webhook"] = transformedWebhook
	}

	transformedReturnPartialResponses, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentReturnPartialResponses(original["return_partial_responses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReturnPartialResponses); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["returnPartialResponses"] = transformedReturnPartialResponses
	}

	transformedTag, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentTag(original["tag"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTag); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tag"] = transformedTag
	}

	transformedSetParameterActions, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActions(original["set_parameter_actions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSetParameterActions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["setParameterActions"] = transformedSetParameterActions
	}

	transformedConditionalCases, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentConditionalCases(original["conditional_cases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditionalCases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditionalCases"] = transformedConditionalCases
	}

	return transformed, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedChannel, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesChannel(original["channel"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedChannel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["channel"] = transformedChannel
		}

		transformedText, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesText(original["text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["text"] = transformedText
		}

		transformedPayload, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPayload(original["payload"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPayload); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["payload"] = transformedPayload
		}

		transformedConversationSuccess, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesConversationSuccess(original["conversation_success"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationSuccess); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationSuccess"] = transformedConversationSuccess
		}

		transformedOutputAudioText, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioText(original["output_audio_text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOutputAudioText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["outputAudioText"] = transformedOutputAudioText
		}

		transformedLiveAgentHandoff, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff(original["live_agent_handoff"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLiveAgentHandoff); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["liveAgentHandoff"] = transformedLiveAgentHandoff
		}

		transformedPlayAudio, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudio(original["play_audio"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPlayAudio); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["playAudio"] = transformedPlayAudio
		}

		transformedTelephonyTransferCall, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall(original["telephony_transfer_call"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTelephonyTransferCall); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["telephonyTransferCall"] = transformedTelephonyTransferCall
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesChannel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedText, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTextText(original["text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["text"] = transformedText
	}

	transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTextAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
	}

	return transformed, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTextText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTextAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPayload(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesConversationSuccess(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMetadata, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesConversationSuccessMetadata(original["metadata"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetadata); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metadata"] = transformedMetadata
	}

	return transformed, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesConversationSuccessMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
	}

	transformedText, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextText(original["text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["text"] = transformedText
	}

	transformedSsml, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextSsml(original["ssml"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSsml); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ssml"] = transformedSsml
	}

	return transformed, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextSsml(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoff(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMetadata, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffMetadata(original["metadata"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetadata); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metadata"] = transformedMetadata
	}

	return transformed, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudio(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAudioUri, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudioAudioUri(original["audio_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAudioUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["audioUri"] = transformedAudioUri
	}

	transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
	}

	return transformed, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudioAudioUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCall(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPhoneNumber, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(original["phone_number"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPhoneNumber); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["phoneNumber"] = transformedPhoneNumber
	}

	return transformed, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentWebhook(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentReturnPartialResponses(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentTag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedParameter, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActionsParameter(original["parameter"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedParameter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["parameter"] = transformedParameter
		}

		transformedValue, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActionsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActionsParameter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentSetParameterActionsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentConditionalCases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedCases, err := expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentConditionalCasesCases(original["cases"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["cases"] = transformedCases
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowTransitionRoutesTriggerFulfillmentConditionalCasesCases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandDialogflowCXFlowTransitionRoutesTargetPage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRoutesTargetFlow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandDialogflowCXFlowEventHandlersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedEvent, err := expandDialogflowCXFlowEventHandlersEvent(original["event"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEvent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["event"] = transformedEvent
		}

		transformedTriggerFulfillment, err := expandDialogflowCXFlowEventHandlersTriggerFulfillment(original["trigger_fulfillment"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTriggerFulfillment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["triggerFulfillment"] = transformedTriggerFulfillment
		}

		transformedTargetPage, err := expandDialogflowCXFlowEventHandlersTargetPage(original["target_page"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTargetPage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["targetPage"] = transformedTargetPage
		}

		transformedTargetFlow, err := expandDialogflowCXFlowEventHandlersTargetFlow(original["target_flow"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTargetFlow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["targetFlow"] = transformedTargetFlow
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowEventHandlersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersEvent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMessages, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessages(original["messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messages"] = transformedMessages
	}

	transformedWebhook, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentWebhook(original["webhook"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWebhook); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["webhook"] = transformedWebhook
	}

	transformedReturnPartialResponses, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentReturnPartialResponses(original["return_partial_responses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReturnPartialResponses); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["returnPartialResponses"] = transformedReturnPartialResponses
	}

	transformedTag, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentTag(original["tag"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTag); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tag"] = transformedTag
	}

	transformedSetParameterActions, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActions(original["set_parameter_actions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSetParameterActions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["setParameterActions"] = transformedSetParameterActions
	}

	transformedConditionalCases, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentConditionalCases(original["conditional_cases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditionalCases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditionalCases"] = transformedConditionalCases
	}

	transformedEnableGenerativeFallback, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentEnableGenerativeFallback(original["enable_generative_fallback"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableGenerativeFallback); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableGenerativeFallback"] = transformedEnableGenerativeFallback
	}

	return transformed, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedChannel, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesChannel(original["channel"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedChannel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["channel"] = transformedChannel
		}

		transformedText, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesText(original["text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["text"] = transformedText
		}

		transformedPayload, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPayload(original["payload"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPayload); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["payload"] = transformedPayload
		}

		transformedConversationSuccess, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesConversationSuccess(original["conversation_success"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationSuccess); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationSuccess"] = transformedConversationSuccess
		}

		transformedOutputAudioText, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioText(original["output_audio_text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOutputAudioText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["outputAudioText"] = transformedOutputAudioText
		}

		transformedLiveAgentHandoff, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff(original["live_agent_handoff"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLiveAgentHandoff); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["liveAgentHandoff"] = transformedLiveAgentHandoff
		}

		transformedPlayAudio, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudio(original["play_audio"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPlayAudio); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["playAudio"] = transformedPlayAudio
		}

		transformedTelephonyTransferCall, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall(original["telephony_transfer_call"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTelephonyTransferCall); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["telephonyTransferCall"] = transformedTelephonyTransferCall
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesChannel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedText, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTextText(original["text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["text"] = transformedText
	}

	transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTextAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
	}

	return transformed, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTextText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTextAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPayload(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesConversationSuccess(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMetadata, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesConversationSuccessMetadata(original["metadata"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetadata); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metadata"] = transformedMetadata
	}

	return transformed, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesConversationSuccessMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
	}

	transformedText, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextText(original["text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["text"] = transformedText
	}

	transformedSsml, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextSsml(original["ssml"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSsml); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ssml"] = transformedSsml
	}

	return transformed, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesOutputAudioTextSsml(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesLiveAgentHandoff(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMetadata, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffMetadata(original["metadata"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetadata); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metadata"] = transformedMetadata
	}

	return transformed, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudio(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAudioUri, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudioAudioUri(original["audio_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAudioUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["audioUri"] = transformedAudioUri
	}

	transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
	}

	return transformed, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudioAudioUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTelephonyTransferCall(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPhoneNumber, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(original["phone_number"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPhoneNumber); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["phoneNumber"] = transformedPhoneNumber
	}

	return transformed, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentWebhook(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentReturnPartialResponses(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentTag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedParameter, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActionsParameter(original["parameter"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedParameter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["parameter"] = transformedParameter
		}

		transformedValue, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActionsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActionsParameter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentSetParameterActionsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentConditionalCases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedCases, err := expandDialogflowCXFlowEventHandlersTriggerFulfillmentConditionalCasesCases(original["cases"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["cases"] = transformedCases
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentConditionalCasesCases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandDialogflowCXFlowEventHandlersTriggerFulfillmentEnableGenerativeFallback(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTargetPage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowEventHandlersTargetFlow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowTransitionRouteGroups(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowNluSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModelType, err := expandDialogflowCXFlowNluSettingsModelType(original["model_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModelType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["modelType"] = transformedModelType
	}

	transformedClassificationThreshold, err := expandDialogflowCXFlowNluSettingsClassificationThreshold(original["classification_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClassificationThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["classificationThreshold"] = transformedClassificationThreshold
	}

	transformedModelTrainingMode, err := expandDialogflowCXFlowNluSettingsModelTrainingMode(original["model_training_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModelTrainingMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["modelTrainingMode"] = transformedModelTrainingMode
	}

	return transformed, nil
}

func expandDialogflowCXFlowNluSettingsModelType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowNluSettingsClassificationThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowNluSettingsModelTrainingMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAudioExportGcsDestination, err := expandDialogflowCXFlowAdvancedSettingsAudioExportGcsDestination(original["audio_export_gcs_destination"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAudioExportGcsDestination); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["audioExportGcsDestination"] = transformedAudioExportGcsDestination
	}

	transformedSpeechSettings, err := expandDialogflowCXFlowAdvancedSettingsSpeechSettings(original["speech_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSpeechSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["speechSettings"] = transformedSpeechSettings
	}

	transformedDtmfSettings, err := expandDialogflowCXFlowAdvancedSettingsDtmfSettings(original["dtmf_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDtmfSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dtmfSettings"] = transformedDtmfSettings
	}

	transformedLoggingSettings, err := expandDialogflowCXFlowAdvancedSettingsLoggingSettings(original["logging_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLoggingSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["loggingSettings"] = transformedLoggingSettings
	}

	return transformed, nil
}

func expandDialogflowCXFlowAdvancedSettingsAudioExportGcsDestination(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandDialogflowCXFlowAdvancedSettingsAudioExportGcsDestinationUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	return transformed, nil
}

func expandDialogflowCXFlowAdvancedSettingsAudioExportGcsDestinationUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettingsSpeechSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEndpointerSensitivity, err := expandDialogflowCXFlowAdvancedSettingsSpeechSettingsEndpointerSensitivity(original["endpointer_sensitivity"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndpointerSensitivity); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endpointerSensitivity"] = transformedEndpointerSensitivity
	}

	transformedNoSpeechTimeout, err := expandDialogflowCXFlowAdvancedSettingsSpeechSettingsNoSpeechTimeout(original["no_speech_timeout"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoSpeechTimeout); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["noSpeechTimeout"] = transformedNoSpeechTimeout
	}

	transformedUseTimeoutBasedEndpointing, err := expandDialogflowCXFlowAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(original["use_timeout_based_endpointing"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUseTimeoutBasedEndpointing); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["useTimeoutBasedEndpointing"] = transformedUseTimeoutBasedEndpointing
	}

	transformedModels, err := expandDialogflowCXFlowAdvancedSettingsSpeechSettingsModels(original["models"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["models"] = transformedModels
	}

	return transformed, nil
}

func expandDialogflowCXFlowAdvancedSettingsSpeechSettingsEndpointerSensitivity(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettingsSpeechSettingsNoSpeechTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettingsSpeechSettingsModels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDialogflowCXFlowAdvancedSettingsDtmfSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandDialogflowCXFlowAdvancedSettingsDtmfSettingsEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	transformedMaxDigits, err := expandDialogflowCXFlowAdvancedSettingsDtmfSettingsMaxDigits(original["max_digits"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxDigits); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxDigits"] = transformedMaxDigits
	}

	transformedFinishDigit, err := expandDialogflowCXFlowAdvancedSettingsDtmfSettingsFinishDigit(original["finish_digit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFinishDigit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["finishDigit"] = transformedFinishDigit
	}

	return transformed, nil
}

func expandDialogflowCXFlowAdvancedSettingsDtmfSettingsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettingsDtmfSettingsMaxDigits(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettingsDtmfSettingsFinishDigit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettingsLoggingSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableStackdriverLogging, err := expandDialogflowCXFlowAdvancedSettingsLoggingSettingsEnableStackdriverLogging(original["enable_stackdriver_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableStackdriverLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableStackdriverLogging"] = transformedEnableStackdriverLogging
	}

	transformedEnableInteractionLogging, err := expandDialogflowCXFlowAdvancedSettingsLoggingSettingsEnableInteractionLogging(original["enable_interaction_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableInteractionLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableInteractionLogging"] = transformedEnableInteractionLogging
	}

	transformedEnableConsentBasedRedaction, err := expandDialogflowCXFlowAdvancedSettingsLoggingSettingsEnableConsentBasedRedaction(original["enable_consent_based_redaction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableConsentBasedRedaction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableConsentBasedRedaction"] = transformedEnableConsentBasedRedaction
	}

	return transformed, nil
}

func expandDialogflowCXFlowAdvancedSettingsLoggingSettingsEnableStackdriverLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettingsLoggingSettingsEnableInteractionLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowAdvancedSettingsLoggingSettingsEnableConsentBasedRedaction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandDialogflowCXFlowKnowledgeConnectorSettingsEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	transformedTriggerFulfillment, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillment(original["trigger_fulfillment"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTriggerFulfillment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["triggerFulfillment"] = transformedTriggerFulfillment
	}

	transformedDataStoreConnections, err := expandDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnections(original["data_store_connections"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStoreConnections); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStoreConnections"] = transformedDataStoreConnections
	}

	transformedTargetPage, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTargetPage(original["target_page"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTargetPage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["targetPage"] = transformedTargetPage
	}

	transformedTargetFlow, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTargetFlow(original["target_flow"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTargetFlow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["targetFlow"] = transformedTargetFlow
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMessages, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessages(original["messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messages"] = transformedMessages
	}

	transformedWebhook, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentWebhook(original["webhook"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWebhook); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["webhook"] = transformedWebhook
	}

	transformedReturnPartialResponses, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentReturnPartialResponses(original["return_partial_responses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReturnPartialResponses); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["returnPartialResponses"] = transformedReturnPartialResponses
	}

	transformedTag, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentTag(original["tag"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTag); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tag"] = transformedTag
	}

	transformedSetParameterActions, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActions(original["set_parameter_actions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSetParameterActions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["setParameterActions"] = transformedSetParameterActions
	}

	transformedConditionalCases, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentConditionalCases(original["conditional_cases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditionalCases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditionalCases"] = transformedConditionalCases
	}

	transformedAdvancedSettings, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettings(original["advanced_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdvancedSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["advancedSettings"] = transformedAdvancedSettings
	}

	transformedEnableGenerativeFallback, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentEnableGenerativeFallback(original["enable_generative_fallback"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableGenerativeFallback); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableGenerativeFallback"] = transformedEnableGenerativeFallback
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedChannel, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesChannel(original["channel"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedChannel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["channel"] = transformedChannel
		}

		transformedText, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesText(original["text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["text"] = transformedText
		}

		transformedPayload, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPayload(original["payload"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPayload); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["payload"] = transformedPayload
		}

		transformedConversationSuccess, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesConversationSuccess(original["conversation_success"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationSuccess); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationSuccess"] = transformedConversationSuccess
		}

		transformedOutputAudioText, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioText(original["output_audio_text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOutputAudioText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["outputAudioText"] = transformedOutputAudioText
		}

		transformedLiveAgentHandoff, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesLiveAgentHandoff(original["live_agent_handoff"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLiveAgentHandoff); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["liveAgentHandoff"] = transformedLiveAgentHandoff
		}

		transformedEndInteraction, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesEndInteraction(original["end_interaction"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEndInteraction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["endInteraction"] = transformedEndInteraction
		}

		transformedPlayAudio, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudio(original["play_audio"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPlayAudio); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["playAudio"] = transformedPlayAudio
		}

		transformedMixedAudio, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudio(original["mixed_audio"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMixedAudio); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["mixedAudio"] = transformedMixedAudio
		}

		transformedTelephonyTransferCall, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTelephonyTransferCall(original["telephony_transfer_call"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTelephonyTransferCall); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["telephonyTransferCall"] = transformedTelephonyTransferCall
		}

		transformedKnowledgeInfoCard, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesKnowledgeInfoCard(original["knowledge_info_card"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["knowledgeInfoCard"] = transformedKnowledgeInfoCard
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesChannel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedText, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTextText(original["text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["text"] = transformedText
	}

	transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTextAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTextText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTextAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPayload(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesConversationSuccess(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMetadata, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesConversationSuccessMetadata(original["metadata"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetadata); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metadata"] = transformedMetadata
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesConversationSuccessMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
	}

	transformedText, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextText(original["text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["text"] = transformedText
	}

	transformedSsml, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextSsml(original["ssml"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSsml); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ssml"] = transformedSsml
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesOutputAudioTextSsml(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesLiveAgentHandoff(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMetadata, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesLiveAgentHandoffMetadata(original["metadata"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetadata); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metadata"] = transformedMetadata
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesLiveAgentHandoffMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesEndInteraction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudio(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAudioUri, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudioAudioUri(original["audio_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAudioUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["audioUri"] = transformedAudioUri
	}

	transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudioAudioUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudio(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSegments, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegments(original["segments"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSegments); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["segments"] = transformedSegments
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegments(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAllowPlaybackInterruption, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsAllowPlaybackInterruption(original["allow_playback_interruption"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAllowPlaybackInterruption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["allowPlaybackInterruption"] = transformedAllowPlaybackInterruption
		}

		transformedAudio, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsAudio(original["audio"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAudio); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["audio"] = transformedAudio
		}

		transformedUri, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsUri(original["uri"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["uri"] = transformedUri
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsAllowPlaybackInterruption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsAudio(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesMixedAudioSegmentsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTelephonyTransferCall(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPhoneNumber, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(original["phone_number"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPhoneNumber); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["phoneNumber"] = transformedPhoneNumber
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesTelephonyTransferCallPhoneNumber(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentMessagesKnowledgeInfoCard(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentWebhook(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentReturnPartialResponses(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentTag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedParameter, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActionsParameter(original["parameter"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedParameter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["parameter"] = transformedParameter
		}

		transformedValue, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActionsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActionsParameter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActionsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentConditionalCases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedCases, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentConditionalCasesCases(original["cases"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["cases"] = transformedCases
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentConditionalCasesCases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSpeechSettings, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettings(original["speech_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSpeechSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["speechSettings"] = transformedSpeechSettings
	}

	transformedDtmfSettings, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettings(original["dtmf_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDtmfSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dtmfSettings"] = transformedDtmfSettings
	}

	transformedLoggingSettings, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettings(original["logging_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLoggingSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["loggingSettings"] = transformedLoggingSettings
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEndpointerSensitivity, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsEndpointerSensitivity(original["endpointer_sensitivity"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndpointerSensitivity); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endpointerSensitivity"] = transformedEndpointerSensitivity
	}

	transformedNoSpeechTimeout, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsNoSpeechTimeout(original["no_speech_timeout"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoSpeechTimeout); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["noSpeechTimeout"] = transformedNoSpeechTimeout
	}

	transformedUseTimeoutBasedEndpointing, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(original["use_timeout_based_endpointing"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUseTimeoutBasedEndpointing); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["useTimeoutBasedEndpointing"] = transformedUseTimeoutBasedEndpointing
	}

	transformedModels, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsModels(original["models"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["models"] = transformedModels
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsEndpointerSensitivity(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsNoSpeechTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsModels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	transformedMaxDigits, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsMaxDigits(original["max_digits"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxDigits); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxDigits"] = transformedMaxDigits
	}

	transformedFinishDigit, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsFinishDigit(original["finish_digit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFinishDigit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["finishDigit"] = transformedFinishDigit
	}

	transformedInterdigitTimeoutDuration, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsInterdigitTimeoutDuration(original["interdigit_timeout_duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInterdigitTimeoutDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["interdigitTimeoutDuration"] = transformedInterdigitTimeoutDuration
	}

	transformedEndpointingTimeoutDuration, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsEndpointingTimeoutDuration(original["endpointing_timeout_duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndpointingTimeoutDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endpointingTimeoutDuration"] = transformedEndpointingTimeoutDuration
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsMaxDigits(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsFinishDigit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsInterdigitTimeoutDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsEndpointingTimeoutDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableStackdriverLogging, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsEnableStackdriverLogging(original["enable_stackdriver_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableStackdriverLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableStackdriverLogging"] = transformedEnableStackdriverLogging
	}

	transformedEnableInteractionLogging, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsEnableInteractionLogging(original["enable_interaction_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableInteractionLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableInteractionLogging"] = transformedEnableInteractionLogging
	}

	transformedEnableConsentBasedRedaction, err := expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsEnableConsentBasedRedaction(original["enable_consent_based_redaction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableConsentBasedRedaction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableConsentBasedRedaction"] = transformedEnableConsentBasedRedaction
	}

	return transformed, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsEnableStackdriverLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsEnableInteractionLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsEnableConsentBasedRedaction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTriggerFulfillmentEnableGenerativeFallback(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnections(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDataStoreType, err := expandDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDataStoreType(original["data_store_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDataStoreType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["dataStoreType"] = transformedDataStoreType
		}

		transformedDataStore, err := expandDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDataStore(original["data_store"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDataStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["dataStore"] = transformedDataStore
		}

		transformedDocumentProcessingMode, err := expandDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDocumentProcessingMode(original["document_processing_mode"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDocumentProcessingMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["documentProcessingMode"] = transformedDocumentProcessingMode
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDataStoreType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDataStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsDataStoreConnectionsDocumentProcessingMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTargetPage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowKnowledgeConnectorSettingsTargetFlow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXFlowLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func resourceDialogflowCXFlowPostCreateSetComputedFields(d *schema.ResourceData, meta interface{}, res map[string]interface{}) error {
	config := meta.(*transport_tpg.Config)
	if err := d.Set("name", flattenDialogflowCXFlowName(res["name"], d, config)); err != nil {
		return fmt.Errorf(`Error setting computed identity field "name": %s`, err)
	}
	return nil
}
