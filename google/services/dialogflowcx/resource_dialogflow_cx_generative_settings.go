// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dialogflowcx/GenerativeSettings.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package dialogflowcx

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceDialogflowCXGenerativeSettings() *schema.Resource {
	return &schema.Resource{
		Create: resourceDialogflowCXGenerativeSettingsCreate,
		Read:   resourceDialogflowCXGenerativeSettingsRead,
		Update: resourceDialogflowCXGenerativeSettingsUpdate,
		Delete: resourceDialogflowCXGenerativeSettingsDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDialogflowCXGenerativeSettingsImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(40 * time.Minute),
			Update: schema.DefaultTimeout(40 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"language_code": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Language for this settings.`,
			},
			"fallback_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Settings for Generative Fallback.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"prompt_templates": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Stored prompts that can be selected, for example default templates like "conservative" or "chatty", or user defined ones.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"display_name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Prompt name.`,
									},
									"frozen": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `If the flag is true, the prompt is frozen and cannot be modified by users.`,
									},
									"prompt_text": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Prompt text that is sent to a LLM on no-match default, placeholders are filled downstream. For example: "Here is a conversation $conversation, a response is: "`,
									},
								},
							},
						},
						"selected_prompt": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Display name of the selected prompt.`,
						},
					},
				},
			},
			"generative_safety_settings": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Settings for Generative Safety.
w`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"banned_phrases": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Banned phrases for generated text.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"language_code": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Language code of the phrase.`,
									},
									"text": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Text input which can be used for prompt or banned phrases.`,
									},
								},
							},
						},
						"default_banned_phrase_match_strategy": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Optional. Default phrase match strategy for banned phrases.
See [PhraseMatchStrategy](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/GenerativeSettings#phrasematchstrategy) for valid values.`,
						},
					},
				},
			},
			"knowledge_connector_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Settings for knowledge connector.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"agent": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Name of the virtual agent. Used for LLM prompt. Can be left empty.`,
						},
						"agent_identity": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Identity of the agent, e.g. "virtual agent", "AI assistant".`,
						},
						"agent_scope": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Agent scope, e.g. "Example company website", "internal Example company website for employees", "manual of car owner".`,
						},
						"business": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Name of the company, organization or other entity that the agent represents. Used for knowledge connector LLM prompt and for knowledge search.`,
						},
						"business_description": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Company description, used for LLM prompt, e.g. "a family company selling freshly roasted coffee beans".''`,
						},
						"disable_data_store_fallback": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to disable fallback to Data Store search results (in case the LLM couldn't pick a proper answer). Per default the feature is enabled.`,
						},
					},
				},
			},
			"llm_model_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `LLM model settings.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"model": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The selected LLM model.`,
						},
						"prompt_text": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The custom prompt to use.`,
						},
					},
				},
			},
			"parent": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `The agent to create a flow for.
Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The unique identifier of the generativeSettings.
Format: projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generativeSettings.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDialogflowCXGenerativeSettingsCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	fallbackSettingsProp, err := expandDialogflowCXGenerativeSettingsFallbackSettings(d.Get("fallback_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("fallback_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(fallbackSettingsProp)) && (ok || !reflect.DeepEqual(v, fallbackSettingsProp)) {
		obj["fallbackSettings"] = fallbackSettingsProp
	}
	generativeSafetySettingsProp, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettings(d.Get("generative_safety_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("generative_safety_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(generativeSafetySettingsProp)) && (ok || !reflect.DeepEqual(v, generativeSafetySettingsProp)) {
		obj["generativeSafetySettings"] = generativeSafetySettingsProp
	}
	knowledgeConnectorSettingsProp, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettings(d.Get("knowledge_connector_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("knowledge_connector_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(knowledgeConnectorSettingsProp)) && (ok || !reflect.DeepEqual(v, knowledgeConnectorSettingsProp)) {
		obj["knowledgeConnectorSettings"] = knowledgeConnectorSettingsProp
	}
	languageCodeProp, err := expandDialogflowCXGenerativeSettingsLanguageCode(d.Get("language_code"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("language_code"); !tpgresource.IsEmptyValue(reflect.ValueOf(languageCodeProp)) && (ok || !reflect.DeepEqual(v, languageCodeProp)) {
		obj["languageCode"] = languageCodeProp
	}
	llmModelSettingsProp, err := expandDialogflowCXGenerativeSettingsLlmModelSettings(d.Get("llm_model_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("llm_model_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(llmModelSettingsProp)) && (ok || !reflect.DeepEqual(v, llmModelSettingsProp)) {
		obj["llmModelSettings"] = llmModelSettingsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowCXBasePath}}{{parent}}/generativeSettings")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new GenerativeSettings: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	// extract location from the parent
	location := ""

	if parts := regexp.MustCompile(`locations\/([^\/]*)\/`).FindStringSubmatch(d.Get("parent").(string)); parts != nil {
		location = parts[1]
	} else {
		return fmt.Errorf(
			"Saw %s when the parent is expected to contains location %s",
			d.Get("parent"),
			"projects/{{project}}/locations/{{location}}/...",
		)
	}

	// only insert location into url if the base_url in products/dialogflowcx/product.yaml is used
	if strings.HasPrefix(url, "https://-dialogflow.googleapis.com/v3/") {
		url = strings.Replace(url, "-dialogflow", fmt.Sprintf("%s-dialogflow", location), 1)
	}

	// if it's a default object Dialogflow creates for you, "Update" instead of "Create"
	// Note: below we try to access fields that aren't present in the resource, because this custom code is reused across multiple Dialogflow resources that contain different fields. When the field isn't present, we deliberately ignore the error and the boolean is false.
	isDefaultStartFlow, _ := d.Get("is_default_start_flow").(bool)
	isDefaultWelcomeIntent, _ := d.Get("is_default_welcome_intent").(bool)
	isDefaultNegativeIntent, _ := d.Get("is_default_negative_intent").(bool)
	if isDefaultStartFlow || isDefaultWelcomeIntent || isDefaultNegativeIntent {
		// hardcode the default object ID:
		var defaultObjName string
		if isDefaultStartFlow || isDefaultWelcomeIntent {
			defaultObjName = "00000000-0000-0000-0000-000000000000"
		}
		if isDefaultNegativeIntent {
			defaultObjName = "00000000-0000-0000-0000-000000000001"
		}

		// Store the ID
		d.Set("name", defaultObjName)
		id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/generativeSettings?languageCode={{language_code}}")
		if err != nil {
			return fmt.Errorf("Error constructing id: %s", err)
		}
		d.SetId(id)

		// and defer to the Update method:
		log.Printf("[DEBUG] Updating default DialogflowCXGenerativeSettings")
		return resourceDialogflowCXGenerativeSettingsUpdate(d, meta)
	}
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating GenerativeSettings: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/generativeSettings?languageCode={{language_code}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating GenerativeSettings %q: %#v", d.Id(), res)

	return resourceDialogflowCXGenerativeSettingsRead(d, meta)
}

func resourceDialogflowCXGenerativeSettingsRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowCXBasePath}}{{parent}}/generativeSettings?languageCode={{language_code}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	// extract location from the parent
	location := ""

	if parts := regexp.MustCompile(`locations\/([^\/]*)\/`).FindStringSubmatch(d.Get("parent").(string)); parts != nil {
		location = parts[1]
	} else {
		return fmt.Errorf(
			"Saw %s when the parent is expected to contains location %s",
			d.Get("parent"),
			"projects/{{project}}/locations/{{location}}/...",
		)
	}

	// only insert location into url if the base_url in products/dialogflowcx/product.yaml is used
	if strings.HasPrefix(url, "https://-dialogflow.googleapis.com/v3/") {
		url = strings.Replace(url, "-dialogflow", fmt.Sprintf("%s-dialogflow", location), 1)
	}
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DialogflowCXGenerativeSettings %q", d.Id()))
	}

	if err := d.Set("name", flattenDialogflowCXGenerativeSettingsName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading GenerativeSettings: %s", err)
	}
	if err := d.Set("fallback_settings", flattenDialogflowCXGenerativeSettingsFallbackSettings(res["fallbackSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading GenerativeSettings: %s", err)
	}
	if err := d.Set("generative_safety_settings", flattenDialogflowCXGenerativeSettingsGenerativeSafetySettings(res["generativeSafetySettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading GenerativeSettings: %s", err)
	}
	if err := d.Set("knowledge_connector_settings", flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettings(res["knowledgeConnectorSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading GenerativeSettings: %s", err)
	}
	if err := d.Set("language_code", flattenDialogflowCXGenerativeSettingsLanguageCode(res["languageCode"], d, config)); err != nil {
		return fmt.Errorf("Error reading GenerativeSettings: %s", err)
	}
	if err := d.Set("llm_model_settings", flattenDialogflowCXGenerativeSettingsLlmModelSettings(res["llmModelSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading GenerativeSettings: %s", err)
	}

	return nil
}

func resourceDialogflowCXGenerativeSettingsUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	fallbackSettingsProp, err := expandDialogflowCXGenerativeSettingsFallbackSettings(d.Get("fallback_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("fallback_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, fallbackSettingsProp)) {
		obj["fallbackSettings"] = fallbackSettingsProp
	}
	generativeSafetySettingsProp, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettings(d.Get("generative_safety_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("generative_safety_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, generativeSafetySettingsProp)) {
		obj["generativeSafetySettings"] = generativeSafetySettingsProp
	}
	knowledgeConnectorSettingsProp, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettings(d.Get("knowledge_connector_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("knowledge_connector_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, knowledgeConnectorSettingsProp)) {
		obj["knowledgeConnectorSettings"] = knowledgeConnectorSettingsProp
	}
	languageCodeProp, err := expandDialogflowCXGenerativeSettingsLanguageCode(d.Get("language_code"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("language_code"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, languageCodeProp)) {
		obj["languageCode"] = languageCodeProp
	}
	llmModelSettingsProp, err := expandDialogflowCXGenerativeSettingsLlmModelSettings(d.Get("llm_model_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("llm_model_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, llmModelSettingsProp)) {
		obj["llmModelSettings"] = llmModelSettingsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DialogflowCXBasePath}}{{parent}}/generativeSettings")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating GenerativeSettings %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("fallback_settings") {
		updateMask = append(updateMask, "fallbackSettings")
	}

	if d.HasChange("generative_safety_settings") {
		updateMask = append(updateMask, "generativeSafetySettings")
	}

	if d.HasChange("knowledge_connector_settings") {
		updateMask = append(updateMask, "knowledgeConnectorSettings")
	}

	if d.HasChange("language_code") {
		updateMask = append(updateMask, "languageCode")
	}

	if d.HasChange("llm_model_settings") {
		updateMask = append(updateMask, "llmModelSettings")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}
	// extract location from the parent
	location := ""

	if parts := regexp.MustCompile(`locations\/([^\/]*)\/`).FindStringSubmatch(d.Get("parent").(string)); parts != nil {
		location = parts[1]
	} else {
		return fmt.Errorf(
			"Saw %s when the parent is expected to contains location %s",
			d.Get("parent"),
			"projects/{{project}}/locations/{{location}}/...",
		)
	}

	// only insert location into url if the base_url in products/dialogflowcx/product.yaml is used
	if strings.HasPrefix(url, "https://-dialogflow.googleapis.com/v3/") {
		url = strings.Replace(url, "-dialogflow", fmt.Sprintf("%s-dialogflow", location), 1)
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating GenerativeSettings %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating GenerativeSettings %q: %#v", d.Id(), res)
		}

	}

	return resourceDialogflowCXGenerativeSettingsRead(d, meta)
}

func resourceDialogflowCXGenerativeSettingsDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] DialogflowCX GenerativeSettings resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceDialogflowCXGenerativeSettingsImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	// current import_formats can't import fields with forward slashes in their value and parent contains slashes
	if err := tpgresource.ParseImportId([]string{
		"(?P<parent>.+)/generativeSettings\\?languageCode=(?P<language_code>[a-zA-Z-]+)",
		"(?P<parent>.+)/generativeSettings",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/generativeSettings?languageCode={{language_code}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDialogflowCXGenerativeSettingsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.GetResourceNameFromSelfLink(v.(string))
}

func flattenDialogflowCXGenerativeSettingsFallbackSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["selected_prompt"] =
		flattenDialogflowCXGenerativeSettingsFallbackSettingsSelectedPrompt(original["selectedPrompt"], d, config)
	transformed["prompt_templates"] =
		flattenDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplates(original["promptTemplates"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXGenerativeSettingsFallbackSettingsSelectedPrompt(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplates(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("fallback_settings.0.prompt_templates")
}
func flattenDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesPromptText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesFrozen(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsGenerativeSafetySettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["default_banned_phrase_match_strategy"] =
		flattenDialogflowCXGenerativeSettingsGenerativeSafetySettingsDefaultBannedPhraseMatchStrategy(original["defaultBannedPhraseMatchStrategy"], d, config)
	transformed["banned_phrases"] =
		flattenDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrases(original["bannedPhrases"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXGenerativeSettingsGenerativeSafetySettingsDefaultBannedPhraseMatchStrategy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"text":          flattenDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesText(original["text"], d, config),
			"language_code": flattenDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesLanguageCode(original["languageCode"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesLanguageCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["business"] =
		flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusiness(original["business"], d, config)
	transformed["agent"] =
		flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgent(original["agent"], d, config)
	transformed["agent_identity"] =
		flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentIdentity(original["agentIdentity"], d, config)
	transformed["business_description"] =
		flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusinessDescription(original["businessDescription"], d, config)
	transformed["agent_scope"] =
		flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentScope(original["agentScope"], d, config)
	transformed["disable_data_store_fallback"] =
		flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsDisableDataStoreFallback(original["disableDataStoreFallback"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusiness(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentIdentity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusinessDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentScope(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsDisableDataStoreFallback(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsLanguageCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsLlmModelSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["model"] =
		flattenDialogflowCXGenerativeSettingsLlmModelSettingsModel(original["model"], d, config)
	transformed["prompt_text"] =
		flattenDialogflowCXGenerativeSettingsLlmModelSettingsPromptText(original["promptText"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXGenerativeSettingsLlmModelSettingsModel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXGenerativeSettingsLlmModelSettingsPromptText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDialogflowCXGenerativeSettingsFallbackSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSelectedPrompt, err := expandDialogflowCXGenerativeSettingsFallbackSettingsSelectedPrompt(original["selected_prompt"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSelectedPrompt); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["selectedPrompt"] = transformedSelectedPrompt
	}

	transformedPromptTemplates, err := expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplates(original["prompt_templates"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPromptTemplates); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["promptTemplates"] = transformedPromptTemplates
	}

	return transformed, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsSelectedPrompt(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplates(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDisplayName, err := expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedPromptText, err := expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesPromptText(original["prompt_text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPromptText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["promptText"] = transformedPromptText
		}

		transformedFrozen, err := expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesFrozen(original["frozen"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFrozen); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["frozen"] = transformedFrozen
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesPromptText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesFrozen(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDefaultBannedPhraseMatchStrategy, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsDefaultBannedPhraseMatchStrategy(original["default_banned_phrase_match_strategy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultBannedPhraseMatchStrategy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultBannedPhraseMatchStrategy"] = transformedDefaultBannedPhraseMatchStrategy
	}

	transformedBannedPhrases, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrases(original["banned_phrases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBannedPhrases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bannedPhrases"] = transformedBannedPhrases
	}

	return transformed, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsDefaultBannedPhraseMatchStrategy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedText, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesText(original["text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["text"] = transformedText
		}

		transformedLanguageCode, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesLanguageCode(original["language_code"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLanguageCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["languageCode"] = transformedLanguageCode
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBusiness, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusiness(original["business"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBusiness); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["business"] = transformedBusiness
	}

	transformedAgent, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	transformedAgentIdentity, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentIdentity(original["agent_identity"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgentIdentity); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agentIdentity"] = transformedAgentIdentity
	}

	transformedBusinessDescription, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusinessDescription(original["business_description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBusinessDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["businessDescription"] = transformedBusinessDescription
	}

	transformedAgentScope, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentScope(original["agent_scope"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgentScope); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agentScope"] = transformedAgentScope
	}

	transformedDisableDataStoreFallback, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsDisableDataStoreFallback(original["disable_data_store_fallback"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableDataStoreFallback); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableDataStoreFallback"] = transformedDisableDataStoreFallback
	}

	return transformed, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusiness(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentIdentity(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusinessDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentScope(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsDisableDataStoreFallback(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsLlmModelSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandDialogflowCXGenerativeSettingsLlmModelSettingsModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedPromptText, err := expandDialogflowCXGenerativeSettingsLlmModelSettingsPromptText(original["prompt_text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPromptText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["promptText"] = transformedPromptText
	}

	return transformed, nil
}

func expandDialogflowCXGenerativeSettingsLlmModelSettingsModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsLlmModelSettingsPromptText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
