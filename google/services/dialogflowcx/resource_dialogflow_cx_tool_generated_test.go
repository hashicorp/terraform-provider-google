// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflowcx_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDialogflowCXTool_dialogflowcxToolOpenApiExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDialogflowCXToolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowCXTool_dialogflowcxToolOpenApiExample(context),
			},
			{
				ResourceName:            "google_dialogflow_cx_tool.open_api_tool",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"open_api_spec.0.authentication.0.api_key_config.0.api_key", "open_api_spec.0.authentication.0.bearer_token_config.0.token", "open_api_spec.0.authentication.0.oauth_config.0.client_secret", "parent"},
			},
		},
	})
}

func testAccDialogflowCXTool_dialogflowcxToolOpenApiExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dialogflow_cx_agent" "agent" {
  display_name = "tf-test-dialogflowcx-agent-open-api%{random_suffix}"
  location = "global"
  default_language_code = "en"
  time_zone = "America/New_York"
  description = "Example description."
}

resource "google_dialogflow_cx_tool" "open_api_tool" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Example Open API Tool"
  description  = "Example Description"
  open_api_spec {
    authentication {
      oauth_config {
        oauth_grant_type                 = "CLIENT_CREDENTIAL"
        client_id                        = "example client ID"
        client_secret                    = "example client secret"
        scopes                           = [
          "example scope"
        ]
        secret_version_for_client_secret = "projects/-/secrets/-/versions/-"
        token_endpoint                   = "https://example.com/oauth/token"
      }
    }
    tls_config {
      ca_certs {
        display_name = "example ca cert name"
        cert = base64encode("example cert")
      }
    }
    service_directory_config {
      service = "projects/-/locations/-/namespaces/-/services/-"
    }
    text_schema = <<EOF
    {
      "openapi": "3.0.0",
      "info": {
        "title": "Time API",
        "version": "1.0.0",
        "description": "A simple API to get the current time."
      },
      "servers": [
        {
          "url": "https://example-api-endpoint.com"
        }
      ],
      "paths": {
        "/time": {
          "get": {
            "operationId": "getCurrentTime",
            "summary": "Gets the current server time.",
            "responses": {
              "200": {
                "description": "Successful response with the current time.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "currentTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The current time in ISO 8601 format."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    EOF
  }
}
`, context)
}

func TestAccDialogflowCXTool_dialogflowcxToolDataStoreExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDialogflowCXToolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowCXTool_dialogflowcxToolDataStoreExample(context),
			},
			{
				ResourceName:            "google_dialogflow_cx_tool.data_store_tool",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"open_api_spec.0.authentication.0.api_key_config.0.api_key", "open_api_spec.0.authentication.0.bearer_token_config.0.token", "open_api_spec.0.authentication.0.oauth_config.0.client_secret", "parent"},
			},
		},
	})
}

func testAccDialogflowCXTool_dialogflowcxToolDataStoreExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dialogflow_cx_agent" "agent" {
  display_name = "tf-test-dialogflowcx-agent-data-store%{random_suffix}"
  location = "global"
  default_language_code = "en"
  time_zone = "America/New_York"
  description = "Example description."
  delete_chat_engine_on_destroy = true
  depends_on = [
    google_discovery_engine_data_store.my_datastore
  ]
}

resource "google_dialogflow_cx_tool" "data_store_tool" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Example Data Store Tool"
  description  = "Example Description"
  data_store_spec {
    data_store_connections {
      data_store_type = "UNSTRUCTURED"
      data_store = "projects/${data.google_project.project.number}/locations/global/collections/default_collection/dataStores/${google_discovery_engine_data_store.my_datastore.data_store_id}"
      document_processing_mode = "DOCUMENTS"
    }
    fallback_prompt {} 
  }
  depends_on = [
    google_discovery_engine_data_store.my_datastore,
    google_dialogflow_cx_agent.agent
  ]
}

resource "google_discovery_engine_data_store" "my_datastore" {
  location          = "global"
  data_store_id     = "datastore-tool-test-%{random_suffix}"
  display_name      = "datastore for Tool test"
  industry_vertical = "GENERIC"
  content_config    = "NO_CONTENT"
  solution_types    = ["SOLUTION_TYPE_CHAT"]
}

data "google_project" "project" {
}
`, context)
}

func TestAccDialogflowCXTool_dialogflowcxToolFunctionExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDialogflowCXToolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowCXTool_dialogflowcxToolFunctionExample(context),
			},
			{
				ResourceName:            "google_dialogflow_cx_tool.function_tool",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"open_api_spec.0.authentication.0.api_key_config.0.api_key", "open_api_spec.0.authentication.0.bearer_token_config.0.token", "open_api_spec.0.authentication.0.oauth_config.0.client_secret", "parent"},
			},
		},
	})
}

func testAccDialogflowCXTool_dialogflowcxToolFunctionExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dialogflow_cx_agent" "agent" {
  display_name = "tf-test-dialogflowcx-agent-fucntion%{random_suffix}"
  location = "global"
  default_language_code = "en"
  time_zone = "America/New_York"
  description = "Example description."
}

resource "google_dialogflow_cx_tool" "function_tool" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Example Function Tool"
  description  = "Example Description"
  function_spec {
    input_schema  = <<EOF
      {
        "type": "object",
        "properties": {
          "message_to_echo": {
            "type": "string",
            "description": "The message that should be echoed back."
          }
        },
        "required": [
          "message_to_echo"
        ]
      }
    EOF
    output_schema = <<EOF
      {
        "type": "object",
        "properties": {
          "echoed_message": {
            "type": "string",
            "description": "The message that is echoed back."
          }
        }
      }
    EOF
  }
}
`, context)
}

func testAccCheckDialogflowCXToolDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_dialogflow_cx_tool" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DialogflowCXBasePath}}{{parent}}/tools/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DialogflowCXTool still exists at %s", url)
			}
		}

		return nil
	}
}
