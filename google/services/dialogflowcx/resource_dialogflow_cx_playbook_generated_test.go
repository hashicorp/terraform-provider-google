// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflowcx_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDialogflowCXPlaybook_dialogflowcxPlaybookBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDialogflowCXPlaybookDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowCXPlaybook_dialogflowcxPlaybookBasicExample(context),
			},
			{
				ResourceName:            "google_dialogflow_cx_playbook.my-playbook",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"parent", "playbook_type"},
			},
		},
	})
}

func testAccDialogflowCXPlaybook_dialogflowcxPlaybookBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dialogflow_cx_agent" "agent" {
  display_name          = "tf-test-dialogflowcx-agent-basic%{random_suffix}"
  location              = "global"
  default_language_code = "en"
  time_zone             = "America/New_York"
  description           = "Example description."
}

resource "google_dialogflow_cx_playbook" "my-playbook" {
  parent        = google_dialogflow_cx_agent.agent.id
  display_name  = "Example Display Name"
  goal          = "Example Goal"
  playbook_type = "ROUTINE"
  instruction {
    steps {
      text = "step 1"
      steps = jsonencode([
        {
          "text": "step 1 1"
        },
        {
          "text": "step 1 2",
          "steps": [
            {
              "text": "step 1 2 1"
            },
            {
              "text": "step 1 2 2"
            }
          ]
        },
        {
          "text": "step 1 3"
        }
      ])
    }
    steps {
      text = "step 2"
    }
    steps {
      text = "step 3"
    }
  }
}
`, context)
}

func TestAccDialogflowCXPlaybook_dialogflowcxPlaybookFulfillmentExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDialogflowCXPlaybookDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowCXPlaybook_dialogflowcxPlaybookFulfillmentExample(context),
			},
			{
				ResourceName:            "google_dialogflow_cx_playbook.my-playbook",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"parent", "playbook_type"},
			},
		},
	})
}

func testAccDialogflowCXPlaybook_dialogflowcxPlaybookFulfillmentExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dialogflow_cx_agent" "agent" {
  display_name          = "tf-test-dialogflowcx-agent%{random_suffix}"
  location              = "global"
  default_language_code = "en"
  time_zone             = "America/New_York"
  description           = "Example description."
}

resource "google_storage_bucket" "bucket" {
  name                        = "tf-test-dialogflowcx-bucket%{random_suffix}"
  location                    = "US"
  uniform_bucket_level_access = true
}

resource "google_dialogflow_cx_webhook" "my_webhook" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "MyWebhook"
  generic_web_service {
    uri = "https://example.com"
  }
}

resource "google_dialogflow_cx_tool" "my_tool" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Example Tool"
  description  = "Example Description"
}

resource "google_dialogflow_cx_generator" "my_generator" {
  parent = google_dialogflow_cx_agent.agent.id
  display_name = "TF Prompt generator"
  llm_model_settings {
    model = "gemini-2.0-flash-001"
    prompt_text = "Return me some great results"
  }
  prompt_text {
    text = "Send me great results in french"
  }
  model_parameter {
    temperature = 0.55
  }
}

resource "google_dialogflow_cx_playbook" "my-playbook" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Playbook Example with Fulfillment"
  goal         = "Example Goal"
  instruction {
    guidelines = "Example Guidelines"
    steps {
      text = "step 1"
      steps = jsonencode([
        {
          "text": "step 1 1"
        },
        {
          "text": "step 1 2",
          "steps": [
            {
              "text": "step 1 2 1"
            },
            {
              "text": "step 1 2 2"
            }
          ]
        },
        {
          "text": "step 1 3"
        }
      ])
    }
    steps {
      text = "step 2"
    }
    steps {
      text = "step 3"
    }
  }

  llm_model_settings {
    model = "gemini-2.0-flash-001"
    prompt_text = "Return me some great results"
  }

  referenced_tools = [google_dialogflow_cx_tool.my_tool.id]
}
`, context)
}

func testAccCheckDialogflowCXPlaybookDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_dialogflow_cx_playbook" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DialogflowCXBasePath}}{{parent}}/playbooks/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DialogflowCXPlaybook still exists at %s", url)
			}
		}

		return nil
	}
}
