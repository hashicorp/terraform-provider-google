// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package bigquerydatapolicyv2_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckBigqueryDatapolicyv2DataPolicyDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyBasicExample(context),
			},
			{
				ResourceName:            "google_bigquery_datapolicyv2_data_policy.basic_data_policy",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
		},
	})
}

func testAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigquery_datapolicyv2_data_policy" "basic_data_policy" {
  location         = "us-central1"
  data_policy_type = "RAW_DATA_ACCESS_POLICY"
  data_policy_id   = "tf_test_basic_data_policy%{random_suffix}"
}
`, context)
}

func TestAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyPredefinedMaskingExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckBigqueryDatapolicyv2DataPolicyDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyPredefinedMaskingExample(context),
			},
			{
				ResourceName:            "google_bigquery_datapolicyv2_data_policy.predefined_masking_data_policy",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
		},
	})
}

func testAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyPredefinedMaskingExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigquery_datapolicyv2_data_policy" "predefined_masking_data_policy" {
  location         = "us-central1"
  data_policy_type = "DATA_MASKING_POLICY"
  data_masking_policy {
    predefined_expression = "SHA256"
  }
  data_policy_id   = "tf_test_predefined_masking_data_policy%{random_suffix}"
}
`, context)
}

func TestAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyRoutineExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckBigqueryDatapolicyv2DataPolicyDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyRoutineExample(context),
			},
			{
				ResourceName:            "google_bigquery_datapolicyv2_data_policy.routine_data_policy",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
		},
	})
}

func testAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyRoutineExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigquery_datapolicyv2_data_policy" "routine_data_policy" {
  location         = "us-central1"
  data_policy_id   = "tf_test_routine_data_policy%{random_suffix}"
	data_policy_type = "DATA_MASKING_POLICY"  
	data_masking_policy {
		routine = google_bigquery_routine.custom_masking_routine.id
	}
}

resource "google_bigquery_dataset" "test" {
  dataset_id = "tf_test_dataset_id%{random_suffix}"
  location   = "us-central1"
}

resource "google_bigquery_routine" "custom_masking_routine" {
	dataset_id           = google_bigquery_dataset.test.dataset_id
	routine_id           = "custom_masking_routine"
	routine_type         = "SCALAR_FUNCTION"
	language             = "SQL"
	data_governance_type = "DATA_MASKING"
	definition_body      = "SAFE.REGEXP_REPLACE(ssn, '[0-9]', 'X')"
	return_type          = "{\"typeKind\" :  \"STRING\"}"

	arguments {
	  name = "ssn"
	  data_type = "{\"typeKind\" :  \"STRING\"}"
	} 
}
`, context)
}

func TestAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyWithgranteesTestExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckBigqueryDatapolicyv2DataPolicyDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyWithgranteesTestExample(context),
			},
			{
				ResourceName:            "google_bigquery_datapolicyv2_data_policy.data_policy_with_grantees",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
		},
	})
}

func testAccBigqueryDatapolicyv2DataPolicy_bigqueryDatapolicyv2DatapolicyWithgranteesTestExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigquery_datapolicyv2_data_policy" "data_policy_with_grantees" {
  location         = "us-central1"
  data_policy_type = "RAW_DATA_ACCESS_POLICY"
  grantees = [
    "principalSet://goog/group/bigquery-datamasking-swe@google.com"
  ]
  data_policy_id   = "tf_test_data_policy_with_grantees%{random_suffix}"
}
`, context)
}

func testAccCheckBigqueryDatapolicyv2DataPolicyDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_bigquery_datapolicyv2_data_policy" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{BigqueryDatapolicyv2BasePath}}projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("BigqueryDatapolicyv2DataPolicy still exists at %s", url)
			}
		}

		return nil
	}
}
