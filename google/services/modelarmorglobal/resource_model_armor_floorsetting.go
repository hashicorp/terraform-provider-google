// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/modelarmorglobal/Floorsetting.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package modelarmorglobal

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceModelArmorGlobalFloorsetting() *schema.Resource {
	return &schema.Resource{
		Create: resourceModelArmorGlobalFloorsettingCreate,
		Read:   resourceModelArmorGlobalFloorsettingRead,
		Update: resourceModelArmorGlobalFloorsettingUpdate,
		Delete: resourceModelArmorGlobalFloorsettingDelete,

		Importer: &schema.ResourceImporter{
			State: resourceModelArmorGlobalFloorsettingImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"filter_config": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Filters configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"malicious_uri_filter_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Malicious URI filter settings.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"filter_enforcement": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Tells whether the Malicious URI filter is enabled or disabled.
Possible values:
ENABLED
DISABLED`,
									},
								},
							},
						},
						"pi_and_jailbreak_filter_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Prompt injection and Jailbreak Filter settings.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"confidence_level": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Possible values:
LOW_AND_ABOVE
MEDIUM_AND_ABOVE
HIGH`,
									},
									"filter_enforcement": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Tells whether Prompt injection and Jailbreak filter is enabled or
disabled.
Possible values:
ENABLED
DISABLED`,
									},
								},
							},
						},
						"rai_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Responsible AI Filter settings.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"rai_filters": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `List of Responsible AI filters enabled for template.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"filter_type": {
													Type:     schema.TypeString,
													Required: true,
													Description: `Possible values:
SEXUALLY_EXPLICIT
HATE_SPEECH
HARASSMENT
DANGEROUS`,
												},
												"confidence_level": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Possible values:
LOW_AND_ABOVE
MEDIUM_AND_ABOVE
HIGH`,
												},
											},
										},
									},
								},
							},
						},
						"sdp_settings": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Sensitive Data Protection settings.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"advanced_config": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Sensitive Data Protection Advanced configuration.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"deidentify_template": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Optional Sensitive Data Protection Deidentify template resource name.

If provided then DeidentifyContent action is performed during Sanitization
using this template and inspect template. The De-identified data will
be returned in SdpDeidentifyResult.
Note that all info-types present in the deidentify template must be present
in inspect template.

e.g.
'projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}'`,
												},
												"inspect_template": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Sensitive Data Protection inspect template resource name

If only inspect template is provided (de-identify template not provided),
then Sensitive Data Protection InspectContent action is performed during
Sanitization. All Sensitive Data Protection findings identified during
inspection will be returned as SdpFinding in SdpInsepctionResult.

e.g:-
'projects/{project}/locations/{location}/inspectTemplates/{inspect_template}'`,
												},
											},
										},
										ConflictsWith: []string{"filter_config.0.sdp_settings.0.basic_config"},
									},
									"basic_config": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Sensitive Data Protection basic configuration.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"filter_enforcement": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Tells whether the Sensitive Data Protection basic config is enabled or
disabled.
Possible values:
ENABLED
DISABLED`,
												},
											},
										},
										ConflictsWith: []string{"filter_config.0.sdp_settings.0.advanced_config"},
									},
								},
							},
						},
					},
				},
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"parent": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `Will be any one of these:

* 'projects/{project}'
* 'folders/{folder}'
* 'organizations/{organizationId}'`,
			},
			"ai_platform_floor_setting": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `AI Platform floor setting.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enable_cloud_logging": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `If true, log Model Armor filter results to Cloud Logging.`,
						},
						"inspect_and_block": {
							Type:     schema.TypeBool,
							Optional: true,
							Description: `If true, Model Armor filters will be run in inspect and block mode.
Requests that trip Model Armor filters will be blocked.`,
							ExactlyOneOf: []string{"ai_platform_floor_setting.0.inspect_only", "ai_platform_floor_setting.0.inspect_and_block"},
						},
						"inspect_only": {
							Type:     schema.TypeBool,
							Optional: true,
							Description: `If true, Model Armor filters will be run in inspect only mode. No action
will be taken on the request.`,
							ExactlyOneOf: []string{"ai_platform_floor_setting.0.inspect_only", "ai_platform_floor_setting.0.inspect_and_block"},
						},
					},
				},
			},
			"enable_floor_setting_enforcement": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Floor Settings enforcement status.`,
			},
			"floor_setting_metadata": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Metadata to enable multi language detection via floor setting.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"multi_language_detection": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Metadata for multi language detection.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enable_multi_language_detection": {
										Type:        schema.TypeBool,
										Required:    true,
										Description: `If true, multi language detection will be enabled.`,
									},
								},
							},
						},
					},
				},
			},
			"integrated_services": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `List of integrated services for which the floor setting is applicable.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `[Output only] Create timestamp`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Identifier. The resource name.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `[Output only] Update timestamp`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceModelArmorGlobalFloorsettingCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	filterConfigProp, err := expandModelArmorGlobalFloorsettingFilterConfig(d.Get("filter_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_config"); ok || !reflect.DeepEqual(v, filterConfigProp) {
		obj["filterConfig"] = filterConfigProp
	}
	enableFloorSettingEnforcementProp, err := expandModelArmorGlobalFloorsettingEnableFloorSettingEnforcement(d.Get("enable_floor_setting_enforcement"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("enable_floor_setting_enforcement"); ok || !reflect.DeepEqual(v, enableFloorSettingEnforcementProp) {
		obj["enableFloorSettingEnforcement"] = enableFloorSettingEnforcementProp
	}
	integratedServicesProp, err := expandModelArmorGlobalFloorsettingIntegratedServices(d.Get("integrated_services"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("integrated_services"); !tpgresource.IsEmptyValue(reflect.ValueOf(integratedServicesProp)) && (ok || !reflect.DeepEqual(v, integratedServicesProp)) {
		obj["integratedServices"] = integratedServicesProp
	}
	aiPlatformFloorSettingProp, err := expandModelArmorGlobalFloorsettingAiPlatformFloorSetting(d.Get("ai_platform_floor_setting"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("ai_platform_floor_setting"); !tpgresource.IsEmptyValue(reflect.ValueOf(aiPlatformFloorSettingProp)) && (ok || !reflect.DeepEqual(v, aiPlatformFloorSettingProp)) {
		obj["aiPlatformFloorSetting"] = aiPlatformFloorSettingProp
	}
	floorSettingMetadataProp, err := expandModelArmorGlobalFloorsettingFloorSettingMetadata(d.Get("floor_setting_metadata"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("floor_setting_metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(floorSettingMetadataProp)) && (ok || !reflect.DeepEqual(v, floorSettingMetadataProp)) {
		obj["floorSettingMetadata"] = floorSettingMetadataProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ModelArmorGlobalBasePath}}{{parent}}/locations/{{location}}/floorSetting")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Floorsetting: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Floorsetting: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/locations/{{location}}/floorSetting")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// This is useful if the resource in question doesn't have a perfectly consistent API
	// That is, the Operation for Create might return before the Get operation shows the
	// completed state of the resource.
	time.Sleep(30 * time.Second)

	log.Printf("[DEBUG] Finished creating Floorsetting %q: %#v", d.Id(), res)

	return resourceModelArmorGlobalFloorsettingRead(d, meta)
}

func resourceModelArmorGlobalFloorsettingRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ModelArmorGlobalBasePath}}{{parent}}/locations/{{location}}/floorSetting")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ModelArmorGlobalFloorsetting %q", d.Id()))
	}

	if err := d.Set("name", flattenModelArmorGlobalFloorsettingName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Floorsetting: %s", err)
	}
	if err := d.Set("create_time", flattenModelArmorGlobalFloorsettingCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Floorsetting: %s", err)
	}
	if err := d.Set("update_time", flattenModelArmorGlobalFloorsettingUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Floorsetting: %s", err)
	}
	if err := d.Set("filter_config", flattenModelArmorGlobalFloorsettingFilterConfig(res["filterConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading Floorsetting: %s", err)
	}
	if err := d.Set("enable_floor_setting_enforcement", flattenModelArmorGlobalFloorsettingEnableFloorSettingEnforcement(res["enableFloorSettingEnforcement"], d, config)); err != nil {
		return fmt.Errorf("Error reading Floorsetting: %s", err)
	}
	if err := d.Set("integrated_services", flattenModelArmorGlobalFloorsettingIntegratedServices(res["integratedServices"], d, config)); err != nil {
		return fmt.Errorf("Error reading Floorsetting: %s", err)
	}
	if err := d.Set("ai_platform_floor_setting", flattenModelArmorGlobalFloorsettingAiPlatformFloorSetting(res["aiPlatformFloorSetting"], d, config)); err != nil {
		return fmt.Errorf("Error reading Floorsetting: %s", err)
	}
	if err := d.Set("floor_setting_metadata", flattenModelArmorGlobalFloorsettingFloorSettingMetadata(res["floorSettingMetadata"], d, config)); err != nil {
		return fmt.Errorf("Error reading Floorsetting: %s", err)
	}

	return nil
}

func resourceModelArmorGlobalFloorsettingUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	filterConfigProp, err := expandModelArmorGlobalFloorsettingFilterConfig(d.Get("filter_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_config"); ok || !reflect.DeepEqual(v, filterConfigProp) {
		obj["filterConfig"] = filterConfigProp
	}
	enableFloorSettingEnforcementProp, err := expandModelArmorGlobalFloorsettingEnableFloorSettingEnforcement(d.Get("enable_floor_setting_enforcement"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("enable_floor_setting_enforcement"); ok || !reflect.DeepEqual(v, enableFloorSettingEnforcementProp) {
		obj["enableFloorSettingEnforcement"] = enableFloorSettingEnforcementProp
	}
	integratedServicesProp, err := expandModelArmorGlobalFloorsettingIntegratedServices(d.Get("integrated_services"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("integrated_services"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, integratedServicesProp)) {
		obj["integratedServices"] = integratedServicesProp
	}
	aiPlatformFloorSettingProp, err := expandModelArmorGlobalFloorsettingAiPlatformFloorSetting(d.Get("ai_platform_floor_setting"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("ai_platform_floor_setting"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, aiPlatformFloorSettingProp)) {
		obj["aiPlatformFloorSetting"] = aiPlatformFloorSettingProp
	}
	floorSettingMetadataProp, err := expandModelArmorGlobalFloorsettingFloorSettingMetadata(d.Get("floor_setting_metadata"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("floor_setting_metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, floorSettingMetadataProp)) {
		obj["floorSettingMetadata"] = floorSettingMetadataProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ModelArmorGlobalBasePath}}{{parent}}/locations/{{location}}/floorSetting")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Floorsetting %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("filter_config") {
		updateMask = append(updateMask, "filterConfig")
	}

	if d.HasChange("enable_floor_setting_enforcement") {
		updateMask = append(updateMask, "enableFloorSettingEnforcement")
	}

	if d.HasChange("integrated_services") {
		updateMask = append(updateMask, "integratedServices")
	}

	if d.HasChange("ai_platform_floor_setting") {
		updateMask = append(updateMask, "aiPlatformFloorSetting")
	}

	if d.HasChange("floor_setting_metadata") {
		updateMask = append(updateMask, "floorSettingMetadata")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Floorsetting %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Floorsetting %q: %#v", d.Id(), res)
		}

	}

	// This is useful if the resource in question doesn't have a perfectly consistent API
	// That is, the Operation for Create might return before the Get operation shows the
	// completed state of the resource.
	time.Sleep(30 * time.Second)
	return resourceModelArmorGlobalFloorsettingRead(d, meta)
}

func resourceModelArmorGlobalFloorsettingDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] ModelArmorGlobal Floorsetting resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceModelArmorGlobalFloorsettingImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	if err := tpgresource.ParseImportId([]string{
		"^(?P<parent>.+)/locations/(?P<location>[^/]+)/floorSetting$",
		"^(?P<parent>.+)/(?P<location>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/locations/{{location}}/floorSetting")

	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}

	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenModelArmorGlobalFloorsettingName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingFilterConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["malicious_uri_filter_settings"] =
		flattenModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettings(original["maliciousUriFilterSettings"], d, config)
	transformed["rai_settings"] =
		flattenModelArmorGlobalFloorsettingFilterConfigRaiSettings(original["raiSettings"], d, config)
	transformed["sdp_settings"] =
		flattenModelArmorGlobalFloorsettingFilterConfigSdpSettings(original["sdpSettings"], d, config)
	transformed["pi_and_jailbreak_filter_settings"] =
		flattenModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettings(original["piAndJailbreakFilterSettings"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["filter_enforcement"] =
		flattenModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettingsFilterEnforcement(original["filterEnforcement"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettingsFilterEnforcement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingFilterConfigRaiSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["rai_filters"] =
		flattenModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFilters(original["raiFilters"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFilters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"filter_type":      flattenModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersFilterType(original["filterType"], d, config),
			"confidence_level": flattenModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersConfidenceLevel(original["confidenceLevel"], d, config),
		})
	}
	return transformed
}
func flattenModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersFilterType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersConfidenceLevel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingFilterConfigSdpSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["advanced_config"] =
		flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfig(original["advancedConfig"], d, config)
	transformed["basic_config"] =
		flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfig(original["basicConfig"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["inspect_template"] =
		flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigInspectTemplate(original["inspectTemplate"], d, config)
	transformed["deidentify_template"] =
		flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(original["deidentifyTemplate"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigInspectTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["filter_enforcement"] =
		flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfigFilterEnforcement(original["filterEnforcement"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfigFilterEnforcement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["filter_enforcement"] =
		flattenModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(original["filterEnforcement"], d, config)
	transformed["confidence_level"] =
		flattenModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(original["confidenceLevel"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingEnableFloorSettingEnforcement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingIntegratedServices(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingAiPlatformFloorSetting(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["inspect_only"] =
		flattenModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectOnly(original["inspectOnly"], d, config)
	transformed["inspect_and_block"] =
		flattenModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectAndBlock(original["inspectAndBlock"], d, config)
	transformed["enable_cloud_logging"] =
		flattenModelArmorGlobalFloorsettingAiPlatformFloorSettingEnableCloudLogging(original["enableCloudLogging"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectOnly(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectAndBlock(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingAiPlatformFloorSettingEnableCloudLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenModelArmorGlobalFloorsettingFloorSettingMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["multi_language_detection"] =
		flattenModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetection(original["multiLanguageDetection"], d, config)
	return []interface{}{transformed}
}
func flattenModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return []interface{}{map[string]interface{}{"enable_multi_language_detection": false}}
	}
	original, ok := v.(map[string]interface{})
	if !ok {
		return nil // Should not happen if API is consistent
	}
	// Populating the field even if the returned block is empty.
	transformed := make(map[string]interface{})

	if val, ok := original["enableMultiLanguageDetection"]; ok {
		transformed["enable_multi_language_detection"] = val
	} else {
		// Since the field is REQUIRED in the schema and the block exists, default to false if the key is missing from the API response.
		transformed["enable_multi_language_detection"] = false
	}
	return []interface{}{transformed}
}

func expandModelArmorGlobalFloorsettingFilterConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaliciousUriFilterSettings, err := expandModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettings(original["malicious_uri_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaliciousUriFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maliciousUriFilterSettings"] = transformedMaliciousUriFilterSettings
	}

	transformedRaiSettings, err := expandModelArmorGlobalFloorsettingFilterConfigRaiSettings(original["rai_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRaiSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["raiSettings"] = transformedRaiSettings
	}

	transformedSdpSettings, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettings(original["sdp_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSdpSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sdpSettings"] = transformedSdpSettings
	}

	transformedPiAndJailbreakFilterSettings, err := expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettings(original["pi_and_jailbreak_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPiAndJailbreakFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["piAndJailbreakFilterSettings"] = transformedPiAndJailbreakFilterSettings
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettingsFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettingsFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigRaiSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRaiFilters, err := expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFilters(original["rai_filters"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRaiFilters); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["raiFilters"] = transformedRaiFilters
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFilters(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedFilterType, err := expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersFilterType(original["filter_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFilterType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["filterType"] = transformedFilterType
		}

		transformedConfidenceLevel, err := expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersConfidenceLevel(original["confidence_level"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConfidenceLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["confidenceLevel"] = transformedConfidenceLevel
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersFilterType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersConfidenceLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdvancedConfig, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfig(original["advanced_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdvancedConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["advancedConfig"] = transformedAdvancedConfig
	}

	transformedBasicConfig, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfig(original["basic_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBasicConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["basicConfig"] = transformedBasicConfig
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInspectTemplate, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigInspectTemplate(original["inspect_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectTemplate"] = transformedInspectTemplate
	}

	transformedDeidentifyTemplate, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(original["deidentify_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeidentifyTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deidentifyTemplate"] = transformedDeidentifyTemplate
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigInspectTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfigFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfigFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	transformedConfidenceLevel, err := expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(original["confidence_level"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["confidenceLevel"] = transformedConfidenceLevel
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingEnableFloorSettingEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingIntegratedServices(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingAiPlatformFloorSetting(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInspectOnly, err := expandModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectOnly(original["inspect_only"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectOnly); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectOnly"] = transformedInspectOnly
	}

	transformedInspectAndBlock, err := expandModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectAndBlock(original["inspect_and_block"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectAndBlock); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectAndBlock"] = transformedInspectAndBlock
	}

	transformedEnableCloudLogging, err := expandModelArmorGlobalFloorsettingAiPlatformFloorSettingEnableCloudLogging(original["enable_cloud_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableCloudLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableCloudLogging"] = transformedEnableCloudLogging
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectOnly(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectAndBlock(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingAiPlatformFloorSettingEnableCloudLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFloorSettingMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMultiLanguageDetection, err := expandModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetection(original["multi_language_detection"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMultiLanguageDetection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["multiLanguageDetection"] = transformedMultiLanguageDetection
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableMultiLanguageDetection, err := expandModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetectionEnableMultiLanguageDetection(original["enable_multi_language_detection"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enableMultiLanguageDetection"] = transformedEnableMultiLanguageDetection
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetectionEnableMultiLanguageDetection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
