// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/contactcenterinsights/AnalysisRule.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package contactcenterinsights

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceContactCenterInsightsAnalysisRule() *schema.Resource {
	return &schema.Resource{
		Create: resourceContactCenterInsightsAnalysisRuleCreate,
		Read:   resourceContactCenterInsightsAnalysisRuleRead,
		Update: resourceContactCenterInsightsAnalysisRuleUpdate,
		Delete: resourceContactCenterInsightsAnalysisRuleDelete,

		Importer: &schema.ResourceImporter{
			State: resourceContactCenterInsightsAnalysisRuleImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Location of the resource.`,
			},
			"active": {
				Type:     schema.TypeBool,
				Optional: true,
				Description: `If true, apply this rule to conversations. Otherwise, this rule is
inactive and saved as a draft.`,
			},
			"analysis_percentage": {
				Type:     schema.TypeFloat,
				Optional: true,
				Description: `Percentage of conversations that we should apply this analysis setting
automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
are sampled in a determenestic way. The original runtime_percentage &
upload percentage will be replaced by defining filters on the conversation.`,
			},
			"annotator_selector": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Selector of all available annotators and phrase matchers to run.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"issue_models": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `The issue model to run. If not provided, the most recently deployed topic
model will be used. The provided issue model will only be used for
inference if the issue model is deployed and if run_issue_model_annotator
is set to true. If more than one issue model is provided, only the first
provided issue model will be used for inference.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"phrase_matchers": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `The list of phrase matchers to run. If not provided, all active phrase
matchers will be used. If inactive phrase matchers are provided, they will
not be used. Phrase matchers will be run only if
run_phrase_matcher_annotator is set to true. Format:
projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"qa_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for the QA feature.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"scorecard_list": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Container for a list of scorecards.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"qa_scorecard_revisions": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `List of QaScorecardRevisions.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
						"run_entity_annotator": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to run the entity annotator.`,
						},
						"run_intent_annotator": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to run the intent annotator.`,
						},
						"run_interruption_annotator": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to run the interruption annotator.`,
						},
						"run_issue_model_annotator": {
							Type:     schema.TypeBool,
							Optional: true,
							Description: `Whether to run the issue model annotator. A model should have already been
deployed for this to take effect.`,
						},
						"run_phrase_matcher_annotator": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to run the active phrase matcher annotator(s).`,
						},
						"run_qa_annotator": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to run the QA annotator.`,
						},
						"run_sentiment_annotator": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to run the sentiment annotator.`,
						},
						"run_silence_annotator": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to run the silence annotator.`,
						},
						"run_summarization_annotator": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to run the summarization annotator.`,
						},
						"summarization_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for summarization.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"conversation_profile": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Resource name of the Dialogflow conversation profile.
Format:
projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}`,
									},
									"summarization_model": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"BASELINE_MODEL", "BASELINE_MODEL_V2_0", ""}),
										Description: `Default summarization model to be used.
Possible values:
SUMMARIZATION_MODEL_UNSPECIFIED
BASELINE_MODEL
BASELINE_MODEL_V2_0 Possible values: ["BASELINE_MODEL", "BASELINE_MODEL_V2_0"]`,
									},
								},
							},
						},
					},
				},
			},
			"conversation_filter": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Filter for the conversations that should apply this analysis
rule. An empty filter means this analysis rule applies to all
conversations.
Refer to https://cloud.google.com/contact-center/insights/docs/filtering
for details.`,
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Display Name of the analysis rule.`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The time at which this analysis rule was created.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The resource name of the analysis rule. Randomly generated by Insights.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The most recent time at which this analysis rule was updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceContactCenterInsightsAnalysisRuleCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandContactCenterInsightsAnalysisRuleDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	conversationFilterProp, err := expandContactCenterInsightsAnalysisRuleConversationFilter(d.Get("conversation_filter"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("conversation_filter"); !tpgresource.IsEmptyValue(reflect.ValueOf(conversationFilterProp)) && (ok || !reflect.DeepEqual(v, conversationFilterProp)) {
		obj["conversationFilter"] = conversationFilterProp
	}
	annotatorSelectorProp, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelector(d.Get("annotator_selector"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("annotator_selector"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotatorSelectorProp)) && (ok || !reflect.DeepEqual(v, annotatorSelectorProp)) {
		obj["annotatorSelector"] = annotatorSelectorProp
	}
	analysisPercentageProp, err := expandContactCenterInsightsAnalysisRuleAnalysisPercentage(d.Get("analysis_percentage"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("analysis_percentage"); !tpgresource.IsEmptyValue(reflect.ValueOf(analysisPercentageProp)) && (ok || !reflect.DeepEqual(v, analysisPercentageProp)) {
		obj["analysisPercentage"] = analysisPercentageProp
	}
	activeProp, err := expandContactCenterInsightsAnalysisRuleActive(d.Get("active"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("active"); !tpgresource.IsEmptyValue(reflect.ValueOf(activeProp)) && (ok || !reflect.DeepEqual(v, activeProp)) {
		obj["active"] = activeProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ContactCenterInsightsBasePath}}projects/{{project}}/locations/{{location}}/analysisRules")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new AnalysisRule: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AnalysisRule: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating AnalysisRule: %s", err)
	}
	// Set computed resource properties from create API response so that they're available on the subsequent Read
	// call.
	err = resourceContactCenterInsightsAnalysisRulePostCreateSetComputedFields(d, meta, res)
	if err != nil {
		return fmt.Errorf("setting computed ID format fields: %w", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/analysisRules/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating AnalysisRule %q: %#v", d.Id(), res)

	return resourceContactCenterInsightsAnalysisRuleRead(d, meta)
}

func resourceContactCenterInsightsAnalysisRuleRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ContactCenterInsightsBasePath}}projects/{{project}}/locations/{{location}}/analysisRules/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AnalysisRule: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ContactCenterInsightsAnalysisRule %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading AnalysisRule: %s", err)
	}

	if err := d.Set("name", flattenContactCenterInsightsAnalysisRuleName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading AnalysisRule: %s", err)
	}
	if err := d.Set("create_time", flattenContactCenterInsightsAnalysisRuleCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading AnalysisRule: %s", err)
	}
	if err := d.Set("update_time", flattenContactCenterInsightsAnalysisRuleUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading AnalysisRule: %s", err)
	}
	if err := d.Set("display_name", flattenContactCenterInsightsAnalysisRuleDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading AnalysisRule: %s", err)
	}
	if err := d.Set("conversation_filter", flattenContactCenterInsightsAnalysisRuleConversationFilter(res["conversationFilter"], d, config)); err != nil {
		return fmt.Errorf("Error reading AnalysisRule: %s", err)
	}
	if err := d.Set("annotator_selector", flattenContactCenterInsightsAnalysisRuleAnnotatorSelector(res["annotatorSelector"], d, config)); err != nil {
		return fmt.Errorf("Error reading AnalysisRule: %s", err)
	}
	if err := d.Set("analysis_percentage", flattenContactCenterInsightsAnalysisRuleAnalysisPercentage(res["analysisPercentage"], d, config)); err != nil {
		return fmt.Errorf("Error reading AnalysisRule: %s", err)
	}
	if err := d.Set("active", flattenContactCenterInsightsAnalysisRuleActive(res["active"], d, config)); err != nil {
		return fmt.Errorf("Error reading AnalysisRule: %s", err)
	}

	return nil
}

func resourceContactCenterInsightsAnalysisRuleUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AnalysisRule: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandContactCenterInsightsAnalysisRuleDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	conversationFilterProp, err := expandContactCenterInsightsAnalysisRuleConversationFilter(d.Get("conversation_filter"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("conversation_filter"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, conversationFilterProp)) {
		obj["conversationFilter"] = conversationFilterProp
	}
	annotatorSelectorProp, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelector(d.Get("annotator_selector"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("annotator_selector"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, annotatorSelectorProp)) {
		obj["annotatorSelector"] = annotatorSelectorProp
	}
	analysisPercentageProp, err := expandContactCenterInsightsAnalysisRuleAnalysisPercentage(d.Get("analysis_percentage"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("analysis_percentage"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, analysisPercentageProp)) {
		obj["analysisPercentage"] = analysisPercentageProp
	}
	activeProp, err := expandContactCenterInsightsAnalysisRuleActive(d.Get("active"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("active"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, activeProp)) {
		obj["active"] = activeProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ContactCenterInsightsBasePath}}projects/{{project}}/locations/{{location}}/analysisRules/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating AnalysisRule %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("conversation_filter") {
		updateMask = append(updateMask, "conversationFilter")
	}

	if d.HasChange("annotator_selector") {
		updateMask = append(updateMask, "annotatorSelector")
	}

	if d.HasChange("analysis_percentage") {
		updateMask = append(updateMask, "analysisPercentage")
	}

	if d.HasChange("active") {
		updateMask = append(updateMask, "active")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating AnalysisRule %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating AnalysisRule %q: %#v", d.Id(), res)
		}

	}

	return resourceContactCenterInsightsAnalysisRuleRead(d, meta)
}

func resourceContactCenterInsightsAnalysisRuleDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for AnalysisRule: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ContactCenterInsightsBasePath}}projects/{{project}}/locations/{{location}}/analysisRules/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting AnalysisRule %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "AnalysisRule")
	}

	log.Printf("[DEBUG] Finished deleting AnalysisRule %q: %#v", d.Id(), res)
	return nil
}

func resourceContactCenterInsightsAnalysisRuleImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/analysisRules/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/analysisRules/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenContactCenterInsightsAnalysisRuleName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.GetResourceNameFromSelfLink(v.(string))
}

func flattenContactCenterInsightsAnalysisRuleCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleConversationFilter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelector(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["run_interruption_annotator"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunInterruptionAnnotator(original["runInterruptionAnnotator"], d, config)
	transformed["phrase_matchers"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorPhraseMatchers(original["phraseMatchers"], d, config)
	transformed["run_entity_annotator"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunEntityAnnotator(original["runEntityAnnotator"], d, config)
	transformed["issue_models"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorIssueModels(original["issueModels"], d, config)
	transformed["run_qa_annotator"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunQaAnnotator(original["runQaAnnotator"], d, config)
	transformed["run_silence_annotator"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSilenceAnnotator(original["runSilenceAnnotator"], d, config)
	transformed["run_phrase_matcher_annotator"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunPhraseMatcherAnnotator(original["runPhraseMatcherAnnotator"], d, config)
	transformed["run_sentiment_annotator"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSentimentAnnotator(original["runSentimentAnnotator"], d, config)
	transformed["run_intent_annotator"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIntentAnnotator(original["runIntentAnnotator"], d, config)
	transformed["run_issue_model_annotator"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIssueModelAnnotator(original["runIssueModelAnnotator"], d, config)
	transformed["run_summarization_annotator"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSummarizationAnnotator(original["runSummarizationAnnotator"], d, config)
	transformed["summarization_config"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfig(original["summarizationConfig"], d, config)
	transformed["qa_config"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfig(original["qaConfig"], d, config)
	return []interface{}{transformed}
}
func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunInterruptionAnnotator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorPhraseMatchers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunEntityAnnotator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorIssueModels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunQaAnnotator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSilenceAnnotator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunPhraseMatcherAnnotator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSentimentAnnotator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIntentAnnotator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIssueModelAnnotator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSummarizationAnnotator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["conversation_profile"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigConversationProfile(original["conversationProfile"], d, config)
	transformed["summarization_model"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigSummarizationModel(original["summarizationModel"], d, config)
	return []interface{}{transformed}
}
func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigConversationProfile(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigSummarizationModel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["scorecard_list"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardList(original["scorecardList"], d, config)
	return []interface{}{transformed}
}
func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardList(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["qa_scorecard_revisions"] =
		flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardListQaScorecardRevisions(original["qaScorecardRevisions"], d, config)
	return []interface{}{transformed}
}
func flattenContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardListQaScorecardRevisions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleAnalysisPercentage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContactCenterInsightsAnalysisRuleActive(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandContactCenterInsightsAnalysisRuleDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleConversationFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelector(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRunInterruptionAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunInterruptionAnnotator(original["run_interruption_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunInterruptionAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runInterruptionAnnotator"] = transformedRunInterruptionAnnotator
	}

	transformedPhraseMatchers, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorPhraseMatchers(original["phrase_matchers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPhraseMatchers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["phraseMatchers"] = transformedPhraseMatchers
	}

	transformedRunEntityAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunEntityAnnotator(original["run_entity_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunEntityAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runEntityAnnotator"] = transformedRunEntityAnnotator
	}

	transformedIssueModels, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorIssueModels(original["issue_models"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIssueModels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["issueModels"] = transformedIssueModels
	}

	transformedRunQaAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunQaAnnotator(original["run_qa_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunQaAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runQaAnnotator"] = transformedRunQaAnnotator
	}

	transformedRunSilenceAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSilenceAnnotator(original["run_silence_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunSilenceAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runSilenceAnnotator"] = transformedRunSilenceAnnotator
	}

	transformedRunPhraseMatcherAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunPhraseMatcherAnnotator(original["run_phrase_matcher_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunPhraseMatcherAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runPhraseMatcherAnnotator"] = transformedRunPhraseMatcherAnnotator
	}

	transformedRunSentimentAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSentimentAnnotator(original["run_sentiment_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunSentimentAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runSentimentAnnotator"] = transformedRunSentimentAnnotator
	}

	transformedRunIntentAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIntentAnnotator(original["run_intent_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunIntentAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runIntentAnnotator"] = transformedRunIntentAnnotator
	}

	transformedRunIssueModelAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIssueModelAnnotator(original["run_issue_model_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunIssueModelAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runIssueModelAnnotator"] = transformedRunIssueModelAnnotator
	}

	transformedRunSummarizationAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSummarizationAnnotator(original["run_summarization_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunSummarizationAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runSummarizationAnnotator"] = transformedRunSummarizationAnnotator
	}

	transformedSummarizationConfig, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfig(original["summarization_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSummarizationConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["summarizationConfig"] = transformedSummarizationConfig
	}

	transformedQaConfig, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfig(original["qa_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQaConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["qaConfig"] = transformedQaConfig
	}

	return transformed, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunInterruptionAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorPhraseMatchers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunEntityAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorIssueModels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunQaAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSilenceAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunPhraseMatcherAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSentimentAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIntentAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIssueModelAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSummarizationAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedConversationProfile, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigConversationProfile(original["conversation_profile"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConversationProfile); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conversationProfile"] = transformedConversationProfile
	}

	transformedSummarizationModel, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigSummarizationModel(original["summarization_model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSummarizationModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["summarizationModel"] = transformedSummarizationModel
	}

	return transformed, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigConversationProfile(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigSummarizationModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedScorecardList, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardList(original["scorecard_list"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScorecardList); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scorecardList"] = transformedScorecardList
	}

	return transformed, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardList(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedQaScorecardRevisions, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardListQaScorecardRevisions(original["qa_scorecard_revisions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQaScorecardRevisions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["qaScorecardRevisions"] = transformedQaScorecardRevisions
	}

	return transformed, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardListQaScorecardRevisions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnalysisPercentage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleActive(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func resourceContactCenterInsightsAnalysisRulePostCreateSetComputedFields(d *schema.ResourceData, meta interface{}, res map[string]interface{}) error {
	config := meta.(*transport_tpg.Config)
	if err := d.Set("name", flattenContactCenterInsightsAnalysisRuleName(res["name"], d, config)); err != nil {
		return fmt.Errorf(`Error setting computed identity field "name": %s`, err)
	}
	return nil
}
