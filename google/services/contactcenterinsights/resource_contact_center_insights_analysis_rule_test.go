// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/contactcenterinsights/resource_contact_center_insights_analysis_rule_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package contactcenterinsights_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccContactCenterInsightsAnalysisRule_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":  acctest.RandString(t, 10),
		"project_number": envvar.GetTestProjectNumberFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccInsightsAnalysisRule(context),
			},
			{
				ResourceName:      "google_contact_center_insights_analysis_rule.default",
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccContactCenterInsightsAnalysisRule_full(context),
			},
			{
				ResourceName:            "google_contact_center_insights_analysis_rule.basic_analysis_rule",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"analysis_rule_id", "location"},
			},
			{
				Config: testAccContactCenterInsightsAnalysisRule_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_contact_center_insights_analysis_rule.basic_analysis_rule", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_contact_center_insights_analysis_rule.basic_analysis_rule",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"analysis_rule_id", "location"},
			},
		},
	})
}

func testAccInsightsAnalysisRule(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_contact_center_insights_analysis_rule" "default" {
	    display_name = "default-analysis-rule-display-name-%{random_suffix}"
		location = "us-central1"
		conversation_filter = "agent_id = \"1\""
		analysis_percentage = 0.5
		annotator_selector {
			run_silence_annotator        = true
		}
		active = true
	}
	`, context)
}

func testAccContactCenterInsightsAnalysisRule_full(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_contact_center_insights_analysis_rule" "basic_analysis_rule" {
  display_name = "analysis-rule-display-name-%{random_suffix}"
  location = "us-central1"
  conversation_filter = "agent_id = \"1\""
  annotator_selector {
    run_interruption_annotator = false
    issue_models    = ["projects/%{project_number}/locations/us-central1/issueModels/some_issue_model_id"]
    phrase_matchers = ["projects/%{project_number}/locations/us-central1/phraseMatchers/123"]
    qa_config {
      scorecard_list {
        qa_scorecard_revisions = ["projects/%{project_number}/locations/us-central1/qaScorecards/*/revisions/some_scorecard_revision_id"]
      }
    }
    run_entity_annotator         = false
    run_intent_annotator         = false
    run_issue_model_annotator    = false
    run_phrase_matcher_annotator = false
    run_qa_annotator             = false
    run_sentiment_annotator      = false
    run_silence_annotator        = true
    run_summarization_annotator  = false
    summarization_config {
      summarization_model  = "BASELINE_MODEL"
    }
  }
  analysis_percentage = 0.5
  active    = true
}
`, context)
}

func testAccContactCenterInsightsAnalysisRule_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_contact_center_insights_analysis_rule" "basic_analysis_rule" {
  display_name = "analysis-rule-display-name-%{random_suffix}-updated"
  location = "us-central1"
  conversation_filter = "agent_id = \"1\""
  annotator_selector {
    run_interruption_annotator = true
	issue_models    = ["projects/%{project_number}/locations/us-central1/issueModels/alt_issue_model_id"]
    phrase_matchers = ["projects/%{project_number}/locations/us-central1/phraseMatchers/123"]
    qa_config {
      scorecard_list {
        qa_scorecard_revisions = ["projects/%{project_number}/locations/us-central1/qaScorecards/*/revisions/alt_scorecard_revision_id"]
      }
    }
    run_entity_annotator         = true
    run_intent_annotator         = true
    run_issue_model_annotator    = false
    run_phrase_matcher_annotator = true
    run_qa_annotator             = true
    run_sentiment_annotator      = true
    run_silence_annotator        = true
    run_summarization_annotator  = true
    summarization_config {
      summarization_model  = "BASELINE_MODEL_V2_0"
    }
  }
  analysis_percentage = 0.0
  active    = false
}
`, context)
}
