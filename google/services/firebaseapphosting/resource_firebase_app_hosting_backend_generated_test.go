// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firebaseapphosting_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccFirebaseAppHostingBackend_firebaseAppHostingBackendMinimalExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirebaseAppHostingBackendDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseAppHostingBackend_firebaseAppHostingBackendMinimalExample(context),
			},
			{
				ResourceName:            "google_firebase_app_hosting_backend.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "backend_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccFirebaseAppHostingBackend_firebaseAppHostingBackendMinimalExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_app_hosting_backend" "example" {
  project          = "%{project_id}"
  # Choose the region closest to your users

  location         = "us-central1"
  backend_id       = "mini%{random_suffix}"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email

  depends_on = [google_project_service.fah]
}

### Include these blocks only once per project if you are starting from scratch ###
resource "google_service_account" "service_account" {
  project = "%{project_id}"

  # Must be firebase-app-hosting-compute
  account_id                   = "firebase-app-hosting-compute"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}

resource "google_project_iam_member" "app_hosting_sa_runner" {
  project = "%{project_id}"

  # For App Hosting
  role   = "roles/firebaseapphosting.computeRunner"
  member = google_service_account.service_account.member
}

resource "google_project_service" "fah" {
  project = "%{project_id}"
  service = "firebaseapphosting.googleapis.com"

  disable_on_destroy = false
}
###
`, context)
}

func TestAccFirebaseAppHostingBackend_firebaseAppHostingBackendFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirebaseAppHostingBackendDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseAppHostingBackend_firebaseAppHostingBackendFullExample(context),
			},
			{
				ResourceName:            "google_firebase_app_hosting_backend.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "backend_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccFirebaseAppHostingBackend_firebaseAppHostingBackendFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_app_hosting_backend" "example" {
  project          = "%{project_id}"

  # Choose the region closest to your users
  location         = "us-central1"
  backend_id       = "full%{random_suffix}"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  display_name     = "My Backend"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email
  environment      = "prod"

  annotations = {
    "key" = "value"
  }

  labels = {
    "key" = "value"
  }

  depends_on = [google_project_service.fah]
}

### Include these blocks only once per project if you are starting from scratch ###
resource "google_service_account" "service_account" {
  project = "%{project_id}"

  # Must be firebase-app-hosting-compute
  account_id                   = "firebase-app-hosting-compute"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}

resource "google_project_iam_member" "app_hosting_sa_developerconnect" {
  project = "%{project_id}"

  # For reading connected Github repos
  role   = "roles/developerconnect.readTokenAccessor"
  member = google_service_account.service_account.member
}

resource "google_project_iam_member" "app_hosting_sa_adminsdk" {
  project = "%{project_id}"

  # For Firebase Admin SDK
  role   = "roles/firebase.sdkAdminServiceAgent"
  member = google_service_account.service_account.member
}

resource "google_project_iam_member" "app_hosting_sa_runner" {
  project = "%{project_id}"

  # For App Hosting
  role   = "roles/firebaseapphosting.computeRunner"
  member = google_service_account.service_account.member
}

resource "google_project_service" "fah" {
  project = "%{project_id}"
  service = "firebaseapphosting.googleapis.com"

  disable_on_destroy = false
}
###
`, context)
}

func testAccCheckFirebaseAppHostingBackendDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_firebase_app_hosting_backend" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{FirebaseAppHostingBasePath}}projects/{{project}}/locations/{{location}}/backends/{{backend_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("FirebaseAppHostingBackend still exists at %s", url)
			}
		}

		return nil
	}
}
