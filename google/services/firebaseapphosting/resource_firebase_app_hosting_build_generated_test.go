// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firebaseapphosting_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccFirebaseAppHostingBuild_firebaseAppHostingBuildMinimalExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":     envvar.GetTestProjectFromEnv(),
		"service_act_id": "tf-test-build-min",
		"random_suffix":  acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseAppHostingBuild_firebaseAppHostingBuildMinimalExample(context),
			},
			{
				ResourceName:            "google_firebase_app_hosting_build.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "backend", "build_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccFirebaseAppHostingBuild_firebaseAppHostingBuildMinimalExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_app_hosting_build" "example" {
  project          = google_firebase_app_hosting_backend.example.project
  location         = google_firebase_app_hosting_backend.example.location
  backend          = google_firebase_app_hosting_backend.example.backend_id
  build_id         = "tf-test-mini-build%{random_suffix}"

  source {
    container {
      image = "us-docker.pkg.dev/cloudrun/container/hello"
    }
  }
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "%{project_id}"
  # Choose the region closest to your users

  location         = "us-central1"
  backend_id       = "mini%{random_suffix}"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email

  depends_on = [google_project_service.fah]
}

### Include these blocks only once per project if you are starting from scratch ###
resource "google_service_account" "service_account" {
  project = "%{project_id}"

  # Must be firebase-app-hosting-compute
  account_id                   = "%{service_act_id}"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}

resource "google_project_iam_member" "app_hosting_sa_runner" {
  project = "%{project_id}"

  # For App Hosting
  role   = "roles/firebaseapphosting.computeRunner"
  member = google_service_account.service_account.member
}

resource "google_project_service" "fah" {
  project = "%{project_id}"
  service = "firebaseapphosting.googleapis.com"

  disable_on_destroy = false
}
###
`, context)
}

func TestAccFirebaseAppHostingBuild_firebaseAppHostingBuildFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":     envvar.GetTestProjectFromEnv(),
		"service_act_id": "tf-test-build-full",
		"random_suffix":  acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseAppHostingBuild_firebaseAppHostingBuildFullExample(context),
			},
			{
				ResourceName:            "google_firebase_app_hosting_build.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "backend", "build_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccFirebaseAppHostingBuild_firebaseAppHostingBuildFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_app_hosting_build" "example" {
  project          = google_firebase_app_hosting_backend.example.project
  location         = google_firebase_app_hosting_backend.example.location
  backend          = google_firebase_app_hosting_backend.example.backend_id
  build_id         = "tf-test-full-build%{random_suffix}"
  display_name     = "My Build"

  annotations = {
    "key" = "value"
  }

  labels = {
    "key" = "value"
  }

  source {
    container {
      image = "us-docker.pkg.dev/cloudrun/container/hello"
    }
  }
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "%{project_id}"
  # Choose the region closest to your users

  location         = "us-central1"
  backend_id       = "full%{random_suffix}"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email

  depends_on = [google_project_service.fah]
}

### Include these blocks only once per project if you are starting from scratch ###
resource "google_service_account" "service_account" {
  project = "%{project_id}"

  # Must be firebase-app-hosting-compute
  account_id                   = "%{service_act_id}"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}

resource "google_project_iam_member" "app_hosting_sa_runner" {
  project = "%{project_id}"

  # For App Hosting
  role   = "roles/firebaseapphosting.computeRunner"
  member = google_service_account.service_account.member
}

resource "google_project_service" "fah" {
  project = "%{project_id}"
  service = "firebaseapphosting.googleapis.com"

  disable_on_destroy = false
}
###
`, context)
}
