// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firebaseapphosting_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccFirebaseAppHostingDefaultDomain_firebaseAppHostingDefaultDomainMinimalExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":     envvar.GetTestProjectFromEnv(),
		"service_act_id": "tf-test-dd-mi",
		"random_suffix":  acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseAppHostingDefaultDomain_firebaseAppHostingDefaultDomainMinimalExample(context),
			},
			{
				ResourceName:            "google_firebase_app_hosting_default_domain.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"backend", "domain_id", "location"},
			},
		},
	})
}

func testAccFirebaseAppHostingDefaultDomain_firebaseAppHostingDefaultDomainMinimalExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_app_hosting_default_domain" "example" {
  project   = google_firebase_app_hosting_backend.example.project
  location  = google_firebase_app_hosting_backend.example.location
  backend   = google_firebase_app_hosting_backend.example.backend_id
  domain_id = google_firebase_app_hosting_backend.example.uri
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "%{project_id}"

  # Choose the region closest to your users
  location         = "us-central1"
  backend_id       = "tf-test-dd-mini%{random_suffix}"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email
}

resource "google_service_account" "service_account" {
  project = "%{project_id}"

  # Must be firebase-app-hosting-compute
  account_id                   = "%{service_act_id}"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}
`, context)
}

func TestAccFirebaseAppHostingDefaultDomain_firebaseAppHostingDefaultDomainFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":     envvar.GetTestProjectFromEnv(),
		"service_act_id": "tf-test-dd-full",
		"random_suffix":  acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseAppHostingDefaultDomain_firebaseAppHostingDefaultDomainFullExample(context),
			},
			{
				ResourceName:            "google_firebase_app_hosting_default_domain.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"backend", "domain_id", "location"},
			},
		},
	})
}

func testAccFirebaseAppHostingDefaultDomain_firebaseAppHostingDefaultDomainFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_app_hosting_default_domain" "example" {
  project   = google_firebase_app_hosting_backend.example.project
  location  = google_firebase_app_hosting_backend.example.location
  backend   = google_firebase_app_hosting_backend.example.backend_id
  domain_id = google_firebase_app_hosting_backend.example.uri

  disabled = false
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "%{project_id}"

  # Choose the region closest to your users
  location         = "us-central1"
  backend_id       = "tf-test-dd-full%{random_suffix}"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email
}

resource "google_service_account" "service_account" {
  project = "%{project_id}"

  # Must be firebase-app-hosting-compute
  account_id                   = "%{service_act_id}"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}
`, context)
}

func TestAccFirebaseAppHostingDefaultDomain_firebaseAppHostingDefaultDomainDisabledExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":     envvar.GetTestProjectFromEnv(),
		"service_act_id": "tf-test-dd-disabled",
		"random_suffix":  acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseAppHostingDefaultDomain_firebaseAppHostingDefaultDomainDisabledExample(context),
			},
			{
				ResourceName:            "google_firebase_app_hosting_default_domain.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"backend", "domain_id", "location"},
			},
		},
	})
}

func testAccFirebaseAppHostingDefaultDomain_firebaseAppHostingDefaultDomainDisabledExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_app_hosting_default_domain" "example" {
  project   = google_firebase_app_hosting_backend.example.project
  location  = google_firebase_app_hosting_backend.example.location
  backend   = google_firebase_app_hosting_backend.example.backend_id
  domain_id = google_firebase_app_hosting_backend.example.uri

  disabled  = true
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "%{project_id}"

  # Choose the region closest to your users
  location         = "us-central1"
  backend_id       = "tf-test-dd-disabled%{random_suffix}"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email
}

resource "google_service_account" "service_account" {
  project = "%{project_id}"

  # Must be firebase-app-hosting-compute
  account_id                   = "%{service_act_id}"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}
`, context)
}
