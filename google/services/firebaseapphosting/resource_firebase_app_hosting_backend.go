// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/firebaseapphosting/Backend.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package firebaseapphosting

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceFirebaseAppHostingBackend() *schema.Resource {
	return &schema.Resource{
		Create: resourceFirebaseAppHostingBackendCreate,
		Read:   resourceFirebaseAppHostingBackendRead,
		Update: resourceFirebaseAppHostingBackendUpdate,
		Delete: resourceFirebaseAppHostingBackendDelete,

		Importer: &schema.ResourceImporter{
			State: resourceFirebaseAppHostingBackendImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetAnnotationsDiff,
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"app_id": {
				Type:     schema.TypeString,
				Required: true,
				Description: `The [ID of a Web
App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
associated with the backend.`,
			},
			"backend_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `Id of the backend. Also used as the service ID for Cloud Run, and as part
of the default domain name.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The canonical IDs of a Google Cloud location such as "us-east1".`,
			},
			"service_account": {
				Type:     schema.TypeString,
				Required: true,
				Description: `The name of the service account used for Cloud Build and Cloud Run.
Should have the role roles/firebaseapphosting.computeRunner
or equivalent permissions.`,
			},
			"serving_locality": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidateEnum([]string{"REGIONAL_STRICT", "GLOBAL_ACCESS"}),
				Description: `Immutable. Specifies how App Hosting will serve the content for this backend. It will
either be contained to a single region (REGIONAL_STRICT) or allowed to use
App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS). Possible values: ["REGIONAL_STRICT", "GLOBAL_ACCESS"]`,
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Unstructured key value map that may be set by external tools to
store and arbitrary metadata. They are not queryable and should be
preserved when modifying objects.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"codebase": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `The connection to an external source repository to watch for event-driven
updates to the backend.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"repository": {
							Type:     schema.TypeString,
							Required: true,
							Description: `The resource name for the Developer Connect
['gitRepositoryLink'](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
connected to this backend, in the format:

projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{repositoryLink}`,
						},
						"root_directory": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `If 'repository' is provided, the directory relative to the root of the
repository to use as the root for the deployed web app.`,
						},
					},
				},
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Human-readable name. 63 character limit.`,
			},
			"environment": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The environment name of the backend, used to load environment variables
from environment specific configuration.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Unstructured key value map that can be used to organize and categorize
objects.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the backend was created.`,
			},
			"delete_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the backend was deleted.`,
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"etag": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Server-computed checksum based on other values; may be sent
on update or delete to ensure operation is done on expected resource.`,
			},
			"managed_resources": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `A list of the resources managed by this backend.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"run_service": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `A managed Cloud Run
['service'](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#resource:-service).`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"service": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `The name of the Cloud Run
['service'](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#resource:-service),
in the format:

projects/{project}/locations/{location}/services/{serviceId}`,
									},
								},
							},
						},
					},
				},
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The resource name of the backend.

Format:

'projects/{project}/locations/{locationId}/backends/{backendId}'.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `System-assigned, unique identifier.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the backend was last updated.`,
			},
			"uri": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The primary URI to communicate with the backend.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceFirebaseAppHostingBackendCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	servingLocalityProp, err := expandFirebaseAppHostingBackendServingLocality(d.Get("serving_locality"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("serving_locality"); !tpgresource.IsEmptyValue(reflect.ValueOf(servingLocalityProp)) && (ok || !reflect.DeepEqual(v, servingLocalityProp)) {
		obj["servingLocality"] = servingLocalityProp
	}
	appIdProp, err := expandFirebaseAppHostingBackendAppId(d.Get("app_id"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("app_id"); !tpgresource.IsEmptyValue(reflect.ValueOf(appIdProp)) && (ok || !reflect.DeepEqual(v, appIdProp)) {
		obj["appId"] = appIdProp
	}
	serviceAccountProp, err := expandFirebaseAppHostingBackendServiceAccount(d.Get("service_account"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("service_account"); !tpgresource.IsEmptyValue(reflect.ValueOf(serviceAccountProp)) && (ok || !reflect.DeepEqual(v, serviceAccountProp)) {
		obj["serviceAccount"] = serviceAccountProp
	}
	displayNameProp, err := expandFirebaseAppHostingBackendDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	environmentProp, err := expandFirebaseAppHostingBackendEnvironment(d.Get("environment"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("environment"); !tpgresource.IsEmptyValue(reflect.ValueOf(environmentProp)) && (ok || !reflect.DeepEqual(v, environmentProp)) {
		obj["environment"] = environmentProp
	}
	etagProp, err := expandFirebaseAppHostingBackendEtag(d.Get("etag"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("etag"); !tpgresource.IsEmptyValue(reflect.ValueOf(etagProp)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}
	codebaseProp, err := expandFirebaseAppHostingBackendCodebase(d.Get("codebase"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("codebase"); !tpgresource.IsEmptyValue(reflect.ValueOf(codebaseProp)) && (ok || !reflect.DeepEqual(v, codebaseProp)) {
		obj["codebase"] = codebaseProp
	}
	annotationsProp, err := expandFirebaseAppHostingBackendEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	labelsProp, err := expandFirebaseAppHostingBackendEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{FirebaseAppHostingBasePath}}projects/{{project}}/locations/{{location}}/backends?backendId={{backend_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Backend: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Backend: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Backend: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/backends/{{backend_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = FirebaseAppHostingOperationWaitTime(
		config, res, project, "Creating Backend", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create Backend: %s", err)
	}

	log.Printf("[DEBUG] Finished creating Backend %q: %#v", d.Id(), res)

	return resourceFirebaseAppHostingBackendRead(d, meta)
}

func resourceFirebaseAppHostingBackendRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{FirebaseAppHostingBasePath}}projects/{{project}}/locations/{{location}}/backends/{{backend_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Backend: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("FirebaseAppHostingBackend %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}

	if err := d.Set("serving_locality", flattenFirebaseAppHostingBackendServingLocality(res["servingLocality"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("app_id", flattenFirebaseAppHostingBackendAppId(res["appId"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("service_account", flattenFirebaseAppHostingBackendServiceAccount(res["serviceAccount"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("annotations", flattenFirebaseAppHostingBackendAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("display_name", flattenFirebaseAppHostingBackendDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("environment", flattenFirebaseAppHostingBackendEnvironment(res["environment"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("labels", flattenFirebaseAppHostingBackendLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("etag", flattenFirebaseAppHostingBackendEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("name", flattenFirebaseAppHostingBackendName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("create_time", flattenFirebaseAppHostingBackendCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("delete_time", flattenFirebaseAppHostingBackendDeleteTime(res["deleteTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("update_time", flattenFirebaseAppHostingBackendUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("uid", flattenFirebaseAppHostingBackendUid(res["uid"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("uri", flattenFirebaseAppHostingBackendUri(res["uri"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("codebase", flattenFirebaseAppHostingBackendCodebase(res["codebase"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("managed_resources", flattenFirebaseAppHostingBackendManagedResources(res["managedResources"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("effective_annotations", flattenFirebaseAppHostingBackendEffectiveAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("terraform_labels", flattenFirebaseAppHostingBackendTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}
	if err := d.Set("effective_labels", flattenFirebaseAppHostingBackendEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading Backend: %s", err)
	}

	return nil
}

func resourceFirebaseAppHostingBackendUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Backend: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	appIdProp, err := expandFirebaseAppHostingBackendAppId(d.Get("app_id"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("app_id"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, appIdProp)) {
		obj["appId"] = appIdProp
	}
	serviceAccountProp, err := expandFirebaseAppHostingBackendServiceAccount(d.Get("service_account"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("service_account"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, serviceAccountProp)) {
		obj["serviceAccount"] = serviceAccountProp
	}
	displayNameProp, err := expandFirebaseAppHostingBackendDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	environmentProp, err := expandFirebaseAppHostingBackendEnvironment(d.Get("environment"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("environment"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, environmentProp)) {
		obj["environment"] = environmentProp
	}
	etagProp, err := expandFirebaseAppHostingBackendEtag(d.Get("etag"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("etag"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}
	codebaseProp, err := expandFirebaseAppHostingBackendCodebase(d.Get("codebase"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("codebase"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, codebaseProp)) {
		obj["codebase"] = codebaseProp
	}
	annotationsProp, err := expandFirebaseAppHostingBackendEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	labelsProp, err := expandFirebaseAppHostingBackendEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{FirebaseAppHostingBasePath}}projects/{{project}}/locations/{{location}}/backends/{{backend_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Backend %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("app_id") {
		updateMask = append(updateMask, "appId")
	}

	if d.HasChange("service_account") {
		updateMask = append(updateMask, "serviceAccount")
	}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("environment") {
		updateMask = append(updateMask, "environment")
	}

	if d.HasChange("etag") {
		updateMask = append(updateMask, "etag")
	}

	if d.HasChange("codebase") {
		updateMask = append(updateMask, "codebase")
	}

	if d.HasChange("effective_annotations") {
		updateMask = append(updateMask, "annotations")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Backend %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Backend %q: %#v", d.Id(), res)
		}

		err = FirebaseAppHostingOperationWaitTime(
			config, res, project, "Updating Backend", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceFirebaseAppHostingBackendRead(d, meta)
}

func resourceFirebaseAppHostingBackendDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Backend: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{FirebaseAppHostingBasePath}}projects/{{project}}/locations/{{location}}/backends/{{backend_id}}?force=true")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting Backend %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Backend")
	}

	err = FirebaseAppHostingOperationWaitTime(
		config, res, project, "Deleting Backend", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting Backend %q: %#v", d.Id(), res)
	return nil
}

func resourceFirebaseAppHostingBackendImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/backends/(?P<backend_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<backend_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<backend_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/backends/{{backend_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenFirebaseAppHostingBackendServingLocality(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendAppId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("annotations"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenFirebaseAppHostingBackendDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendEnvironment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenFirebaseAppHostingBackendEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendDeleteTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendCodebase(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["repository"] =
		flattenFirebaseAppHostingBackendCodebaseRepository(original["repository"], d, config)
	transformed["root_directory"] =
		flattenFirebaseAppHostingBackendCodebaseRootDirectory(original["rootDirectory"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseAppHostingBackendCodebaseRepository(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendCodebaseRootDirectory(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendManagedResources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"run_service": flattenFirebaseAppHostingBackendManagedResourcesRunService(original["runService"], d, config),
		})
	}
	return transformed
}
func flattenFirebaseAppHostingBackendManagedResourcesRunService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service"] =
		flattenFirebaseAppHostingBackendManagedResourcesRunServiceService(original["service"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseAppHostingBackendManagedResourcesRunServiceService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendEffectiveAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingBackendTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenFirebaseAppHostingBackendEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandFirebaseAppHostingBackendServingLocality(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBackendAppId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBackendServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBackendDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBackendEnvironment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBackendEtag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBackendCodebase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRepository, err := expandFirebaseAppHostingBackendCodebaseRepository(original["repository"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRepository); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["repository"] = transformedRepository
	}

	transformedRootDirectory, err := expandFirebaseAppHostingBackendCodebaseRootDirectory(original["root_directory"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRootDirectory); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rootDirectory"] = transformedRootDirectory
	}

	return transformed, nil
}

func expandFirebaseAppHostingBackendCodebaseRepository(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBackendCodebaseRootDirectory(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBackendEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandFirebaseAppHostingBackendEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
