// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/firebaseapphosting/Traffic.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package firebaseapphosting

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceFirebaseAppHostingTraffic() *schema.Resource {
	return &schema.Resource{
		Create: resourceFirebaseAppHostingTrafficCreate,
		Read:   resourceFirebaseAppHostingTrafficRead,
		Update: resourceFirebaseAppHostingTrafficUpdate,
		Delete: resourceFirebaseAppHostingTrafficDelete,

		Importer: &schema.ResourceImporter{
			State: resourceFirebaseAppHostingTrafficImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"backend": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Id of the backend that this Traffic config applies to`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location the Backend that this Traffic config applies to`,
			},
			"rollout_policy": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `The policy for how builds and rollouts are triggered and rolled out.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"codebase_branch": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Specifies a branch that triggers a new build to be started with this
policy. If not set, no automatic rollouts will happen.`,
						},
						"disabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `A flag that, if true, prevents rollouts from being created via this RolloutPolicy.`,
							Default:     false,
						},
						"disabled_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `If disabled is set, the time at which the rollouts were disabled.`,
						},
					},
				},
				ExactlyOneOf: []string{"rollout_policy", "target"},
			},
			"target": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Set to manually control the desired traffic for the backend. This will
cause current to eventually match this value. The percentages must add
up to 100.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"splits": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `A list of traffic splits that together represent where traffic is being routed.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"build": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The build that traffic is being routed to.`,
									},
									"percent": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: `The percentage of traffic to send to the build. Currently must be 100 or 0.`,
									},
								},
							},
						},
					},
				},
				ExactlyOneOf: []string{"rollout_policy", "target"},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the backend was created.`,
			},
			"current": {
				Type:     schema.TypeList,
				Computed: true,
				Description: `Current state of traffic allocation for the backend.
When setting 'target', this field may differ for some time until the desired state is reached.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"splits": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `A list of traffic splits that together represent where traffic is being routed.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"build": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The build that traffic is being routed to.`,
									},
									"percent": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The percentage of traffic to send to the build. Currently must be 100 or 0.`,
									},
								},
							},
						},
					},
				},
			},
			"delete_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the backend was deleted.`,
			},
			"etag": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Server-computed checksum based on other values; may be sent
on update or delete to ensure operation is done on expected resource.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The resource name of the backend traffic config

Format:

'projects/{project}/locations/{locationId}/backends/{backendId}/traffic'.`,
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `System-assigned, unique identifier.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the backend was last updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceFirebaseAppHostingTrafficCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	etagProp, err := expandFirebaseAppHostingTrafficEtag(d.Get("etag"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("etag"); !tpgresource.IsEmptyValue(reflect.ValueOf(etagProp)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}
	targetProp, err := expandFirebaseAppHostingTrafficTarget(d.Get("target"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("target"); !tpgresource.IsEmptyValue(reflect.ValueOf(targetProp)) && (ok || !reflect.DeepEqual(v, targetProp)) {
		obj["target"] = targetProp
	}
	rolloutPolicyProp, err := expandFirebaseAppHostingTrafficRolloutPolicy(d.Get("rollout_policy"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rollout_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(rolloutPolicyProp)) && (ok || !reflect.DeepEqual(v, rolloutPolicyProp)) {
		obj["rolloutPolicy"] = rolloutPolicyProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{FirebaseAppHostingBasePath}}projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic?update_mask=*")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Traffic: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Traffic: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Traffic: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = FirebaseAppHostingOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating Traffic", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create Traffic: %s", err)
	}

	if err := d.Set("name", flattenFirebaseAppHostingTrafficName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Traffic %q: %#v", d.Id(), res)

	return resourceFirebaseAppHostingTrafficRead(d, meta)
}

func resourceFirebaseAppHostingTrafficRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{FirebaseAppHostingBasePath}}projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Traffic: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("FirebaseAppHostingTraffic %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}

	if err := d.Set("etag", flattenFirebaseAppHostingTrafficEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}
	if err := d.Set("uid", flattenFirebaseAppHostingTrafficUid(res["uid"], d, config)); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}
	if err := d.Set("create_time", flattenFirebaseAppHostingTrafficCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}
	if err := d.Set("update_time", flattenFirebaseAppHostingTrafficUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}
	if err := d.Set("delete_time", flattenFirebaseAppHostingTrafficDeleteTime(res["deleteTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}
	if err := d.Set("name", flattenFirebaseAppHostingTrafficName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}
	if err := d.Set("current", flattenFirebaseAppHostingTrafficCurrent(res["current"], d, config)); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}
	if err := d.Set("target", flattenFirebaseAppHostingTrafficTarget(res["target"], d, config)); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}
	if err := d.Set("rollout_policy", flattenFirebaseAppHostingTrafficRolloutPolicy(res["rolloutPolicy"], d, config)); err != nil {
		return fmt.Errorf("Error reading Traffic: %s", err)
	}

	return nil
}

func resourceFirebaseAppHostingTrafficUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Traffic: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	etagProp, err := expandFirebaseAppHostingTrafficEtag(d.Get("etag"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("etag"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}
	targetProp, err := expandFirebaseAppHostingTrafficTarget(d.Get("target"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("target"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, targetProp)) {
		obj["target"] = targetProp
	}
	rolloutPolicyProp, err := expandFirebaseAppHostingTrafficRolloutPolicy(d.Get("rollout_policy"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rollout_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, rolloutPolicyProp)) {
		obj["rolloutPolicy"] = rolloutPolicyProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{FirebaseAppHostingBasePath}}projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Traffic %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("etag") {
		updateMask = append(updateMask, "etag")
	}

	if d.HasChange("target") {
		updateMask = append(updateMask, "target")
	}

	if d.HasChange("rollout_policy") {
		updateMask = append(updateMask, "rolloutPolicy")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Traffic %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Traffic %q: %#v", d.Id(), res)
		}

		err = FirebaseAppHostingOperationWaitTime(
			config, res, project, "Updating Traffic", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceFirebaseAppHostingTrafficRead(d, meta)
}

func resourceFirebaseAppHostingTrafficDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] FirebaseAppHosting Traffic resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceFirebaseAppHostingTrafficImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/backends/(?P<backend>[^/]+)/traffic$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<backend>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<backend>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenFirebaseAppHostingTrafficEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficDeleteTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficCurrent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["splits"] =
		flattenFirebaseAppHostingTrafficCurrentSplits(original["splits"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseAppHostingTrafficCurrentSplits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"build":   flattenFirebaseAppHostingTrafficCurrentSplitsBuild(original["build"], d, config),
			"percent": flattenFirebaseAppHostingTrafficCurrentSplitsPercent(original["percent"], d, config),
		})
	}
	return transformed
}
func flattenFirebaseAppHostingTrafficCurrentSplitsBuild(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficCurrentSplitsPercent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenFirebaseAppHostingTrafficTarget(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["splits"] =
		flattenFirebaseAppHostingTrafficTargetSplits(original["splits"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseAppHostingTrafficTargetSplits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"build":   flattenFirebaseAppHostingTrafficTargetSplitsBuild(original["build"], d, config),
			"percent": flattenFirebaseAppHostingTrafficTargetSplitsPercent(original["percent"], d, config),
		})
	}
	return transformed
}
func flattenFirebaseAppHostingTrafficTargetSplitsBuild(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficTargetSplitsPercent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenFirebaseAppHostingTrafficRolloutPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["disabled"] =
		flattenFirebaseAppHostingTrafficRolloutPolicyDisabled(original["disabled"], d, config)
	transformed["disabled_time"] =
		flattenFirebaseAppHostingTrafficRolloutPolicyDisabledTime(original["disabledTime"], d, config)
	transformed["codebase_branch"] =
		flattenFirebaseAppHostingTrafficRolloutPolicyCodebaseBranch(original["codebaseBranch"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseAppHostingTrafficRolloutPolicyDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficRolloutPolicyDisabledTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseAppHostingTrafficRolloutPolicyCodebaseBranch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandFirebaseAppHostingTrafficEtag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficTarget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSplits, err := expandFirebaseAppHostingTrafficTargetSplits(original["splits"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSplits); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["splits"] = transformedSplits
	}

	return transformed, nil
}

func expandFirebaseAppHostingTrafficTargetSplits(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedBuild, err := expandFirebaseAppHostingTrafficTargetSplitsBuild(original["build"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBuild); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["build"] = transformedBuild
		}

		transformedPercent, err := expandFirebaseAppHostingTrafficTargetSplitsPercent(original["percent"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPercent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["percent"] = transformedPercent
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandFirebaseAppHostingTrafficTargetSplitsBuild(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficTargetSplitsPercent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficRolloutPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDisabled, err := expandFirebaseAppHostingTrafficRolloutPolicyDisabled(original["disabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disabled"] = transformedDisabled
	}

	transformedDisabledTime, err := expandFirebaseAppHostingTrafficRolloutPolicyDisabledTime(original["disabled_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisabledTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disabledTime"] = transformedDisabledTime
	}

	transformedCodebaseBranch, err := expandFirebaseAppHostingTrafficRolloutPolicyCodebaseBranch(original["codebase_branch"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCodebaseBranch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["codebaseBranch"] = transformedCodebaseBranch
	}

	return transformed, nil
}

func expandFirebaseAppHostingTrafficRolloutPolicyDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficRolloutPolicyDisabledTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficRolloutPolicyCodebaseBranch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
