// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firebaseapphosting_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccFirebaseAppHostingDomain_firebaseAppHostingDomainMinimalExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":     envvar.GetTestProjectFromEnv(),
		"domain_id":      "my-domain-m.com",
		"service_act_id": "tf-test-domain-m",
		"random_suffix":  acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirebaseAppHostingDomainDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseAppHostingDomain_firebaseAppHostingDomainMinimalExample(context),
			},
			{
				ResourceName:            "google_firebase_app_hosting_domain.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"backend", "domain_id", "location"},
			},
		},
	})
}

func testAccFirebaseAppHostingDomain_firebaseAppHostingDomainMinimalExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_app_hosting_domain" "example" {
  project          = google_firebase_app_hosting_backend.example.project
  location         = google_firebase_app_hosting_backend.example.location
  backend          = google_firebase_app_hosting_backend.example.backend_id
  domain_id        = "%{domain_id}"
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "%{project_id}"

  # Choose the region closest to your users
  location         = "us-central1"
  backend_id       = "tf-test-domain-mini%{random_suffix}"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email
}

resource "google_service_account" "service_account" {
  project = "%{project_id}"

  # Must be firebase-app-hosting-compute
  account_id                   = "%{service_act_id}"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}
`, context)
}

func TestAccFirebaseAppHostingDomain_firebaseAppHostingDomainFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":     envvar.GetTestProjectFromEnv(),
		"domain_id":      "my-domain.com",
		"service_act_id": "tf-test-domain",
		"random_suffix":  acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckFirebaseAppHostingDomainDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseAppHostingDomain_firebaseAppHostingDomainFullExample(context),
			},
			{
				ResourceName:            "google_firebase_app_hosting_domain.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"backend", "domain_id", "location"},
			},
		},
	})
}

func testAccFirebaseAppHostingDomain_firebaseAppHostingDomainFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_app_hosting_domain" "example" {
  project          = google_firebase_app_hosting_backend.example.project
  location         = google_firebase_app_hosting_backend.example.location
  backend          = google_firebase_app_hosting_backend.example.backend_id
  domain_id        = "%{domain_id}"

  serve {
    redirect {
      uri = "google.com"
      status = "302"
    }
  }
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "%{project_id}"

  # Choose the region closest to your users
  location         = "us-central1"
  backend_id       = "tf-test-domain-full%{random_suffix}"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email
}

resource "google_service_account" "service_account" {
  project = "%{project_id}"

  # Must be firebase-app-hosting-compute
  account_id                   = "%{service_act_id}"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}
`, context)
}

func testAccCheckFirebaseAppHostingDomainDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_firebase_app_hosting_domain" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{FirebaseAppHostingBasePath}}projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("FirebaseAppHostingDomain still exists at %s", url)
			}
		}

		return nil
	}
}
