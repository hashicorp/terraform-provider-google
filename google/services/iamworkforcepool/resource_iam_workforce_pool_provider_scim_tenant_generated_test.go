// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package iamworkforcepool_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccIAMWorkforcePoolWorkforcePoolProviderScimTenant_iamWorkforcePoolProviderScimTenantBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckIAMWorkforcePoolWorkforcePoolProviderScimTenantDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccIAMWorkforcePoolWorkforcePoolProviderScimTenant_iamWorkforcePoolProviderScimTenantBasicExample(context),
			},
			{
				ResourceName:            "google_iam_workforce_pool_provider_scim_tenant.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "provider_id", "scim_tenant_id", "workforce_pool_id"},
			},
		},
	})
}

func testAccIAMWorkforcePoolWorkforcePoolProviderScimTenant_iamWorkforcePoolProviderScimTenantBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_iam_workforce_pool" "pool" {
  workforce_pool_id = "tf-test-example-pool%{random_suffix}"
  parent            = "organizations/%{org_id}"
  location          = "global"
}

resource "google_iam_workforce_pool_provider" "provider" {
    location = "global"
    workforce_pool_id = google_iam_workforce_pool.pool.workforce_pool_id
    provider_id = "tf-test-example-prvdr%{random_suffix}"
    attribute_mapping   = {
    "google.subject"  = "assertion.sub"
    }
    oidc {
      issuer_uri        = "https://accounts.thirdparty.com"
      client_id         = "client-id"
      client_secret {
        value {
          plain_text = "client-secret"
        }
      }
      web_sso_config {
        response_type             = "CODE"
        assertion_claims_behavior = "MERGE_USER_INFO_OVER_ID_TOKEN_CLAIMS"
        additional_scopes         = ["groups", "roles"]
      }
    }
    display_name        = "Display name"
    description         = "A sample OIDC workforce pool provider."
    disabled            = false
    attribute_condition = "true"
}

resource "google_iam_workforce_pool_provider_scim_tenant" "example" {
  location            = "global"
  workforce_pool_id   = google_iam_workforce_pool.pool.workforce_pool_id
  provider_id         = google_iam_workforce_pool_provider.provider.provider_id
  scim_tenant_id      = "example-scim-tenant"
  display_name        = "Example SCIM Tenant"
  description         = "A basic SCIM tenant for IAM Workforce Pool Provider"
  # state is output only, not settable
}

  
`, context)
}

func testAccCheckIAMWorkforcePoolWorkforcePoolProviderScimTenantDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_iam_workforce_pool_provider_scim_tenant" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{IAMWorkforcePoolBasePath}}locations/{{location}}/workforcePools/{{workforce_pool_id}}/providers/{{provider_id}}/scimTenants/{{scim_tenant_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("IAMWorkforcePoolWorkforcePoolProviderScimTenant still exists at %s", url)
			}
		}

		return nil
	}
}
