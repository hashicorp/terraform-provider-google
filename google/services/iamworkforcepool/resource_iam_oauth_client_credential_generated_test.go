// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package iamworkforcepool_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"google.golang.org/api/googleapi"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccIAMWorkforcePoolOauthClientCredential_iamOauthClientCredentialFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckIAMWorkforcePoolOauthClientCredentialDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccIAMWorkforcePoolOauthClientCredential_iamOauthClientCredentialFullExample(context),
			},
			{
				ResourceName:            "google_iam_oauth_client_credential.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "oauth_client_credential_id", "oauthclient"},
			},
		},
	})
}

func testAccIAMWorkforcePoolOauthClientCredential_iamOauthClientCredentialFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_iam_oauth_client" "oauth_client" {
  oauth_client_id           = "tf-test-example-client-id%{random_suffix}"
  location                  = "global"
  allowed_grant_types       = ["AUTHORIZATION_CODE_GRANT"]
  allowed_redirect_uris     = ["https://www.example.com"]
  allowed_scopes            = ["https://www.googleapis.com/auth/cloud-platform"]
  client_type               = "CONFIDENTIAL_CLIENT"
}

resource "google_iam_oauth_client_credential" "example" {
  oauthclient                   = google_iam_oauth_client.oauth_client.oauth_client_id
  location                      = google_iam_oauth_client.oauth_client.location
  oauth_client_credential_id    = "tf-test-cred-id%{random_suffix}"
  disabled                      = true
  display_name                  = "Display Name of credential"
}
`, context)
}

func testAccCheckIAMWorkforcePoolOauthClientCredentialDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_iam_oauth_client_credential" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{IAMWorkforcePoolBasePath}}projects/{{project}}/locations/{{location}}/oauthClients/{{oauthclient}}/credentials/{{oauth_client_credential_id}}")
			if err != nil {
				return err
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err != nil {
				e := err.(*googleapi.Error)
				// credential or parent client is expected to be deleted.
				if e.Code == 404 {
					return nil
				}

				// Return err in all other cases
				return err
			}

			return fmt.Errorf("IAMOAuthClientCredential still exists at %s", url)
		}

		return nil
	}
}
