// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/vertexai/ReasoningEngine.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package vertexai

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceVertexAIReasoningEngine() *schema.Resource {
	return &schema.Resource{
		Create: resourceVertexAIReasoningEngineCreate,
		Read:   resourceVertexAIReasoningEngineRead,
		Update: resourceVertexAIReasoningEngineUpdate,
		Delete: resourceVertexAIReasoningEngineDelete,

		Importer: &schema.ResourceImporter{
			State: resourceVertexAIReasoningEngineImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The display name of the ReasoningEngine.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The description of the ReasoningEngine.`,
			},
			"encryption_spec": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Description: `Optional. Customer-managed encryption key spec for a ReasoningEngine.
If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"kms_key_name": {
							Type:     schema.TypeString,
							Required: true,
							Description: `Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key.
The key needs to be in the same region as where the compute resource is created.`,
						},
					},
				},
			},
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `The region of the reasoning engine. eg us-central1`,
			},
			"spec": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Optional. Configurations of the ReasoningEngine.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"agent_framework": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Optional. The OSS agent framework used to develop the agent.`,
						},
						"class_methods": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: validation.StringIsJSON,
							StateFunc:    func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s },
							Description:  `Optional. Declarations for object class methods in OpenAPI specification format.`,
						},
						"deployment_spec": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Optional. The specification of a Reasoning Engine deployment.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"env": {
										Type:        schema.TypeSet,
										Optional:    true,
										Description: `Optional. Environment variables to be set with the Reasoning Engine deployment.`,
										Elem:        vertexaiReasoningEngineSpecDeploymentSpecEnvSchema(),
										// Default schema.HashSchema is used.
									},
									"secret_env": {
										Type:        schema.TypeSet,
										Optional:    true,
										Description: `Optional. Environment variables where the value is a secret in Cloud Secret Manager. To use this feature, add 'Secret Manager Secret Accessor' role (roles/secretmanager.secretAccessor) to AI Platform Reasoning Engine service Agent.`,
										Elem:        vertexaiReasoningEngineSpecDeploymentSpecSecretEnvSchema(),
										// Default schema.HashSchema is used.
									},
								},
							},
						},
						"package_spec": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Optional. User provided package spec of the ReasoningEngine.
Ignored when users directly specify a deployment image through
deploymentSpec.first_party_image_override, but keeping the
field_behavior to avoid introducing breaking changes.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"dependency_files_gcs_uri": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Optional. The Cloud Storage URI of the dependency files in tar.gz format.`,
									},
									"pickle_object_gcs_uri": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Optional. The Cloud Storage URI of the pickled python object.`,
									},
									"python_version": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Optional. The Python version.`,
									},
									"requirements_gcs_uri": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Optional. The Cloud Storage URI of the requirements.txt file`,
									},
								},
							},
						},
						"service_account": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Optional. The service account that the Reasoning Engine artifact runs as.
It should have "roles/storage.objectViewer" for reading the user project's
Cloud Storage and "roles/aiplatform.user" for using Vertex extensions.
If not specified, the Vertex AI Reasoning Engine service Agent in the project will be used.`,
						},
					},
				},
			},
			"create_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The timestamp of when the Index was created in RFC3339 UTC "Zulu" format,
with nanosecond resolution and up to nine fractional digits.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The generated name of the ReasoningEngine, in the format
'projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}'`,
			},
			"update_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format,
with nanosecond resolution and up to nine fractional digits.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func vertexaiReasoningEngineSpecDeploymentSpecEnvSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The name of the environment variable. Must be a valid C identifier.`,
			},
			"value": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.`,
			},
		},
	}
}

func vertexaiReasoningEngineSpecDeploymentSpecSecretEnvSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The name of the environment variable. Must be a valid C identifier.`,
			},
			"secret_ref": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Reference to a secret stored in the Cloud Secret Manager that will provide the value for this environment variable.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"secret": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The name of the secret in Cloud Secret Manager. Format: {secret_name}.`,
						},
						"version": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The Cloud Secret Manager secret version. Can be 'latest' for the latest version, an integer for a specific version, or a version alias.`,
						},
					},
				},
			},
		},
	}
}

func resourceVertexAIReasoningEngineCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandVertexAIReasoningEngineDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandVertexAIReasoningEngineDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	encryptionSpecProp, err := expandVertexAIReasoningEngineEncryptionSpec(d.Get("encryption_spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("encryption_spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(encryptionSpecProp)) && (ok || !reflect.DeepEqual(v, encryptionSpecProp)) {
		obj["encryptionSpec"] = encryptionSpecProp
	}
	specProp, err := expandVertexAIReasoningEngineSpec(d.Get("spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(specProp)) && (ok || !reflect.DeepEqual(v, specProp)) {
		obj["spec"] = specProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}projects/{{project}}/locations/{{region}}/reasoningEngines")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new ReasoningEngine: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ReasoningEngine: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating ReasoningEngine: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = VertexAIOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating ReasoningEngine", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create ReasoningEngine: %s", err)
	}

	if err := d.Set("name", flattenVertexAIReasoningEngineName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating ReasoningEngine %q: %#v", d.Id(), res)

	return resourceVertexAIReasoningEngineRead(d, meta)
}

func resourceVertexAIReasoningEngineRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ReasoningEngine: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("VertexAIReasoningEngine %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading ReasoningEngine: %s", err)
	}

	if err := d.Set("name", flattenVertexAIReasoningEngineName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading ReasoningEngine: %s", err)
	}
	if err := d.Set("display_name", flattenVertexAIReasoningEngineDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading ReasoningEngine: %s", err)
	}
	if err := d.Set("description", flattenVertexAIReasoningEngineDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading ReasoningEngine: %s", err)
	}
	if err := d.Set("create_time", flattenVertexAIReasoningEngineCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading ReasoningEngine: %s", err)
	}
	if err := d.Set("update_time", flattenVertexAIReasoningEngineUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading ReasoningEngine: %s", err)
	}
	if err := d.Set("encryption_spec", flattenVertexAIReasoningEngineEncryptionSpec(res["encryptionSpec"], d, config)); err != nil {
		return fmt.Errorf("Error reading ReasoningEngine: %s", err)
	}
	if err := d.Set("spec", flattenVertexAIReasoningEngineSpec(res["spec"], d, config)); err != nil {
		return fmt.Errorf("Error reading ReasoningEngine: %s", err)
	}

	return nil
}

func resourceVertexAIReasoningEngineUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ReasoningEngine: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandVertexAIReasoningEngineDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandVertexAIReasoningEngineDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	specProp, err := expandVertexAIReasoningEngineSpec(d.Get("spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, specProp)) {
		obj["spec"] = specProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating ReasoningEngine %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("spec") {
		updateMask = append(updateMask, "spec")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating ReasoningEngine %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating ReasoningEngine %q: %#v", d.Id(), res)
		}

		err = VertexAIOperationWaitTime(
			config, res, project, "Updating ReasoningEngine", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceVertexAIReasoningEngineRead(d, meta)
}

func resourceVertexAIReasoningEngineDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ReasoningEngine: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting ReasoningEngine %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "ReasoningEngine")
	}

	err = VertexAIOperationWaitTime(
		config, res, project, "Deleting ReasoningEngine", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting ReasoningEngine %q: %#v", d.Id(), res)
	return nil
}

func resourceVertexAIReasoningEngineImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<region>[^/]+)/reasoningEngines/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<region>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<region>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenVertexAIReasoningEngineName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.GetResourceNameFromSelfLink(v.(string))
}

func flattenVertexAIReasoningEngineDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineEncryptionSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["kms_key_name"] =
		flattenVertexAIReasoningEngineEncryptionSpecKmsKeyName(original["kmsKeyName"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIReasoningEngineEncryptionSpecKmsKeyName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["agent_framework"] =
		flattenVertexAIReasoningEngineSpecAgentFramework(original["agentFramework"], d, config)
	transformed["class_methods"] =
		flattenVertexAIReasoningEngineSpecClassMethods(original["classMethods"], d, config)
	transformed["deployment_spec"] =
		flattenVertexAIReasoningEngineSpecDeploymentSpec(original["deploymentSpec"], d, config)
	transformed["package_spec"] =
		flattenVertexAIReasoningEngineSpecPackageSpec(original["packageSpec"], d, config)
	transformed["service_account"] =
		flattenVertexAIReasoningEngineSpecServiceAccount(original["serviceAccount"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIReasoningEngineSpecAgentFramework(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecClassMethods(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenVertexAIReasoningEngineSpecDeploymentSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["env"] =
		flattenVertexAIReasoningEngineSpecDeploymentSpecEnv(original["env"], d, config)
	transformed["secret_env"] =
		flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnv(original["secretEnv"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIReasoningEngineSpecDeploymentSpecEnv(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := schema.NewSet(schema.HashResource(vertexaiReasoningEngineSpecDeploymentSpecEnvSchema()), []interface{}{})
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed.Add(map[string]interface{}{
			"name":  flattenVertexAIReasoningEngineSpecDeploymentSpecEnvName(original["name"], d, config),
			"value": flattenVertexAIReasoningEngineSpecDeploymentSpecEnvValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenVertexAIReasoningEngineSpecDeploymentSpecEnvName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecDeploymentSpecEnvValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnv(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := schema.NewSet(schema.HashResource(vertexaiReasoningEngineSpecDeploymentSpecSecretEnvSchema()), []interface{}{})
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed.Add(map[string]interface{}{
			"name":       flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnvName(original["name"], d, config),
			"secret_ref": flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRef(original["secretRef"], d, config),
		})
	}
	return transformed
}
func flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnvName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRef(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret"] =
		flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRefSecret(original["secret"], d, config)
	transformed["version"] =
		flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRefVersion(original["version"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRefSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRefVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecPackageSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["dependency_files_gcs_uri"] =
		flattenVertexAIReasoningEngineSpecPackageSpecDependencyFilesGcsUri(original["dependencyFilesGcsUri"], d, config)
	transformed["pickle_object_gcs_uri"] =
		flattenVertexAIReasoningEngineSpecPackageSpecPickleObjectGcsUri(original["pickleObjectGcsUri"], d, config)
	transformed["python_version"] =
		flattenVertexAIReasoningEngineSpecPackageSpecPythonVersion(original["pythonVersion"], d, config)
	transformed["requirements_gcs_uri"] =
		flattenVertexAIReasoningEngineSpecPackageSpecRequirementsGcsUri(original["requirementsGcsUri"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIReasoningEngineSpecPackageSpecDependencyFilesGcsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecPackageSpecPickleObjectGcsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecPackageSpecPythonVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecPackageSpecRequirementsGcsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIReasoningEngineSpecServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandVertexAIReasoningEngineDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineEncryptionSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKmsKeyName, err := expandVertexAIReasoningEngineEncryptionSpecKmsKeyName(original["kms_key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyName"] = transformedKmsKeyName
	}

	return transformed, nil
}

func expandVertexAIReasoningEngineEncryptionSpecKmsKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgentFramework, err := expandVertexAIReasoningEngineSpecAgentFramework(original["agent_framework"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgentFramework); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agentFramework"] = transformedAgentFramework
	}

	transformedClassMethods, err := expandVertexAIReasoningEngineSpecClassMethods(original["class_methods"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClassMethods); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["classMethods"] = transformedClassMethods
	}

	transformedDeploymentSpec, err := expandVertexAIReasoningEngineSpecDeploymentSpec(original["deployment_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeploymentSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deploymentSpec"] = transformedDeploymentSpec
	}

	transformedPackageSpec, err := expandVertexAIReasoningEngineSpecPackageSpec(original["package_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPackageSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["packageSpec"] = transformedPackageSpec
	}

	transformedServiceAccount, err := expandVertexAIReasoningEngineSpecServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	return transformed, nil
}

func expandVertexAIReasoningEngineSpecAgentFramework(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecClassMethods(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandVertexAIReasoningEngineSpecDeploymentSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnv, err := expandVertexAIReasoningEngineSpecDeploymentSpecEnv(original["env"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnv); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["env"] = transformedEnv
	}

	transformedSecretEnv, err := expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnv(original["secret_env"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretEnv); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretEnv"] = transformedSecretEnv
	}

	return transformed, nil
}

func expandVertexAIReasoningEngineSpecDeploymentSpecEnv(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandVertexAIReasoningEngineSpecDeploymentSpecEnvName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandVertexAIReasoningEngineSpecDeploymentSpecEnvValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandVertexAIReasoningEngineSpecDeploymentSpecEnvName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecDeploymentSpecEnvValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnv(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnvName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedSecretRef, err := expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRef(original["secret_ref"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSecretRef); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["secretRef"] = transformedSecretRef
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnvName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRef(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecret, err := expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRefSecret(original["secret"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecret); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secret"] = transformedSecret
	}

	transformedVersion, err := expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRefVersion(original["version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["version"] = transformedVersion
	}

	return transformed, nil
}

func expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRefSecret(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecDeploymentSpecSecretEnvSecretRefVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecPackageSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDependencyFilesGcsUri, err := expandVertexAIReasoningEngineSpecPackageSpecDependencyFilesGcsUri(original["dependency_files_gcs_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDependencyFilesGcsUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dependencyFilesGcsUri"] = transformedDependencyFilesGcsUri
	}

	transformedPickleObjectGcsUri, err := expandVertexAIReasoningEngineSpecPackageSpecPickleObjectGcsUri(original["pickle_object_gcs_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPickleObjectGcsUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pickleObjectGcsUri"] = transformedPickleObjectGcsUri
	}

	transformedPythonVersion, err := expandVertexAIReasoningEngineSpecPackageSpecPythonVersion(original["python_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPythonVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pythonVersion"] = transformedPythonVersion
	}

	transformedRequirementsGcsUri, err := expandVertexAIReasoningEngineSpecPackageSpecRequirementsGcsUri(original["requirements_gcs_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequirementsGcsUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["requirementsGcsUri"] = transformedRequirementsGcsUri
	}

	return transformed, nil
}

func expandVertexAIReasoningEngineSpecPackageSpecDependencyFilesGcsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecPackageSpecPickleObjectGcsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecPackageSpecPythonVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecPackageSpecRequirementsGcsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIReasoningEngineSpecServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
