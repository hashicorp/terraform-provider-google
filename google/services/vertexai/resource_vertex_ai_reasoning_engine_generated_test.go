// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package vertexai_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccVertexAIReasoningEngine_vertexAiReasoningEngineBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIReasoningEngineDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIReasoningEngine_vertexAiReasoningEngineBasicExample(context),
			},
			{
				ResourceName:            "google_vertex_ai_reasoning_engine.reasoning_engine",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"region"},
			},
		},
	})
}

func testAccVertexAIReasoningEngine_vertexAiReasoningEngineBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_reasoning_engine" "reasoning_engine" {
  display_name = "tf-test-reasoning-engine%{random_suffix}"
  description  = "A basic reasoning engine"
  region       = "us-central1"
}

data "google_project" "project" {
}
`, context)
}

func TestAccVertexAIReasoningEngine_vertexAiReasoningEngineFullExample(t *testing.T) {
	t.Parallel()
	acctest.BootstrapIamMembers(t, []acctest.IamMember{
		{
			Member: "serviceAccount:service-{project_number}@gcp-sa-aiplatform.iam.gserviceaccount.com",
			Role:   "roles/cloudkms.cryptoKeyEncrypterDecrypter",
		},
	})

	context := map[string]interface{}{
		"kms_key_name":  acctest.BootstrapKMSKeyWithPurposeInLocationAndName(t, "ENCRYPT_DECRYPT", "us-central1", "tf-bootstrap-re-key1").CryptoKey.Name,
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		CheckDestroy: testAccCheckVertexAIReasoningEngineDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIReasoningEngine_vertexAiReasoningEngineFullExample(context),
			},
			{
				ResourceName:            "google_vertex_ai_reasoning_engine.reasoning_engine",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"region"},
			},
		},
	})
}

func testAccVertexAIReasoningEngine_vertexAiReasoningEngineFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
# Generate pickle files with the cloudpickle library:
#
# local_agent = LangchainAgent(
#   model=MODEL,
#   agent_executor_kwargs={"return_intermediate_steps": True},
# )
#
# output_filename = "pickle.pkl"
#
# with open(output_filename, "wb") as f:
#   cloudpickle.dump(local_agent, f)

locals {
  class_methods = [
    {
      api_mode = "async"
      description = null
      name = "async_query"
      parameters = {
        type     = "object"
        required = []
        properties = {}
      }
    }
  ]
}

resource "google_vertex_ai_reasoning_engine" "reasoning_engine" {
  display_name = "tf-test-reasoning-engine%{random_suffix}"
  description  = "A basic reasoning engine"
  region       = "us-central1"

  encryption_spec {
    kms_key_name = "%{kms_key_name}"
  }

  spec {
    agent_framework = "google-adk"
    class_methods   = jsonencode(local.class_methods)
    service_account = google_service_account.service_account.email

    deployment_spec {

      env {
        name  = "var_1"
        value = "value_2"
      }

      env {
        name  = "var_2"
        value = "value_2"
      }

      secret_env {
        name = "secret_var_1"

        secret_ref {
          secret  = google_secret_manager_secret.secret.secret_id
          version = "latest"
        }
      }

      secret_env {
        name = "secret_var_2"

        secret_ref {
          secret  = google_secret_manager_secret.secret.secret_id
          version = "latest"
        }
      }
    }

    package_spec {
      dependency_files_gcs_uri = "${google_storage_bucket.bucket.url}/${google_storage_bucket_object.bucket_obj_dependencies_tar_gz.name}"
      pickle_object_gcs_uri    = "${google_storage_bucket.bucket.url}/${google_storage_bucket_object.bucket_obj_pickle.name}"
      python_version           = "3.11"
      requirements_gcs_uri     = "${google_storage_bucket.bucket.url}/${google_storage_bucket_object.bucket_obj_requirements_txt.name}"
    }
  }

  depends_on = [
    time_sleep.wait_5_minutes
  ]
}

# Ensure we wait enough time for IAM permissions to be propagated
resource "time_sleep" "wait_5_minutes" {
  create_duration = "5m"

  depends_on = [
    google_project_iam_member.sa_iam_ai_platform_user,
    google_project_iam_member.sa_iam_object_viewer,
    google_project_iam_member.sa_iam_viewer,
    google_secret_manager_secret_iam_member.secret_access,
    google_secret_manager_secret_version.secret_version
  ]
}

resource "google_secret_manager_secret_version" "secret_version" {
  secret      = google_secret_manager_secret.secret.id
  secret_data = "test"
}

resource "google_secret_manager_secret" "secret" {
  secret_id = "secret%{random_suffix}"

  replication {
    auto {}
  }
}

resource "google_secret_manager_secret_iam_member" "secret_access" {
  secret_id  = google_secret_manager_secret.secret.id
  role       = "roles/secretmanager.secretAccessor"
  member     = google_service_account.service_account.member
}

resource "google_storage_bucket" "bucket" {
  name                        = "tf-test-reasoning-engine%{random_suffix}"
  location                    = "us-central1"
  uniform_bucket_level_access = true
  force_destroy               = true
}

resource "google_storage_bucket_object" "bucket_obj_requirements_txt" {
  name   = "requirements.txt"
  bucket = google_storage_bucket.bucket.id
  source = "./test-fixtures/requirements_adk.txt"
}

resource "google_storage_bucket_object" "bucket_obj_pickle" {
  name   = "code.pkl"
  bucket = google_storage_bucket.bucket.id
  source = "./test-fixtures/pickle_adk.pkl"
}

resource "google_storage_bucket_object" "bucket_obj_dependencies_tar_gz" {
  name   = "dependencies.tar.gz"
  bucket = google_storage_bucket.bucket.id
  source = "./test-fixtures/dependencies_adk.tar.gz"
}

resource "google_service_account" "service_account" {
  account_id = "sa%{random_suffix}"
}

resource "google_project_iam_member" "sa_iam_object_viewer" {
  role    = "roles/storage.objectViewer"
  project = data.google_project.project.id
  member  = google_service_account.service_account.member
}

resource "google_project_iam_member" "sa_iam_ai_platform_user" {
  role    = "roles/aiplatform.user"
  project = data.google_project.project.id
  member  = google_service_account.service_account.member
}

resource "google_project_iam_member" "sa_iam_viewer" {
  role    = "roles/viewer"
  project = data.google_project.project.id
  member  = google_service_account.service_account.member
}

data "google_project" "project" {
}
`, context)
}

func testAccCheckVertexAIReasoningEngineDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_vertex_ai_reasoning_engine" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{VertexAIBasePath}}projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("VertexAIReasoningEngine still exists at %s", url)
			}
		}

		return nil
	}
}
