// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/vertexai/RagEngineConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package vertexai

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceVertexAIRagEngineConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceVertexAIRagEngineConfigCreate,
		Read:   resourceVertexAIRagEngineConfigRead,
		Update: resourceVertexAIRagEngineConfigUpdate,
		Delete: resourceVertexAIRagEngineConfigDelete,

		Importer: &schema.ResourceImporter{
			State: resourceVertexAIRagEngineConfigImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"rag_managed_db_config": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Required. The config of the RagManagedDb used by RagEngine.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"basic": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Basic tier is a cost-effective and low compute tier suitable for the following cases: Experimenting with RagManagedDb, Small data size, Latency insensitive workload, Only using RAG Engine with external vector DBs.
NOTE: This is the default tier if not explicitly chosen.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
							ExactlyOneOf: []string{"rag_managed_db_config.0.scaled", "rag_managed_db_config.0.basic", "rag_managed_db_config.0.unprovisioned"},
						},
						"scaled": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Scaled tier offers production grade performance along with autoscaling functionality. It is suitable for customers with large amounts of data or performance sensitive workloads.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
							ExactlyOneOf: []string{"rag_managed_db_config.0.scaled", "rag_managed_db_config.0.basic", "rag_managed_db_config.0.unprovisioned"},
						},
						"unprovisioned": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Disables the RAG Engine service and deletes all your data held within this service. This will halt the billing of the service.
NOTE: Once deleted the data cannot be recovered. To start using RAG Engine again, you will need to update the tier by calling the UpdateRagEngineConfig API.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
							ExactlyOneOf: []string{"rag_managed_db_config.0.scaled", "rag_managed_db_config.0.basic", "rag_managed_db_config.0.unprovisioned"},
						},
					},
				},
			},
			"region": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `The region of the RagEngineConfig. eg us-central1`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The resource name of the Dataset. This value is set by Google.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceVertexAIRagEngineConfigCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	ragManagedDbConfigProp, err := expandVertexAIRagEngineConfigRagManagedDbConfig(d.Get("rag_managed_db_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rag_managed_db_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(ragManagedDbConfigProp)) && (ok || !reflect.DeepEqual(v, ragManagedDbConfigProp)) {
		obj["ragManagedDbConfig"] = ragManagedDbConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}projects/{{project}}/locations/{{region}}/ragEngineConfig")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new RagEngineConfig: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RagEngineConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating RagEngineConfig: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{region}}/ragEngineConfig")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = VertexAIOperationWaitTime(
		config, res, project, "Creating RagEngineConfig", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create RagEngineConfig: %s", err)
	}

	log.Printf("[DEBUG] Finished creating RagEngineConfig %q: %#v", d.Id(), res)

	return resourceVertexAIRagEngineConfigRead(d, meta)
}

func resourceVertexAIRagEngineConfigRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}projects/{{project}}/locations/{{region}}/ragEngineConfig")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RagEngineConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("VertexAIRagEngineConfig %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading RagEngineConfig: %s", err)
	}

	if err := d.Set("rag_managed_db_config", flattenVertexAIRagEngineConfigRagManagedDbConfig(res["ragManagedDbConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading RagEngineConfig: %s", err)
	}
	if err := d.Set("name", flattenVertexAIRagEngineConfigName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading RagEngineConfig: %s", err)
	}

	return nil
}

func resourceVertexAIRagEngineConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RagEngineConfig: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	ragManagedDbConfigProp, err := expandVertexAIRagEngineConfigRagManagedDbConfig(d.Get("rag_managed_db_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rag_managed_db_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, ragManagedDbConfigProp)) {
		obj["ragManagedDbConfig"] = ragManagedDbConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}projects/{{project}}/locations/{{region}}/ragEngineConfig")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating RagEngineConfig %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating RagEngineConfig %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating RagEngineConfig %q: %#v", d.Id(), res)
	}

	err = VertexAIOperationWaitTime(
		config, res, project, "Updating RagEngineConfig", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceVertexAIRagEngineConfigRead(d, meta)
}

func resourceVertexAIRagEngineConfigDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Beginning custom_delete for Vertex AI RagEngineConfig")

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RagEngineConfig: %s", err)
	}

	// Update RagEngineConfig tier to Unprovisioned
	deleteUrl, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}projects/{{project}}/locations/{{region}}/ragEngineConfig")
	if err != nil {
		return err
	}
	deleteHeaders := make(http.Header)
	deleteBody := map[string]interface{}{
		"ragManagedDbConfig": map[string]interface{}{
			"unprovisioned": map[string]interface{}{},
		},
	}
	log.Printf("[DEBUG] Updating RagEngineConfig tier to Unprovisioned")
	deleteRes, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   project,
		RawURL:    deleteUrl,
		UserAgent: userAgent,
		Body:      deleteBody,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   deleteHeaders,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "RagEngineConfig")
	}

	err = VertexAIOperationWaitTime(
		config, deleteRes, project, "Updating RagEngineConfig tier to Unprovisioned", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished Updating RagEngineConfig tier to Unprovisioned: %#v", deleteRes)
	return nil
}

func resourceVertexAIRagEngineConfigImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<region>[^/]+)/ragEngineConfig$",
		"^(?P<project>[^/]+)/(?P<region>[^/]+)$",
		"^(?P<region>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{region}}/ragEngineConfig")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenVertexAIRagEngineConfigRagManagedDbConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["scaled"] =
		flattenVertexAIRagEngineConfigRagManagedDbConfigScaled(original["scaled"], d, config)
	transformed["basic"] =
		flattenVertexAIRagEngineConfigRagManagedDbConfigBasic(original["basic"], d, config)
	transformed["unprovisioned"] =
		flattenVertexAIRagEngineConfigRagManagedDbConfigUnprovisioned(original["unprovisioned"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIRagEngineConfigRagManagedDbConfigScaled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenVertexAIRagEngineConfigRagManagedDbConfigBasic(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenVertexAIRagEngineConfigRagManagedDbConfigUnprovisioned(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenVertexAIRagEngineConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandVertexAIRagEngineConfigRagManagedDbConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedScaled, err := expandVertexAIRagEngineConfigRagManagedDbConfigScaled(original["scaled"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["scaled"] = transformedScaled
	}

	transformedBasic, err := expandVertexAIRagEngineConfigRagManagedDbConfigBasic(original["basic"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["basic"] = transformedBasic
	}

	transformedUnprovisioned, err := expandVertexAIRagEngineConfigRagManagedDbConfigUnprovisioned(original["unprovisioned"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["unprovisioned"] = transformedUnprovisioned
	}

	return transformed, nil
}

func expandVertexAIRagEngineConfigRagManagedDbConfigScaled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandVertexAIRagEngineConfigRagManagedDbConfigBasic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandVertexAIRagEngineConfigRagManagedDbConfigUnprovisioned(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}
