// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package cloudbuildv2_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccCloudbuildv2Repository_cloudbuildv2RepositoryGheExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudbuildv2RepositoryDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudbuildv2Repository_cloudbuildv2RepositoryGheExample(context),
			},
			{
				ResourceName:            "google_cloudbuildv2_repository.primary",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "parent_connection", "annotations"},
			},
		},
	})
}

func testAccCloudbuildv2Repository_cloudbuildv2RepositoryGheExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloudbuildv2_repository" "primary" {
  name              = "repository%{random_suffix}"
  parent_connection = google_cloudbuildv2_connection.ghe_complete.name
  remote_uri        = "https://ghe.proctor-staging-test.com/proctorteam/regional_test.git"
  location          = "us-central1"
  annotations = {
    some-key = "some-value"
  }
}

resource "google_cloudbuildv2_connection" "ghe_complete" {
  location = "us-central1"
  name     = "connection%{random_suffix}"

  github_enterprise_config {
    host_uri                      = "https://ghe.proctor-staging-test.com"
    app_id                        = 516
    app_installation_id           = 243
    app_slug                      = "myapp"
    private_key_secret_version    = "projects/gcb-terraform-creds/secrets/ghe-private-key/versions/latest"
    webhook_secret_secret_version = "projects/gcb-terraform-creds/secrets/ghe-webhook-secret/versions/latest"
  }

  annotations = {}
}
`, context)
}

func TestAccCloudbuildv2Repository_cloudbuildv2RepositoryGithubExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudbuildv2RepositoryDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudbuildv2Repository_cloudbuildv2RepositoryGithubExample(context),
			},
			{
				ResourceName:            "google_cloudbuildv2_repository.primary",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "parent_connection", "annotations"},
			},
		},
	})
}

func testAccCloudbuildv2Repository_cloudbuildv2RepositoryGithubExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloudbuildv2_repository" "primary" {
  name              = "repository%{random_suffix}"
  parent_connection = google_cloudbuildv2_connection.github_update.name
  remote_uri        = "https://github.com/gcb-repos-robot/tf-demo.git"
  location          = "us-central1"
  annotations       = {}
}

resource "google_cloudbuildv2_connection" "github_update" {
  location = "us-central1"
  name     = "connection%{random_suffix}"
  disabled = false

  github_config {
    app_installation_id = 31300675

    authorizer_credential {
      oauth_token_secret_version = "projects/gcb-terraform-creds/secrets/github-pat/versions/latest"
    }
  }

  annotations = {
    otherkey = "othervalue"

    somekey = "somevalue"
  }
}
`, context)
}

func TestAccCloudbuildv2Repository_cloudbuildv2RepositoryGleExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudbuildv2RepositoryDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudbuildv2Repository_cloudbuildv2RepositoryGleExample(context),
			},
			{
				ResourceName:            "google_cloudbuildv2_repository.primary",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "parent_connection", "annotations"},
			},
		},
	})
}

func testAccCloudbuildv2Repository_cloudbuildv2RepositoryGleExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloudbuildv2_repository" "primary" {
  name              = "repository%{random_suffix}"
  parent_connection = google_cloudbuildv2_connection.gle.name
  remote_uri        = "https://gle-us-central1.gcb-test.com/proctor-test/smoketest.git"
  location          = "us-west1"

  annotations = {
    some-key = "some-value"
  }
}

resource "google_cloudbuildv2_connection" "gle" {
  location = "us-west1"
  name     = "connection%{random_suffix}"

  gitlab_config {
    authorizer_credential {
      user_token_secret_version = "projects/407304063574/secrets/gle-api-token/versions/latest"
    }

    read_authorizer_credential {
      user_token_secret_version = "projects/407304063574/secrets/gle-read-token/versions/latest"
    }

    webhook_secret_secret_version = "projects/407304063574/secrets/gle-webhook-secret/versions/latest"
    host_uri                      = "https://gle-us-central1.gcb-test.com"
  }

  annotations = {}
}
`, context)
}

func testAccCheckCloudbuildv2RepositoryDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_cloudbuildv2_repository" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{Cloudbuildv2BasePath}}projects/{{project}}/locations/{{location}}/connections/{{parent_connection}}/repositories/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("Cloudbuildv2Repository still exists at %s", url)
			}
		}

		return nil
	}
}
