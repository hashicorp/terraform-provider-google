// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/datastream/resource_datastream_stream_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package datastream_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccDatastreamStream_update(t *testing.T) {
	// this test uses the random provider
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":       acctest.RandString(t, 10),
		"deletion_protection": false,
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
		},
		CheckDestroy: testAccCheckDatastreamStreamDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatastreamStream_datastreamStreamBasicExample(context),
				Check:  resource.TestCheckResourceAttr("google_datastream_stream.default", "state", "NOT_STARTED"),
			},
			{
				ResourceName:            "google_datastream_stream.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"create_without_validation", "stream_id", "location", "desired_state", "labels", "terraform_labels"},
			},
			{
				Config: testAccDatastreamStream_datastreamStreamBasicUpdate(context, "RUNNING", true),
				Check:  resource.TestCheckResourceAttr("google_datastream_stream.default", "state", "RUNNING"),
			},
			{
				ResourceName:            "google_datastream_stream.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"create_without_validation", "stream_id", "location", "desired_state", "labels", "terraform_labels"},
			},
			{
				Config: testAccDatastreamStream_datastreamStreamBasicUpdate(context, "PAUSED", true),
				Check:  resource.TestCheckResourceAttr("google_datastream_stream.default", "state", "PAUSED"),
			},
			{
				ResourceName:            "google_datastream_stream.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"create_without_validation", "stream_id", "location", "desired_state", "labels", "terraform_labels"},
			},
			{
				Config: testAccDatastreamStream_datastreamStreamBasicUpdate(context, "RUNNING", true),
				Check:  resource.TestCheckResourceAttr("google_datastream_stream.default", "state", "RUNNING"),
			},
			{
				ResourceName:            "google_datastream_stream.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"create_without_validation", "stream_id", "location", "desired_state", "labels", "terraform_labels"},
			},
			{
				ResourceName:            "google_datastream_stream.gtid",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"create_without_validation", "stream_id", "location", "desired_state", "labels", "terraform_labels"},
			},
			{
				// Disable prevent_destroy
				Config: testAccDatastreamStream_datastreamStreamBasicUpdate(context, "RUNNING", false),
			},
			{
				Config: testAccDatastreamStream_datastreamStreamBasicExample(context),
				Check:  resource.TestCheckResourceAttr("google_datastream_stream.gtid", "state", "NOT_STARTED"),
			},
		},
	})
}

func testAccDatastreamStream_datastreamStreamBasicUpdate(context map[string]interface{}, desiredState string, preventDestroy bool) string {
	context["lifecycle_block"] = ""
	if preventDestroy {
		context["lifecycle_block"] = `
        lifecycle {
            prevent_destroy = true
        }`
	}
	context["desired_state"] = desiredState
	return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_sql_database_instance" "instance" {
    name             = "tf-test-my-instance%{random_suffix}"
    database_version = "MYSQL_8_0"
    region           = "us-central1"
    settings {
        tier = "db-f1-micro"
        backup_configuration {
            enabled            = true
            binary_log_enabled = true
        }

        ip_configuration {

            // Datastream IPs will vary by region.
            authorized_networks {
                value = "34.71.242.81"
            }

            authorized_networks {
                value = "34.72.28.29"
            }

            authorized_networks {
                value = "34.67.6.157"
            }

            authorized_networks {
                value = "34.67.234.134"
            }

            authorized_networks {
                value = "34.72.239.218"
            }
        }
    }

    deletion_protection  = %{deletion_protection}
}

resource "google_sql_database" "db" {
    instance = google_sql_database_instance.instance.name
    name     = "db"
}

resource "random_password" "pwd" {
    length = 16
    special = false
}

resource "google_sql_user" "user" {
    name     = "user"
    instance = google_sql_database_instance.instance.name
    host     = "%"
    password = random_password.pwd.result
}

resource "google_datastream_connection_profile" "source_connection_profile" {
    display_name          = "Source connection profile"
    location              = "us-central1"
    connection_profile_id = "tf-test-source-profile%{random_suffix}"
    create_without_validation = true

    mysql_profile {
        hostname = google_sql_database_instance.instance.public_ip_address
        username = google_sql_user.user.name
        password = google_sql_user.user.password
    }
}

resource "google_storage_bucket" "bucket" {
  name                        = "tf-test-my-bucket%{random_suffix}"
  location                    = "US"
  uniform_bucket_level_access = true
}

resource "google_storage_bucket_iam_member" "viewer" {
    bucket = google_storage_bucket.bucket.name
    role   = "roles/storage.objectViewer"
    member = "serviceAccount:service-${data.google_project.project.number}@gcp-sa-datastream.iam.gserviceaccount.com"
}

resource "google_storage_bucket_iam_member" "creator" {
    bucket = google_storage_bucket.bucket.name
    role   = "roles/storage.objectCreator"
    member = "serviceAccount:service-${data.google_project.project.number}@gcp-sa-datastream.iam.gserviceaccount.com"
}

resource "google_storage_bucket_iam_member" "reader" {
    bucket = google_storage_bucket.bucket.name
    role   = "roles/storage.legacyBucketReader"
    member = "serviceAccount:service-${data.google_project.project.number}@gcp-sa-datastream.iam.gserviceaccount.com"
}

resource "google_datastream_connection_profile" "destination_connection_profile" {
    display_name          = "Connection profile"
    location              = "us-central1"
    connection_profile_id = "tf-test-destination-profile%{random_suffix}"

    gcs_profile {
        bucket    = google_storage_bucket.bucket.name
        root_path = "/path"
    }
}

resource "google_datastream_stream" "default" {
    stream_id = "tf-test-my-stream%{random_suffix}"
    location = "us-central1"
    display_name = "my stream update"
    desired_state = "%{desired_state}"
    create_without_validation = true

    labels = {
    	key = "updated"
    }

    source_config {
        source_connection_profile = google_datastream_connection_profile.source_connection_profile.id

        mysql_source_config {
	        binary_log_position {}
	    }
    }
    destination_config {
        destination_connection_profile = google_datastream_connection_profile.destination_connection_profile.id
        gcs_destination_config {
            path = "mydata"
            file_rotation_mb = 200
            file_rotation_interval = "60s"
            json_file_format {
                schema_file_format = "NO_SCHEMA_FILE"
                compression = "GZIP"
            }
        }
    }

    backfill_all {
    }
	%{lifecycle_block}
}

resource "google_datastream_stream" "gtid" {
    stream_id = "tf-test-my-stream-gtid%{random_suffix}"
    location = "us-central1"
    display_name = "my gtid stream update"
    desired_state = "%{desired_state}"
    create_without_validation = true

    labels = {
    	key = "updated"
    }

    source_config {
        source_connection_profile = google_datastream_connection_profile.source_connection_profile.id

        mysql_source_config {
	        gtid {}
	    }
    }
    destination_config {
        destination_connection_profile = google_datastream_connection_profile.destination_connection_profile.id
        gcs_destination_config {
            path = "mydata"
            file_rotation_mb = 200
            file_rotation_interval = "60s"
            json_file_format {
                schema_file_format = "NO_SCHEMA_FILE"
                compression = "GZIP"
            }
        }
    }

    backfill_all {
    }
	%{lifecycle_block}
}
`, context)
}

func TestAccDatastreamStream_mongoDb(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDatastreamStreamDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDatastreamStream_mongoDbBasicExample(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("google_datastream_stream.default", "state", "NOT_STARTED"),
				),
			},
			{
				ResourceName:            "google_datastream_stream.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"create_without_validation", "stream_id", "location", "desired_state"},
			},
			{
				Config: testAccDatastreamStream_mongoDbUpdateExample(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_datastream_stream.default", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_datastream_stream.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"create_without_validation", "stream_id", "location", "desired_state"},
			},
		},
	})
}

func testAccDatastreamStream_mongoDbBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {}

resource "google_datastream_connection_profile" "mongo_source" {
    display_name          = "tf-mongodb-profile"
    location              = "us-central1"
    connection_profile_id = "tf-test-mongo-source-profile%{random_suffix}"
    create_without_validation = true

    mongodb_profile {
        host_addresses {
          hostname = "1.1.1.1"
          port = 27017
        }
        replica_set = "rs0"
        username = "user"
        password = "password"
        standard_connection_format {}
    }
}

resource "google_storage_bucket" "bucket" {
  name                        = "tf-test-mongo-gcs-bucket%{random_suffix}"
  location                    = "US"
  uniform_bucket_level_access = true
}

data "google_iam_policy" "datastream_service_agent" {
    binding {
        role = "roles/storage.objectViewer"
        members = [
            "serviceAccount:service-${data.google_project.project.number}@gcp-sa-datastream.iam.gserviceaccount.com",
        ]
    }
    binding {
        role = "roles/storage.objectCreator"
        members = [
            "serviceAccount:service-${data.google_project.project.number}@gcp-sa-datastream.iam.gserviceaccount.com",
        ]
    }
    binding {
        role = "roles/storage.legacyBucketReader"
        members = [
            "serviceAccount:service-${data.google_project.project.number}@gcp-sa-datastream.iam.gserviceaccount.com",
        ]
    }
}

resource "google_datastream_connection_profile" "gcs_destination" {
    display_name          = "GCS Destination Profile"
    location              = "us-central1"
    connection_profile_id = "tf-test-gcs-dest-profile%{random_suffix}"
    create_without_validation = true

    gcs_profile {
        bucket  = google_storage_bucket.bucket.name
        root_path = "/path"
    }
}

resource "google_datastream_stream" "default" {
    display_name = "tf-mongodb-gcs"
    location     = "us-central1"
    stream_id    = "tf-test-mongo-stream%{random_suffix}"
    create_without_validation = true

    source_config {
        source_connection_profile = google_datastream_connection_profile.mongo_source.id
        mongodb_source_config {
            max_concurrent_backfill_tasks = 14
            include_objects {
                databases {
                    database = "test"
                    collections {
                        collection = "orders"
												fields {
                            field = "name"
                        }
                    }
                    collections {
                        collection = "users"
                    }
                }
            }
            exclude_objects {
                databases {
                    database = "test"
                    collections {
                        collection = "users"
                        fields {
                           field = "name"
                        }
                    }
                }
            }
        }
    }

    destination_config {
        destination_connection_profile = google_datastream_connection_profile.gcs_destination.id
        gcs_destination_config {
          path = "/mydata"
          file_rotation_mb = 50
          file_rotation_interval = "60s"
          json_file_format {
            schema_file_format = "NO_SCHEMA_FILE"
            compression = "GZIP"
          }
        }
    }

    backfill_all {
			  mongodb_excluded_objects {
          databases {
            collections {
						  collection = "orders"
						  fields {
							  field = "name"
              }
					  }
					 database = "test"
				  }
        }
    }
}
`, context)
}

func testAccDatastreamStream_mongoDbUpdateExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {}

resource "google_datastream_connection_profile" "mongo_source" {
    display_name            = "tf-mongodb-profile"
    location                = "us-central1"
    connection_profile_id   = "tf-test-mongo-source-profile%{random_suffix}"
    create_without_validation = true

    mongodb_profile {
        host_addresses {
            hostname = "1.1.1.1"
            port = 27017
        }
        replica_set = "rs0"
        username = "user"
        password = "password"
        standard_connection_format {}
    }
}

resource "google_storage_bucket" "bucket" {
    name                        = "tf-test-mongo-gcs-bucket%{random_suffix}"
    location                    = "US"
    uniform_bucket_level_access = true
}

data "google_iam_policy" "datastream_service_agent" {
    binding {
        role = "roles/storage.objectViewer"
        members = [
            "serviceAccount:service-${data.google_project.project.number}@gcp-sa-datastream.iam.gserviceaccount.com",
        ]
    }
    binding {
        role = "roles/storage.objectCreator"
        members = [
            "serviceAccount:service-${data.google_project.project.number}@gcp-sa-datastream.iam.gserviceaccount.com",
        ]
    }
    binding {
        role = "roles/storage.legacyBucketReader"
        members = [
            "serviceAccount:service-${data.google_project.project.number}@gcp-sa-datastream.iam.gserviceaccount.com",
        ]
    }
}

resource "google_datastream_connection_profile" "gcs_destination" {
    display_name            = "GCS Destination Profile"
    location                = "us-central1"
    connection_profile_id   = "tf-test-gcs-dest-profile%{random_suffix}"
    create_without_validation = true

    gcs_profile {
        bucket    = google_storage_bucket.bucket.name
        root_path = "/path"
    }
}

resource "google_datastream_stream" "default" {
    display_name = "tf-mongodb-gcs"
    location     = "us-central1"
    stream_id    = "tf-test-mongo-stream%{random_suffix}"
    create_without_validation = true

    source_config {
        source_connection_profile = google_datastream_connection_profile.mongo_source.id
        mongodb_source_config {
            max_concurrent_backfill_tasks = 25
            include_objects {
                databases {
                    database = "test"
                    collections {
                        collection = "orders"
                        fields {
                            field = "name"
                        }
                    }
                    collections {
                        collection = "users"
                    }
                    // ADDED: New collection to include
                    collections {
                        collection = "products"
                    }
                }
            }
            exclude_objects {
                databases {
                    database = "test"
                    collections {
                        collection = "users"
                        fields {
                           field = "name"
                        }
                        // ADDED: New field to exclude
                        fields {
                            field = "address"
                        }
                    }
                }
            }
        }
    }

    destination_config {
        destination_connection_profile = google_datastream_connection_profile.gcs_destination.id
        gcs_destination_config {
            path = "/mydata"
            file_rotation_mb = 50
            file_rotation_interval = "60s"
            json_file_format {
                schema_file_format = "NO_SCHEMA_FILE"
                compression = "GZIP"
            }
        }
    }

    backfill_all {
        mongodb_excluded_objects {
            databases {
                database = "test"
                collections {
                    collection = "orders"
                    fields {
                        field = "name"
                    }
                }
                // ADDED: New collection to exclude from backfill
                collections {
                    collection = "inventory"
                }
            }
        }
    }
}
`, context)
}
