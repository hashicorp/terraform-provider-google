// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package parametermanagerregional_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccParameterManagerRegionalRegionalParameterVersion_regionalParameterVersionBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckParameterManagerRegionalRegionalParameterVersionDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccParameterManagerRegionalRegionalParameterVersion_regionalParameterVersionBasicExample(context),
			},
			{
				ResourceName:            "google_parameter_manager_regional_parameter_version.regional-parameter-version-basic",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "parameter", "parameter_version_id"},
			},
		},
	})
}

func testAccParameterManagerRegionalRegionalParameterVersion_regionalParameterVersionBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_parameter_manager_regional_parameter" "regional-parameter-basic" {
  parameter_id = "tf_test_regional_parameter%{random_suffix}"
  location = "us-central1"
}

resource "google_parameter_manager_regional_parameter_version" "regional-parameter-version-basic" {
  parameter = google_parameter_manager_regional_parameter.regional-parameter-basic.id
  parameter_version_id = "tf_test_regional_parameter_version%{random_suffix}"
  parameter_data = "regional-parameter-version-data"
}
`, context)
}

func TestAccParameterManagerRegionalRegionalParameterVersion_regionalParameterVersionWithJsonFormatExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckParameterManagerRegionalRegionalParameterVersionDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccParameterManagerRegionalRegionalParameterVersion_regionalParameterVersionWithJsonFormatExample(context),
			},
			{
				ResourceName:            "google_parameter_manager_regional_parameter_version.regional-parameter-version-with-json-format",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "parameter", "parameter_version_id"},
			},
		},
	})
}

func testAccParameterManagerRegionalRegionalParameterVersion_regionalParameterVersionWithJsonFormatExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_parameter_manager_regional_parameter" "regional-parameter-basic" {
  parameter_id = "tf_test_regional_parameter%{random_suffix}"
  format = "JSON"
  location = "us-central1"
}

resource "google_parameter_manager_regional_parameter_version" "regional-parameter-version-with-json-format" {
  parameter = google_parameter_manager_regional_parameter.regional-parameter-basic.id
  parameter_version_id = "tf_test_regional_parameter_version%{random_suffix}"
  parameter_data = jsonencode({
    "key1": "val1",
    "key2": "val2"
  })
}
`, context)
}

func TestAccParameterManagerRegionalRegionalParameterVersion_regionalParameterVersionWithYamlFormatExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckParameterManagerRegionalRegionalParameterVersionDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccParameterManagerRegionalRegionalParameterVersion_regionalParameterVersionWithYamlFormatExample(context),
			},
			{
				ResourceName:            "google_parameter_manager_regional_parameter_version.regional-parameter-version-with-yaml-format",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "parameter", "parameter_version_id"},
			},
		},
	})
}

func testAccParameterManagerRegionalRegionalParameterVersion_regionalParameterVersionWithYamlFormatExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_parameter_manager_regional_parameter" "regional-parameter-basic" {
  parameter_id = "tf_test_regional_parameter%{random_suffix}"
  format = "YAML"
  location = "us-central1"
}

resource "google_parameter_manager_regional_parameter_version" "regional-parameter-version-with-yaml-format" {
  parameter = google_parameter_manager_regional_parameter.regional-parameter-basic.id
  parameter_version_id = "tf_test_regional_parameter_version%{random_suffix}"
  parameter_data = yamlencode({
    "key1": "val1",
    "key2": "val2"
  })
}
`, context)
}

func testAccCheckParameterManagerRegionalRegionalParameterVersionDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_parameter_manager_regional_parameter_version" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ParameterManagerRegionalBasePath}}{{parameter}}/versions/{{parameter_version_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ParameterManagerRegionalRegionalParameterVersion still exists at %s", url)
			}
		}

		return nil
	}
}
