// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package edgecontainer_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccEdgecontainerNodePool_edgecontainerLocalControlPlaneNodePoolInternalExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckEdgecontainerNodePoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccEdgecontainerNodePool_edgecontainerLocalControlPlaneNodePoolInternalExample(context),
			},
			{
				ResourceName:            "google_edgecontainer_node_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "cluster", "labels", "terraform_labels"},
			},
		},
	})
}

func testAccEdgecontainerNodePool_edgecontainerLocalControlPlaneNodePoolInternalExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_edgecontainer_cluster" "cluster" {
  name = "tf-lcp-cluster"
  location = "us-central1"

  authorization {
    admin_users {
      username = "admin@hashicorptest.com"
    }
  }

  networking {
    cluster_ipv4_cidr_blocks = ["10.96.0.0/17"]
    services_ipv4_cidr_blocks = ["10.0.0.0/21"]
  }

  fleet {
    project = "projects/${data.google_project.project.number}"
  }

  external_load_balancer_ipv4_address_pools = ["10.100.68.100-10.100.68.102"]

  control_plane {
    local {
      node_location = "us-central1-edge-den29"
      node_count = 1
      machine_filter = "den29-06"
      shared_deployment_policy = "ALLOWED"
    }
  }
}

resource "google_edgecontainer_node_pool" "default" {
  name = "nodepool-1"
  cluster = google_edgecontainer_cluster.cluster.name
  location = "us-central1"
  node_location = "us-central1-edge-den29"
  machine_filter = "NOT name:den29-01"
  node_count = 1
}

data "google_project" "project" {}
`, context)
}

func testAccCheckEdgecontainerNodePoolDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_edgecontainer_node_pool" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{EdgecontainerBasePath}}projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/nodePools/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("EdgecontainerNodePool still exists at %s", url)
			}
		}

		return nil
	}
}
