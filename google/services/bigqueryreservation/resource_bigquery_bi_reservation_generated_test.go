// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package bigqueryreservation_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccBigqueryReservationBiReservation_bigqueryReservationBiReservationBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time":   {},
		},
		CheckDestroy: testAccCheckBigqueryReservationBiReservationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBigqueryReservationBiReservation_bigqueryReservationBiReservationBasicExample(context),
			},
			{
				ResourceName:            "google_bigquery_bi_reservation.reservation",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
		},
	})
}

func testAccBigqueryReservationBiReservation_bigqueryReservationBiReservationBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigquery_bi_reservation" "reservation" {
	location   = "us-west2"
	size   = "3000000000"
}
`, context)
}

func TestAccBigqueryReservationBiReservation_bigqueryReservationBiReservationFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time":   {},
		},
		CheckDestroy: testAccCheckBigqueryReservationBiReservationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBigqueryReservationBiReservation_bigqueryReservationBiReservationFullExample(context),
			},
			{
				ResourceName:            "google_bigquery_bi_reservation.reservation",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location"},
			},
		},
	})
}

func testAccBigqueryReservationBiReservation_bigqueryReservationBiReservationFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigquery_table" "foo" {
  deletion_protection = false
  dataset_id = google_bigquery_dataset.bar.dataset_id
  table_id   = "table_%{random_suffix}"
}

resource "google_bigquery_table" "foo2" {
  deletion_protection = false
  dataset_id = google_bigquery_dataset.bar2.dataset_id
  table_id   = "table2_%{random_suffix}"
}

resource "google_bigquery_dataset" "bar" {
  dataset_id                  = "dataset_%{random_suffix}"
  friendly_name               = "test"
  description                 = "This is a test description"
  location                    = "EU"
}

resource "google_bigquery_dataset" "bar2" {
  dataset_id                  = "dataset2_%{random_suffix}"
  friendly_name               = "test"
  description                 = "This is a test description"
  location                    = "EU"
}

resource "google_bigquery_bi_reservation" "reservation" {
	location  = "EU"
	size      = "2800000000"
  preferred_tables {
      project_id  = "%{project}"
      dataset_id  = google_bigquery_dataset.bar.dataset_id
      table_id    = google_bigquery_table.foo.table_id
  }
  preferred_tables {
      project_id  = "%{project}"
      dataset_id  = google_bigquery_dataset.bar2.dataset_id
      table_id    = google_bigquery_table.foo2.table_id
  }
}
`, context)
}

func testAccCheckBigqueryReservationBiReservationDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_bigquery_bi_reservation" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			// BI reservation is a singleton resource and can't be deleted.
			// We will check if the reservation info has been cleared

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{BigqueryReservationBasePath}}projects/{{project}}/locations/{{location}}/biReservation")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err != nil {
				return nil
			}

			if _, ok := res["size"]; ok {
				return fmt.Errorf("BIReservation was not cleared")
			}
			if _, ok := res["preferredTables"]; ok {
				return fmt.Errorf("BIReservation was not cleared")
			}

			return nil
		}

		return nil
	}
}
