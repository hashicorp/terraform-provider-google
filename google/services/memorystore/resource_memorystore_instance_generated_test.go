// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package memorystore_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccMemorystoreInstance_memorystoreInstanceBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"prevent_destroy": false,
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckMemorystoreInstanceDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccMemorystoreInstance_memorystoreInstanceBasicExample(context),
			},
			{
				ResourceName:            "google_memorystore_instance.instance-basic",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"instance_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccMemorystoreInstance_memorystoreInstanceBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_memorystore_instance" "instance-basic" {
  instance_id = "tf-test-basic-instance%{random_suffix}"
  shard_count = 3
  desired_psc_auto_connections {
    network    = google_compute_network.producer_net.id
    project_id = data.google_project.project.project_id
  }
  location                    = "us-central1"
  deletion_protection_enabled = false
  depends_on = [
    google_network_connectivity_service_connection_policy.default
  ]

  lifecycle {
    prevent_destroy = "%{prevent_destroy}"
  }
}

resource "google_network_connectivity_service_connection_policy" "default" {
  name          = "tf-test-my-policy%{random_suffix}"
  location      = "us-central1"
  service_class = "gcp-memorystore"
  description   = "my basic service connection policy"
  network       = google_compute_network.producer_net.id
  psc_config {
    subnetworks = [google_compute_subnetwork.producer_subnet.id]
  }
}

resource "google_compute_subnetwork" "producer_subnet" {
  name          = "tf-test-my-subnet%{random_suffix}"
  ip_cidr_range = "10.0.0.248/29"
  region        = "us-central1"
  network       = google_compute_network.producer_net.id
}

resource "google_compute_network" "producer_net" {
  name                    = "tf-test-my-network%{random_suffix}"
  auto_create_subnetworks = false
}

data "google_project" "project" {
}
`, context)
}

func TestAccMemorystoreInstance_memorystoreInstanceFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"prevent_destroy": false,
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckMemorystoreInstanceDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccMemorystoreInstance_memorystoreInstanceFullExample(context),
			},
			{
				ResourceName:            "google_memorystore_instance.instance-full",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"instance_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccMemorystoreInstance_memorystoreInstanceFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_memorystore_instance" "instance-full" {
  instance_id = "tf-test-full-instance%{random_suffix}"
  shard_count = 3
  desired_psc_auto_connections {
    network    = google_compute_network.producer_net.id
    project_id = data.google_project.project.project_id
  }
  location                = "us-central1"
  replica_count           = 2
  node_type               = "SHARED_CORE_NANO"
  transit_encryption_mode = "TRANSIT_ENCRYPTION_DISABLED"
  authorization_mode      = "AUTH_DISABLED"
  engine_configs = {
    maxmemory-policy = "volatile-ttl"
  }
  zone_distribution_config {
    mode = "SINGLE_ZONE"
    zone = "us-central1-b"
  }
  engine_version              = "VALKEY_7_2"
  deletion_protection_enabled = false
  mode = "CLUSTER"
  persistence_config {
    mode = "RDB"
    rdb_config {
      rdb_snapshot_period     = "ONE_HOUR"
      rdb_snapshot_start_time = "2024-10-02T15:01:23Z"
    }
  }
  labels = {
    "abc" : "xyz"
  }
  depends_on = [
    google_network_connectivity_service_connection_policy.default
  ]

  lifecycle {
    prevent_destroy = "%{prevent_destroy}"
  }
}

resource "google_network_connectivity_service_connection_policy" "default" {
  name          = "tf-test-my-policy%{random_suffix}"
  location      = "us-central1"
  service_class = "gcp-memorystore"
  description   = "my basic service connection policy"
  network       = google_compute_network.producer_net.id
  psc_config {
    subnetworks = [google_compute_subnetwork.producer_subnet.id]
  }
}

resource "google_compute_subnetwork" "producer_subnet" {
  name          = "tf-test-my-subnet%{random_suffix}"
  ip_cidr_range = "10.0.0.248/29"
  region        = "us-central1"
  network       = google_compute_network.producer_net.id
}

resource "google_compute_network" "producer_net" {
  name                    = "tf-test-my-network%{random_suffix}"
  auto_create_subnetworks = false
}

data "google_project" "project" {
}
`, context)
}

func TestAccMemorystoreInstance_memorystoreInstancePersistenceAofExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"prevent_destroy": false,
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckMemorystoreInstanceDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccMemorystoreInstance_memorystoreInstancePersistenceAofExample(context),
			},
			{
				ResourceName:            "google_memorystore_instance.instance-persistence-aof",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"instance_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccMemorystoreInstance_memorystoreInstancePersistenceAofExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_memorystore_instance" "instance-persistence-aof" {
  instance_id = "tf-test-aof-instance%{random_suffix}"
  shard_count = 3
  desired_psc_auto_connections {
    network    = google_compute_network.producer_net.id
    project_id = data.google_project.project.project_id
  }
  location = "us-central1"
  persistence_config {
    mode = "AOF"
    aof_config {
      append_fsync = "EVERY_SEC"
    }
  }
  depends_on = [
    google_network_connectivity_service_connection_policy.default
  ]
  deletion_protection_enabled = false
  lifecycle {
    prevent_destroy = "%{prevent_destroy}"
  }
}

resource "google_network_connectivity_service_connection_policy" "default" {
  name          = "tf-test-my-policy%{random_suffix}"
  location      = "us-central1"
  service_class = "gcp-memorystore"
  description   = "my basic service connection policy"
  network       = google_compute_network.producer_net.id
  psc_config {
    subnetworks = [google_compute_subnetwork.producer_subnet.id]
  }
}

resource "google_compute_subnetwork" "producer_subnet" {
  name          = "tf-test-my-subnet%{random_suffix}"
  ip_cidr_range = "10.0.0.248/29"
  region        = "us-central1"
  network       = google_compute_network.producer_net.id
}

resource "google_compute_network" "producer_net" {
  name                    = "tf-test-my-network%{random_suffix}"
  auto_create_subnetworks = false
}

data "google_project" "project" {
}
`, context)
}

func testAccCheckMemorystoreInstanceDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_memorystore_instance" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{MemorystoreBasePath}}projects/{{project}}/locations/{{location}}/instances/{{instance_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("MemorystoreInstance still exists at %s", url)
			}
		}

		return nil
	}
}
