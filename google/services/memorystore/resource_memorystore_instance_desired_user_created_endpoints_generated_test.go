// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package memorystore_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccMemorystoreInstanceDesiredUserCreatedEndpoints_memorystoreInstanceDesiredUserCreatedEndpointsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckMemorystoreInstanceDesiredUserCreatedEndpointsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccMemorystoreInstanceDesiredUserCreatedEndpoints_memorystoreInstanceDesiredUserCreatedEndpointsExample(context),
			},
			{
				ResourceName:            "google_memorystore_instance_desired_user_created_endpoints.instance-user-conn",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "region"},
			},
		},
	})
}

func testAccMemorystoreInstanceDesiredUserCreatedEndpoints_memorystoreInstanceDesiredUserCreatedEndpointsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_memorystore_instance_desired_user_created_endpoints" "instance-user-conn" {
  name                        = "tf-test-instance-user-conn%{random_suffix}"
  region                      = "us-central1"
  desired_user_created_endpoints {
    connections {
      psc_connection {
        psc_connection_id     = google_compute_forwarding_rule.forwarding_rule1_network1.psc_connection_id
        ip_address            = google_compute_address.ip1_network1.address
        forwarding_rule       = google_compute_forwarding_rule.forwarding_rule1_network1.id
        network               = google_compute_network.network1.id
        service_attachment    = google_memorystore_instance.instance-user-conn.psc_attachment_details[0].service_attachment
      }
    }
    connections {
      psc_connection {
        psc_connection_id     = google_compute_forwarding_rule.forwarding_rule2_network1.psc_connection_id
        ip_address            = google_compute_address.ip2_network1.address
        forwarding_rule       = google_compute_forwarding_rule.forwarding_rule2_network1.id
        network               = google_compute_network.network1.id
        service_attachment    = google_memorystore_instance.instance-user-conn.psc_attachment_details[1].service_attachment
      }
    }
  }
  desired_user_created_endpoints {
    connections {
      psc_connection {
        psc_connection_id     = google_compute_forwarding_rule.forwarding_rule1_network2.psc_connection_id
        ip_address            = google_compute_address.ip1_network2.address
        forwarding_rule       = google_compute_forwarding_rule.forwarding_rule1_network2.id
        network               = google_compute_network.network2.id
        service_attachment    = google_memorystore_instance.instance-user-conn.psc_attachment_details[0].service_attachment
      }
    }
    connections {
      psc_connection {
        psc_connection_id     = google_compute_forwarding_rule.forwarding_rule2_network2.psc_connection_id
        ip_address            = google_compute_address.ip2_network2.address
        forwarding_rule       = google_compute_forwarding_rule.forwarding_rule2_network2.id
        network               = google_compute_network.network2.id
        service_attachment    = google_memorystore_instance.instance-user-conn.psc_attachment_details[1].service_attachment
      }
    }
  }
}

resource "google_compute_forwarding_rule" "forwarding_rule1_network1" {
  name                        = "tf-test-fwd1-net1%{random_suffix}"
  region                      = "us-central1"
  ip_address                  = google_compute_address.ip1_network1.id
  load_balancing_scheme       = ""
  network                     = google_compute_network.network1.id
  target                      = google_memorystore_instance.instance-user-conn.psc_attachment_details[0].service_attachment
}

resource "google_compute_forwarding_rule" "forwarding_rule2_network1" {
  name                        = "tf-test-fwd2-net1%{random_suffix}"
  region                      = "us-central1"
  ip_address                  = google_compute_address.ip2_network1.id
  load_balancing_scheme       = ""
  network                     = google_compute_network.network1.id
  target                      = google_memorystore_instance.instance-user-conn.psc_attachment_details[1].service_attachment
}

resource "google_compute_address" "ip1_network1" {
  name                        = "tf-test-ip1-net1%{random_suffix}"
  region                      = "us-central1"
  subnetwork                  = google_compute_subnetwork.subnet_network1.id
  address_type                = "INTERNAL"
  purpose                     = "GCE_ENDPOINT"
}

resource "google_compute_address" "ip2_network1" {
  name                        = "tf-test-ip2-net1%{random_suffix}"
  region                      = "us-central1"
  subnetwork                  = google_compute_subnetwork.subnet_network1.id
  address_type                = "INTERNAL"
  purpose                     = "GCE_ENDPOINT"
}

resource "google_compute_subnetwork" "subnet_network1" {
  name                        = "tf-test-subnet-net1%{random_suffix}"
  ip_cidr_range               = "10.0.0.248/29"
  region                      = "us-central1"
  network                     = google_compute_network.network1.id
}

resource "google_compute_network" "network1" {
  name                        = "net1%{random_suffix}"
  auto_create_subnetworks     = false
}

resource "google_compute_forwarding_rule" "forwarding_rule1_network2" {
  name                        = "tf-test-fwd1-net2%{random_suffix}"
  region                      = "us-central1"
  ip_address                  = google_compute_address.ip1_network2.id
  load_balancing_scheme       = ""
  network                     = google_compute_network.network2.id
  target                      = google_memorystore_instance.instance-user-conn.psc_attachment_details[0].service_attachment
}

resource "google_compute_forwarding_rule" "forwarding_rule2_network2" {
  name                        = "tf-test-fwd2-net2%{random_suffix}"
  region                      = "us-central1"
  ip_address                  = google_compute_address.ip2_network2.id
  load_balancing_scheme       = ""
  network                     = google_compute_network.network2.id
  target                      = google_memorystore_instance.instance-user-conn.psc_attachment_details[1].service_attachment
}

resource "google_compute_address" "ip1_network2" {
  name                        = "tf-test-ip1-net2%{random_suffix}"
  region                      = "us-central1"
  subnetwork                  = google_compute_subnetwork.subnet_network2.id
  address_type                = "INTERNAL"
  purpose                     = "GCE_ENDPOINT"
}

resource "google_compute_address" "ip2_network2" {
  name                        = "tf-test-ip2-net2%{random_suffix}"
  region                      = "us-central1"
  subnetwork                  = google_compute_subnetwork.subnet_network2.id
  address_type                = "INTERNAL"
  purpose                     = "GCE_ENDPOINT"
}

//Valkey instance without endpoints
resource "google_memorystore_instance" "instance-user-conn" {
  instance_id                 =  "tf-test-instance-user-conn%{random_suffix}"
  shard_count                 = 1
  location                    = "us-central1"
  deletion_protection_enabled = false
}

resource "google_compute_subnetwork" "subnet_network2" {
  name                        = "tf-test-subnet-net2%{random_suffix}"
  ip_cidr_range               = "10.0.0.248/29"
  region                      = "us-central1"
  network                     = google_compute_network.network2.id
}

resource "google_compute_network" "network2" {
  name                        = "network2%{random_suffix}"
  auto_create_subnetworks     = false
}


data "google_project" "project" {
}
`, context)
}

func TestAccMemorystoreInstanceDesiredUserCreatedEndpoints_memorystoreInstanceDesiredUserAndAutoCreatedEndpointsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckMemorystoreInstanceDesiredUserCreatedEndpointsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccMemorystoreInstanceDesiredUserCreatedEndpoints_memorystoreInstanceDesiredUserAndAutoCreatedEndpointsExample(context),
			},
			{
				ResourceName:            "google_memorystore_instance_desired_user_created_endpoints.instance-user-auto-conn",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "region"},
			},
		},
	})
}

func testAccMemorystoreInstanceDesiredUserCreatedEndpoints_memorystoreInstanceDesiredUserAndAutoCreatedEndpointsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_memorystore_instance_desired_user_created_endpoints" "instance-user-auto-conn" {
  name                        = "tf-test-instance-user-auto-conn%{random_suffix}"
  region                      = "us-central1"
  desired_user_created_endpoints {
    connections {
      psc_connection {
        psc_connection_id     = google_compute_forwarding_rule.forwarding_rule1_network2.psc_connection_id
        ip_address            = google_compute_address.ip1_network2.address
        forwarding_rule       = google_compute_forwarding_rule.forwarding_rule1_network2.id
        network               = google_compute_network.network2.id
        service_attachment    = google_memorystore_instance.instance-user-auto-conn.psc_attachment_details[0].service_attachment
     }
    }
    connections {
      psc_connection {
        psc_connection_id     = google_compute_forwarding_rule.forwarding_rule2_network2.psc_connection_id
        ip_address            = google_compute_address.ip2_network2.address
        forwarding_rule       = google_compute_forwarding_rule.forwarding_rule2_network2.id
        network               = google_compute_network.network2.id
        service_attachment    = google_memorystore_instance.instance-user-auto-conn.psc_attachment_details[1].service_attachment
      }
    }
  }
}

resource "google_compute_forwarding_rule" "forwarding_rule1_network2" {
  name                        = "tf-test-fwd1-net2%{random_suffix}"
  region                      = "us-central1"
  ip_address                  = google_compute_address.ip1_network2.id
  load_balancing_scheme       = ""
  network                     = google_compute_network.network2.id
  target                      = google_memorystore_instance.instance-user-auto-conn.psc_attachment_details[0].service_attachment
}

resource "google_compute_forwarding_rule" "forwarding_rule2_network2" {
  name                        = "tf-test-fwd2-net2%{random_suffix}"
  region                      = "us-central1"
  ip_address                  = google_compute_address.ip2_network2.id
  load_balancing_scheme       = ""
  network                     = google_compute_network.network2.id
  target                      = google_memorystore_instance.instance-user-auto-conn.psc_attachment_details[1].service_attachment
}

resource "google_compute_address" "ip1_network2" {
  name                        = "tf-test-ip1-net2%{random_suffix}"
  region                      = "us-central1"
  subnetwork                  = google_compute_subnetwork.subnet_network2.id
  address_type                = "INTERNAL"  
  purpose                     = "GCE_ENDPOINT"
}

resource "google_compute_address" "ip2_network2" {
  name                        = "tf-test-ip2-net2%{random_suffix}"
  region                      = "us-central1"
  subnetwork                  = google_compute_subnetwork.subnet_network2.id
  address_type                = "INTERNAL"
  purpose                     = "GCE_ENDPOINT"
}

resource "google_compute_subnetwork" "subnet_network2" {
  name                        = "tf-test-subnet-net2%{random_suffix}"
  ip_cidr_range               = "10.0.0.248/29"
  region                      = "us-central1"
  network                     = google_compute_network.network2.id
}

resource "google_compute_network" "network2" {
  name                        = "network2%{random_suffix}"
  auto_create_subnetworks     = false
}

//valkey instance with endpoints
resource "google_memorystore_instance" "instance-user-auto-conn" {
  instance_id                 = "tf-test-instance-user-auto-conn%{random_suffix}"
  shard_count                 = 1
  desired_auto_created_endpoints {
    network                   = google_compute_network.network1.id
    project_id                = data.google_project.project.project_id
  }
  location                    = "us-central1"
  deletion_protection_enabled = false
  depends_on                  = [google_network_connectivity_service_connection_policy.default]

}

resource "google_network_connectivity_service_connection_policy" "default" {
  name                        = "scpolicy%{random_suffix}"
  location                    = "us-central1"
  service_class               = "gcp-memorystore"
  description                 = "my basic service connection policy"
  network                     = google_compute_network.network1.id
  psc_config {
    subnetworks               = [google_compute_subnetwork.subnet_network1.id]
  }
}

resource "google_compute_subnetwork" "subnet_network1" {
  name                       = "tf-test-subnet-net1%{random_suffix}"
  ip_cidr_range              = "10.0.0.248/29"
  region                     = "us-central1"
  network                    = google_compute_network.network1.id
}

resource "google_compute_network" "network1" {
  name                       = "net1%{random_suffix}"
  auto_create_subnetworks    = false
}

data "google_project" "project" {
}
`, context)
}

func testAccCheckMemorystoreInstanceDesiredUserCreatedEndpointsDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_memorystore_instance_desired_user_created_endpoints" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{MemorystoreBasePath}}projects/{{project}}/locations/{{region}}/instances/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("MemorystoreInstanceDesiredUserCreatedEndpoints still exists at %s", url)
			}
		}

		return nil
	}
}
