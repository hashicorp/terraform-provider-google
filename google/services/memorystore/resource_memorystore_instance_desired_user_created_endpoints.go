// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/memorystore/InstanceDesiredUserCreatedEndpoints.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package memorystore

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceMemorystoreInstanceDesiredUserCreatedEndpoints() *schema.Resource {
	return &schema.Resource{
		Create: resourceMemorystoreInstanceDesiredUserCreatedEndpointsCreate,
		Read:   resourceMemorystoreInstanceDesiredUserCreatedEndpointsRead,
		Update: resourceMemorystoreInstanceDesiredUserCreatedEndpointsUpdate,
		Delete: resourceMemorystoreInstanceDesiredUserCreatedEndpointsDelete,

		Importer: &schema.ResourceImporter{
			State: resourceMemorystoreInstanceDesiredUserCreatedEndpointsImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(60 * time.Minute),
			Update: schema.DefaultTimeout(120 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The name of the Memorystore instance these endpoints should be added to.`,
			},
			"region": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The name of the region of the Memorystore instance these endpoints should be added to.`,
			},
			"desired_user_created_endpoints": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `A list of desired user endpoints`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"connections": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: ``,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"psc_connection": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Detailed information of a PSC connection that is created by the customer
who owns the cluster.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"forwarding_rule": {
													Type:     schema.TypeString,
													Required: true,
													Description: `The URI of the consumer side forwarding rule.
Format:
projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}`,
												},
												"ip_address": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The IP allocated on the consumer network for the PSC forwarding rule.`,
												},
												"network": {
													Type:     schema.TypeString,
													Required: true,
													Description: `The consumer network where the IP address resides, in the form of
projects/{project_id}/global/networks/{network_id}.`,
												},
												"psc_connection_id": {
													Type:     schema.TypeString,
													Required: true,
													Description: `The PSC connection id of the forwarding rule connected to the
service attachment.`,
												},
												"service_attachment": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The service attachment which is the target of the PSC connection, in the form of projects/{project-id}/regions/{region}/serviceAttachments/{service-attachment-id}.`,
												},
												"project_id": {
													Type:        schema.TypeString,
													Computed:    true,
													Optional:    true,
													Description: `The consumer project_id where the forwarding rule is created from.`,
												},
												"connection_type": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `Output Only. Type of a PSC Connection. 
 Possible values:
 CONNECTION_TYPE_DISCOVERY 
 CONNECTION_TYPE_PRIMARY 
 CONNECTION_TYPE_READER`,
												},
												"psc_connection_status": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `Output Only. The status of the PSC connection: whether a connection exists and ACTIVE or it no longer exists. 
 Possible values:
 ACTIVE 
 NOT_FOUND`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceMemorystoreInstanceDesiredUserCreatedEndpointsCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	endpointsProp, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpoints(d.Get("desired_user_created_endpoints"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("desired_user_created_endpoints"); !tpgresource.IsEmptyValue(reflect.ValueOf(endpointsProp)) && (ok || !reflect.DeepEqual(v, endpointsProp)) {
		obj["endpoints"] = endpointsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{MemorystoreBasePath}}projects/{{project}}/locations/{{region}}/instances/{{name}}?updateMask=endpoints")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new InstanceDesiredUserCreatedEndpoints: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for InstanceDesiredUserCreatedEndpoints: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating InstanceDesiredUserCreatedEndpoints: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{region}}/instances/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = MemorystoreOperationWaitTime(
		config, res, project, "Creating InstanceDesiredUserCreatedEndpoints", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create InstanceDesiredUserCreatedEndpoints: %s", err)
	}

	log.Printf("[DEBUG] Finished creating InstanceDesiredUserCreatedEndpoints %q: %#v", d.Id(), res)

	return resourceMemorystoreInstanceDesiredUserCreatedEndpointsRead(d, meta)
}

func resourceMemorystoreInstanceDesiredUserCreatedEndpointsRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{MemorystoreBasePath}}projects/{{project}}/locations/{{region}}/instances/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for InstanceDesiredUserCreatedEndpoints: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("MemorystoreInstanceDesiredUserCreatedEndpoints %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading InstanceDesiredUserCreatedEndpoints: %s", err)
	}

	if err := d.Set("desired_user_created_endpoints", flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpoints(res["endpoints"], d, config)); err != nil {
		return fmt.Errorf("Error reading InstanceDesiredUserCreatedEndpoints: %s", err)
	}

	return nil
}

func resourceMemorystoreInstanceDesiredUserCreatedEndpointsUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for InstanceDesiredUserCreatedEndpoints: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	endpointsProp, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpoints(d.Get("desired_user_created_endpoints"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("desired_user_created_endpoints"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, endpointsProp)) {
		obj["endpoints"] = endpointsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{MemorystoreBasePath}}projects/{{project}}/locations/{{region}}/instances/{{name}}?updateMask=endpoints")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating InstanceDesiredUserCreatedEndpoints %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("desired_user_created_endpoints") {
		updateMask = append(updateMask, "endpoints")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating InstanceDesiredUserCreatedEndpoints %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating InstanceDesiredUserCreatedEndpoints %q: %#v", d.Id(), res)
		}

		err = MemorystoreOperationWaitTime(
			config, res, project, "Updating InstanceDesiredUserCreatedEndpoints", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceMemorystoreInstanceDesiredUserCreatedEndpointsRead(d, meta)
}

func resourceMemorystoreInstanceDesiredUserCreatedEndpointsDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for InstanceDesiredUserCreatedConnections: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	// not setting desiredUserCreatedEndpoints in obj

	url, err := tpgresource.ReplaceVars(d, config, "{{MemorystoreBasePath}}projects/{{project}}/locations/{{region}}/instances/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating InstanceDesiredUserCreatedConnections %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	updateMask := []string{}
	updateMask = append(updateMask, "endpoints")
	// endpoints maps to desiredUserCreatedEndpoints on the resource
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	obj["async_instance_endpoints_deletion_enabled"] = true

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating InstanceDesiredUserCreatedConnections %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating InstanceDesiredUserCreatedConnections %q: %#v", d.Id(), res)
		}

		err = MemorystoreOperationWaitTime(
			config, res, project, "Updating InstanceDesiredUserCreatedConnections", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}
	return resourceMemorystoreInstanceDesiredUserCreatedEndpointsRead(d, meta)
}

func resourceMemorystoreInstanceDesiredUserCreatedEndpointsImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<region>[^/]+)/instances/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<region>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<region>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{region}}/instances/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpoints(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		connection := flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnections(original["connections"], d, config)
		if len(connection.([]interface{})) == 0 {
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"connections": connection,
		})
	}
	return transformed
}
func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnections(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		pscConnections := flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnection(original["pscConnection"], d, config)
		if pscConnections == nil {
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"psc_connection": pscConnections,
		})

	}
	return transformed
}
func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["psc_connection_id"] =
		flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionPscConnectionId(original["pscConnectionId"], d, config)
	transformed["ip_address"] =
		flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionIpAddress(original["ipAddress"], d, config)
	transformed["forwarding_rule"] =
		flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionForwardingRule(original["forwardingRule"], d, config)
	transformed["project_id"] =
		flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionProjectId(original["projectId"], d, config)
	transformed["network"] =
		flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionNetwork(original["network"], d, config)
	transformed["service_attachment"] =
		flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionServiceAttachment(original["serviceAttachment"], d, config)
	transformed["psc_connection_status"] =
		flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionPscConnectionStatus(original["pscConnectionStatus"], d, config)
	transformed["connection_type"] =
		flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionConnectionType(original["connectionType"], d, config)
	return []interface{}{transformed}
}
func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionPscConnectionId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionIpAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionForwardingRule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionServiceAttachment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionPscConnectionStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionConnectionType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpoints(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedConnections, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnections(original["connections"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConnections); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["connections"] = transformedConnections
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnections(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedPscConnection, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnection(original["psc_connection"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPscConnection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["pscConnection"] = transformedPscConnection
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPscConnectionId, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionPscConnectionId(original["psc_connection_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPscConnectionId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pscConnectionId"] = transformedPscConnectionId
	}

	transformedIpAddress, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionIpAddress(original["ip_address"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIpAddress); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ipAddress"] = transformedIpAddress
	}

	transformedForwardingRule, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionForwardingRule(original["forwarding_rule"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedForwardingRule); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["forwardingRule"] = transformedForwardingRule
	}

	transformedProjectId, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedNetwork, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionNetwork(original["network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["network"] = transformedNetwork
	}

	transformedServiceAttachment, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionServiceAttachment(original["service_attachment"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAttachment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAttachment"] = transformedServiceAttachment
	}

	transformedPscConnectionStatus, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionPscConnectionStatus(original["psc_connection_status"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPscConnectionStatus); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pscConnectionStatus"] = transformedPscConnectionStatus
	}

	transformedConnectionType, err := expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionConnectionType(original["connection_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConnectionType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["connectionType"] = transformedConnectionType
	}

	return transformed, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionPscConnectionId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionIpAddress(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionForwardingRule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionServiceAttachment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionPscConnectionStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMemorystoreInstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpointsConnectionsPscConnectionConnectionType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
