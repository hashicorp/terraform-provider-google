// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apigee/DeveloperApp.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceApigeeDeveloperApp() *schema.Resource {
	return &schema.Resource{
		Create: resourceApigeeDeveloperAppCreate,
		Read:   resourceApigeeDeveloperAppRead,
		Update: resourceApigeeDeveloperAppUpdate,
		Delete: resourceApigeeDeveloperAppDelete,

		Importer: &schema.ResourceImporter{
			State: resourceApigeeDeveloperAppImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"callback_url": {
				Type:     schema.TypeString,
				Required: true,
				Description: `Callback URL used by OAuth 2.0 authorization servers to communicate
authorization codes back to developer apps.`,
			},
			"developer_email": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `Email address of the developer.
This value is used to uniquely identify the developer in Apigee hybrid.
Note that the email address has to be in lowercase only.`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Name of the developer app.`,
			},
			"org_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The Apigee Organization associated with the Apigee instance,
in the format 'organizations/{{org_name}}'.`,
			},
			"api_products": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: `List of API products associated with the developer app.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				Set: schema.HashString,
			},
			"app_family": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `Developer app family.`,
			},
			"attributes": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Developer attributes (name/value pairs). The custom attribute limit is 18.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Key of the attribute`,
						},
						"value": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Value of the attribute`,
						},
					},
				},
			},
			"key_expires_in": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `Expiration time, in milliseconds, for the consumer key that is generated
for the developer app. If not set or left to the default value of -1,
the API key never expires. The expiration time can't be updated after it is set.`,
				Default: "-1",
			},
			"scopes": {
				Type:     schema.TypeSet,
				Optional: true,
				Description: `Scopes to apply to the developer app.
The specified scopes must already exist for the API product that
you associate with the developer app.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				Set: schema.HashString,
			},
			"status": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `Status of the credential. Valid values include approved or revoked.`,
			},
			"app_id": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `ID of the developer app. This ID is not user specified but is
automatically generated on app creation. appId is a UUID.`,
			},
			"created_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the developer was created in milliseconds since epoch.`,
			},
			"credentials": {
				Type:     schema.TypeList,
				Computed: true,
				Description: `Output only. Set of credentials for the developer app consisting of
the consumer key/secret pairs associated with the API products.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"api_products": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `List of API products this credential can be used for.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"apiproduct": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Name of the API product.`,
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Status of the API product. Valid values are approved or revoked.`,
									},
								},
							},
						},
						"attributes": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Developer attributes (name/value pairs). The custom attribute limit is 18.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Key of the attribute`,
									},
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Value of the attribute`,
									},
								},
							},
						},
						"consumer_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Consumer key.`,
						},
						"consumer_secret": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Secret key.`,
							Sensitive:   true,
						},
						"expires_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time the credential will expire in milliseconds since epoch.`,
						},
						"issued_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time the credential was issued in milliseconds since epoch.`,
						},
						"scopes": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `List of scopes to apply to the app.
Specified scopes must already exist on the API product that
you associate with the app.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Status of the credential. Valid values include approved or revoked.`,
						},
					},
				},
			},
			"developer_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `ID of the developer.`,
			},
			"last_modified_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the developer was last modified in milliseconds since epoch.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceApigeeDeveloperAppCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandApigeeDeveloperAppName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	appFamilyProp, err := expandApigeeDeveloperAppAppFamily(d.Get("app_family"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("app_family"); !tpgresource.IsEmptyValue(reflect.ValueOf(appFamilyProp)) && (ok || !reflect.DeepEqual(v, appFamilyProp)) {
		obj["appFamily"] = appFamilyProp
	}
	callbackUrlProp, err := expandApigeeDeveloperAppCallbackUrl(d.Get("callback_url"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("callback_url"); !tpgresource.IsEmptyValue(reflect.ValueOf(callbackUrlProp)) && (ok || !reflect.DeepEqual(v, callbackUrlProp)) {
		obj["callbackUrl"] = callbackUrlProp
	}
	keyExpiresInProp, err := expandApigeeDeveloperAppKeyExpiresIn(d.Get("key_expires_in"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("key_expires_in"); !tpgresource.IsEmptyValue(reflect.ValueOf(keyExpiresInProp)) && (ok || !reflect.DeepEqual(v, keyExpiresInProp)) {
		obj["keyExpiresIn"] = keyExpiresInProp
	}
	apiProductsProp, err := expandApigeeDeveloperAppApiProducts(d.Get("api_products"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("api_products"); !tpgresource.IsEmptyValue(reflect.ValueOf(apiProductsProp)) && (ok || !reflect.DeepEqual(v, apiProductsProp)) {
		obj["apiProducts"] = apiProductsProp
	}
	scopesProp, err := expandApigeeDeveloperAppScopes(d.Get("scopes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("scopes"); !tpgresource.IsEmptyValue(reflect.ValueOf(scopesProp)) && (ok || !reflect.DeepEqual(v, scopesProp)) {
		obj["scopes"] = scopesProp
	}
	statusProp, err := expandApigeeDeveloperAppStatus(d.Get("status"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("status"); !tpgresource.IsEmptyValue(reflect.ValueOf(statusProp)) && (ok || !reflect.DeepEqual(v, statusProp)) {
		obj["status"] = statusProp
	}
	attributesProp, err := expandApigeeDeveloperAppAttributes(d.Get("attributes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("attributes"); !tpgresource.IsEmptyValue(reflect.ValueOf(attributesProp)) && (ok || !reflect.DeepEqual(v, attributesProp)) {
		obj["attributes"] = attributesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/developers/{{developer_email}}/apps")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new DeveloperApp: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating DeveloperApp: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{org_id}}/developers/{{developer_email}}/apps/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating DeveloperApp %q: %#v", d.Id(), res)

	return resourceApigeeDeveloperAppRead(d, meta)
}

func resourceApigeeDeveloperAppRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/developers/{{developer_email}}/apps/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ApigeeDeveloperApp %q", d.Id()))
	}

	res, err = resourceApigeeDeveloperAppDecoder(d, meta, res)
	if err != nil {
		return err
	}

	if res == nil {
		// Decoding the object has resulted in it being gone. It may be marked deleted
		log.Printf("[DEBUG] Removing ApigeeDeveloperApp because it no longer exists.")
		d.SetId("")
		return nil
	}

	if err := d.Set("name", flattenApigeeDeveloperAppName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("app_family", flattenApigeeDeveloperAppAppFamily(res["appFamily"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("callback_url", flattenApigeeDeveloperAppCallbackUrl(res["callbackUrl"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("key_expires_in", flattenApigeeDeveloperAppKeyExpiresIn(res["keyExpiresIn"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("api_products", flattenApigeeDeveloperAppApiProducts(res["apiProducts"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("scopes", flattenApigeeDeveloperAppScopes(res["scopes"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("developer_id", flattenApigeeDeveloperAppDeveloperId(res["developerId"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("status", flattenApigeeDeveloperAppStatus(res["status"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("attributes", flattenApigeeDeveloperAppAttributes(res["attributes"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("app_id", flattenApigeeDeveloperAppAppId(res["appId"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("created_at", flattenApigeeDeveloperAppCreatedAt(res["createdAt"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("last_modified_at", flattenApigeeDeveloperAppLastModifiedAt(res["lastModifiedAt"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}
	if err := d.Set("credentials", flattenApigeeDeveloperAppCredentials(res["credentials"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeveloperApp: %s", err)
	}

	return nil
}

func resourceApigeeDeveloperAppUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	nameProp, err := expandApigeeDeveloperAppName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	appFamilyProp, err := expandApigeeDeveloperAppAppFamily(d.Get("app_family"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("app_family"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, appFamilyProp)) {
		obj["appFamily"] = appFamilyProp
	}
	callbackUrlProp, err := expandApigeeDeveloperAppCallbackUrl(d.Get("callback_url"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("callback_url"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, callbackUrlProp)) {
		obj["callbackUrl"] = callbackUrlProp
	}
	keyExpiresInProp, err := expandApigeeDeveloperAppKeyExpiresIn(d.Get("key_expires_in"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("key_expires_in"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, keyExpiresInProp)) {
		obj["keyExpiresIn"] = keyExpiresInProp
	}
	apiProductsProp, err := expandApigeeDeveloperAppApiProducts(d.Get("api_products"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("api_products"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, apiProductsProp)) {
		obj["apiProducts"] = apiProductsProp
	}
	scopesProp, err := expandApigeeDeveloperAppScopes(d.Get("scopes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("scopes"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, scopesProp)) {
		obj["scopes"] = scopesProp
	}
	statusProp, err := expandApigeeDeveloperAppStatus(d.Get("status"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("status"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, statusProp)) {
		obj["status"] = statusProp
	}
	attributesProp, err := expandApigeeDeveloperAppAttributes(d.Get("attributes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("attributes"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, attributesProp)) {
		obj["attributes"] = attributesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/developers/{{developer_email}}/apps/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating DeveloperApp %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PUT",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating DeveloperApp %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating DeveloperApp %q: %#v", d.Id(), res)
	}

	return resourceApigeeDeveloperAppRead(d, meta)
}

func resourceApigeeDeveloperAppDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/developers/{{developer_email}}/apps/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting DeveloperApp %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "DeveloperApp")
	}

	log.Printf("[DEBUG] Finished deleting DeveloperApp %q: %#v", d.Id(), res)
	return nil
}

func resourceApigeeDeveloperAppImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	importFormat := "(?P<org_id>organizations/[^/]+)/developers/(?P<developer_email>[^/]+)/apps/(?P<name>.+)"

	if err := tpgresource.ParseImportId([]string{importFormat}, d, config); err != nil {
		return nil, err
	}

	id, err := tpgresource.ReplaceVars(d, config, "{{org_id}}/developers/{{developer_email}}/apps/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenApigeeDeveloperAppName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppAppFamily(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCallbackUrl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppKeyExpiresIn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppApiProducts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return schema.NewSet(schema.HashString, v.([]interface{}))
}

func flattenApigeeDeveloperAppScopes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return schema.NewSet(schema.HashString, v.([]interface{}))
}

func flattenApigeeDeveloperAppDeveloperId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppAttributes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":  flattenApigeeDeveloperAppAttributesName(original["name"], d, config),
			"value": flattenApigeeDeveloperAppAttributesValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenApigeeDeveloperAppAttributesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppAttributesValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppAppId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCreatedAt(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppLastModifiedAt(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentials(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"consumer_key":    flattenApigeeDeveloperAppCredentialsConsumerKey(original["consumerKey"], d, config),
			"consumer_secret": flattenApigeeDeveloperAppCredentialsConsumerSecret(original["consumerSecret"], d, config),
			"expires_at":      flattenApigeeDeveloperAppCredentialsExpiresAt(original["expiresAt"], d, config),
			"issued_at":       flattenApigeeDeveloperAppCredentialsIssuedAt(original["issuedAt"], d, config),
			"status":          flattenApigeeDeveloperAppCredentialsStatus(original["status"], d, config),
			"scopes":          flattenApigeeDeveloperAppCredentialsScopes(original["scopes"], d, config),
			"api_products":    flattenApigeeDeveloperAppCredentialsApiProducts(original["apiProducts"], d, config),
			"attributes":      flattenApigeeDeveloperAppCredentialsAttributes(original["attributes"], d, config),
		})
	}
	return transformed
}
func flattenApigeeDeveloperAppCredentialsConsumerKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentialsConsumerSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentialsExpiresAt(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentialsIssuedAt(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentialsStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentialsScopes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentialsApiProducts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"apiproduct": flattenApigeeDeveloperAppCredentialsApiProductsApiproduct(original["apiproduct"], d, config),
			"status":     flattenApigeeDeveloperAppCredentialsApiProductsStatus(original["status"], d, config),
		})
	}
	return transformed
}
func flattenApigeeDeveloperAppCredentialsApiProductsApiproduct(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentialsApiProductsStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentialsAttributes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":  flattenApigeeDeveloperAppCredentialsAttributesName(original["name"], d, config),
			"value": flattenApigeeDeveloperAppCredentialsAttributesValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenApigeeDeveloperAppCredentialsAttributesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeDeveloperAppCredentialsAttributesValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandApigeeDeveloperAppName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeDeveloperAppAppFamily(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeDeveloperAppCallbackUrl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeDeveloperAppKeyExpiresIn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeDeveloperAppApiProducts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	return v, nil
}

func expandApigeeDeveloperAppScopes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	return v, nil
}

func expandApigeeDeveloperAppStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeDeveloperAppAttributes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandApigeeDeveloperAppAttributesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandApigeeDeveloperAppAttributesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeDeveloperAppAttributesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeDeveloperAppAttributesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func resourceApigeeDeveloperAppDecoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}) (map[string]interface{}, error) {
	if obj, ok := res["credentials"]; ok {
		if credList, ok := obj.([]interface{}); ok && len(credList) > 0 {
			if cred, ok := credList[0].(map[string]interface{}); ok {
				// Decode expiresAt
				res["keyExpiresIn"] = cred["expiresAt"]

				// Decode scopes
				res["scopes"] = cred["scopes"]

				// Decode api_products
				if apiProductsObj, productsOk := cred["apiProducts"]; productsOk {
					if apiProductList, listOk := apiProductsObj.([]interface{}); listOk {
						var flattenedProducts []interface{}
						for _, productObj := range apiProductList {
							if productMap, mapOk := productObj.(map[string]interface{}); mapOk {
								if productName, nameOk := productMap["apiproduct"].(string); nameOk {
									flattenedProducts = append(flattenedProducts, productName)
								}
							}
						}
						res["apiProducts"] = flattenedProducts
					}
				}

				delete(res, "credentials")
			} else {
				return nil, fmt.Errorf("Unable to decode the first element of the credentials array.")
			}
		} else {
			return nil, fmt.Errorf("Unable to decode credentials block from API response, expected a non-empty array.")
		}
	}
	return res, nil
}
