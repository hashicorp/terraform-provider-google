// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package apigee_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccApigeeDeveloperApp_apigeeDeveloperAppBasicTestExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		CheckDestroy: testAccCheckApigeeDeveloperAppDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccApigeeDeveloperApp_apigeeDeveloperAppBasicTestExample(context),
			},
			{
				ResourceName:            "google_apigee_developer_app.apigee_developer_app",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"developer_email", "org_id"},
			},
		},
	})
}

func testAccApigeeDeveloperApp_apigeeDeveloperAppBasicTestExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_apigee_developer_app" "apigee_developer_app" {
  name            = "tf-test-sample-app%{random_suffix}"
  app_family      = "default"
  developer_email = google_apigee_developer.developer.email
  org_id          = google_apigee_organization.apigee_org.id
  callback_url    = "https://example-call.url"
  key_expires_in  = "-1"
  status          = "approved"

  api_products = [
    google_apigee_api_product.api_product.name
  ]

  scopes = google_apigee_api_product.api_product.scopes

  attributes {
    name  = "sample_name"
    value = "sample_value"
  }
}

resource "google_apigee_api_product" "api_product" {
  name          = "tf-test-sample-api%{random_suffix}"
  org_id        = google_apigee_organization.apigee_org.id
  display_name  = "A sample API Product"
  approval_type = "auto"

  # Not in alphabetical order to test set
  scopes = [
    "read:weather",
    "write:reports",
    "write:files"
  ]

  depends_on = [
    google_apigee_instance.apigee_instance
  ]
}

resource "google_apigee_developer" "developer" {
  email      = "john.doe@acme.com%{random_suffix}"
  first_name = "John"
  last_name  = "Doe"
  user_name  = "john.doe"
  org_id     = google_apigee_organization.apigee_org.id

  depends_on = [
    google_apigee_instance.apigee_instance
  ]
}

resource "google_apigee_instance" "apigee_instance" {
  name     = "instance%{random_suffix}"
  location = "us-central1"
  org_id   = google_apigee_organization.apigee_org.id
}

resource "google_apigee_organization" "apigee_org" {
  analytics_region    = "us-central1"
  project_id          = google_project.project.project_id
  disable_vpc_peering = true

  depends_on = [
    google_project_service.apigee
  ]
}

resource "google_project_service" "apigee" {
  project = google_project.project.project_id
  service = "apigee.googleapis.com"

  depends_on = [time_sleep.wait_60_seconds]
}

resource "time_sleep" "wait_60_seconds" {
  create_duration = "60s"

  depends_on = [google_project.project]
}

resource "google_project" "project" {
  project_id      = "prj%{random_suffix}"
  name            = "prj%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  deletion_policy = "DELETE"
}
`, context)
}

func testAccCheckApigeeDeveloperAppDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_apigee_developer_app" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ApigeeBasePath}}{{org_id}}/developers/{{developer_email}}/apps/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ApigeeDeveloperApp still exists at %s", url)
			}
		}

		return nil
	}
}
