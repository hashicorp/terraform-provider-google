// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apigee/SecurityProfileV2.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceApigeeSecurityProfileV2() *schema.Resource {
	return &schema.Resource{
		Create: resourceApigeeSecurityProfileV2Create,
		Read:   resourceApigeeSecurityProfileV2Read,
		Update: resourceApigeeSecurityProfileV2Update,
		Delete: resourceApigeeSecurityProfileV2Delete,

		Importer: &schema.ResourceImporter{
			State: resourceApigeeSecurityProfileV2Import,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"org_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The Apigee Organization associated with the Apigee Security Profile V2,
in the format 'organizations/{{org_name}}'.`,
			},
			"profile_assessment_configs": {
				Type:        schema.TypeSet,
				Required:    true,
				Description: `A map of the assessment name and the assessment config.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"assessment": {
							Type:     schema.TypeString,
							Required: true,
						},
						"weight": {
							Type:         schema.TypeString,
							Required:     true,
							ValidateFunc: verify.ValidateEnum([]string{"MINOR", "MODERATE", "MAJOR"}),
							Description:  `The weight of the assessment. Possible values: ["MINOR", "MODERATE", "MAJOR"]`,
						},
					},
				},
			},
			"profile_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID of the security profile.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Description of the security profile.`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp at which this profile was created.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Name of the security profile v2 resource,
in the format 'organizations/{{org_name}}/securityProfilesV2/{{profile_id}}'.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp at which this profile was most recently updated.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceApigeeSecurityProfileV2Create(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandApigeeSecurityProfileV2Description(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	profileAssessmentConfigsProp, err := expandApigeeSecurityProfileV2ProfileAssessmentConfigs(d.Get("profile_assessment_configs"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("profile_assessment_configs"); !tpgresource.IsEmptyValue(reflect.ValueOf(profileAssessmentConfigsProp)) && (ok || !reflect.DeepEqual(v, profileAssessmentConfigsProp)) {
		obj["profileAssessmentConfigs"] = profileAssessmentConfigsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/securityProfilesV2?security_profile_v2_id={{profile_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new SecurityProfileV2: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating SecurityProfileV2: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{org_id}}/securityProfilesV2/{{profile_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating SecurityProfileV2 %q: %#v", d.Id(), res)

	return resourceApigeeSecurityProfileV2Read(d, meta)
}

func resourceApigeeSecurityProfileV2Read(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/securityProfilesV2/{{profile_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ApigeeSecurityProfileV2 %q", d.Id()))
	}

	if err := d.Set("name", flattenApigeeSecurityProfileV2Name(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityProfileV2: %s", err)
	}
	if err := d.Set("description", flattenApigeeSecurityProfileV2Description(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityProfileV2: %s", err)
	}
	if err := d.Set("profile_assessment_configs", flattenApigeeSecurityProfileV2ProfileAssessmentConfigs(res["profileAssessmentConfigs"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityProfileV2: %s", err)
	}
	if err := d.Set("create_time", flattenApigeeSecurityProfileV2CreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityProfileV2: %s", err)
	}
	if err := d.Set("update_time", flattenApigeeSecurityProfileV2UpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityProfileV2: %s", err)
	}

	return nil
}

func resourceApigeeSecurityProfileV2Update(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	descriptionProp, err := expandApigeeSecurityProfileV2Description(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	profileAssessmentConfigsProp, err := expandApigeeSecurityProfileV2ProfileAssessmentConfigs(d.Get("profile_assessment_configs"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("profile_assessment_configs"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, profileAssessmentConfigsProp)) {
		obj["profileAssessmentConfigs"] = profileAssessmentConfigsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/securityProfilesV2/{{profile_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating SecurityProfileV2 %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("profile_assessment_configs") {
		updateMask = append(updateMask, "profileAssessmentConfigs")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating SecurityProfileV2 %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating SecurityProfileV2 %q: %#v", d.Id(), res)
		}

	}

	return resourceApigeeSecurityProfileV2Read(d, meta)
}

func resourceApigeeSecurityProfileV2Delete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/securityProfilesV2/{{profile_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting SecurityProfileV2 %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "SecurityProfileV2")
	}

	log.Printf("[DEBUG] Finished deleting SecurityProfileV2 %q: %#v", d.Id(), res)
	return nil
}

func resourceApigeeSecurityProfileV2Import(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	// current import_formats cannot import fields with forward slashes in their value
	if err := tpgresource.ParseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
		return nil, err
	}

	nameParts := strings.Split(d.Get("name").(string), "/")
	if len(nameParts) == 4 {
		// `organizations/{{org_name}}/securityProfileV2/{{profile_id}}`
		orgId := fmt.Sprintf("organizations/%s", nameParts[1])
		if err := d.Set("org_id", orgId); err != nil {
			return nil, fmt.Errorf("Error setting org_id: %s", err)
		}
		if err := d.Set("profile_id", nameParts[3]); err != nil {
			return nil, fmt.Errorf("Error setting profile_id: %s", err)
		}
	} else {
		return nil, fmt.Errorf(
			"Saw %s when the name is expected to have shape %s",
			d.Get("name"),
			"organizations/{{org_name}}/securityProfileV2/{{name}}")
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{org_id}}/securityProfilesV2/{{profile_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenApigeeSecurityProfileV2Name(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityProfileV2Description(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityProfileV2ProfileAssessmentConfigs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.(map[string]interface{})
	transformed := make([]interface{}, 0, len(l))
	for k, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"assessment": k,
			"weight":     flattenApigeeSecurityProfileV2ProfileAssessmentConfigsWeight(original["weight"], d, config),
		})
	}
	return transformed
}
func flattenApigeeSecurityProfileV2ProfileAssessmentConfigsWeight(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityProfileV2CreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityProfileV2UpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandApigeeSecurityProfileV2Description(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityProfileV2ProfileAssessmentConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedWeight, err := expandApigeeSecurityProfileV2ProfileAssessmentConfigsWeight(original["weight"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedWeight); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["weight"] = transformedWeight
		}

		transformedAssessment, err := tpgresource.ExpandString(original["assessment"], d, config)
		if err != nil {
			return nil, err
		}
		m[transformedAssessment] = transformed
	}
	return m, nil
}

func expandApigeeSecurityProfileV2ProfileAssessmentConfigsWeight(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
