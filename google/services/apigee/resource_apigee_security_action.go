// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apigee/SecurityAction.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceApigeeSecurityAction() *schema.Resource {
	return &schema.Resource{
		Create: resourceApigeeSecurityActionCreate,
		Read:   resourceApigeeSecurityActionRead,
		Delete: resourceApigeeSecurityActionDelete,

		Importer: &schema.ResourceImporter{
			State: resourceApigeeSecurityActionImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"condition_config": {
				Type:        schema.TypeList,
				Required:    true,
				ForceNew:    true,
				Description: `A valid SecurityAction must contain at least one condition.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"access_tokens": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A list of accessTokens. Limit 1000 per action.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"api_keys": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A list of API keys. Limit 1000 per action.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"api_products": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A list of API Products. Limit 1000 per action.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"asns": {
							Type:     schema.TypeList,
							Optional: true,
							ForceNew: true,
							Description: `A list of ASN numbers to act on, e.g. 23. https://en.wikipedia.org/wiki/Autonomous_system_(Internet)
This uses int64 instead of uint32 because of https://linter.aip.dev/141/forbidden-types.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"bot_reasons": {
							Type:     schema.TypeList,
							Optional: true,
							ForceNew: true,
							Description: `A list of Bot Reasons. Current options: Flooder, Brute Guessor, Static Content Scraper,
OAuth Abuser, Robot Abuser, TorListRule, Advanced Anomaly Detection, Advanced API Scraper,
Search Engine Crawlers, Public Clouds, Public Cloud AWS, Public Cloud Azure, and Public Cloud Google.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"developer_apps": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A list of developer apps. Limit 1000 per action.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"developers": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A list of developers. Limit 1000 per action.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"http_methods": {
							Type:     schema.TypeList,
							Optional: true,
							ForceNew: true,
							Description: `Act only on particular HTTP methods. E.g. A read-only API can block POST/PUT/DELETE methods.
Accepted values are: GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE and PATCH.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"ip_address_ranges": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A list of IP addresses. This could be either IPv4 or IPv6. Limited to 100 per action.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"region_codes": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A list of countries/region codes to act on, e.g. US. This follows https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"user_agents": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A list of user agents to deny. We look for exact matches. Limit 50 per action.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
			"env_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The Apigee environment that this security action applies to.`,
			},
			"org_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The organization that this security action applies to.`,
			},
			"security_action_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The ID to use for the SecurityAction, which will become the final component of the action's resource name.
This value should be 0-61 characters, and valid format is (^a-z?$).`,
			},
			"state": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidateEnum([]string{"ENABLED", "DISABLED"}),
				Description:  `Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced. Possible values: ["ENABLED", "DISABLED"]`,
			},
			"allow": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `Allow a request through if it matches this SecurityAction.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
				ExactlyOneOf: []string{"allow", "deny", "flag"},
			},
			"api_proxies": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Description: `If unset, this would apply to all proxies in the environment.
If set, this action is enforced only if at least one proxy in the repeated
list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
There can be at most 100 enabled actions with proxies set in an env.
Several other restrictions apply on conditions and are detailed later.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"deny": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `Deny a request through if it matches this SecurityAction.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"response_code": {
							Type:        schema.TypeInt,
							Optional:    true,
							ForceNew:    true,
							Description: `The HTTP response code if the Action = DENY.`,
						},
					},
				},
				ExactlyOneOf: []string{"allow", "deny", "flag"},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `An optional user provided description of the SecurityAction.`,
			},
			"expire_time": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `The expiration for this SecurityAction.
Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
fractional digits. Offsets other than "Z" are also accepted.
Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".`,
				ConflictsWith: []string{"ttl"},
			},
			"flag": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `Flag a request through if it matches this SecurityAction.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"headers": {
							Type:     schema.TypeList,
							Optional: true,
							ForceNew: true,
							Description: `A list of HTTP headers to be sent to the target in case of a FLAG SecurityAction.
Limit 5 headers per SecurityAction.
At least one is mandatory.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										ForceNew:    true,
										Description: `The header name to be sent to the target.`,
									},
									"value": {
										Type:        schema.TypeString,
										Optional:    true,
										ForceNew:    true,
										Description: `The header value to be sent to the target.`,
									},
								},
							},
						},
					},
				},
				ExactlyOneOf: []string{"allow", "deny", "flag"},
			},
			"ttl": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `The TTL for this SecurityAction.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".`,
				ConflictsWith: []string{"expire_time"},
			},
			"create_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The create time for this SecurityAction.
Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".`,
			},
			"update_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The update time for this SecurityAction. This reflects when this SecurityAction changed states.
Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceApigeeSecurityActionCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandApigeeSecurityActionDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	stateProp, err := expandApigeeSecurityActionState(d.Get("state"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("state"); !tpgresource.IsEmptyValue(reflect.ValueOf(stateProp)) && (ok || !reflect.DeepEqual(v, stateProp)) {
		obj["state"] = stateProp
	}
	apiProxiesProp, err := expandApigeeSecurityActionApiProxies(d.Get("api_proxies"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("api_proxies"); !tpgresource.IsEmptyValue(reflect.ValueOf(apiProxiesProp)) && (ok || !reflect.DeepEqual(v, apiProxiesProp)) {
		obj["apiProxies"] = apiProxiesProp
	}
	conditionConfigProp, err := expandApigeeSecurityActionConditionConfig(d.Get("condition_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("condition_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(conditionConfigProp)) && (ok || !reflect.DeepEqual(v, conditionConfigProp)) {
		obj["conditionConfig"] = conditionConfigProp
	}
	allowProp, err := expandApigeeSecurityActionAllow(d.Get("allow"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("allow"); ok || !reflect.DeepEqual(v, allowProp) {
		obj["allow"] = allowProp
	}
	denyProp, err := expandApigeeSecurityActionDeny(d.Get("deny"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("deny"); !tpgresource.IsEmptyValue(reflect.ValueOf(denyProp)) && (ok || !reflect.DeepEqual(v, denyProp)) {
		obj["deny"] = denyProp
	}
	flagProp, err := expandApigeeSecurityActionFlag(d.Get("flag"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("flag"); !tpgresource.IsEmptyValue(reflect.ValueOf(flagProp)) && (ok || !reflect.DeepEqual(v, flagProp)) {
		obj["flag"] = flagProp
	}
	expireTimeProp, err := expandApigeeSecurityActionExpireTime(d.Get("expire_time"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("expire_time"); !tpgresource.IsEmptyValue(reflect.ValueOf(expireTimeProp)) && (ok || !reflect.DeepEqual(v, expireTimeProp)) {
		obj["expireTime"] = expireTimeProp
	}
	ttlProp, err := expandApigeeSecurityActionTtl(d.Get("ttl"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("ttl"); !tpgresource.IsEmptyValue(reflect.ValueOf(ttlProp)) && (ok || !reflect.DeepEqual(v, ttlProp)) {
		obj["ttl"] = ttlProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}organizations/{{org_id}}/environments/{{env_id}}/securityActions?securityActionId={{security_action_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new SecurityAction: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating SecurityAction: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating SecurityAction %q: %#v", d.Id(), res)

	return resourceApigeeSecurityActionRead(d, meta)
}

func resourceApigeeSecurityActionRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ApigeeSecurityAction %q", d.Id()))
	}

	if err := d.Set("description", flattenApigeeSecurityActionDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("state", flattenApigeeSecurityActionState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("create_time", flattenApigeeSecurityActionCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("update_time", flattenApigeeSecurityActionUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("api_proxies", flattenApigeeSecurityActionApiProxies(res["apiProxies"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("condition_config", flattenApigeeSecurityActionConditionConfig(res["conditionConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("allow", flattenApigeeSecurityActionAllow(res["allow"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("deny", flattenApigeeSecurityActionDeny(res["deny"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("flag", flattenApigeeSecurityActionFlag(res["flag"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("expire_time", flattenApigeeSecurityActionExpireTime(res["expireTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}
	if err := d.Set("ttl", flattenApigeeSecurityActionTtl(res["ttl"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityAction: %s", err)
	}

	return nil
}

func resourceApigeeSecurityActionDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting SecurityAction %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "SecurityAction")
	}

	log.Printf("[DEBUG] Finished deleting SecurityAction %q: %#v", d.Id(), res)
	return nil
}

func resourceApigeeSecurityActionImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^organizations/(?P<org_id>[^/]+)/environments/(?P<env_id>[^/]+)/securityActions/(?P<security_action_id>[^/]+)$",
		"^(?P<org_id>[^/]+)/(?P<env_id>[^/]+)/(?P<security_action_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenApigeeSecurityActionDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionApiProxies(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["ip_address_ranges"] =
		flattenApigeeSecurityActionConditionConfigIpAddressRanges(original["ipAddressRanges"], d, config)
	transformed["bot_reasons"] =
		flattenApigeeSecurityActionConditionConfigBotReasons(original["botReasons"], d, config)
	transformed["http_methods"] =
		flattenApigeeSecurityActionConditionConfigHttpMethods(original["httpMethods"], d, config)
	transformed["api_keys"] =
		flattenApigeeSecurityActionConditionConfigApiKeys(original["apiKeys"], d, config)
	transformed["access_tokens"] =
		flattenApigeeSecurityActionConditionConfigAccessTokens(original["accessTokens"], d, config)
	transformed["api_products"] =
		flattenApigeeSecurityActionConditionConfigApiProducts(original["apiProducts"], d, config)
	transformed["developer_apps"] =
		flattenApigeeSecurityActionConditionConfigDeveloperApps(original["developerApps"], d, config)
	transformed["developers"] =
		flattenApigeeSecurityActionConditionConfigDevelopers(original["developers"], d, config)
	transformed["user_agents"] =
		flattenApigeeSecurityActionConditionConfigUserAgents(original["userAgents"], d, config)
	transformed["region_codes"] =
		flattenApigeeSecurityActionConditionConfigRegionCodes(original["regionCodes"], d, config)
	transformed["asns"] =
		flattenApigeeSecurityActionConditionConfigAsns(original["asns"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeSecurityActionConditionConfigIpAddressRanges(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigBotReasons(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigHttpMethods(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigApiKeys(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigAccessTokens(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigApiProducts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigDeveloperApps(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigDevelopers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigUserAgents(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigRegionCodes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionConditionConfigAsns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionAllow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenApigeeSecurityActionDeny(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["response_code"] =
		flattenApigeeSecurityActionDenyResponseCode(original["responseCode"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeSecurityActionDenyResponseCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenApigeeSecurityActionFlag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["headers"] =
		flattenApigeeSecurityActionFlagHeaders(original["headers"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeSecurityActionFlagHeaders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":  flattenApigeeSecurityActionFlagHeadersName(original["name"], d, config),
			"value": flattenApigeeSecurityActionFlagHeadersValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenApigeeSecurityActionFlagHeadersName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionFlagHeadersValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionExpireTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityActionTtl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandApigeeSecurityActionDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionApiProxies(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIpAddressRanges, err := expandApigeeSecurityActionConditionConfigIpAddressRanges(original["ip_address_ranges"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIpAddressRanges); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ipAddressRanges"] = transformedIpAddressRanges
	}

	transformedBotReasons, err := expandApigeeSecurityActionConditionConfigBotReasons(original["bot_reasons"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBotReasons); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["botReasons"] = transformedBotReasons
	}

	transformedHttpMethods, err := expandApigeeSecurityActionConditionConfigHttpMethods(original["http_methods"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpMethods); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpMethods"] = transformedHttpMethods
	}

	transformedApiKeys, err := expandApigeeSecurityActionConditionConfigApiKeys(original["api_keys"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiKeys); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiKeys"] = transformedApiKeys
	}

	transformedAccessTokens, err := expandApigeeSecurityActionConditionConfigAccessTokens(original["access_tokens"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccessTokens); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["accessTokens"] = transformedAccessTokens
	}

	transformedApiProducts, err := expandApigeeSecurityActionConditionConfigApiProducts(original["api_products"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiProducts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiProducts"] = transformedApiProducts
	}

	transformedDeveloperApps, err := expandApigeeSecurityActionConditionConfigDeveloperApps(original["developer_apps"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeveloperApps); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["developerApps"] = transformedDeveloperApps
	}

	transformedDevelopers, err := expandApigeeSecurityActionConditionConfigDevelopers(original["developers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDevelopers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["developers"] = transformedDevelopers
	}

	transformedUserAgents, err := expandApigeeSecurityActionConditionConfigUserAgents(original["user_agents"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUserAgents); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["userAgents"] = transformedUserAgents
	}

	transformedRegionCodes, err := expandApigeeSecurityActionConditionConfigRegionCodes(original["region_codes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegionCodes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["regionCodes"] = transformedRegionCodes
	}

	transformedAsns, err := expandApigeeSecurityActionConditionConfigAsns(original["asns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAsns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["asns"] = transformedAsns
	}

	return transformed, nil
}

func expandApigeeSecurityActionConditionConfigIpAddressRanges(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigBotReasons(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigHttpMethods(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigApiKeys(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigAccessTokens(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigApiProducts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigDeveloperApps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigDevelopers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigUserAgents(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigRegionCodes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigAsns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionAllow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandApigeeSecurityActionDeny(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedResponseCode, err := expandApigeeSecurityActionDenyResponseCode(original["response_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResponseCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["responseCode"] = transformedResponseCode
	}

	return transformed, nil
}

func expandApigeeSecurityActionDenyResponseCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionFlag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHeaders, err := expandApigeeSecurityActionFlagHeaders(original["headers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["headers"] = transformedHeaders
	}

	return transformed, nil
}

func expandApigeeSecurityActionFlagHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandApigeeSecurityActionFlagHeadersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandApigeeSecurityActionFlagHeadersValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeSecurityActionFlagHeadersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionFlagHeadersValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionExpireTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionTtl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
