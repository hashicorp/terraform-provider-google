// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apigee/SecurityMonitoringCondition.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceApigeeSecurityMonitoringCondition() *schema.Resource {
	return &schema.Resource{
		Create: resourceApigeeSecurityMonitoringConditionCreate,
		Read:   resourceApigeeSecurityMonitoringConditionRead,
		Update: resourceApigeeSecurityMonitoringConditionUpdate,
		Delete: resourceApigeeSecurityMonitoringConditionDelete,

		Importer: &schema.ResourceImporter{
			State: resourceApigeeSecurityMonitoringConditionImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"condition_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID of the security monitoring condition.`,
			},
			"org_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The Apigee Organization associated with the Apigee Security Monitoring Condition,
in the format 'organizations/{{org_name}}'.`,
			},
			"profile": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `ID of security profile of the security monitoring condition.`,
			},
			"scope": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `ID of security profile of the security monitoring condition.`,
			},
			"include_all_resources": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `A nested object resource.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
				ExactlyOneOf: []string{"include_all_resources"},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp at which this profile was created.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Name of the security monitoring condition resource,
in the format 'organizations/{{org_name}}/securityMonitoringConditions/{{condition_id}}'.`,
			},
			"total_deployed_resources": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Total number of deployed resources within scope.`,
			},
			"total_monitored_resources": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Total number of monitored resources within this condition.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp at which this profile was most recently updated.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceApigeeSecurityMonitoringConditionCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	profileProp, err := expandApigeeSecurityMonitoringConditionProfile(d.Get("profile"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("profile"); !tpgresource.IsEmptyValue(reflect.ValueOf(profileProp)) && (ok || !reflect.DeepEqual(v, profileProp)) {
		obj["profile"] = profileProp
	}
	scopeProp, err := expandApigeeSecurityMonitoringConditionScope(d.Get("scope"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("scope"); !tpgresource.IsEmptyValue(reflect.ValueOf(scopeProp)) && (ok || !reflect.DeepEqual(v, scopeProp)) {
		obj["scope"] = scopeProp
	}
	includeAllResourcesProp, err := expandApigeeSecurityMonitoringConditionIncludeAllResources(d.Get("include_all_resources"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("include_all_resources"); ok || !reflect.DeepEqual(v, includeAllResourcesProp) {
		obj["includeAllResources"] = includeAllResourcesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/securityMonitoringConditions?security_monitoring_condition_id={{condition_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new SecurityMonitoringCondition: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating SecurityMonitoringCondition: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{org_id}}/securityMonitoringConditions/{{condition_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating SecurityMonitoringCondition %q: %#v", d.Id(), res)

	return resourceApigeeSecurityMonitoringConditionRead(d, meta)
}

func resourceApigeeSecurityMonitoringConditionRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/securityMonitoringConditions/{{condition_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ApigeeSecurityMonitoringCondition %q", d.Id()))
	}

	if err := d.Set("name", flattenApigeeSecurityMonitoringConditionName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityMonitoringCondition: %s", err)
	}
	if err := d.Set("profile", flattenApigeeSecurityMonitoringConditionProfile(res["profile"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityMonitoringCondition: %s", err)
	}
	if err := d.Set("scope", flattenApigeeSecurityMonitoringConditionScope(res["scope"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityMonitoringCondition: %s", err)
	}
	if err := d.Set("include_all_resources", flattenApigeeSecurityMonitoringConditionIncludeAllResources(res["includeAllResources"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityMonitoringCondition: %s", err)
	}
	if err := d.Set("create_time", flattenApigeeSecurityMonitoringConditionCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityMonitoringCondition: %s", err)
	}
	if err := d.Set("update_time", flattenApigeeSecurityMonitoringConditionUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityMonitoringCondition: %s", err)
	}
	if err := d.Set("total_monitored_resources", flattenApigeeSecurityMonitoringConditionTotalMonitoredResources(res["totalMonitoredResources"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityMonitoringCondition: %s", err)
	}
	if err := d.Set("total_deployed_resources", flattenApigeeSecurityMonitoringConditionTotalDeployedResources(res["totalDeployedResources"], d, config)); err != nil {
		return fmt.Errorf("Error reading SecurityMonitoringCondition: %s", err)
	}

	return nil
}

func resourceApigeeSecurityMonitoringConditionUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	profileProp, err := expandApigeeSecurityMonitoringConditionProfile(d.Get("profile"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("profile"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, profileProp)) {
		obj["profile"] = profileProp
	}
	scopeProp, err := expandApigeeSecurityMonitoringConditionScope(d.Get("scope"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("scope"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, scopeProp)) {
		obj["scope"] = scopeProp
	}
	includeAllResourcesProp, err := expandApigeeSecurityMonitoringConditionIncludeAllResources(d.Get("include_all_resources"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("include_all_resources"); ok || !reflect.DeepEqual(v, includeAllResourcesProp) {
		obj["includeAllResources"] = includeAllResourcesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/securityMonitoringConditions/{{condition_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating SecurityMonitoringCondition %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating SecurityMonitoringCondition %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating SecurityMonitoringCondition %q: %#v", d.Id(), res)
	}

	return resourceApigeeSecurityMonitoringConditionRead(d, meta)
}

func resourceApigeeSecurityMonitoringConditionDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/securityMonitoringConditions/{{condition_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting SecurityMonitoringCondition %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "SecurityMonitoringCondition")
	}

	log.Printf("[DEBUG] Finished deleting SecurityMonitoringCondition %q: %#v", d.Id(), res)
	return nil
}

func resourceApigeeSecurityMonitoringConditionImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	// current import_formats cannot import fields with forward slashes in their value
	if err := tpgresource.ParseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
		return nil, err
	}

	nameParts := strings.Split(d.Get("name").(string), "/")
	if len(nameParts) == 4 {
		// `organizations/{{org_name}}/securityMonitoringConditions/{{condition_id}}`
		orgId := fmt.Sprintf("organizations/%s", nameParts[1])
		if err := d.Set("org_id", orgId); err != nil {
			return nil, fmt.Errorf("Error setting org_id: %s", err)
		}
		if err := d.Set("condition_id", nameParts[3]); err != nil {
			return nil, fmt.Errorf("Error setting condition_id: %s", err)
		}
	} else {
		return nil, fmt.Errorf(
			"Saw %s when the name is expected to have shape %s",
			d.Get("name"),
			"organizations/{{org_name}}/securityMonitoringConditions/{{name}}")
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{org_id}}/securityMonitoringConditions/{{condition_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenApigeeSecurityMonitoringConditionName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityMonitoringConditionProfile(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityMonitoringConditionScope(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityMonitoringConditionIncludeAllResources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenApigeeSecurityMonitoringConditionCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityMonitoringConditionUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeSecurityMonitoringConditionTotalMonitoredResources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenApigeeSecurityMonitoringConditionTotalDeployedResources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func expandApigeeSecurityMonitoringConditionProfile(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityMonitoringConditionScope(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityMonitoringConditionIncludeAllResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}
