// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceApigeeAppGroup() *schema.Resource {
	return &schema.Resource{
		Create: resourceApigeeAppGroupCreate,
		Read:   resourceApigeeAppGroupRead,
		Update: resourceApigeeAppGroupUpdate,
		Delete: resourceApigeeAppGroupDelete,

		Importer: &schema.ResourceImporter{
			State: resourceApigeeAppGroupImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.`,
			},
			"org_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The Apigee Organization associated with the Apigee app group,
in the format 'organizations/{{org_name}}'.`,
			},
			"attributes": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `A list of attributes`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Key of the attribute`,
						},
						"value": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Value of the attribute`,
						},
					},
				},
			},
			"channel_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Channel identifier identifies the owner maintaing this grouping.`,
			},
			"channel_uri": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `A reference to the associated storefront/marketplace.`,
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `App group name displayed in the UI`,
			},
			"status": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"active", "inactive", ""}),
				Description:  `Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive. Possible values: ["active", "inactive"]`,
			},
			"app_group_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Internal identifier that cannot be edited`,
			},
			"created_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Created time as milliseconds since epoch.`,
			},
			"last_modified_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Modified time as milliseconds since epoch.`,
			},
			"organization": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `App group name displayed in the UI`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceApigeeAppGroupCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandApigeeAppGroupName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	channelUriProp, err := expandApigeeAppGroupChannelUri(d.Get("channel_uri"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("channel_uri"); !tpgresource.IsEmptyValue(reflect.ValueOf(channelUriProp)) && (ok || !reflect.DeepEqual(v, channelUriProp)) {
		obj["channelUri"] = channelUriProp
	}
	channelIdProp, err := expandApigeeAppGroupChannelId(d.Get("channel_id"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("channel_id"); !tpgresource.IsEmptyValue(reflect.ValueOf(channelIdProp)) && (ok || !reflect.DeepEqual(v, channelIdProp)) {
		obj["channelId"] = channelIdProp
	}
	displayNameProp, err := expandApigeeAppGroupDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	statusProp, err := expandApigeeAppGroupStatus(d.Get("status"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("status"); !tpgresource.IsEmptyValue(reflect.ValueOf(statusProp)) && (ok || !reflect.DeepEqual(v, statusProp)) {
		obj["status"] = statusProp
	}
	attributesProp, err := expandApigeeAppGroupAttributes(d.Get("attributes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("attributes"); !tpgresource.IsEmptyValue(reflect.ValueOf(attributesProp)) && (ok || !reflect.DeepEqual(v, attributesProp)) {
		obj["attributes"] = attributesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/appgroups")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new AppGroup: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating AppGroup: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{org_id}}/appgroups/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating AppGroup %q: %#v", d.Id(), res)

	return resourceApigeeAppGroupRead(d, meta)
}

func resourceApigeeAppGroupRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/appgroups/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ApigeeAppGroup %q", d.Id()))
	}

	if err := d.Set("app_group_id", flattenApigeeAppGroupAppGroupId(res["appGroupId"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}
	if err := d.Set("name", flattenApigeeAppGroupName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}
	if err := d.Set("channel_uri", flattenApigeeAppGroupChannelUri(res["channelUri"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}
	if err := d.Set("channel_id", flattenApigeeAppGroupChannelId(res["channelId"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}
	if err := d.Set("display_name", flattenApigeeAppGroupDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}
	if err := d.Set("organization", flattenApigeeAppGroupOrganization(res["organization"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}
	if err := d.Set("status", flattenApigeeAppGroupStatus(res["status"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}
	if err := d.Set("attributes", flattenApigeeAppGroupAttributes(res["attributes"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}
	if err := d.Set("created_at", flattenApigeeAppGroupCreatedAt(res["createdAt"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}
	if err := d.Set("last_modified_at", flattenApigeeAppGroupLastModifiedAt(res["lastModifiedAt"], d, config)); err != nil {
		return fmt.Errorf("Error reading AppGroup: %s", err)
	}

	return nil
}

func resourceApigeeAppGroupUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	nameProp, err := expandApigeeAppGroupName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	channelUriProp, err := expandApigeeAppGroupChannelUri(d.Get("channel_uri"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("channel_uri"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, channelUriProp)) {
		obj["channelUri"] = channelUriProp
	}
	channelIdProp, err := expandApigeeAppGroupChannelId(d.Get("channel_id"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("channel_id"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, channelIdProp)) {
		obj["channelId"] = channelIdProp
	}
	displayNameProp, err := expandApigeeAppGroupDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	statusProp, err := expandApigeeAppGroupStatus(d.Get("status"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("status"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, statusProp)) {
		obj["status"] = statusProp
	}
	attributesProp, err := expandApigeeAppGroupAttributes(d.Get("attributes"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("attributes"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, attributesProp)) {
		obj["attributes"] = attributesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/appgroups/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating AppGroup %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PUT",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating AppGroup %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating AppGroup %q: %#v", d.Id(), res)
	}

	return resourceApigeeAppGroupRead(d, meta)
}

func resourceApigeeAppGroupDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{ApigeeBasePath}}{{org_id}}/appgroups/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting AppGroup %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "AppGroup")
	}

	log.Printf("[DEBUG] Finished deleting AppGroup %q: %#v", d.Id(), res)
	return nil
}

func resourceApigeeAppGroupImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	// current import_formats cannot import fields with forward slashes in their value
	if err := tpgresource.ParseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
		return nil, err
	}

	nameParts := strings.Split(d.Get("name").(string), "/")
	if len(nameParts) == 4 {
		// `organizations/{{org_name}}/appgroups/{{name}}`
		orgId := fmt.Sprintf("organizations/%s", nameParts[1])
		if err := d.Set("org_id", orgId); err != nil {
			return nil, fmt.Errorf("Error setting org_id: %s", err)
		}
		if err := d.Set("name", nameParts[3]); err != nil {
			return nil, fmt.Errorf("Error setting name: %s", err)
		}
	} else if len(nameParts) == 3 {
		// `organizations/{{org_name}}/{{name}}`
		orgId := fmt.Sprintf("organizations/%s", nameParts[1])
		if err := d.Set("org_id", orgId); err != nil {
			return nil, fmt.Errorf("Error setting org_id: %s", err)
		}
		if err := d.Set("name", nameParts[2]); err != nil {
			return nil, fmt.Errorf("Error setting name: %s", err)
		}
	} else {
		return nil, fmt.Errorf(
			"Saw %s when the name is expected to have shape %s or %s",
			d.Get("name"),
			"organizations/{{org_name}}/appgroups/{{name}}",
			"organizations/{{org_name}}/{{name}}")
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{org_id}}/appgroups/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenApigeeAppGroupAppGroupId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupChannelUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupChannelId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupOrganization(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupAttributes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":  flattenApigeeAppGroupAttributesName(original["name"], d, config),
			"value": flattenApigeeAppGroupAttributesValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenApigeeAppGroupAttributesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupAttributesValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupCreatedAt(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAppGroupLastModifiedAt(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandApigeeAppGroupName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeAppGroupChannelUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeAppGroupChannelId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeAppGroupDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeAppGroupStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeAppGroupAttributes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandApigeeAppGroupAttributesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandApigeeAppGroupAttributesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeAppGroupAttributesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeAppGroupAttributesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
