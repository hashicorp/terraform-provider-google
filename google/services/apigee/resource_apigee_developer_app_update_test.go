// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/apigee/resource_apigee_developer_app_update_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package apigee_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccApigeeDeveloperApp_apigeeDeveloperAppUpdateTest(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		CheckDestroy: testAccCheckApigeeDeveloperAppDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccApigeeDeveloperApp_apigeeDeveloperAppBasicTest(context),
			},
			{
				ResourceName:            "google_apigee_developer_app.apigee_developer_app",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"org_id"},
			},
			{
				Config: testAccApigeeDeveloperApp_apigeeDeveloperAppUpdateTest(context),
			},
			{
				ResourceName:            "google_apigee_developer_app.apigee_developer_app",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"org_id"},
			},
		},
	})
}

func testAccApigeeDeveloperApp_apigeeDeveloperAppBasicTest(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_apigee_developer_app" "apigee_developer_app" {
  name            = "tf-test-sample-app%{random_suffix}"
  app_family      = "default"
  org_id          = google_apigee_organization.apigee_org.id
  developer_email = google_apigee_developer.developer.email
  callback_url    = "https://example-call.url"
  key_expires_in  = "-1"
  status          = "approved"

  api_products = [
    google_apigee_api_product.api_product.name
  ]

  scopes = google_apigee_api_product.api_product.scopes
}

resource "google_apigee_api_product" "api_product" {
  name          = "tf-test-sample-api%{random_suffix}"
  org_id        = google_apigee_organization.apigee_org.id
  display_name  = "A sample API Product"
  approval_type = "auto"

  # Put scopes in reverse order to test set
  scopes = [
    "write:reports",
    "read:weather"
  ]

  depends_on = [
    google_apigee_instance.apigee_instance
  ]
}

resource "google_apigee_developer" "developer" {
  email      = "john.doe@acme.com%{random_suffix}"
  first_name = "John"
  last_name  = "Doe"
  user_name  = "john.doe"
  org_id     = google_apigee_organization.apigee_org.id

  depends_on = [
    google_apigee_instance.apigee_instance
  ]
}

resource "google_apigee_instance" "apigee_instance" {
  name     = "tf-test-instance%{random_suffix}"
  location = "us-central1"
  org_id   = google_apigee_organization.apigee_org.id
}

resource "google_apigee_organization" "apigee_org" {
  analytics_region    = "us-central1"
  project_id          = google_project.project.project_id
  disable_vpc_peering = true

  depends_on = [
    google_project_service.apigee
  ]
}

resource "google_project_service" "apigee" {
  project = google_project.project.project_id
  service = "apigee.googleapis.com"

  depends_on = [time_sleep.wait_60_seconds]
}

resource "time_sleep" "wait_60_seconds" {
  create_duration = "60s"

  depends_on = [google_project.project]
}

resource "google_project" "project" {
  project_id      = "tf-test-prj%{random_suffix}"
  name            = "tf-test-prj%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  deletion_policy = "DELETE"
}
`, context)
}

func testAccApigeeDeveloperApp_apigeeDeveloperAppUpdateTest(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_apigee_developer_app" "apigee_developer_app" {
  name            = "tf-test-sample-app%{random_suffix}"
  app_family      = "default"
  org_id          = google_apigee_organization.apigee_org.id
  developer_email = google_apigee_developer.developer.email
  callback_url    = "https://example-call.url/updated"
  key_expires_in  = "-1"
  status          = "approved"

  # Put api_products in reverse order to test set
  api_products = [
    google_apigee_api_product.api_product.name,
    google_apigee_api_product.another_api_product.name
  ]

  scopes = concat(
  	google_apigee_api_product.api_product.scopes,
  	google_apigee_api_product.another_api_product.scopes
  )
}

resource "google_apigee_api_product" "api_product" {
  name          = "tf-test-sample-api%{random_suffix}"
  org_id        = google_apigee_organization.apigee_org.id
  display_name  = "A sample API Product"
  approval_type = "auto"

  scopes = [
    "write:reports",
    "read:weather"
  ]

  depends_on = [
    google_apigee_instance.apigee_instance
  ]
}

resource "google_apigee_api_product" "another_api_product" {
  name          = "tf-test-another-sample-api%{random_suffix}"
  org_id        = google_apigee_organization.apigee_org.id
  display_name  = "Another Sample API Product"
  approval_type = "auto"

  scopes = [
    "write:files",
    "read:weather"
  ]

  depends_on = [
    google_apigee_instance.apigee_instance
  ]
}

resource "google_apigee_developer" "developer" {
  email      = "john.doe@acme.com%{random_suffix}"
  first_name = "John"
  last_name  = "Doe"
  user_name  = "john.doe"
  org_id     = google_apigee_organization.apigee_org.id

  depends_on = [
    google_apigee_instance.apigee_instance
  ]
}

resource "google_apigee_instance" "apigee_instance" {
  name     = "tf-test-instance%{random_suffix}"
  location = "us-central1"
  org_id   = google_apigee_organization.apigee_org.id
}

resource "google_apigee_organization" "apigee_org" {
  analytics_region    = "us-central1"
  project_id          = google_project.project.project_id
  disable_vpc_peering = true

  depends_on = [
    google_project_service.apigee
  ]
}

resource "google_project_service" "apigee" {
  project = google_project.project.project_id
  service = "apigee.googleapis.com"

  depends_on = [time_sleep.wait_60_seconds]
}

resource "time_sleep" "wait_60_seconds" {
  create_duration = "60s"

  depends_on = [google_project.project]
}

resource "google_project" "project" {
  project_id      = "tf-test-prj%{random_suffix}"
  name            = "tf-test-prj%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  deletion_policy = "DELETE"
}
`, context)
}
