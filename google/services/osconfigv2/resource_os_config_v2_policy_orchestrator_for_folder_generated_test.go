// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package osconfigv2_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccOSConfigV2PolicyOrchestratorForFolder_osconfigv2PolicyOrchestratorForFolderBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"zone":          envvar.GetTestZoneFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		CheckDestroy: testAccCheckOSConfigV2PolicyOrchestratorForFolderDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccOSConfigV2PolicyOrchestratorForFolder_osconfigv2PolicyOrchestratorForFolderBasicExample(context),
			},
			{
				ResourceName:            "google_os_config_v2_policy_orchestrator_for_folder.policy_orchestrator_for_folder",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"folder_id", "labels", "policy_orchestrator_id", "terraform_labels"},
			},
		},
	})
}

func testAccOSConfigV2PolicyOrchestratorForFolder_osconfigv2PolicyOrchestratorForFolderBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_folder" "my_folder" {
    display_name        = "tf-test-po-folder%{random_suffix}"
    parent              = "organizations/%{org_id}"
    deletion_protection = false
}

resource "google_folder_service_identity" "osconfig_sa" {
  folder  = google_folder.my_folder.folder_id
  service = "osconfig.googleapis.com"
}

resource "google_folder_service_identity" "ripple_sa" {
  folder  = google_folder.my_folder.folder_id
  service = "progressiverollout.googleapis.com"
}

resource "time_sleep" "wait_30_sec" {
    depends_on = [
        google_folder_service_identity.osconfig_sa,
        google_folder_service_identity.ripple_sa,
    ]
    create_duration = "30s"
}

resource "google_folder_iam_member" "iam_osconfig_service_agent" {
    depends_on = [time_sleep.wait_30_sec]
    folder = google_folder.my_folder.folder_id
    role   = "roles/osconfig.serviceAgent"
    member = google_folder_service_identity.osconfig_sa.member
}

resource "google_folder_iam_member" "iam_osconfig_rollout_service_agent" {
    depends_on = [google_folder_iam_member.iam_osconfig_service_agent]
    folder     = google_folder.my_folder.folder_id
    role       = "roles/osconfig.rolloutServiceAgent"
    member     = "serviceAccount:service-folder-${google_folder.my_folder.folder_id}@gcp-sa-osconfig-rollout.iam.gserviceaccount.com"
}

resource "google_folder_iam_member" "iam_progressiverollout_service_agent" {
    depends_on = [google_folder_iam_member.iam_osconfig_rollout_service_agent]
    folder = google_folder.my_folder.folder_id
    role   = "roles/progressiverollout.serviceAgent"
    member = google_folder_service_identity.ripple_sa.member
}

resource "time_sleep" "wait_3_min" {
    depends_on = [google_folder_iam_member.iam_progressiverollout_service_agent]
    create_duration = "180s"
}

resource "google_os_config_v2_policy_orchestrator_for_folder" "policy_orchestrator_for_folder" {
    depends_on = [time_sleep.wait_3_min]

    policy_orchestrator_id = "tf-test-po-folder%{random_suffix}"
    folder_id = google_folder.my_folder.folder_id
    
    state = "ACTIVE"
    action = "UPSERT"
    
    orchestrated_resource {
        id = "tf-test-test-orchestrated-resource-folder%{random_suffix}"
        os_policy_assignment_v1_payload {
            os_policies {
                id = "tf-test-test-os-policy-folder%{random_suffix}"
                mode = "VALIDATION"
                resource_groups {
                    resources {
                        id = "resource-tf"
                        file {
                            content = "file-content-tf"
                            path = "file-path-tf-1"
                            state = "PRESENT"
                        }
                    }
                }
            }
            instance_filter {
                inventories {
                    os_short_name = "windows-10"
                }
            }
            rollout {
                disruption_budget {
                    percent = 100
                }
                min_wait_duration = "60s"
            }
        }
    }
    labels = {
        state = "active"
    }
    orchestration_scope {
        selectors {
            location_selector {
                included_locations = ["%{zone}"]
            }
        }
    }
}
`, context)
}

func testAccCheckOSConfigV2PolicyOrchestratorForFolderDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_os_config_v2_policy_orchestrator_for_folder" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{OSConfigV2BasePath}}folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("OSConfigV2PolicyOrchestratorForFolder still exists at %s", url)
			}
		}

		return nil
	}
}
