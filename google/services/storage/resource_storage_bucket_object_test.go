// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/storage/resource_storage_bucket_object_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package storage_test

import (
	"crypto/sha256"
	"encoding/base64"
	"encoding/binary"
	"fmt"
	"hash/crc32"
	"io/ioutil"
	"os"
	"testing"

	"github.com/hashicorp/terraform-provider-google/google/acctest"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"google.golang.org/api/storage/v1"
)

const (
	objectName = "tf-gce-test"
	content    = "now this is content!"
)

func calculateCrc32cHash(data []byte) string {
	var crc32cTable = crc32.MakeTable(crc32.Castagnoli)
	checksum := crc32.Checksum(data, crc32cTable)
	b := make([]byte, 4)
	binary.BigEndian.PutUint32(b, checksum)
	encodedCrc32c := base64.StdEncoding.EncodeToString(b)
	return encodedCrc32c
}

func TestAccStorageObject_basic(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	data := []byte("data data data")

	crc32c := calculateCrc32cHash(data)

	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectBasic(bucketName, testFile.Name()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrSet("google_storage_bucket_object.object", "md5hexhash"),
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, crc32c),
				),
			},
		},
	})
}

func TestAccStorageObject_recreate(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)

	writeFile := func(name string, data []byte) string {
		dataCrc32c := calculateCrc32cHash(data)

		if err := ioutil.WriteFile(name, data, 0644); err != nil {
			t.Errorf("error writing file: %v", err)
		}
		return dataCrc32c
	}
	testFile := getNewTmpTestFile(t, "tf-test")
	dataCrc32c := writeFile(testFile.Name(), []byte("data data data"))
	updatedName := testFile.Name() + ".update"
	updatedDataCrc32c := writeFile(updatedName, []byte("datum"))

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectBasic(bucketName, testFile.Name()),
				Check:  testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
			},
			{
				PreConfig: func() {
					err := os.Rename(updatedName, testFile.Name())
					if err != nil {
						t.Errorf("Failed to rename %s to %s", updatedName, testFile.Name())
					}
				},
				Config: testGoogleStorageBucketsObjectBasic(bucketName, testFile.Name()),
				Check:  testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, updatedDataCrc32c),
			},
		},
	})
}

func TestAccStorageObject_content(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	data := []byte(content)

	dataCrc32c := calculateCrc32cHash(data)

	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectContent(bucketName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "content_type", "text/plain; charset=utf-8"),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "storage_class", "STANDARD"),
				),
			},
			{
				Config: testGoogleStorageBucketsObjectEmptyContentType(bucketName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "content_type", ""),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "storage_class", "STANDARD"),
				),
			},
			{
				Config: testGoogleStorageBucketsObjectContent(bucketName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "content_type", "text/plain; charset=utf-8"),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "storage_class", "STANDARD"),
				),
			},
		},
	})
}

func TestAccStorageObject_folder(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	folderName := "tf-gce-folder-test/"
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsFolder(bucketName, folderName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageFolder(t, bucketName, folderName),
				),
			},
		},
	})
}

func TestAccStorageObject_withContentCharacteristics(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	data := []byte(content)

	dataCrc32c := calculateCrc32cHash(data)
	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}

	disposition, encoding, language, content_type := "inline", "compress", "en", "binary/octet-stream"
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectOptionalContentFields(
					bucketName, disposition, encoding, language, content_type),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "content_disposition", disposition),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "content_encoding", encoding),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "content_language", language),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "content_type", content_type),
				),
			},
		},
	})
}

func TestAccStorageObject_dynamicContent(t *testing.T) {
	t.Parallel()

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectDynamicContent(acctest.TestBucketName(t)),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "content_type", "text/plain; charset=utf-8"),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "storage_class", "STANDARD"),
				),
			},
		},
	})
}

func TestAccStorageObject_cacheControl(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	data := []byte(content)
	dataCrc32c := calculateCrc32cHash(data)
	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}

	cacheControl := "private"
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectCacheControl(bucketName, testFile.Name(), cacheControl),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "cache_control", cacheControl),
				),
			},
		},
	})
}

func TestAccStorageObject_storageClass(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	data := []byte(content)
	dataCrc32c := calculateCrc32cHash(data)
	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}

	storageClass := "MULTI_REGIONAL"
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectStorageClass(bucketName, storageClass),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "storage_class", storageClass),
				),
			},
		},
	})
}

func TestAccStorageObject_metadata(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	data := []byte(content)
	dataCrc32c := calculateCrc32cHash(data)
	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectMetadata(bucketName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "metadata.customKey", "custom_value"),
				),
			},
		},
	})
}

func TestAccStorageObjectKms(t *testing.T) {
	t.Parallel()

	kms := acctest.BootstrapKMSKeyInLocation(t, "us")
	bucketName := acctest.TestBucketName(t)
	data := []byte("data data data")
	dataCrc32c := calculateCrc32cHash(data)

	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectKms(bucketName, testFile.Name(), kms.CryptoKey.Name),
				Check:  testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
			},
		},
	})
}

func TestAccStorageObject_customerEncryption(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	data := []byte(content)

	dataCrc32c := calculateCrc32cHash(data)

	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}

	customerEncryptionKey := "qI6+xvCZE9jUm94nJWIulFc8rthN64ybkGCsLUY9Do4="
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectCustomerEncryption(bucketName, customerEncryptionKey),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cWithEncryption(t, bucketName, objectName, dataCrc32c, customerEncryptionKey),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "customer_encryption.0.encryption_key", customerEncryptionKey),
				),
			},
		},
	})
}

func TestAccStorageObject_holds(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	data := []byte(content)
	dataCrc32c := calculateCrc32cHash(data)
	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectHolds(bucketName, true, true),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "event_based_hold", "true"),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "temporary_hold", "true"),
				),
			},
			{
				Config: testGoogleStorageBucketsObjectHolds(bucketName, false, false),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "event_based_hold", "false"),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object", "temporary_hold", "false"),
				),
			},
		},
	})
}

func TestAccStorageObject_retention(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	data := []byte(content)
	dataCrc32c := calculateCrc32cHash(data)
	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectRetention(bucketName, "2040-01-01T02:03:04.000Z"),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
				),
			},
			{
				Config: testGoogleStorageBucketsObjectRetention(bucketName, "2040-01-02T02:03:04.000Z"),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
				),
			},
			{
				Config: testGoogleStorageBucketsObjectRetentionDisabled(bucketName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
				),
			},
		},
	})
}

func TestResourceStorageBucketObjectUpdate_ContentChange(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	initialContent := []byte("initial content")
	updatedContent := []byte("updated content")

	dataCrc32c := calculateCrc32cHash(initialContent)

	newDataCrc32c := calculateCrc32cHash(updatedContent)
	// Update the object content and verify
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectCustomContent(bucketName, string(initialContent)),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object",
						"content",
						string(initialContent),
					),
				),
			},
			{
				Config: testGoogleStorageBucketsObjectCustomContent(bucketName, string(updatedContent)),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, newDataCrc32c),
					resource.TestCheckResourceAttr(
						"google_storage_bucket_object.object",
						"content",
						string(updatedContent),
					),
				),
			},
		},
	})
}

func TestAccStorageObject_sourceMd5Hash(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)

	data := []byte("data data data")

	dataCrc32c := calculateCrc32cHash(data)

	updatedata := []byte("datum")
	updatedDataCrc32c := calculateCrc32cHash(updatedata)

	testFile := getNewTmpTestFile(t, "tf-test")
	if err := ioutil.WriteFile(testFile.Name(), data, 0644); err != nil {
		t.Errorf("error writing file: %v", err)
	}

	newData := []byte("sample")
	newCrc32c := calculateCrc32cHash(newData)

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectBasic(bucketName, testFile.Name()),
				Check:  testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, dataCrc32c),
			},
			{
				PreConfig: func() {
					if err := ioutil.WriteFile(testFile.Name(), updatedata, 0644); err != nil {
						t.Errorf("error writing file: %v", err)
					}
				},
				Config: testGoogleStorageBucketsObjectFileMd5(bucketName, testFile.Name(), updatedDataCrc32c),
				Check:  testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, updatedDataCrc32c),
			},
			{
				Config: testGoogleStorageBucketsObjectFileMd5(bucketName, testFile.Name(), newCrc32c),
				Check:  testAccCheckGoogleStorageObjectCrc32cHash(t, bucketName, objectName, updatedDataCrc32c),
			},
		},
	})
}

func TestAccStorageObject_knownAfterApply(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)
	destinationFilePath := getNewTmpTestFile(t, "tf-test-apply-")

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"local": resource.ExternalProvider{
				VersionConstraint: "> 2.5.0",
			},
		},
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketObject(bucketName, "first", destinationFilePath.Name()),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageValidOutput(t),
				),
			},
			{
				Config: testGoogleStorageBucketObjectKnownAfterApply(bucketName, "second", destinationFilePath.Name()),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGoogleStorageValidOutput(t),
				),
			},
		},
	})
}

func TestAccStorageObject_objectDeletionPolicy(t *testing.T) {
	t.Parallel()

	bucketName := acctest.TestBucketName(t)

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccStorageObjectDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testGoogleStorageBucketsObjectDeletionPolicy(bucketName, "samplecontent"),
			},
			{
				Config: testGoogleStorageBucketsObjectAbandon(bucketName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckStorageObjectExists(t, bucketName),
				),
			},
		},
	})
}

func testAccCheckGoogleStorageObjectCrc32cHash(t *testing.T, bucket, object, crc32 string) resource.TestCheckFunc {
	return testAccCheckGoogleStorageObjectCrc32cWithEncryption(t, bucket, object, crc32, "")
}

func testAccCheckGoogleStorageObjectCrc32cWithEncryption(t *testing.T, bucket, object, crc32 string, customerEncryptionKey string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		config := acctest.GoogleProviderConfig(t)

		objectsService := storage.NewObjectsService(config.NewStorageClient(config.UserAgent))

		getCall := objectsService.Get(bucket, object)
		if customerEncryptionKey != "" {
			decodedKey, _ := base64.StdEncoding.DecodeString(customerEncryptionKey)
			keyHash := sha256.Sum256(decodedKey)
			headers := getCall.Header()
			headers.Set("x-goog-encryption-algorithm", "AES256")
			headers.Set("x-goog-encryption-key", customerEncryptionKey)
			headers.Set("x-goog-encryption-key-sha256", base64.StdEncoding.EncodeToString(keyHash[:]))
		}

		res, err := getCall.Do()

		if err != nil {
			return fmt.Errorf("Error retrieving contents of object %s: %s", object, err)
		}

		if crc32 != res.Crc32c {
			return fmt.Errorf("Error contents of %s garbled, md5 hashes don't match (%s, %s)", object, crc32, res.Crc32c)
		}

		return nil
	}
}

func testAccCheckGoogleStorageFolder(t *testing.T, bucket, folderName string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		config := acctest.GoogleProviderConfig(t)

		objectsService := storage.NewObjectsService(config.NewStorageClient(config.UserAgent))

		getCall := objectsService.Get(bucket, folderName)
		res, err := getCall.Do()

		if err != nil {
			return fmt.Errorf("Error retrieving folder %s: %s", folderName, err)
		}

		if folderName != res.Name {
			return fmt.Errorf("Error folder name don't match (%s, %s)", folderName, res.Name)
		}

		return nil
	}
}

func testAccStorageObjectDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		config := acctest.GoogleProviderConfig(t)

		for _, rs := range s.RootModule().Resources {
			if rs.Type != "google_storage_bucket_object" {
				continue
			}

			bucket := rs.Primary.Attributes["bucket"]
			name := rs.Primary.Attributes["name"]

			objectsService := storage.NewObjectsService(config.NewStorageClient(config.UserAgent))

			getCall := objectsService.Get(bucket, name)
			_, err := getCall.Do()

			if err == nil {
				return fmt.Errorf("Object %s still exists", name)
			}
		}

		return nil
	}
}

func testGoogleStorageBucketsObjectCustomContent(bucketName string, customContent string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name          = "%s"
  location      = "US"
  force_destroy = true
}

resource "google_storage_bucket_object" "object" {
  name    = "%s"
  bucket  = google_storage_bucket.bucket.name
  content = "%s"
}
`, bucketName, objectName, customContent)
}

func testGoogleStorageBucketsObjectContent(bucketName string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name          = "%s"
  location      = "US"
  force_destroy = true
}

resource "google_storage_bucket_object" "object" {
  name    = "%s"
  bucket  = google_storage_bucket.bucket.name
  content = "%s"
}
`, bucketName, objectName, content)
}

func testGoogleStorageBucketsObjectEmptyContentType(bucketName string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name          = "%s"
  location      = "US"
  force_destroy = true
}

resource "google_storage_bucket_object" "object" {
  name                     = "%s"
  bucket                   = google_storage_bucket.bucket.name
  content                  = "%s"
  force_empty_content_type = true
}
`, bucketName, objectName, content)
}

func testGoogleStorageBucketsFolder(bucketName, folderName string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name          = "%s"
  location      = "US"
  force_destroy = true
}

resource "google_storage_bucket_object" "object" {
  name    = "%s"
  bucket  = google_storage_bucket.bucket.name
  content = " "
}
`, bucketName, folderName)
}

func testGoogleStorageBucketsObjectDynamicContent(bucketName string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "object" {
  name    = "%s"
  bucket  = google_storage_bucket.bucket.name
  content = google_storage_bucket.bucket.project
}
`, bucketName, objectName)
}

func testGoogleStorageBucketsObjectBasic(bucketName, sourceFilename string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "object" {
  name   = "%s"
  bucket = google_storage_bucket.bucket.name
  source = "%s"
}
`, bucketName, objectName, sourceFilename)
}

func testGoogleStorageBucketsObjectOptionalContentFields(
	bucketName, disposition, encoding, language, content_type string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "object" {
  name                = "%s"
  bucket              = google_storage_bucket.bucket.name
  content             = "%s"
  content_disposition = "%s"
  content_encoding    = "%s"
  content_language    = "%s"
  content_type        = "%s"
}
`, bucketName, objectName, content, disposition, encoding, language, content_type)
}

func testGoogleStorageBucketsObjectCacheControl(bucketName, sourceFilename, cacheControl string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "object" {
  name          = "%s"
  bucket        = google_storage_bucket.bucket.name
  source        = "%s"
  cache_control = "%s"
}
`, bucketName, objectName, sourceFilename, cacheControl)
}

func testGoogleStorageBucketsObjectStorageClass(bucketName string, storageClass string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "object" {
  name          = "%s"
  bucket        = google_storage_bucket.bucket.name
  content       = "%s"
  storage_class = "%s"
}
`, bucketName, objectName, content, storageClass)
}

func testGoogleStorageBucketsObjectMetadata(bucketName string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "object" {
  name          = "%s"
  bucket        = google_storage_bucket.bucket.name
  content       = "%s"

  metadata = {
    "customKey" = "custom_value"
  }
}
`, bucketName, objectName, content)
}

func testGoogleStorageBucketsObjectCustomerEncryption(bucketName string, customerEncryptionKey string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "object" {
  name                = "%s"
  bucket              = google_storage_bucket.bucket.name
  content             = "%s"
  customer_encryption {
    encryption_key = "%s"
  }
}
`, bucketName, objectName, content, customerEncryptionKey)
}

func testGoogleStorageBucketsObjectRetention(bucketName string, retainUntilTime string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name                    = "%s"
  location                = "US"
  force_destroy           = true
  enable_object_retention = true
}

resource "google_storage_bucket_object" "object" {
  name      = "%s"
  bucket    = google_storage_bucket.bucket.name
  content   = "%s"
  retention {
	mode              = "Unlocked"
	retain_until_time = "%s"
  }      
}
`, bucketName, objectName, content, retainUntilTime)
}

func testGoogleStorageBucketsObjectRetentionDisabled(bucketName string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name                    = "%s"
  location                = "US"
  force_destroy           = true
  enable_object_retention = true
}

resource "google_storage_bucket_object" "object" {
  name      = "%s"
  bucket    = google_storage_bucket.bucket.name
  content   = "%s" 
}
`, bucketName, objectName, content)
}

func testGoogleStorageBucketsObjectHolds(bucketName string, eventBasedHold bool, temporaryHold bool) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name          = "%s"
  location      = "US"
  force_destroy = true
}

resource "google_storage_bucket_object" "object" {
  name             = "%s"
  bucket           = google_storage_bucket.bucket.name
  content          = "%s"
  event_based_hold = %t
  temporary_hold   = %t
}
`, bucketName, objectName, content, eventBasedHold, temporaryHold)
}

func testGoogleStorageBucketsObjectKms(bucketName, sourceFilename, kmsKey string) string {
	return fmt.Sprintf(`

resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

data "google_storage_project_service_account" "gcs" {
}

resource "google_kms_crypto_key_iam_member" "crypto_key" {
  crypto_key_id = "%s"
  role          = "roles/cloudkms.cryptoKeyEncrypterDecrypter"
  member        = "serviceAccount:${data.google_storage_project_service_account.gcs.email_address}"
}

resource "google_storage_bucket_object" "object" {
  name   = "%s"
  bucket = google_storage_bucket.bucket.name
  source = "%s"
  kms_key_name = google_kms_crypto_key_iam_member.crypto_key.crypto_key_id
}
`, bucketName, kmsKey, objectName, sourceFilename)
}

// Creates a new tmp test file. Fails the current test if we cannot create
// new tmp file in the filesystem.
func getNewTmpTestFile(t *testing.T, prefix string) *os.File {
	testFile, err := ioutil.TempFile("", prefix)
	if err != nil {
		t.Fatalf("Cannot create temp file: %s", err)
	}
	return testFile
}

func testGoogleStorageBucketsObjectFileMd5(bucketName, sourceFilename, md5hash string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "bo_1861894" {
  name           = "%s"
  source_md5hash = "%s"
  bucket         = google_storage_bucket.bucket.name
  source         = "%s"
}
`, bucketName, objectName, md5hash, sourceFilename)
}

func testAccCheckGoogleStorageValidOutput(t *testing.T) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		var root = s.Modules[0]
		var outputs, ok = root.Outputs["valid"]

		if !ok {
			return fmt.Errorf("Error: `valid` output missing")
		}

		if outputs == nil {
			return fmt.Errorf("Terraform output `valid` does not exists")
		}

		if outputs.Value == false {
			return fmt.Errorf("File content is not valid")
		}
		return nil
	}
}

func testGoogleStorageBucketObject(bucketName, content, filename string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "changing" {
  bucket  = google_storage_bucket.bucket.name
  name    = "dynamic"
  content = "%s"
}

resource "local_file" "test" {
  content  = jsonencode(google_storage_bucket_object.changing.content)
  filename = "%s"
}

resource "google_storage_bucket_object" "bo" {
  source = local_file.test.filename
  bucket = google_storage_bucket.bucket.name
  name   = "test-file-bucket"
}

data "google_storage_bucket_object_content" "bo" {
  bucket     = google_storage_bucket_object.bo.bucket
  name       = google_storage_bucket_object.bo.name
  depends_on = [google_storage_bucket_object.bo]
}

output "valid" {
  value = nonsensitive(local_file.test.content) == data.google_storage_bucket_object_content.bo.content
}
`, bucketName, content, filename)
}

func testGoogleStorageBucketObjectKnownAfterApply(bucketName, content, filename string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name     = "%s"
  location = "US"
}

resource "google_storage_bucket_object" "changing" {
  bucket  = google_storage_bucket.bucket.name
  name    = "dynamic"
  content = "%s"
}

resource "local_file" "test" {
  content  = jsonencode(google_storage_bucket_object.changing.content)
  filename = "%s"
}

resource "google_storage_bucket_object" "bo" {
  source = local_file.test.filename
  source_md5hash = local_file.test.content_md5
  bucket = google_storage_bucket.bucket.name
  name   = "test-file-bucket"
}

data "google_storage_bucket_object_content" "bo" {
  bucket     = google_storage_bucket_object.bo.bucket
  name       = google_storage_bucket_object.bo.name
  depends_on = [google_storage_bucket_object.bo]
}

output "valid" {
  value = nonsensitive(local_file.test.content) == data.google_storage_bucket_object_content.bo.content
}
`, bucketName, content, filename)
}

func testGoogleStorageBucketsObjectDeletionPolicy(bucketName string, customContent string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name          = "%s"
  location      = "US"
}

resource "google_storage_bucket_object" "object" {
  name            = "%s"
  bucket          = google_storage_bucket.bucket.name
  content         = "%s"
  deletion_policy = "ABANDON"
}
`, bucketName, objectName, customContent)
}

func testGoogleStorageBucketsObjectAbandon(bucketName string) string {
	return fmt.Sprintf(`
resource "google_storage_bucket" "bucket" {
  name          = "%s"
  location      = "US"
  force_destroy = true
}
`, bucketName)
}

func testAccCheckStorageObjectExists(t *testing.T, bucketName string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		config := acctest.GoogleProviderConfig(t)

		_, err := config.NewStorageClient(config.UserAgent).Objects.Get(bucketName, objectName).Do()
		if err != nil {
			return err
		}
		return nil
	}
}
