// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/storage/fw_storage_notification_state_upgraders.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package storage

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Represents the schema of the SDKv2 state
type storageNotificationModelV0 struct {
	Bucket           types.String `tfsdk:"bucket"`
	PayloadFormat    types.String `tfsdk:"payload_format"`
	Topic            types.String `tfsdk:"topic"`
	CustomAttributes types.Map    `tfsdk:"custom_attributes"`
	EventTypes       types.Set    `tfsdk:"event_types"`
	ObjectNamePrefix types.String `tfsdk:"object_name_prefix"`
	NotificationID   types.String `tfsdk:"notification_id"`
	SelfLink         types.String `tfsdk:"self_link"`
	Id               types.String `tfsdk:"id"`
}

func (r *storageNotificationResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	return map[int64]resource.StateUpgrader{
		0: {
			PriorSchema: &schema.Schema{
				Attributes: map[string]schema.Attribute{
					"bucket": schema.StringAttribute{
						Required: true,
					},
					"payload_format": schema.StringAttribute{
						Required: true,
					},
					"topic": schema.StringAttribute{
						Required: true,
					},
					"custom_attributes": schema.MapAttribute{
						ElementType: types.StringType,
						Optional:    true,
					},
					"event_types": schema.SetAttribute{
						ElementType: types.StringType,
						Optional:    true,
					},
					"object_name_prefix": schema.StringAttribute{
						Optional: true,
					},
					"notification_id": schema.StringAttribute{
						Computed: true,
					},
					"self_link": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			StateUpgrader: func(ctx context.Context, req resource.UpgradeStateRequest, resp *resource.UpgradeStateResponse) {
				var priorStateData storageNotificationModelV0

				resp.Diagnostics.Append(req.State.Get(ctx, &priorStateData)...)
				if resp.Diagnostics.HasError() {
					return
				}

				upgradedStateData := storageNotificationModel{
					Bucket:           priorStateData.Bucket,
					PayloadFormat:    priorStateData.PayloadFormat,
					CustomAttributes: priorStateData.CustomAttributes,
					EventTypes:       priorStateData.EventTypes,
					ObjectNamePrefix: priorStateData.ObjectNamePrefix,
					NotificationID:   priorStateData.NotificationID,
					SelfLink:         priorStateData.SelfLink,
					Id:               priorStateData.Id,
				}

				// topic - trim the fully qualified prefix
				if !priorStateData.Topic.IsNull() && !priorStateData.Topic.IsUnknown() {
					apiTopic := priorStateData.Topic.ValueString()
					transformedTopic := strings.TrimPrefix(apiTopic, "//pubsub.googleapis.com/")
					upgradedStateData.Topic = types.StringValue(transformedTopic)
				} else {
					upgradedStateData.Topic = priorStateData.Topic
				}

				// ObjectNamePrefix - normalize "" to Null
				if !priorStateData.ObjectNamePrefix.IsNull() && !priorStateData.ObjectNamePrefix.IsUnknown() && priorStateData.ObjectNamePrefix.ValueString() == "" {
					upgradedStateData.ObjectNamePrefix = types.StringNull()
				} else {
					upgradedStateData.ObjectNamePrefix = priorStateData.ObjectNamePrefix
				}

				resp.Diagnostics.Append(resp.State.Set(ctx, upgradedStateData)...)
			},
		},
	}
}
