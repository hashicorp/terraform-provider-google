// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/cloudsecuritycompliance/Framework.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package cloudsecuritycompliance

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceCloudSecurityComplianceFramework() *schema.Resource {
	return &schema.Resource{
		Create: resourceCloudSecurityComplianceFrameworkCreate,
		Read:   resourceCloudSecurityComplianceFrameworkRead,
		Update: resourceCloudSecurityComplianceFrameworkUpdate,
		Delete: resourceCloudSecurityComplianceFrameworkDelete,

		Importer: &schema.ResourceImporter{
			State: resourceCloudSecurityComplianceFrameworkImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"framework_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `ID of the framework.
This is not the full name of the framework.
This is the last part of the full name of the framework.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"organization": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"cloud_control_details": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `The details of the cloud controls directly added without any grouping in
the framework.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"major_revision_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Major revision of cloudcontrol`,
						},
						"name": {
							Type:     schema.TypeString,
							Required: true,
							Description: `The name of the CloudControl in the format:
“organizations/{organization}/locations/{location}/
cloudControls/{cloud-control}”`,
						},
						"parameters": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Parameters is a key-value pair that is required by the CloudControl. The
specification of these parameters will be present in cloudcontrol.Eg: {
"name": "location","value": "us-west-1"}.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The name of the parameter.`,
									},
									"parameter_value": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `Possible parameter value types.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"bool_value": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `Represents a boolean value.`,
												},
												"number_value": {
													Type:        schema.TypeFloat,
													Optional:    true,
													Description: `Represents a double value.`,
												},
												"string_list_value": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `A list of strings.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"values": {
																Type:        schema.TypeList,
																Required:    true,
																Description: `The strings in the list.`,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
												"string_value": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Represents a string value.`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The description of the framework. The maximum length is 2000 characters.`,
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Display name of the framework. The maximum length is 200 characters.`,
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Identifier. The name of the framework.
Format:
organizations/{organization}/locations/{{location}}/frameworks/{framework_id}`,
			},
			"category": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The category of the framework.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"major_revision_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Major revision of the framework incremented in ascending order.`,
			},
			"supported_cloud_providers": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `cloud providers supported`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"supported_enforcement_modes": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The supported enforcement modes of the framework.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"supported_target_resource_types": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `target resource types supported by the Framework.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"type": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The type of the framework. The default is TYPE_CUSTOM.
Possible values:
BUILT_IN
CUSTOM`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceCloudSecurityComplianceFrameworkCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	cloudControlDetailsProp, err := expandCloudSecurityComplianceFrameworkCloudControlDetails(d.Get("cloud_control_details"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("cloud_control_details"); !tpgresource.IsEmptyValue(reflect.ValueOf(cloudControlDetailsProp)) && (ok || !reflect.DeepEqual(v, cloudControlDetailsProp)) {
		obj["cloudControlDetails"] = cloudControlDetailsProp
	}
	descriptionProp, err := expandCloudSecurityComplianceFrameworkDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	displayNameProp, err := expandCloudSecurityComplianceFrameworkDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	nameProp, err := expandCloudSecurityComplianceFrameworkName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/frameworks?frameworkId={{framework_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Framework: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Framework: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "organizations/{{organization}}/locations/{{location}}/frameworks/{{framework_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Framework %q: %#v", d.Id(), res)

	return resourceCloudSecurityComplianceFrameworkRead(d, meta)
}

func resourceCloudSecurityComplianceFrameworkRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/frameworks/{{framework_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("CloudSecurityComplianceFramework %q", d.Id()))
	}

	if err := d.Set("category", flattenCloudSecurityComplianceFrameworkCategory(res["category"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}
	if err := d.Set("cloud_control_details", flattenCloudSecurityComplianceFrameworkCloudControlDetails(res["cloudControlDetails"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}
	if err := d.Set("description", flattenCloudSecurityComplianceFrameworkDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}
	if err := d.Set("display_name", flattenCloudSecurityComplianceFrameworkDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}
	if err := d.Set("major_revision_id", flattenCloudSecurityComplianceFrameworkMajorRevisionId(res["majorRevisionId"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}
	if err := d.Set("name", flattenCloudSecurityComplianceFrameworkName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}
	if err := d.Set("supported_cloud_providers", flattenCloudSecurityComplianceFrameworkSupportedCloudProviders(res["supportedCloudProviders"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}
	if err := d.Set("supported_enforcement_modes", flattenCloudSecurityComplianceFrameworkSupportedEnforcementModes(res["supportedEnforcementModes"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}
	if err := d.Set("supported_target_resource_types", flattenCloudSecurityComplianceFrameworkSupportedTargetResourceTypes(res["supportedTargetResourceTypes"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}
	if err := d.Set("type", flattenCloudSecurityComplianceFrameworkType(res["type"], d, config)); err != nil {
		return fmt.Errorf("Error reading Framework: %s", err)
	}

	return nil
}

func resourceCloudSecurityComplianceFrameworkUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	cloudControlDetailsProp, err := expandCloudSecurityComplianceFrameworkCloudControlDetails(d.Get("cloud_control_details"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("cloud_control_details"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, cloudControlDetailsProp)) {
		obj["cloudControlDetails"] = cloudControlDetailsProp
	}
	descriptionProp, err := expandCloudSecurityComplianceFrameworkDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	displayNameProp, err := expandCloudSecurityComplianceFrameworkDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	nameProp, err := expandCloudSecurityComplianceFrameworkName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/frameworks/{{framework_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Framework %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("cloud_control_details") {
		updateMask = append(updateMask, "cloudControlDetails")
	}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("name") {
		updateMask = append(updateMask, "name")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Framework %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Framework %q: %#v", d.Id(), res)
		}

	}

	return resourceCloudSecurityComplianceFrameworkRead(d, meta)
}

func resourceCloudSecurityComplianceFrameworkDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/frameworks/{{framework_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting Framework %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Framework")
	}

	log.Printf("[DEBUG] Finished deleting Framework %q: %#v", d.Id(), res)
	return nil
}

func resourceCloudSecurityComplianceFrameworkImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^organizations/(?P<organization>[^/]+)/locations/(?P<location>[^/]+)/frameworks/(?P<framework_id>[^/]+)$",
		"^(?P<organization>[^/]+)/(?P<location>[^/]+)/(?P<framework_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "organizations/{{organization}}/locations/{{location}}/frameworks/{{framework_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenCloudSecurityComplianceFrameworkCategory(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkCloudControlDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"major_revision_id": flattenCloudSecurityComplianceFrameworkCloudControlDetailsMajorRevisionId(original["majorRevisionId"], d, config),
			"name":              flattenCloudSecurityComplianceFrameworkCloudControlDetailsName(original["name"], d, config),
			"parameters":        flattenCloudSecurityComplianceFrameworkCloudControlDetailsParameters(original["parameters"], d, config),
		})
	}
	return transformed
}
func flattenCloudSecurityComplianceFrameworkCloudControlDetailsMajorRevisionId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkCloudControlDetailsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkCloudControlDetailsParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":            flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersName(original["name"], d, config),
			"parameter_value": flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValue(original["parameterValue"], d, config),
		})
	}
	return transformed
}
func flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["bool_value"] =
		flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueBoolValue(original["boolValue"], d, config)
	transformed["number_value"] =
		flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueNumberValue(original["numberValue"], d, config)
	transformed["string_list_value"] =
		flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringListValue(original["stringListValue"], d, config)
	transformed["string_value"] =
		flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringValue(original["stringValue"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueBoolValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueNumberValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringListValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["values"] =
		flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringListValueValues(original["values"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringListValueValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkMajorRevisionId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkSupportedCloudProviders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkSupportedEnforcementModes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkSupportedTargetResourceTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceFrameworkType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandCloudSecurityComplianceFrameworkCloudControlDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedMajorRevisionId, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsMajorRevisionId(original["major_revision_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMajorRevisionId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["majorRevisionId"] = transformedMajorRevisionId
		}

		transformedName, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedParameters, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsParameters(original["parameters"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedParameters); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["parameters"] = transformedParameters
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsMajorRevisionId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsParameters(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedParameterValue, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValue(original["parameter_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedParameterValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["parameterValue"] = transformedParameterValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBoolValue, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueBoolValue(original["bool_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBoolValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["boolValue"] = transformedBoolValue
	}

	transformedNumberValue, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueNumberValue(original["number_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNumberValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["numberValue"] = transformedNumberValue
	}

	transformedStringListValue, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringListValue(original["string_list_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStringListValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["stringListValue"] = transformedStringListValue
	}

	transformedStringValue, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringValue(original["string_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["stringValue"] = transformedStringValue
	}

	return transformed, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueBoolValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueNumberValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringListValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValues, err := expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringListValueValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringListValueValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceFrameworkCloudControlDetailsParametersParameterValueStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceFrameworkDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceFrameworkDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceFrameworkName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
