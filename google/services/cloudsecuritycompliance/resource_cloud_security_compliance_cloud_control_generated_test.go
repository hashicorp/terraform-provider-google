// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package cloudsecuritycompliance_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccCloudSecurityComplianceCloudControl_cloudsecuritycomplianceCloudcontrolBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudSecurityComplianceCloudControlDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudSecurityComplianceCloudControl_cloudsecuritycomplianceCloudcontrolBasicExample(context),
			},
			{
				ResourceName:            "google_cloud_security_compliance_cloud_control.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"cloud_control_id", "location", "organization"},
			},
		},
	})
}

func testAccCloudSecurityComplianceCloudControl_cloudsecuritycomplianceCloudcontrolBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_security_compliance_cloud_control" "example" {
  name                = "organizations/%{org_id}/locations/global/cloudControls/tf-test-example-cloudcontrol%{random_suffix}"
  organization        = "%{org_id}"
  location            = "global"
  cloud_control_id    = "tf-test-example-cloudcontrol%{random_suffix}"

  display_name      = "TF test CloudControl Name"
  description       = "A test cloud control for security compliance"
  categories        = ["CC_CATEGORY_INFRASTRUCTURE"]
  severity          = "HIGH"
  finding_category  = "SECURITY_POLICY"
  remediation_steps = "Review and update the security configuration according to best practices."
  
  supported_cloud_providers        = ["GCP"]
  supported_target_resource_types = []
  
  rules {
    description         = "Ensure compute instances have secure boot enabled"
    rule_action_types   = ["RULE_ACTION_TYPE_DETECTIVE"]
    
    cel_expression {
      expression = "resource.data.shieldedInstanceConfig.enableSecureBoot == true"
      resource_types_values {
        values = ["compute.googleapis.com/Instance"]
      }
    }
  }

  parameter_spec {
    name         = "location"
    display_name = "Resource Location"
    description  = "The location where the resource should be deployed"
    value_type   = "STRING"
    is_required  = true
    
    default_value {
      string_value = "us-central1"
    }
    
    validation {
      regexp_pattern {
        pattern = "^[a-z]+-[a-z]+[0-9]$"
      }
    }
  }
}
`, context)
}

func TestAccCloudSecurityComplianceCloudControl_cloudsecuritycomplianceCloudcontrolUpdateExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudSecurityComplianceCloudControlDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudSecurityComplianceCloudControl_cloudsecuritycomplianceCloudcontrolUpdateExample(context),
			},
			{
				ResourceName:            "google_cloud_security_compliance_cloud_control.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"cloud_control_id", "location", "organization"},
			},
		},
	})
}

func testAccCloudSecurityComplianceCloudControl_cloudsecuritycomplianceCloudcontrolUpdateExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_security_compliance_cloud_control" "example" {
  name              = "organizations/%{org_id}/locations/global/cloudControls/tf-test-%{random_suffix}"
  organization      = "%{org_id}"
  location          = "global"
  cloud_control_id  = "tf-test-%{random_suffix}"

  display_name      = "Updated CloudControl Name"
  description       = "An updated description for the cloud control"
  categories        = ["CC_CATEGORY_INFRASTRUCTURE"]
  severity          = "CRITICAL"
  finding_category  = "SECURITY_POLICY"
  remediation_steps = "Updated remediation steps with more detailed instructions for security configuration."
  
  supported_cloud_providers        = ["GCP"]
  supported_target_resource_types = []
  
  rules {
    description         = "Updated rule: Ensure compute instances have secure boot and integrity monitoring enabled"
    rule_action_types   = ["RULE_ACTION_TYPE_DETECTIVE"]
    
    cel_expression {
      expression = "resource.data.shieldedInstanceConfig.enableSecureBoot == true && resource.data.shieldedInstanceConfig.enableIntegrityMonitoring == true"
      resource_types_values {
        values = ["compute.googleapis.com/Instance"]
      }
    }
  }
  
  parameter_spec {
    name         = "location"
    display_name = "Updated Resource Location"
    description  = "Updated description for the location parameter"
    value_type   = "STRING"
    is_required  = true
    
    default_value {
      string_value = "us-west1"
    }
    
    validation {
      regexp_pattern {
        pattern = "^[a-z]+-[a-z]+[0-9]$"
      }
    }
  }
}
`, context)
}

func testAccCheckCloudSecurityComplianceCloudControlDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_cloud_security_compliance_cloud_control" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/cloudControls/{{cloud_control_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("CloudSecurityComplianceCloudControl still exists at %s", url)
			}
		}

		return nil
	}
}
