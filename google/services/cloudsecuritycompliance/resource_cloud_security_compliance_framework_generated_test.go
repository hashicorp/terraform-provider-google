// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package cloudsecuritycompliance_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccCloudSecurityComplianceFramework_cloudsecuritycomplianceFrameworkBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudSecurityComplianceFrameworkDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudSecurityComplianceFramework_cloudsecuritycomplianceFrameworkBasicExample(context),
			},
			{
				ResourceName:            "google_cloud_security_compliance_framework.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"framework_id", "location", "organization"},
			},
		},
	})
}

func testAccCloudSecurityComplianceFramework_cloudsecuritycomplianceFrameworkBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_security_compliance_framework" "example" {
	name 		   = "organizations/%{org_id}/locations/global/frameworks/tf-test-example-framework%{random_suffix}"
  organization = "%{org_id}"
  location     = "global"
  framework_id = "tf-test-example-framework%{random_suffix}"
  
  display_name = "Terraform Framework Name"
  description  = "An Terraform description for the framework"
  
  cloud_control_details {
		name              = "organizations/%{org_id}/locations/global/cloudControls/builtin-assess-resource-availability"
		major_revision_id = "1"
    
    parameters {
      name = "location"
      parameter_value {
        string_value = "us-central1"
      }
    }
  }
}
`, context)
}

func TestAccCloudSecurityComplianceFramework_cloudsecuritycomplianceFrameworkUpdateExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudSecurityComplianceFrameworkDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudSecurityComplianceFramework_cloudsecuritycomplianceFrameworkUpdateExample(context),
			},
			{
				ResourceName:            "google_cloud_security_compliance_framework.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"framework_id", "location", "organization"},
			},
		},
	})
}

func testAccCloudSecurityComplianceFramework_cloudsecuritycomplianceFrameworkUpdateExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_security_compliance_framework" "example" {
  name 		   = "organizations/%{org_id}/locations/global/frameworks/tf-test-example-framework%{random_suffix}"
  organization = "%{org_id}"
  location     = "global"
  framework_id = "tf-test-example-framework%{random_suffix}"
  
  display_name = "Updated Framework Name"
  description  = "An updated description for the framework with additional details"
  
  cloud_control_details {
    name              = "organizations/%{org_id}/locations/global/cloudControls/builtin-data-access-governance"
    major_revision_id = "1"
    
    parameters {
      name = "location"
      parameter_value {
        string_value = "us-west1"
      }
    }
  }
}
`, context)
}

func testAccCheckCloudSecurityComplianceFrameworkDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_cloud_security_compliance_framework" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/frameworks/{{framework_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("CloudSecurityComplianceFramework still exists at %s", url)
			}
		}

		return nil
	}
}
