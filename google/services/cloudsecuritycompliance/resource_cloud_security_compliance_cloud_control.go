// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/cloudsecuritycompliance/CloudControl.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package cloudsecuritycompliance

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceCloudSecurityComplianceCloudControl() *schema.Resource {
	return &schema.Resource{
		Create: resourceCloudSecurityComplianceCloudControlCreate,
		Read:   resourceCloudSecurityComplianceCloudControlRead,
		Update: resourceCloudSecurityComplianceCloudControlUpdate,
		Delete: resourceCloudSecurityComplianceCloudControlDelete,

		Importer: &schema.ResourceImporter{
			State: resourceCloudSecurityComplianceCloudControlImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"cloud_control_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `ID of the CloudControl.
This is the last segment of the CloudControl resource name.
Format: '^a-zA-Z{0,61}[a-zA-Z0-9]$'.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Currently, only "global" is supported as a location.`,
			},
			"name": {
				Type:     schema.TypeString,
				Required: true,
				Description: `Identifier. The resource name of the cloud control.
Format:
organizations/{organization}/locations/{location}/cloudControls/{cloud_control_id}`,
			},
			"organization": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.`,
			},
			"categories": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `The categories of the cloud control.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `A description of the cloud control. The maximum length is 2000 characters.`,
			},
			"display_name": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The display name of the cloud control. The maximum length is 200
characters.`,
			},
			"finding_category": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The finding_category of the cloud control. The maximum length is 255
characters.`,
			},
			"parameter_spec": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `The parameter spec of the cloud control.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"is_required": {
							Type:        schema.TypeBool,
							Required:    true,
							Description: `if the parameter is required`,
						},
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The name of the parameter.`,
						},
						"value_type": {
							Type:     schema.TypeString,
							Required: true,
							Description: `Parameter value type.
Possible values:
STRING
BOOLEAN
STRINGLIST
NUMBER
ONEOF`,
						},
						"default_value": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Possible parameter value types.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"bool_value": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Represents a boolean value.`,
									},
									"number_value": {
										Type:        schema.TypeFloat,
										Optional:    true,
										Description: `Represents a double value.`,
									},
									"string_list_value": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `A list of strings.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"values": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `The strings in the list.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
									"string_value": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Represents a string value.`,
									},
								},
							},
						},
						"description": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The description of the parameter. The maximum length is 2000 characters.`,
						},
						"display_name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The display name of the parameter. The maximum length is 200 characters.`,
						},
						"substitution_rules": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `List of parameter substitutions.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"attribute_substitution_rule": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Attribute at the given path is substituted entirely.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"attribute": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Fully qualified proto attribute path (in dot notation).
Example: rules[0].cel_expression.resource_types_values`,
												},
											},
										},
									},
									"placeholder_substitution_rule": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Placeholder is substituted in the rendered string.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"attribute": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Fully qualified proto attribute path (e.g., dot notation)`,
												},
											},
										},
									},
								},
							},
						},
						"validation": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Validation of the parameter.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"allowed_values": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Allowed set of values for the parameter.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"values": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `List of allowed values for the parameter.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"bool_value": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Represents a boolean value.`,
															},
															"number_value": {
																Type:        schema.TypeFloat,
																Optional:    true,
																Description: `Represents a double value.`,
															},
															"string_list_value": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `A list of strings.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"values": {
																			Type:        schema.TypeList,
																			Required:    true,
																			Description: `The strings in the list.`,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
															"string_value": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Represents a string value.`,
															},
														},
													},
												},
											},
										},
									},
									"int_range": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Number range for number parameters.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"max": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Maximum allowed value for the numeric parameter (inclusive).`,
												},
												"min": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Minimum allowed value for the numeric parameter (inclusive).`,
												},
											},
										},
									},
									"regexp_pattern": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Regular Expression Validator for parameter values.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"pattern": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Regex Pattern to match the value(s) of parameter.`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"remediation_steps": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The remediation steps for the findings generated by the cloud control. The
maximum length is 400 characters.`,
			},
			"rules": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `The Policy to be enforced to prevent/detect resource non-compliance.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"rule_action_types": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `The functionality enabled by the Rule.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"cel_expression": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `A [CEL
expression](https://cloud.google.com/certificate-authority-service/docs/using-cel).`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"expression": {
										Type:     schema.TypeString,
										Required: true,
										Description: `Logic expression in CEL language.
The max length of the condition is 1000 characters.`,
									},
									"resource_types_values": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `A list of strings.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"values": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `The strings in the list.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
						"description": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Description of the Rule. The maximum length is 2000 characters.`,
						},
					},
				},
			},
			"severity": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Possible values:
CRITICAL
HIGH
MEDIUM
LOW`,
			},
			"supported_cloud_providers": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `cloud providers supported`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"supported_target_resource_types": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `target resource types supported by the CloudControl.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"create_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The last updated time of the cloud control.
The create_time is used because a new CC is created whenever we update an
existing CC.`,
			},
			"major_revision_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Major revision of the cloud control incremented in ascending order.`,
			},
			"related_frameworks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The Frameworks that include this CloudControl`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"supported_enforcement_modes": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The supported enforcement mode of the cloud control. Default is DETECTIVE.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
		UseJSONNumber: true,
	}
}

func resourceCloudSecurityComplianceCloudControlCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	categoriesProp, err := expandCloudSecurityComplianceCloudControlCategories(d.Get("categories"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("categories"); !tpgresource.IsEmptyValue(reflect.ValueOf(categoriesProp)) && (ok || !reflect.DeepEqual(v, categoriesProp)) {
		obj["categories"] = categoriesProp
	}
	descriptionProp, err := expandCloudSecurityComplianceCloudControlDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	displayNameProp, err := expandCloudSecurityComplianceCloudControlDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	findingCategoryProp, err := expandCloudSecurityComplianceCloudControlFindingCategory(d.Get("finding_category"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("finding_category"); !tpgresource.IsEmptyValue(reflect.ValueOf(findingCategoryProp)) && (ok || !reflect.DeepEqual(v, findingCategoryProp)) {
		obj["findingCategory"] = findingCategoryProp
	}
	nameProp, err := expandCloudSecurityComplianceCloudControlName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	parameterSpecProp, err := expandCloudSecurityComplianceCloudControlParameterSpec(d.Get("parameter_spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("parameter_spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(parameterSpecProp)) && (ok || !reflect.DeepEqual(v, parameterSpecProp)) {
		obj["parameterSpec"] = parameterSpecProp
	}
	remediationStepsProp, err := expandCloudSecurityComplianceCloudControlRemediationSteps(d.Get("remediation_steps"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("remediation_steps"); !tpgresource.IsEmptyValue(reflect.ValueOf(remediationStepsProp)) && (ok || !reflect.DeepEqual(v, remediationStepsProp)) {
		obj["remediationSteps"] = remediationStepsProp
	}
	rulesProp, err := expandCloudSecurityComplianceCloudControlRules(d.Get("rules"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rules"); !tpgresource.IsEmptyValue(reflect.ValueOf(rulesProp)) && (ok || !reflect.DeepEqual(v, rulesProp)) {
		obj["rules"] = rulesProp
	}
	severityProp, err := expandCloudSecurityComplianceCloudControlSeverity(d.Get("severity"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("severity"); !tpgresource.IsEmptyValue(reflect.ValueOf(severityProp)) && (ok || !reflect.DeepEqual(v, severityProp)) {
		obj["severity"] = severityProp
	}
	supportedCloudProvidersProp, err := expandCloudSecurityComplianceCloudControlSupportedCloudProviders(d.Get("supported_cloud_providers"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("supported_cloud_providers"); !tpgresource.IsEmptyValue(reflect.ValueOf(supportedCloudProvidersProp)) && (ok || !reflect.DeepEqual(v, supportedCloudProvidersProp)) {
		obj["supportedCloudProviders"] = supportedCloudProvidersProp
	}
	supportedTargetResourceTypesProp, err := expandCloudSecurityComplianceCloudControlSupportedTargetResourceTypes(d.Get("supported_target_resource_types"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("supported_target_resource_types"); !tpgresource.IsEmptyValue(reflect.ValueOf(supportedTargetResourceTypesProp)) && (ok || !reflect.DeepEqual(v, supportedTargetResourceTypesProp)) {
		obj["supportedTargetResourceTypes"] = supportedTargetResourceTypesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/cloudControls?cloudControlId={{cloud_control_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new CloudControl: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating CloudControl: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "organizations/{{organization}}/locations/{{location}}/cloudControls/{{cloud_control_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating CloudControl %q: %#v", d.Id(), res)

	return resourceCloudSecurityComplianceCloudControlRead(d, meta)
}

func resourceCloudSecurityComplianceCloudControlRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/cloudControls/{{cloud_control_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("CloudSecurityComplianceCloudControl %q", d.Id()))
	}

	if err := d.Set("categories", flattenCloudSecurityComplianceCloudControlCategories(res["categories"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("create_time", flattenCloudSecurityComplianceCloudControlCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("description", flattenCloudSecurityComplianceCloudControlDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("display_name", flattenCloudSecurityComplianceCloudControlDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("finding_category", flattenCloudSecurityComplianceCloudControlFindingCategory(res["findingCategory"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("major_revision_id", flattenCloudSecurityComplianceCloudControlMajorRevisionId(res["majorRevisionId"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("name", flattenCloudSecurityComplianceCloudControlName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("parameter_spec", flattenCloudSecurityComplianceCloudControlParameterSpec(res["parameterSpec"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("related_frameworks", flattenCloudSecurityComplianceCloudControlRelatedFrameworks(res["relatedFrameworks"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("remediation_steps", flattenCloudSecurityComplianceCloudControlRemediationSteps(res["remediationSteps"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("rules", flattenCloudSecurityComplianceCloudControlRules(res["rules"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("severity", flattenCloudSecurityComplianceCloudControlSeverity(res["severity"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("supported_cloud_providers", flattenCloudSecurityComplianceCloudControlSupportedCloudProviders(res["supportedCloudProviders"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("supported_enforcement_modes", flattenCloudSecurityComplianceCloudControlSupportedEnforcementModes(res["supportedEnforcementModes"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}
	if err := d.Set("supported_target_resource_types", flattenCloudSecurityComplianceCloudControlSupportedTargetResourceTypes(res["supportedTargetResourceTypes"], d, config)); err != nil {
		return fmt.Errorf("Error reading CloudControl: %s", err)
	}

	return nil
}

func resourceCloudSecurityComplianceCloudControlUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	categoriesProp, err := expandCloudSecurityComplianceCloudControlCategories(d.Get("categories"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("categories"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, categoriesProp)) {
		obj["categories"] = categoriesProp
	}
	descriptionProp, err := expandCloudSecurityComplianceCloudControlDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	displayNameProp, err := expandCloudSecurityComplianceCloudControlDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	findingCategoryProp, err := expandCloudSecurityComplianceCloudControlFindingCategory(d.Get("finding_category"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("finding_category"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, findingCategoryProp)) {
		obj["findingCategory"] = findingCategoryProp
	}
	nameProp, err := expandCloudSecurityComplianceCloudControlName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	parameterSpecProp, err := expandCloudSecurityComplianceCloudControlParameterSpec(d.Get("parameter_spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("parameter_spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, parameterSpecProp)) {
		obj["parameterSpec"] = parameterSpecProp
	}
	remediationStepsProp, err := expandCloudSecurityComplianceCloudControlRemediationSteps(d.Get("remediation_steps"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("remediation_steps"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, remediationStepsProp)) {
		obj["remediationSteps"] = remediationStepsProp
	}
	rulesProp, err := expandCloudSecurityComplianceCloudControlRules(d.Get("rules"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rules"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, rulesProp)) {
		obj["rules"] = rulesProp
	}
	severityProp, err := expandCloudSecurityComplianceCloudControlSeverity(d.Get("severity"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("severity"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, severityProp)) {
		obj["severity"] = severityProp
	}
	supportedCloudProvidersProp, err := expandCloudSecurityComplianceCloudControlSupportedCloudProviders(d.Get("supported_cloud_providers"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("supported_cloud_providers"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, supportedCloudProvidersProp)) {
		obj["supportedCloudProviders"] = supportedCloudProvidersProp
	}
	supportedTargetResourceTypesProp, err := expandCloudSecurityComplianceCloudControlSupportedTargetResourceTypes(d.Get("supported_target_resource_types"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("supported_target_resource_types"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, supportedTargetResourceTypesProp)) {
		obj["supportedTargetResourceTypes"] = supportedTargetResourceTypesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/cloudControls/{{cloud_control_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating CloudControl %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("categories") {
		updateMask = append(updateMask, "categories")
	}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("finding_category") {
		updateMask = append(updateMask, "findingCategory")
	}

	if d.HasChange("name") {
		updateMask = append(updateMask, "name")
	}

	if d.HasChange("parameter_spec") {
		updateMask = append(updateMask, "parameterSpec")
	}

	if d.HasChange("remediation_steps") {
		updateMask = append(updateMask, "remediationSteps")
	}

	if d.HasChange("rules") {
		updateMask = append(updateMask, "rules")
	}

	if d.HasChange("severity") {
		updateMask = append(updateMask, "severity")
	}

	if d.HasChange("supported_cloud_providers") {
		updateMask = append(updateMask, "supportedCloudProviders")
	}

	if d.HasChange("supported_target_resource_types") {
		updateMask = append(updateMask, "supportedTargetResourceTypes")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating CloudControl %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating CloudControl %q: %#v", d.Id(), res)
		}

	}

	return resourceCloudSecurityComplianceCloudControlRead(d, meta)
}

func resourceCloudSecurityComplianceCloudControlDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudSecurityComplianceBasePath}}organizations/{{organization}}/locations/{{location}}/cloudControls/{{cloud_control_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting CloudControl %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "CloudControl")
	}

	log.Printf("[DEBUG] Finished deleting CloudControl %q: %#v", d.Id(), res)
	return nil
}

func resourceCloudSecurityComplianceCloudControlImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^organizations/(?P<organization>[^/]+)/locations/(?P<location>[^/]+)/cloudControls/(?P<cloud_control_id>[^/]+)$",
		"^(?P<organization>[^/]+)/(?P<location>[^/]+)/(?P<cloud_control_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "organizations/{{organization}}/locations/{{location}}/cloudControls/{{cloud_control_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenCloudSecurityComplianceCloudControlCategories(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlFindingCategory(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlMajorRevisionId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"default_value":      flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValue(original["defaultValue"], d, config),
			"description":        flattenCloudSecurityComplianceCloudControlParameterSpecDescription(original["description"], d, config),
			"display_name":       flattenCloudSecurityComplianceCloudControlParameterSpecDisplayName(original["displayName"], d, config),
			"is_required":        flattenCloudSecurityComplianceCloudControlParameterSpecIsRequired(original["isRequired"], d, config),
			"name":               flattenCloudSecurityComplianceCloudControlParameterSpecName(original["name"], d, config),
			"substitution_rules": flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRules(original["substitutionRules"], d, config),
			"validation":         flattenCloudSecurityComplianceCloudControlParameterSpecValidation(original["validation"], d, config),
			"value_type":         flattenCloudSecurityComplianceCloudControlParameterSpecValueType(original["valueType"], d, config),
		})
	}
	return transformed
}
func flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["bool_value"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueBoolValue(original["boolValue"], d, config)
	transformed["number_value"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueNumberValue(original["numberValue"], d, config)
	transformed["string_list_value"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValue(original["stringListValue"], d, config)
	transformed["string_value"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringValue(original["stringValue"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueBoolValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueNumberValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["values"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValueValues(original["values"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValueValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecIsRequired(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"attribute_substitution_rule":   flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRule(original["attributeSubstitutionRule"], d, config),
			"placeholder_substitution_rule": flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRule(original["placeholderSubstitutionRule"], d, config),
		})
	}
	return transformed
}
func flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["attribute"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRuleAttribute(original["attribute"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRuleAttribute(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["attribute"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRuleAttribute(original["attribute"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRuleAttribute(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecValidation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allowed_values"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValues(original["allowedValues"], d, config)
	transformed["int_range"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecValidationIntRange(original["intRange"], d, config)
	transformed["regexp_pattern"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPattern(original["regexpPattern"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["values"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValues(original["values"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"bool_value":        flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesBoolValue(original["boolValue"], d, config),
			"number_value":      flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesNumberValue(original["numberValue"], d, config),
			"string_list_value": flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValue(original["stringListValue"], d, config),
			"string_value":      flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringValue(original["stringValue"], d, config),
		})
	}
	return transformed
}
func flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesBoolValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesNumberValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["values"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValueValues(original["values"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValueValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecValidationIntRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["max"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMax(original["max"], d, config)
	transformed["min"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMin(original["min"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMax(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMin(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPattern(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["pattern"] =
		flattenCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPatternPattern(original["pattern"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPatternPattern(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlParameterSpecValueType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlRelatedFrameworks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlRemediationSteps(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"cel_expression":    flattenCloudSecurityComplianceCloudControlRulesCelExpression(original["celExpression"], d, config),
			"description":       flattenCloudSecurityComplianceCloudControlRulesDescription(original["description"], d, config),
			"rule_action_types": flattenCloudSecurityComplianceCloudControlRulesRuleActionTypes(original["ruleActionTypes"], d, config),
		})
	}
	return transformed
}
func flattenCloudSecurityComplianceCloudControlRulesCelExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["expression"] =
		flattenCloudSecurityComplianceCloudControlRulesCelExpressionExpression(original["expression"], d, config)
	transformed["resource_types_values"] =
		flattenCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValues(original["resourceTypesValues"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlRulesCelExpressionExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["values"] =
		flattenCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValuesValues(original["values"], d, config)
	return []interface{}{transformed}
}
func flattenCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValuesValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlRulesDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlRulesRuleActionTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlSeverity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlSupportedCloudProviders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlSupportedEnforcementModes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudSecurityComplianceCloudControlSupportedTargetResourceTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandCloudSecurityComplianceCloudControlCategories(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlFindingCategory(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDefaultValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValue(original["default_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDefaultValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["defaultValue"] = transformedDefaultValue
		}

		transformedDescription, err := expandCloudSecurityComplianceCloudControlParameterSpecDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedDisplayName, err := expandCloudSecurityComplianceCloudControlParameterSpecDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedIsRequired, err := expandCloudSecurityComplianceCloudControlParameterSpecIsRequired(original["is_required"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsRequired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isRequired"] = transformedIsRequired
		}

		transformedName, err := expandCloudSecurityComplianceCloudControlParameterSpecName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedSubstitutionRules, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRules(original["substitution_rules"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSubstitutionRules); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["substitutionRules"] = transformedSubstitutionRules
		}

		transformedValidation, err := expandCloudSecurityComplianceCloudControlParameterSpecValidation(original["validation"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValidation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["validation"] = transformedValidation
		}

		transformedValueType, err := expandCloudSecurityComplianceCloudControlParameterSpecValueType(original["value_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValueType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["valueType"] = transformedValueType
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBoolValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueBoolValue(original["bool_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBoolValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["boolValue"] = transformedBoolValue
	}

	transformedNumberValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueNumberValue(original["number_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNumberValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["numberValue"] = transformedNumberValue
	}

	transformedStringListValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValue(original["string_list_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStringListValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["stringListValue"] = transformedStringListValue
	}

	transformedStringValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringValue(original["string_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["stringValue"] = transformedStringValue
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueBoolValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueNumberValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValues, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValueValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValueValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecIsRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAttributeSubstitutionRule, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRule(original["attribute_substitution_rule"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAttributeSubstitutionRule); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["attributeSubstitutionRule"] = transformedAttributeSubstitutionRule
		}

		transformedPlaceholderSubstitutionRule, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRule(original["placeholder_substitution_rule"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPlaceholderSubstitutionRule); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["placeholderSubstitutionRule"] = transformedPlaceholderSubstitutionRule
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAttribute, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRuleAttribute(original["attribute"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAttribute); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["attribute"] = transformedAttribute
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRuleAttribute(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAttribute, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRuleAttribute(original["attribute"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAttribute); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["attribute"] = transformedAttribute
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRuleAttribute(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowedValues, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValues(original["allowed_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedValues"] = transformedAllowedValues
	}

	transformedIntRange, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRange(original["int_range"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIntRange); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["intRange"] = transformedIntRange
	}

	transformedRegexpPattern, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPattern(original["regexp_pattern"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegexpPattern); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["regexpPattern"] = transformedRegexpPattern
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValues, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedBoolValue, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesBoolValue(original["bool_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBoolValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["boolValue"] = transformedBoolValue
		}

		transformedNumberValue, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesNumberValue(original["number_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNumberValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["numberValue"] = transformedNumberValue
		}

		transformedStringListValue, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValue(original["string_list_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStringListValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stringListValue"] = transformedStringListValue
		}

		transformedStringValue, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringValue(original["string_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stringValue"] = transformedStringValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesBoolValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesNumberValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValues, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValueValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValueValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRange(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMax, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMax(original["max"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMax); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["max"] = transformedMax
	}

	transformedMin, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMin(original["min"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMin); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["min"] = transformedMin
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMax(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMin(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPattern(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPattern, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPatternPattern(original["pattern"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPattern); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pattern"] = transformedPattern
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPatternPattern(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValueType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRemediationSteps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedCelExpression, err := expandCloudSecurityComplianceCloudControlRulesCelExpression(original["cel_expression"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCelExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["celExpression"] = transformedCelExpression
		}

		transformedDescription, err := expandCloudSecurityComplianceCloudControlRulesDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedRuleActionTypes, err := expandCloudSecurityComplianceCloudControlRulesRuleActionTypes(original["rule_action_types"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRuleActionTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ruleActionTypes"] = transformedRuleActionTypes
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceCloudControlRulesCelExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExpression, err := expandCloudSecurityComplianceCloudControlRulesCelExpressionExpression(original["expression"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["expression"] = transformedExpression
	}

	transformedResourceTypesValues, err := expandCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValues(original["resource_types_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResourceTypesValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["resourceTypesValues"] = transformedResourceTypesValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlRulesCelExpressionExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValues, err := expandCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValuesValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValuesValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRulesDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRulesRuleActionTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlSeverity(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlSupportedCloudProviders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlSupportedTargetResourceTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
