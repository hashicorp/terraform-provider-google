// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/compute/resource_compute_interconnect_attachment_group_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package compute_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccComputeInterconnectAttachmentGroup_basic(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"deletion_protection": false,
		"random_suffix":       acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckComputeInterconnectAttachmentGroupDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeInterconnectAttachmentGroup_basic(context),
			},
			{
				ResourceName:      "google_compute_interconnect_attachment_group.example-interconnect-attachment-group",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccComputeInterconnectAttachmentGroup_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_interconnect_attachment_group" "example-interconnect-attachment-group" {
  name   = "tf-test-example-interconnect-attachment-group%{random_suffix}"
  intent {
    availability_sla = "NO_SLA"
  }
}
`, context)
}

func TestAccComputeInterconnectAttachmentGroup_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"deletion_protection": false,
		"random_suffix":       acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeInterconnectAttachmentGroup_basic(context),
			},
			{
				ResourceName:      "google_compute_interconnect_attachment_group.example-interconnect-attachment-group",
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccComputeInterconnectAttachmentGroup_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_compute_interconnect_attachment_group.example-interconnect-attachment-group", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:      "google_compute_interconnect_attachment_group.example-interconnect-attachment-group",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccComputeInterconnectAttachmentGroup_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_interconnect_attachment_group" "example-interconnect-attachment-group" {
  name   	  = "tf-test-example-interconnect-attachment-group%{random_suffix}"
  intent {
    availability_sla = "NO_SLA"
  }
  description = "New description"
}
`, context)
}
