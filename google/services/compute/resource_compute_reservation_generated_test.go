// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccComputeReservation_reservationBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckComputeReservationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeReservation_reservationBasicExample(context),
			},
			{
				ResourceName:            "google_compute_reservation.gce_reservation",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"delete_after_duration", "share_settings", "zone"},
			},
		},
	})
}

func testAccComputeReservation_reservationBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_reservation" "gce_reservation" {
  name = "tf-test-gce-reservation%{random_suffix}"
  zone = "us-central1-a"

  specific_reservation {
    count = 1
    instance_properties {
      min_cpu_platform = "Intel Cascade Lake"
      machine_type     = "n2-standard-2"
    }
  }
}
`, context)
}

func TestAccComputeReservation_reservationSourceInstanceTemplateExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckComputeReservationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeReservation_reservationSourceInstanceTemplateExample(context),
			},
			{
				ResourceName:            "google_compute_reservation.gce_reservation_source_instance_template",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"delete_after_duration", "share_settings", "zone"},
			},
		},
	})
}

func testAccComputeReservation_reservationSourceInstanceTemplateExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_compute_image" "my_image" {
  family  = "debian-11"
  project = "debian-cloud"
}

resource "google_compute_instance_template" "foobar" {
  name           = "tf-test-instance-template%{random_suffix}"
  machine_type   = "n2-standard-2"
  can_ip_forward = false
  tags           = ["foo", "bar"]

  disk {
    source_image = data.google_compute_image.my_image.self_link
    auto_delete  = true
    boot         = true
  }

  network_interface {
    network = "default"
  }

  scheduling {
    preemptible       = false
    automatic_restart = true
  }

  metadata = {
    foo = "bar"
  }

  service_account {
    scopes = ["userinfo-email", "compute-ro", "storage-ro"]
  }

  labels = {
    my_label = "foobar"
  }
}

resource "google_compute_reservation" "gce_reservation_source_instance_template" {
  name = "tf-test-gce-reservation-source-instance-template%{random_suffix}"
  zone = "us-central1-a"

  specific_reservation {
    count = 1
    source_instance_template = google_compute_instance_template.foobar.self_link
  }
}
`, context)
}

func TestAccComputeReservation_reservationSharingPolicyExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckComputeReservationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeReservation_reservationSharingPolicyExample(context),
			},
			{
				ResourceName:            "google_compute_reservation.gce_reservation_sharing_policy",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"delete_after_duration", "share_settings", "zone"},
			},
		},
	})
}

func testAccComputeReservation_reservationSharingPolicyExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_compute_image" "my_image" {
  family = "debian-11"
  project = "debian-cloud"
}

resource "google_compute_instance_template" "foobar" {
  name = "tf-test-instance-template%{random_suffix}"
  machine_type = "g2-standard-4"
  can_ip_forward = false
  tags = ["foo", "bar"]

  disk {
    source_image = data.google_compute_image.my_image.self_link
    auto_delete = true
    boot = true
  }

  network_interface {
    network = "default"
  }

  scheduling {
    preemptible = false
    automatic_restart = true
  }

  metadata = {
    foo = "bar"
  }
  service_account {
    scopes = ["userinfo-email", "compute-ro", "storage-ro"]
  }
  labels = {
    my_label = "foobar"
  }
}

resource "google_compute_reservation" "gce_reservation_sharing_policy" {
  name = "tf-test-gce-reservation-sharing-policy%{random_suffix}"
  zone = "us-central1-b"

  specific_reservation {
    count = 2
    source_instance_template = google_compute_instance_template.foobar.self_link
  }

  reservation_sharing_policy {
    service_share_type = "ALLOW_ALL"
  }
}
`, context)
}

func TestAccComputeReservation_sharedReservationBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"project":         envvar.GetTestProjectFromEnv(),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckComputeReservationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeReservation_sharedReservationBasicExample(context),
			},
			{
				ResourceName:            "google_compute_reservation.gce_reservation",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"delete_after_duration", "share_settings", "zone"},
			},
		},
	})
}

func testAccComputeReservation_sharedReservationBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "owner_project" {
  project_id      = "tf-test%{random_suffix}"
  name            = "tf-test%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  deletion_policy = "DELETE"
}


resource "google_project_service" "compute" {
  project = google_project.owner_project.project_id
  service = "compute.googleapis.com"
}

resource "google_project" "guest_project" {
  project_id      = "tf-test-2%{random_suffix}"
  name            = "tf-test-2%{random_suffix}"
  org_id          = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_org_policy_policy" "shared_reservation_org_policy" {
  name   = "projects/${google_project.owner_project.project_id}/policies/compute.sharedReservationsOwnerProjects"
  parent = "projects/${google_project.owner_project.project_id}"

  spec {
    rules {
      allow_all = "TRUE"
    }
  }
}

resource "google_compute_reservation" "gce_reservation" {
  project = google_project.owner_project.project_id
  name = "tf-test-gce-shared-reservation%{random_suffix}"
  zone = "us-central1-a"

  specific_reservation {
    count = 1
    instance_properties {
      min_cpu_platform = "Intel Cascade Lake"
      machine_type     = "n2-standard-2"
    }
  }
  share_settings {
    share_type = "SPECIFIC_PROJECTS"
    project_map {
      id = google_project.guest_project.project_id
      project_id = google_project.guest_project.project_id
    }
  }
  depends_on = [google_org_policy_policy.shared_reservation_org_policy,google_project_service.compute]
}
`, context)
}

func testAccCheckComputeReservationDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_compute_reservation" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ComputeBasePath}}projects/{{project}}/zones/{{zone}}/reservations/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ComputeReservation still exists at %s", url)
			}
		}

		return nil
	}
}
