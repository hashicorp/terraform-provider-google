// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/compute/NetworkFirewallPolicyWithRules.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package compute

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func networkFirewallPolicyWithRulesConvertPriorityToInt(v interface{}) (int64, error) {
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal, nil
		}
	}

	if intVal, ok := v.(int64); ok {
		return intVal, nil
	}

	if floatVal, ok := v.(float64); ok {
		intVal := int64(floatVal)
		return intVal, nil
	}

	return 0, fmt.Errorf("Incorrect rule priority: %s. Priority must be a number", v)
}

func networkFirewallPolicyWithRulesIsPredefinedRule(rule map[string]interface{}) (bool, error) {
	// Priorities from 2147483548 to 2147483647 are reserved and cannot be modified by the user.
	const ReservedPriorityStart = 2147483548

	priority := rule["priority"]
	priorityInt, err := networkFirewallPolicyWithRulesConvertPriorityToInt(priority)

	if err != nil {
		return false, err
	}

	return priorityInt >= ReservedPriorityStart, nil

}

func networkFirewallPolicyWithRulesSplitPredefinedRules(allRules []interface{}) ([]interface{}, []interface{}, error) {
	predefinedRules := make([]interface{}, 0)
	rules := make([]interface{}, 0)

	for _, rule := range allRules {
		isPredefined, err := networkFirewallPolicyWithRulesIsPredefinedRule(rule.(map[string]interface{}))
		if err != nil {
			return nil, nil, err
		}

		if isPredefined {
			predefinedRules = append(predefinedRules, rule)
		} else {
			rules = append(rules, rule)
		}
	}

	return rules, predefinedRules, nil
}

func ResourceComputeNetworkFirewallPolicyWithRules() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeNetworkFirewallPolicyWithRulesCreate,
		Read:   resourceComputeNetworkFirewallPolicyWithRulesRead,
		Update: resourceComputeNetworkFirewallPolicyWithRulesUpdate,
		Delete: resourceComputeNetworkFirewallPolicyWithRulesDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeNetworkFirewallPolicyWithRulesImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `User-provided name of the Network firewall policy.
The name should be unique in the project in which the firewall policy is created.
The name must be 1-63 characters long, and comply with RFC1035. Specifically,
the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?
which means the first character must be a lowercase letter, and all following characters must be a dash,
lowercase letter, or digit, except the last character, which cannot be a dash.`,
			},
			"rule": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `A list of firewall policy rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"action": {
							Type:     schema.TypeString,
							Required: true,
							Description: `The Action to perform when the client connection triggers the rule. Can currently be either
"allow", "deny", "apply_security_profile_group" or "goto_next".`,
						},
						"match": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"layer4_config": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `Pairs of IP protocols and ports that the rule should match.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"ip_protocol": {
													Type:     schema.TypeString,
													Required: true,
													Description: `The IP protocol to which this rule applies. The protocol
type is required when creating a firewall rule.
This value can either be one of the following well
known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp),
or the IP protocol number.`,
												},
												"ports": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `An optional list of ports to which this rule applies. This field
is only applicable for UDP or TCP protocol. Each entry must be
either an integer or a range. If not specified, this rule
applies to connections through any port.
Example inputs include: ["22"], ["80","443"], and
["12345-12349"].`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
									"dest_address_groups": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Address groups which should be matched against the traffic destination.
Maximum number of destination address groups is 10.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"dest_fqdns": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Fully Qualified Domain Name (FQDN) which should be matched against
traffic destination. Maximum number of destination fqdn allowed is 100.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"dest_ip_ranges": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Destination IP address range in CIDR format. Required for
EGRESS rules.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"dest_region_codes": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Region codes whose IP addresses will be used to match for destination
of traffic. Should be specified as 2 letter country code defined as per
ISO 3166 alpha-2 country codes. ex."US"
Maximum number of destination region codes allowed is 5000.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"dest_threat_intelligences": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Names of Network Threat Intelligence lists.
The IPs in these lists will be matched against traffic destination.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"src_address_groups": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Address groups which should be matched against the traffic source.
Maximum number of source address groups is 10.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"src_fqdns": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Fully Qualified Domain Name (FQDN) which should be matched against
traffic source. Maximum number of source fqdn allowed is 100.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"src_ip_ranges": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Source IP address range in CIDR format. Required for
INGRESS rules.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"src_region_codes": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Region codes whose IP addresses will be used to match for source
of traffic. Should be specified as 2 letter country code defined as per
ISO 3166 alpha-2 country codes. ex."US"
Maximum number of source region codes allowed is 5000.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"src_secure_tag": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `List of secure tag values, which should be matched at the source
of the traffic.
For INGRESS rule, if all the <code>srcSecureTag</code> are INEFFECTIVE,
and there is no <code>srcIpRange</code>, this rule will be ignored.
Maximum number of source tag values allowed is 256.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"name": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `Name of the secure tag, created with TagManager's TagValue API.
@pattern tagValues/[0-9]+`,
												},
												"state": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `[Output Only] State of the secure tag, either 'EFFECTIVE' or
'INEFFECTIVE'. A secure tag is 'INEFFECTIVE' when it is deleted
or its network is deleted.`,
												},
											},
										},
									},
									"src_threat_intelligences": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Names of Network Threat Intelligence lists.
The IPs in these lists will be matched against traffic source.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"priority": {
							Type:     schema.TypeInt,
							Required: true,
							Description: `An integer indicating the priority of a rule in the list. The priority must be a value
between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the
highest priority and 2147483647 is the lowest priority.`,
						},
						"description": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A description of the rule.`,
						},
						"direction": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"INGRESS", "EGRESS", ""}),
							Description:  `The direction in which this rule applies. If unspecified an INGRESS rule is created. Possible values: ["INGRESS", "EGRESS"]`,
						},
						"disabled": {
							Type:     schema.TypeBool,
							Optional: true,
							Description: `Denotes whether the firewall policy rule is disabled. When set to true,
the firewall policy rule is not enforced and traffic behaves as if it did
not exist. If this is unspecified, the firewall policy rule will be
enabled.`,
						},
						"enable_logging": {
							Type:     schema.TypeBool,
							Optional: true,
							Description: `Denotes whether to enable logging for a particular rule.
If logging is enabled, logs will be exported to the
configured export destination in Stackdriver.`,
						},
						"rule_name": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `An optional name for the rule. This field is not a unique identifier
and can be updated.`,
						},
						"security_profile_group": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `A fully-qualified URL of a SecurityProfile resource instance.
Example:
https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
Must be specified if action is 'apply_security_profile_group'.`,
						},
						"target_secure_tag": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `A list of secure tags that controls which instances the firewall rule
applies to. If <code>targetSecureTag</code> are specified, then the
firewall rule applies only to instances in the VPC network that have one
of those EFFECTIVE secure tags, if all the target_secure_tag are in
INEFFECTIVE state, then this rule will be ignored.
<code>targetSecureTag</code> may not be set at the same time as
<code>targetServiceAccounts</code>.
If neither <code>targetServiceAccounts</code> nor
<code>targetSecureTag</code> are specified, the firewall rule applies
to all instances on the specified network.
Maximum number of target label tags allowed is 256.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Name of the secure tag, created with TagManager's TagValue API.
@pattern tagValues/[0-9]+`,
									},
									"state": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `[Output Only] State of the secure tag, either 'EFFECTIVE' or
'INEFFECTIVE'. A secure tag is 'INEFFECTIVE' when it is deleted
or its network is deleted.`,
									},
								},
							},
						},
						"target_service_accounts": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `A list of service accounts indicating the sets of
instances that are applied with this rule.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"tls_inspect": {
							Type:     schema.TypeBool,
							Optional: true,
							Description: `Boolean flag indicating if the traffic should be TLS decrypted.
It can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.`,
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `An optional description of this resource.`,
			},
			"creation_timestamp": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Creation timestamp in RFC3339 text format.`,
			},
			"fingerprint": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Fingerprint of the resource. This field is used internally during updates of this resource.`,
			},
			"network_firewall_policy_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The unique identifier for the resource. This identifier is defined by the server.`,
			},
			"predefined_rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `A list of firewall policy pre-defined rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"action": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The Action to perform when the client connection triggers the rule. Can currently be either
"allow", "deny", "apply_security_profile_group" or "goto_next".`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `A description of the rule.`,
						},
						"direction": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The direction in which this rule applies. If unspecified an INGRESS rule is created.`,
						},
						"disabled": {
							Type:     schema.TypeBool,
							Computed: true,
							Description: `Denotes whether the firewall policy rule is disabled. When set to true,
the firewall policy rule is not enforced and traffic behaves as if it did
not exist. If this is unspecified, the firewall policy rule will be
enabled.`,
						},
						"enable_logging": {
							Type:     schema.TypeBool,
							Computed: true,
							Description: `Denotes whether to enable logging for a particular rule.
If logging is enabled, logs will be exported to the
configured export destination in Stackdriver.`,
						},
						"match": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"dest_address_groups": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Address groups which should be matched against the traffic destination.
Maximum number of destination address groups is 10.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"dest_fqdns": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Fully Qualified Domain Name (FQDN) which should be matched against
traffic destination. Maximum number of destination fqdn allowed is 100.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"dest_ip_ranges": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Destination IP address range in CIDR format. Required for
EGRESS rules.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"dest_region_codes": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Region codes whose IP addresses will be used to match for destination
of traffic. Should be specified as 2 letter country code defined as per
ISO 3166 alpha-2 country codes. ex."US"
Maximum number of destination region codes allowed is 5000.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"dest_threat_intelligences": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Names of Network Threat Intelligence lists.
The IPs in these lists will be matched against traffic destination.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"layer4_config": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Pairs of IP protocols and ports that the rule should match.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"ip_protocol": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The IP protocol to which this rule applies. The protocol
type is required when creating a firewall rule.
This value can either be one of the following well
known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp),
or the IP protocol number.`,
												},
												"ports": {
													Type:     schema.TypeList,
													Computed: true,
													Description: `An optional list of ports to which this rule applies. This field
is only applicable for UDP or TCP protocol. Each entry must be
either an integer or a range. If not specified, this rule
applies to connections through any port.
Example inputs include: ["22"], ["80","443"], and
["12345-12349"].`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
									"src_address_groups": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Address groups which should be matched against the traffic source.
Maximum number of source address groups is 10.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"src_fqdns": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Fully Qualified Domain Name (FQDN) which should be matched against
traffic source. Maximum number of source fqdn allowed is 100.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"src_ip_ranges": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Source IP address range in CIDR format. Required for
INGRESS rules.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"src_region_codes": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Region codes whose IP addresses will be used to match for source
of traffic. Should be specified as 2 letter country code defined as per
ISO 3166 alpha-2 country codes. ex."US"
Maximum number of source region codes allowed is 5000.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"src_secure_tag": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `List of secure tag values, which should be matched at the source
of the traffic.
For INGRESS rule, if all the <code>srcSecureTag</code> are INEFFECTIVE,
and there is no <code>srcIpRange</code>, this rule will be ignored.
Maximum number of source tag values allowed is 256.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"name": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `Name of the secure tag, created with TagManager's TagValue API.
@pattern tagValues/[0-9]+`,
												},
												"state": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `[Output Only] State of the secure tag, either 'EFFECTIVE' or
'INEFFECTIVE'. A secure tag is 'INEFFECTIVE' when it is deleted
or its network is deleted.`,
												},
											},
										},
									},
									"src_threat_intelligences": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Names of Network Threat Intelligence lists.
The IPs in these lists will be matched against traffic source.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"priority": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: `An integer indicating the priority of a rule in the list. The priority must be a value
between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the
highest priority and 2147483647 is the lowest priority.`,
						},
						"rule_name": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `An optional name for the rule. This field is not a unique identifier
and can be updated.`,
						},
						"security_profile_group": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `A fully-qualified URL of a SecurityProfile resource instance.
Example:
https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
Must be specified if action is 'apply_security_profile_group'.`,
						},
						"target_secure_tag": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `A list of secure tags that controls which instances the firewall rule
applies to. If <code>targetSecureTag</code> are specified, then the
firewall rule applies only to instances in the VPC network that have one
of those EFFECTIVE secure tags, if all the target_secure_tag are in
INEFFECTIVE state, then this rule will be ignored.
<code>targetSecureTag</code> may not be set at the same time as
<code>targetServiceAccounts</code>.
If neither <code>targetServiceAccounts</code> nor
<code>targetSecureTag</code> are specified, the firewall rule applies
to all instances on the specified network.
Maximum number of target label tags allowed is 256.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `Name of the secure tag, created with TagManager's TagValue API.
@pattern tagValues/[0-9]+`,
									},
									"state": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `[Output Only] State of the secure tag, either 'EFFECTIVE' or
'INEFFECTIVE'. A secure tag is 'INEFFECTIVE' when it is deleted
or its network is deleted.`,
									},
								},
							},
						},
						"target_service_accounts": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `A list of service accounts indicating the sets of
instances that are applied with this rule.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"tls_inspect": {
							Type:     schema.TypeBool,
							Computed: true,
							Description: `Boolean flag indicating if the traffic should be TLS decrypted.
It can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.`,
						},
					},
				},
			},
			"rule_tuple_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.`,
			},
			"self_link": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Server-defined URL for the resource.`,
			},
			"self_link_with_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Server-defined URL for this resource with the resource id.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceComputeNetworkFirewallPolicyWithRulesCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandComputeNetworkFirewallPolicyWithRulesName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	descriptionProp, err := expandComputeNetworkFirewallPolicyWithRulesDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	rulesProp, err := expandComputeNetworkFirewallPolicyWithRulesRule(d.Get("rule"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rule"); !tpgresource.IsEmptyValue(reflect.ValueOf(rulesProp)) && (ok || !reflect.DeepEqual(v, rulesProp)) {
		obj["rules"] = rulesProp
	}
	fingerprintProp, err := expandComputeNetworkFirewallPolicyWithRulesFingerprint(d.Get("fingerprint"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("fingerprint"); !tpgresource.IsEmptyValue(reflect.ValueOf(fingerprintProp)) && (ok || !reflect.DeepEqual(v, fingerprintProp)) {
		obj["fingerprint"] = fingerprintProp
	}

	obj, err = resourceComputeNetworkFirewallPolicyWithRulesEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVarsForId(d, config, "{{ComputeBasePath}}projects/{{project}}/global/firewallPolicies")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new NetworkFirewallPolicyWithRules: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NetworkFirewallPolicyWithRules: %s", err)
	}
	billingProject = strings.TrimPrefix(project, "projects/")

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating NetworkFirewallPolicyWithRules: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVarsForId(d, config, "projects/{{project}}/global/firewallPolicies/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ComputeOperationWaitTime(
		config, res, tpgresource.GetResourceNameFromSelfLink(project), "Creating NetworkFirewallPolicyWithRules", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create NetworkFirewallPolicyWithRules: %s", err)
	}

	log.Printf("[DEBUG] Post-create for NetworkFirewallPolicyWithRules %q", d.Id())

	url, err = tpgresource.ReplaceVarsForId(d, config, "{{ComputeBasePath}}projects/{{project}}/global/firewallPolicies/{{name}}")
	if err != nil {
		return err
	}

	headers = make(http.Header)
	res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ComputeNetworkFirewallPolicyWithRules %q", d.Id()))
	}

	if err := d.Set("fingerprint", flattenComputeNetworkFirewallPolicyWithRulesFingerprint(res["fingerprint"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}

	res, err = resourceComputeNetworkFirewallPolicyWithRulesDecoder(d, meta, res)
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating NetworkFirewallPolicyWithRules %q", d.Id())
	return resourceComputeNetworkFirewallPolicyWithRulesUpdate(d, meta)

	log.Printf("[DEBUG] Finished creating NetworkFirewallPolicyWithRules %q: %#v", d.Id(), res)

	return resourceComputeNetworkFirewallPolicyWithRulesRead(d, meta)
}

func resourceComputeNetworkFirewallPolicyWithRulesRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVarsForId(d, config, "{{ComputeBasePath}}projects/{{project}}/global/firewallPolicies/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NetworkFirewallPolicyWithRules: %s", err)
	}
	billingProject = strings.TrimPrefix(project, "projects/")

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ComputeNetworkFirewallPolicyWithRules %q", d.Id()))
	}

	res, err = resourceComputeNetworkFirewallPolicyWithRulesDecoder(d, meta, res)
	if err != nil {
		return err
	}

	if res == nil {
		// Decoding the object has resulted in it being gone. It may be marked deleted
		log.Printf("[DEBUG] Removing ComputeNetworkFirewallPolicyWithRules because it no longer exists.")
		d.SetId("")
		return nil
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}

	if err := d.Set("creation_timestamp", flattenComputeNetworkFirewallPolicyWithRulesCreationTimestamp(res["creationTimestamp"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}
	if err := d.Set("name", flattenComputeNetworkFirewallPolicyWithRulesName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}
	if err := d.Set("network_firewall_policy_id", flattenComputeNetworkFirewallPolicyWithRulesNetworkFirewallPolicyId(res["id"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}
	if err := d.Set("description", flattenComputeNetworkFirewallPolicyWithRulesDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}
	if err := d.Set("rule", flattenComputeNetworkFirewallPolicyWithRulesRule(res["rules"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}
	if err := d.Set("predefined_rules", flattenComputeNetworkFirewallPolicyWithRulesPredefinedRules(res["predefinedRules"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}
	if err := d.Set("fingerprint", flattenComputeNetworkFirewallPolicyWithRulesFingerprint(res["fingerprint"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}
	if err := d.Set("self_link", flattenComputeNetworkFirewallPolicyWithRulesSelfLink(res["selfLink"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}
	if err := d.Set("self_link_with_id", flattenComputeNetworkFirewallPolicyWithRulesSelfLinkWithId(res["selfLinkWithId"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}
	if err := d.Set("rule_tuple_count", flattenComputeNetworkFirewallPolicyWithRulesRuleTupleCount(res["ruleTupleCount"], d, config)); err != nil {
		return fmt.Errorf("Error reading NetworkFirewallPolicyWithRules: %s", err)
	}

	return nil
}

func resourceComputeNetworkFirewallPolicyWithRulesUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NetworkFirewallPolicyWithRules: %s", err)
	}
	billingProject = strings.TrimPrefix(project, "projects/")

	obj := make(map[string]interface{})
	descriptionProp, err := expandComputeNetworkFirewallPolicyWithRulesDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	rulesProp, err := expandComputeNetworkFirewallPolicyWithRulesRule(d.Get("rule"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rule"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, rulesProp)) {
		obj["rules"] = rulesProp
	}
	fingerprintProp, err := expandComputeNetworkFirewallPolicyWithRulesFingerprint(d.Get("fingerprint"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("fingerprint"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, fingerprintProp)) {
		obj["fingerprint"] = fingerprintProp
	}

	obj, err = resourceComputeNetworkFirewallPolicyWithRulesUpdateEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVarsForId(d, config, "{{ComputeBasePath}}projects/{{project}}/global/firewallPolicies/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating NetworkFirewallPolicyWithRules %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating NetworkFirewallPolicyWithRules %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating NetworkFirewallPolicyWithRules %q: %#v", d.Id(), res)
	}

	err = ComputeOperationWaitTime(
		config, res, tpgresource.GetResourceNameFromSelfLink(project), "Updating NetworkFirewallPolicyWithRules", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceComputeNetworkFirewallPolicyWithRulesRead(d, meta)
}

func resourceComputeNetworkFirewallPolicyWithRulesDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NetworkFirewallPolicyWithRules: %s", err)
	}
	billingProject = strings.TrimPrefix(project, "projects/")

	url, err := tpgresource.ReplaceVarsForId(d, config, "{{ComputeBasePath}}projects/{{project}}/global/firewallPolicies/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting NetworkFirewallPolicyWithRules %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "NetworkFirewallPolicyWithRules")
	}

	err = ComputeOperationWaitTime(
		config, res, tpgresource.GetResourceNameFromSelfLink(project), "Deleting NetworkFirewallPolicyWithRules", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting NetworkFirewallPolicyWithRules %q: %#v", d.Id(), res)
	return nil
}

func resourceComputeNetworkFirewallPolicyWithRulesImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/global/firewallPolicies/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVarsForId(d, config, "projects/{{project}}/global/firewallPolicies/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenComputeNetworkFirewallPolicyWithRulesCreationTimestamp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesNetworkFirewallPolicyId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"description":             flattenComputeNetworkFirewallPolicyWithRulesRuleDescription(original["description"], d, config),
			"rule_name":               flattenComputeNetworkFirewallPolicyWithRulesRuleRuleName(original["ruleName"], d, config),
			"priority":                flattenComputeNetworkFirewallPolicyWithRulesRulePriority(original["priority"], d, config),
			"match":                   flattenComputeNetworkFirewallPolicyWithRulesRuleMatch(original["match"], d, config),
			"target_secure_tag":       flattenComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTag(original["targetSecureTags"], d, config),
			"action":                  flattenComputeNetworkFirewallPolicyWithRulesRuleAction(original["action"], d, config),
			"direction":               flattenComputeNetworkFirewallPolicyWithRulesRuleDirection(original["direction"], d, config),
			"enable_logging":          flattenComputeNetworkFirewallPolicyWithRulesRuleEnableLogging(original["enableLogging"], d, config),
			"target_service_accounts": flattenComputeNetworkFirewallPolicyWithRulesRuleTargetServiceAccounts(original["targetServiceAccounts"], d, config),
			"security_profile_group":  flattenComputeNetworkFirewallPolicyWithRulesRuleSecurityProfileGroup(original["securityProfileGroup"], d, config),
			"tls_inspect":             flattenComputeNetworkFirewallPolicyWithRulesRuleTlsInspect(original["tlsInspect"], d, config),
			"disabled":                flattenComputeNetworkFirewallPolicyWithRulesRuleDisabled(original["disabled"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkFirewallPolicyWithRulesRuleDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleRuleName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRulePriority(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["src_ip_ranges"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcIpRanges(original["srcIpRanges"], d, config)
	transformed["dest_ip_ranges"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestIpRanges(original["destIpRanges"], d, config)
	transformed["src_address_groups"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcAddressGroups(original["srcAddressGroups"], d, config)
	transformed["dest_address_groups"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestAddressGroups(original["destAddressGroups"], d, config)
	transformed["src_fqdns"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcFqdns(original["srcFqdns"], d, config)
	transformed["dest_fqdns"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestFqdns(original["destFqdns"], d, config)
	transformed["src_region_codes"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcRegionCodes(original["srcRegionCodes"], d, config)
	transformed["dest_region_codes"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestRegionCodes(original["destRegionCodes"], d, config)
	transformed["src_threat_intelligences"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcThreatIntelligences(original["srcThreatIntelligences"], d, config)
	transformed["dest_threat_intelligences"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestThreatIntelligences(original["destThreatIntelligences"], d, config)
	transformed["layer4_config"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4Config(original["layer4Configs"], d, config)
	transformed["src_secure_tag"] =
		flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTag(original["srcSecureTags"], d, config)
	return []interface{}{transformed}
}
func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcIpRanges(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestIpRanges(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcAddressGroups(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestAddressGroups(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcFqdns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestFqdns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcRegionCodes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestRegionCodes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcThreatIntelligences(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchDestThreatIntelligences(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4Config(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"ip_protocol": flattenComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4ConfigIpProtocol(original["ipProtocol"], d, config),
			"ports":       flattenComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4ConfigPorts(original["ports"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4ConfigIpProtocol(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4ConfigPorts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":  flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTagName(original["name"], d, config),
			"state": flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTagState(original["state"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTagName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTagState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":  flattenComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTagName(original["name"], d, config),
			"state": flattenComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTagState(original["state"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTagName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTagState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleDirection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleEnableLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleTargetServiceAccounts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleSecurityProfileGroup(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleTlsInspect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"description":             flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesDescription(original["description"], d, config),
			"rule_name":               flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesRuleName(original["ruleName"], d, config),
			"priority":                flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesPriority(original["priority"], d, config),
			"match":                   flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatch(original["match"], d, config),
			"target_secure_tag":       flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTargetSecureTag(original["targetSecureTags"], d, config),
			"action":                  flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesAction(original["action"], d, config),
			"direction":               flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesDirection(original["direction"], d, config),
			"enable_logging":          flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesEnableLogging(original["enableLogging"], d, config),
			"target_service_accounts": flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTargetServiceAccounts(original["targetServiceAccounts"], d, config),
			"security_profile_group":  flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesSecurityProfileGroup(original["securityProfileGroup"], d, config),
			"tls_inspect":             flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTlsInspect(original["tlsInspect"], d, config),
			"disabled":                flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesDisabled(original["disabled"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesRuleName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesPriority(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["src_ip_ranges"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcIpRanges(original["srcIpRanges"], d, config)
	transformed["dest_ip_ranges"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestIpRanges(original["destIpRanges"], d, config)
	transformed["src_address_groups"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcAddressGroups(original["srcAddressGroups"], d, config)
	transformed["dest_address_groups"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestAddressGroups(original["destAddressGroups"], d, config)
	transformed["src_fqdns"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcFqdns(original["srcFqdns"], d, config)
	transformed["dest_fqdns"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestFqdns(original["destFqdns"], d, config)
	transformed["src_region_codes"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcRegionCodes(original["srcRegionCodes"], d, config)
	transformed["dest_region_codes"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestRegionCodes(original["destRegionCodes"], d, config)
	transformed["src_threat_intelligences"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcThreatIntelligences(original["srcThreatIntelligences"], d, config)
	transformed["dest_threat_intelligences"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestThreatIntelligences(original["destThreatIntelligences"], d, config)
	transformed["layer4_config"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchLayer4Config(original["layer4Configs"], d, config)
	transformed["src_secure_tag"] =
		flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcSecureTag(original["srcSecureTags"], d, config)
	return []interface{}{transformed}
}
func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcIpRanges(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestIpRanges(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcAddressGroups(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestAddressGroups(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcFqdns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestFqdns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcRegionCodes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestRegionCodes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcThreatIntelligences(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchDestThreatIntelligences(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchLayer4Config(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"ip_protocol": flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchLayer4ConfigIpProtocol(original["ipProtocol"], d, config),
			"ports":       flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchLayer4ConfigPorts(original["ports"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchLayer4ConfigIpProtocol(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchLayer4ConfigPorts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcSecureTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":  flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcSecureTagName(original["name"], d, config),
			"state": flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcSecureTagState(original["state"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcSecureTagName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesMatchSrcSecureTagState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTargetSecureTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":  flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTargetSecureTagName(original["name"], d, config),
			"state": flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTargetSecureTagState(original["state"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTargetSecureTagName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTargetSecureTagState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesDirection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesEnableLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTargetServiceAccounts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesSecurityProfileGroup(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesTlsInspect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesPredefinedRulesDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesFingerprint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesSelfLink(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesSelfLinkWithId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkFirewallPolicyWithRulesRuleTupleCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func expandComputeNetworkFirewallPolicyWithRulesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDescription, err := expandComputeNetworkFirewallPolicyWithRulesRuleDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedRuleName, err := expandComputeNetworkFirewallPolicyWithRulesRuleRuleName(original["rule_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRuleName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ruleName"] = transformedRuleName
		}

		transformedPriority, err := expandComputeNetworkFirewallPolicyWithRulesRulePriority(original["priority"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPriority); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["priority"] = transformedPriority
		}

		transformedMatch, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatch(original["match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["match"] = transformedMatch
		}

		transformedTargetSecureTag, err := expandComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTag(original["target_secure_tag"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTargetSecureTag); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["targetSecureTags"] = transformedTargetSecureTag
		}

		transformedAction, err := expandComputeNetworkFirewallPolicyWithRulesRuleAction(original["action"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["action"] = transformedAction
		}

		transformedDirection, err := expandComputeNetworkFirewallPolicyWithRulesRuleDirection(original["direction"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDirection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["direction"] = transformedDirection
		}

		transformedEnableLogging, err := expandComputeNetworkFirewallPolicyWithRulesRuleEnableLogging(original["enable_logging"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["enableLogging"] = transformedEnableLogging
		}

		transformedTargetServiceAccounts, err := expandComputeNetworkFirewallPolicyWithRulesRuleTargetServiceAccounts(original["target_service_accounts"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTargetServiceAccounts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["targetServiceAccounts"] = transformedTargetServiceAccounts
		}

		transformedSecurityProfileGroup, err := expandComputeNetworkFirewallPolicyWithRulesRuleSecurityProfileGroup(original["security_profile_group"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSecurityProfileGroup); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["securityProfileGroup"] = transformedSecurityProfileGroup
		}

		transformedTlsInspect, err := expandComputeNetworkFirewallPolicyWithRulesRuleTlsInspect(original["tls_inspect"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTlsInspect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tlsInspect"] = transformedTlsInspect
		}

		transformedDisabled, err := expandComputeNetworkFirewallPolicyWithRulesRuleDisabled(original["disabled"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["disabled"] = transformedDisabled
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleRuleName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRulePriority(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSrcIpRanges, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcIpRanges(original["src_ip_ranges"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSrcIpRanges); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["srcIpRanges"] = transformedSrcIpRanges
	}

	transformedDestIpRanges, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestIpRanges(original["dest_ip_ranges"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDestIpRanges); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["destIpRanges"] = transformedDestIpRanges
	}

	transformedSrcAddressGroups, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcAddressGroups(original["src_address_groups"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSrcAddressGroups); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["srcAddressGroups"] = transformedSrcAddressGroups
	}

	transformedDestAddressGroups, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestAddressGroups(original["dest_address_groups"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDestAddressGroups); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["destAddressGroups"] = transformedDestAddressGroups
	}

	transformedSrcFqdns, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcFqdns(original["src_fqdns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSrcFqdns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["srcFqdns"] = transformedSrcFqdns
	}

	transformedDestFqdns, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestFqdns(original["dest_fqdns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDestFqdns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["destFqdns"] = transformedDestFqdns
	}

	transformedSrcRegionCodes, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcRegionCodes(original["src_region_codes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSrcRegionCodes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["srcRegionCodes"] = transformedSrcRegionCodes
	}

	transformedDestRegionCodes, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestRegionCodes(original["dest_region_codes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDestRegionCodes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["destRegionCodes"] = transformedDestRegionCodes
	}

	transformedSrcThreatIntelligences, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcThreatIntelligences(original["src_threat_intelligences"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSrcThreatIntelligences); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["srcThreatIntelligences"] = transformedSrcThreatIntelligences
	}

	transformedDestThreatIntelligences, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestThreatIntelligences(original["dest_threat_intelligences"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDestThreatIntelligences); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["destThreatIntelligences"] = transformedDestThreatIntelligences
	}

	transformedLayer4Config, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4Config(original["layer4_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLayer4Config); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["layer4Configs"] = transformedLayer4Config
	}

	transformedSrcSecureTag, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTag(original["src_secure_tag"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSrcSecureTag); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["srcSecureTags"] = transformedSrcSecureTag
	}

	return transformed, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcIpRanges(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestIpRanges(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcAddressGroups(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestAddressGroups(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcFqdns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestFqdns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcRegionCodes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestRegionCodes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcThreatIntelligences(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchDestThreatIntelligences(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4Config(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedIpProtocol, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4ConfigIpProtocol(original["ip_protocol"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIpProtocol); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ipProtocol"] = transformedIpProtocol
		}

		transformedPorts, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4ConfigPorts(original["ports"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPorts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ports"] = transformedPorts
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4ConfigIpProtocol(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchLayer4ConfigPorts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTagName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedState, err := expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTagState(original["state"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["state"] = transformedState
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTagName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTagState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTagName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedState, err := expandComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTagState(original["state"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["state"] = transformedState
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTagName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleTargetSecureTagState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleDirection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleEnableLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleTargetServiceAccounts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleSecurityProfileGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleTlsInspect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesRuleDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeNetworkFirewallPolicyWithRulesFingerprint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func resourceComputeNetworkFirewallPolicyWithRulesEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	delete(obj, "rules") // Rules are not supported in the create API
	return obj, nil
}

func resourceComputeNetworkFirewallPolicyWithRulesUpdateEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	config := meta.(*transport_tpg.Config)

	predefinedRulesProp, err := expandComputeNetworkFirewallPolicyWithRulesRule(d.Get("predefined_rules"), d, config)
	if err != nil {
		return nil, err
	}

	rules := obj["rules"].([]interface{})
	obj["rules"] = append(rules, predefinedRulesProp)

	return obj, nil

}

func resourceComputeNetworkFirewallPolicyWithRulesDecoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}) (map[string]interface{}, error) {
	rules, predefinedRules, err := networkFirewallPolicyWithRulesSplitPredefinedRules(res["rules"].([]interface{}))

	if err != nil {
		return nil, fmt.Errorf("Error occurred while splitting pre-defined rules: %s", err)
	}

	res["rules"] = rules
	res["predefinedRules"] = predefinedRules

	config := meta.(*transport_tpg.Config)

	if err := d.Set("predefined_rules", flattenComputeNetworkFirewallPolicyWithRulesPredefinedRules(predefinedRules, d, config)); err != nil {
		return nil, fmt.Errorf("Error occurred while setting pre-defined rules: %s", err)
	}

	return res, nil
}
