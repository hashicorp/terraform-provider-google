// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/compute/data_source_google_compute_interconnect_locations.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package compute

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func DataSourceGoogleComputeInterconnectLocations() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceGoogleComputeInterconnectLocationsRead,
		Schema: map[string]*schema.Schema{
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"locations": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"description": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"self_link": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"peeringdb_facility_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"address": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"facility_provider": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"facility_provider_facility_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"status": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"continent": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"city": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"availability_zone": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"supports_pzs": {
							Type:     schema.TypeBool,
							Computed: true,
						},
						"available_features": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"available_link_types": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
		},
	}
}
func dataSourceGoogleComputeInterconnectLocationsRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}
	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return err
	}
	d.SetId(fmt.Sprintf("projects/%s", project))
	list, err := config.NewComputeClient(userAgent).InterconnectLocations.List(project).Do()
	if err != nil {
		return fmt.Errorf("Error retrieving list of interconnect locations: %s", err)
	}
	var locations []map[string]interface{}
	for _, location := range list.Items {
		locations = append(locations, map[string]interface{}{
			"name":                          location.Name,
			"description":                   location.Description,
			"self_link":                     location.SelfLink,
			"peeringdb_facility_id":         location.PeeringdbFacilityId,
			"address":                       location.Address,
			"facility_provider":             location.FacilityProvider,
			"facility_provider_facility_id": location.FacilityProviderFacilityId,
			"status":                        location.Status,
			"continent":                     location.Continent,
			"city":                          location.City,
			"availability_zone":             location.AvailabilityZone,
			"supports_pzs":                  location.SupportsPzs,
			"available_features":            location.AvailableFeatures,
			"available_link_types":          location.AvailableLinkTypes,
		})
	}
	if err := d.Set("locations", locations); err != nil {
		return fmt.Errorf("Error setting locations: %s", err)
	}
	return nil
}
