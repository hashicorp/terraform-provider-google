// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/compute/data_source_google_compute_interconnect_location_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package compute_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/services/compute"
	"github.com/hashicorp/terraform-provider-google/google/transport"
)

var interconnectLoc = "z2z-us-west8-zone2-ncphxk-z"

func testAccDataSourceCheckInterconnectLocation() func(s *terraform.State) error {
	return func(s *terraform.State) error {
		data_source_name := "data.google_compute_interconnect_location.my_location"
		ds, ok := s.RootModule().Resources[data_source_name]
		if !ok {
			return fmt.Errorf("root module has no resource called %s", data_source_name)
		}
		ds_attr := ds.Primary.Attributes
		expected := map[string]string{
			"name":              interconnectLoc,
			"description":       "Zakim-to-Zakim location",
			"facility_provider": "Google",
		}
		for attr, expect_value := range expected {
			if ds_attr[attr] != expect_value {
				return fmt.Errorf("%s is %s; want %s", attr, ds_attr[attr], expect_value)
			}
		}
		if ds_attr["self_link"] == "" {
			return fmt.Errorf("self_link is not set")
		}
		return nil
	}
}
func TestAccDataSourceGoogleComputeInterconnectLocation_basic(t *testing.T) {
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceGoogleComputeInterconnectLocationConfig(interconnectLoc),
				Check: resource.ComposeTestCheckFunc(
					testAccDataSourceCheckInterconnectLocation(),
				),
			},
		},
	})
}
func testAccDataSourceGoogleComputeInterconnectLocationConfig(locationName string) string {
	return fmt.Sprintf(`
data "google_compute_interconnect_location" "my_location" {
 name = "%s"
}
`, locationName)
}
func TestParseComputeInterconnectLocationId(t *testing.T) {
	config := &transport.Config{Project: "my-project"}
	cases := []struct {
		id       string
		wantProj string
		wantName string
		wantErr  bool
	}{
		{"projects/my-project/global/interconnectlocations/z2z-us-west8-zone2-ncphxk-z", "my-project", interconnectLoc, false},
		{"my-project/z2z-us-west8-zone2-ncphxk-z", "my-project", interconnectLoc, false},
		{interconnectLoc, "my-project", interconnectLoc, false},
		{"invalid/format/extra", "", "", true},
	}
	for _, tc := range cases {
		got, err := compute.ParseComputeInterconnectLocationId(tc.id, config)
		if tc.wantErr {
			if err == nil {
				t.Errorf("ParseComputeInterconnectLocationId(%q) expected error, got nil", tc.id)
			}
			continue
		}
		if err != nil {
			t.Errorf("ParseComputeInterconnectLocationId(%q) unexpected error: %v", tc.id, err)
			continue
		}
		if got.Project != tc.wantProj || got.Name != tc.wantName {
			t.Errorf("ParseComputeInterconnectLocationId(%q) = (%q, %q), want (%q, %q)", tc.id, got.Project, got.Name, tc.wantProj, tc.wantName)
		}
	}
}
