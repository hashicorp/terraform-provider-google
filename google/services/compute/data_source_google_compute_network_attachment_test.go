// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/compute/data_source_google_compute_network_attachment_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
package compute_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccDataSourceComputeNetworkAttachment_basic(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeNetworkAttachment_basic(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "name", fmt.Sprintf("tf-test-basic-network-attachment-%s", context["random_suffix"])),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "region", "us-central1"),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "description", "my basic network attachment"),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "connection_preference", "ACCEPT_AUTOMATIC"),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "subnetworks.#", "1"),
				),
			},
		},
	})
}

func TestAccDataSourceComputeNetworkAttachment_full(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceComputeNetworkAttachment_full(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "name", fmt.Sprintf("tf-test-basic-network-attachment-%s", context["random_suffix"])),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "region", "us-central1"),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "description", "basic network attachment description"),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "connection_preference", "ACCEPT_MANUAL"),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "subnetworks.#", "1"),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "subnetworks.0", fmt.Sprintf("tf-test-basic-subnetwork1-%s", context["random_suffix"])),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "producer_accept_lists.#", "2"),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "producer_accept_lists.0", fmt.Sprintf("tf-test-prj-accept1-%s", context["random_suffix"])),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "producer_accept_lists.1", fmt.Sprintf("tf-test-prj-accept2-%s", context["random_suffix"])),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "producer_reject_lists.#", "2"),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "producer_reject_lists.0", fmt.Sprintf("tf-test-prj-reject1-%s", context["random_suffix"])),
					resource.TestCheckResourceAttr("data.google_compute_network_attachment.default", "producer_reject_lists.1", fmt.Sprintf("tf-test-prj-reject2-%s", context["random_suffix"])),
				),
			},
		},
	})
}

func testAccComputeNetworkAttachment_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_network" "default" {
    name = "tf-test-basic-network%{random_suffix}"
    auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "default" {
    name   = "tf-test-basic-subnetwork%{random_suffix}"
    region = "us-central1"

    network       = google_compute_network.default.id
    ip_cidr_range = "10.0.0.0/16"
}

resource "google_compute_network_attachment" "default" {
    name   = "tf-test-basic-network-attachment-%{random_suffix}"
    region = "us-central1"
    description = "my basic network attachment"

    subnetworks = [google_compute_subnetwork.default.id]
    connection_preference = "ACCEPT_AUTOMATIC"
}

data "google_compute_network_attachment" "default" {
    name = google_compute_network_attachment.default.name
	region = google_compute_network_attachment.default.region
	project = google_compute_network_attachment.default.project
	depends_on = [
		google_compute_network.default,
		google_compute_subnetwork.default,
		google_compute_network_attachment.default,
	]
}
`, context)
}

func testAccDataSourceComputeNetworkAttachment_full(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_network_attachment" "default" {
    name = "tf-test-basic-network-attachment-%{random_suffix}"
    region = "us-central1"
    description = "basic network attachment description"
    connection_preference = "ACCEPT_MANUAL"

    subnetworks = [
        google_compute_subnetwork.net1.self_link
    ]

    producer_accept_lists = [
        google_project.accepted_producer_project1.project_id,
        google_project.accepted_producer_project2.project_id
    ]

    producer_reject_lists = [
        google_project.rejected_producer_project1.project_id,
	google_project.rejected_producer_project2.project_id
    ]
}

resource "google_compute_network" "default" {
    name = "tf-test-basic-network-%{random_suffix}"
    auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "net1" {
    name = "tf-test-basic-subnetwork1-%{random_suffix}"
    region = "us-central1"

    network = google_compute_network.default.id
    ip_cidr_range = "10.0.0.0/16"
}

resource "google_compute_subnetwork" "net2" {
    name = "tf-test-basic-subnetwork2-%{random_suffix}"
    region = "us-central1"

    network = google_compute_network.default.id
    ip_cidr_range = "10.1.0.0/16"
}

resource "google_project" "rejected_producer_project1" {
    project_id      = "tf-test-prj-reject1-%{random_suffix}"
    name            = "tf-test-prj-reject1-%{random_suffix}"
    org_id          = "%{org_id}"
    billing_account = "%{billing_account}"
    deletion_policy = "DELETE"
}

resource "google_project" "rejected_producer_project2" {
    project_id      = "tf-test-prj-reject2-%{random_suffix}"
    name            = "tf-test-prj-reject2-%{random_suffix}"
    org_id          = "%{org_id}"
    billing_account = "%{billing_account}"
    deletion_policy = "DELETE"
}

resource "google_project" "accepted_producer_project1" {
    project_id      = "tf-test-prj-accept1-%{random_suffix}"
    name            = "tf-test-prj-accept1-%{random_suffix}"
    org_id          = "%{org_id}"
    billing_account = "%{billing_account}"
    deletion_policy = "DELETE"
}

resource "google_project" "accepted_producer_project2" {
    project_id      = "tf-test-prj-accept2-%{random_suffix}"
    name            = "tf-test-prj-accept2-%{random_suffix}"
    org_id          = "%{org_id}"
    billing_account = "%{billing_account}"
    deletion_policy = "DELETE"
}

data "google_compute_network_attachment" "default" {
    name = google_compute_network_attachment.default.name
	region = google_compute_network_attachment.default.region
	project = google_compute_network_attachment.default.project
	depends_on = [
		google_compute_network_attachment.default,
		google_compute_network.default,
		google_compute_subnetwork.net1,
		google_compute_subnetwork.net2,
		google_project.accepted_producer_project1,
		google_project.accepted_producer_project2,
		google_project.rejected_producer_project1,
		google_project.rejected_producer_project2,
	]
}
`, context)
}
