// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/compute/PreviewFeature.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package compute

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceComputePreviewFeature() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputePreviewFeatureCreate,
		Read:   resourceComputePreviewFeatureRead,
		Update: resourceComputePreviewFeatureUpdate,
		Delete: resourceComputePreviewFeatureDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputePreviewFeatureImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"activation_status": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: verify.ValidateEnum([]string{"ENABLED", "ACTIVATION_STATE_UNSPECIFIED"}),
				Description:  `The activation status of the preview feature. Possible values: ["ENABLED", "ACTIVATION_STATE_UNSPECIFIED"]`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of the preview feature.`,
			},
			"rollout_operation": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `The rollout operation of the feature.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"rollout_input": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The input for the rollout operation.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"predefined_rollout_plan": {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: verify.ValidateEnum([]string{"ROLLOUT_PLAN_FAST_ROLLOUT"}),
										Description:  `Predefined rollout plans. Possible values: ["ROLLOUT_PLAN_FAST_ROLLOUT"]`,
									},
								},
							},
						},
					},
				},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceComputePreviewFeatureCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	activationStatusProp, err := expandComputePreviewFeatureActivationStatus(d.Get("activation_status"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("activation_status"); !tpgresource.IsEmptyValue(reflect.ValueOf(activationStatusProp)) && (ok || !reflect.DeepEqual(v, activationStatusProp)) {
		obj["activationStatus"] = activationStatusProp
	}
	rolloutOperationProp, err := expandComputePreviewFeatureRolloutOperation(d.Get("rollout_operation"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rollout_operation"); !tpgresource.IsEmptyValue(reflect.ValueOf(rolloutOperationProp)) && (ok || !reflect.DeepEqual(v, rolloutOperationProp)) {
		obj["rolloutOperation"] = rolloutOperationProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/previewFeatures/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new PreviewFeature: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for PreviewFeature: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating PreviewFeature: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/global/previewFeatures/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ComputeOperationWaitTime(
		config, res, project, "Creating PreviewFeature", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create PreviewFeature: %s", err)
	}

	log.Printf("[DEBUG] Finished creating PreviewFeature %q: %#v", d.Id(), res)

	return resourceComputePreviewFeatureRead(d, meta)
}

func resourceComputePreviewFeatureRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/previewFeatures/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for PreviewFeature: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ComputePreviewFeature %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading PreviewFeature: %s", err)
	}

	if err := d.Set("activation_status", flattenComputePreviewFeatureActivationStatus(res["activationStatus"], d, config)); err != nil {
		return fmt.Errorf("Error reading PreviewFeature: %s", err)
	}

	return nil
}

func resourceComputePreviewFeatureUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for PreviewFeature: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	activationStatusProp, err := expandComputePreviewFeatureActivationStatus(d.Get("activation_status"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("activation_status"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, activationStatusProp)) {
		obj["activationStatus"] = activationStatusProp
	}
	rolloutOperationProp, err := expandComputePreviewFeatureRolloutOperation(d.Get("rollout_operation"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("rollout_operation"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, rolloutOperationProp)) {
		obj["rolloutOperation"] = rolloutOperationProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/previewFeatures/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating PreviewFeature %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("activation_status") {
		updateMask = append(updateMask, "activationStatus")
	}

	if d.HasChange("rollout_operation") {
		updateMask = append(updateMask, "rolloutOperation")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating PreviewFeature %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating PreviewFeature %q: %#v", d.Id(), res)
		}

		err = ComputeOperationWaitTime(
			config, res, project, "Updating PreviewFeature", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceComputePreviewFeatureRead(d, meta)
}

func resourceComputePreviewFeatureDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] Compute PreviewFeature resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceComputePreviewFeatureImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/global/previewFeatures/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/global/previewFeatures/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenComputePreviewFeatureActivationStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandComputePreviewFeatureActivationStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputePreviewFeatureRolloutOperation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRolloutInput, err := expandComputePreviewFeatureRolloutOperationRolloutInput(original["rollout_input"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRolloutInput); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rolloutInput"] = transformedRolloutInput
	}

	return transformed, nil
}

func expandComputePreviewFeatureRolloutOperationRolloutInput(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPredefinedRolloutPlan, err := expandComputePreviewFeatureRolloutOperationRolloutInputPredefinedRolloutPlan(original["predefined_rollout_plan"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPredefinedRolloutPlan); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["predefinedRolloutPlan"] = transformedPredefinedRolloutPlan
	}

	return transformed, nil
}

func expandComputePreviewFeatureRolloutOperationRolloutInputPredefinedRolloutPlan(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
