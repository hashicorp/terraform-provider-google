// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/compute/InterconnectAttachmentGroup.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package compute

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceComputeInterconnectAttachmentGroup() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeInterconnectAttachmentGroupCreate,
		Read:   resourceComputeInterconnectAttachmentGroupRead,
		Update: resourceComputeInterconnectAttachmentGroupUpdate,
		Delete: resourceComputeInterconnectAttachmentGroupDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeInterconnectAttachmentGroupImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"intent": {
				Type:     schema.TypeList,
				Required: true,
				Description: `The user's intent for this group. This is the only required field besides
the name that must be specified on group creation.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"availability_sla": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"PRODUCTION_NON_CRITICAL", "PRODUCTION_CRITICAL", "NO_SLA", "AVAILABILITY_SLA_UNSPECIFIED", ""}),
							Description:  `Which SLA the user intends this group to support. Possible values: ["PRODUCTION_NON_CRITICAL", "PRODUCTION_CRITICAL", "NO_SLA", "AVAILABILITY_SLA_UNSPECIFIED"]`,
						},
					},
				},
			},
			"name": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidateRegexp(`^[a-z]([-a-z0-9]*[a-z0-9])?$`),
				Description: `Name of the resource. Provided by the client when the resource is created. The name must be
1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first
character must be a lowercase letter, and all following characters must be a dash,
lowercase letter, or digit, except the last character, which cannot be a dash.`,
			},
			"attachments": {
				Type:     schema.TypeSet,
				Optional: true,
				Description: `Attachments in the AttachmentGroup. Keys are arbitrary user-specified
strings. Users are encouraged, but not required, to use their preferred
format for resource links as keys.
Note that there are add-members and remove-members methods in gcloud.
The size of this map is limited by an "Attachments per group" quota.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:     schema.TypeString,
							Required: true,
						},
						"attachment": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: ``,
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `An optional description of this resource. Provide this property when you create the resource.`,
			},
			"interconnect_group": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The URL of an InterconnectGroup that groups these Attachments'
Interconnects. Customers do not need to set this unless directed by
Google Support.`,
			},
			"configured": {
				Type:     schema.TypeList,
				Computed: true,
				Description: `The redundancy this group is configured to support. The way a
user queries what SLA their Attachment gets is by looking at this field of
the Attachment's AttachmentGroup.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"availability_sla": {
							Type:     schema.TypeList,
							Computed: true,
							Description: `Which SLA this group is configured to support, and why this
group does or does not meet that SLA's requirements.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"effective_sla": {
										Type:     schema.TypeString,
										Computed: true,
										Description: `Which SLA this group supports. Options are the same as the
intent.`,
									},
									"intended_sla_blockers": {
										Type:     schema.TypeList,
										Computed: true,
										Description: `Reasons why configuration.availabilitySLA.sla differs from
intent.availabilitySLA. This list is empty if and only if those are the
same.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"attachments": {
													Type:     schema.TypeList,
													Computed: true,
													Description: `URLs of any particular Attachments to explain this
blocker in more detail.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"blocker_type": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `The category of an unmet SLA requirement.`,
												},
												"documentation_link": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The url of Google Cloud public documentation explaining
this requirement. This is set for every type of requirement.`,
												},
												"explanation": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `A human-readable explanation of this requirement and
why it's not met. This is set for every type of requirement.`,
												},
												"metros": {
													Type:     schema.TypeList,
													Computed: true,
													Description: `Metros used to explain this blocker in more detail.
These are three-letter lowercase strings like "iad". This will be set
for some blockers (like NO_ATTACHMENTS_IN_METRO_AND_ZONE) but does
not apply to others.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"regions": {
													Type:     schema.TypeList,
													Computed: true,
													Description: `Regions used to explain this blocker in more
detail. These are region names formatted like "us-central1". This
will be set for some blockers (like INCOMPATIBLE_REGIONS) but does
not apply to others.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"zones": {
													Type:     schema.TypeList,
													Computed: true,
													Description: `Zones used to explain this blocker in more detail.
Format is "zone1" and/or "zone2". This will be set for some blockers
(like  MISSING_ZONE) but does not apply to others.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"creation_timestamp": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Creation timestamp in RFC3339 text format.`,
			},
			"logical_structure": {
				Type:     schema.TypeList,
				Computed: true,
				Description: `An analysis of the logical layout of Attachments in this
group. Every Attachment in the group is shown once in this structure.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"regions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The regions Attachments in this group are in.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"metros": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The metros of Attachments in this group in this region.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"facilities": {
													Type:     schema.TypeList,
													Computed: true,
													Description: `The facilities used for this group's Attachments'
Interconnects.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"facility": {
																Type:        schema.TypeString,
																Computed:    true,
																Description: `The name of a facility, like "iad-1234".`,
															},
															"zones": {
																Type:     schema.TypeList,
																Computed: true,
																Description: `The zones that Interconnects in this facility are
present in.`,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"attachment": {
																			Type:     schema.TypeList,
																			Computed: true,
																			Description: `URLs of Attachments in the given zone, to the given
region, on Interconnects in the given facility and metro. Every
Attachment in the AG has such an entry.`,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																		"zone": {
																			Type:     schema.TypeString,
																			Computed: true,
																			Description: `The zones that Attachments in this group are present
in, in the given facilities.  This is inherited from their
Interconnects.`,
																		},
																	},
																},
															},
														},
													},
												},
												"metro": {
													Type:     schema.TypeString,
													Computed: true,
													Description: `The name of the metro, as a three-letter lowercase
string like "iad". This is the first component of the location of an
Interconnect.`,
												},
											},
										},
									},
									"region": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of a region, like "us-central1".`,
									},
								},
							},
						},
					},
				},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceComputeInterconnectAttachmentGroupCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandComputeInterconnectAttachmentGroupDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	nameProp, err := expandComputeInterconnectAttachmentGroupName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	attachmentsProp, err := expandComputeInterconnectAttachmentGroupAttachments(d.Get("attachments"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("attachments"); !tpgresource.IsEmptyValue(reflect.ValueOf(attachmentsProp)) && (ok || !reflect.DeepEqual(v, attachmentsProp)) {
		obj["attachments"] = attachmentsProp
	}
	interconnectGroupProp, err := expandComputeInterconnectAttachmentGroupInterconnectGroup(d.Get("interconnect_group"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("interconnect_group"); !tpgresource.IsEmptyValue(reflect.ValueOf(interconnectGroupProp)) && (ok || !reflect.DeepEqual(v, interconnectGroupProp)) {
		obj["interconnectGroup"] = interconnectGroupProp
	}
	intentProp, err := expandComputeInterconnectAttachmentGroupIntent(d.Get("intent"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("intent"); !tpgresource.IsEmptyValue(reflect.ValueOf(intentProp)) && (ok || !reflect.DeepEqual(v, intentProp)) {
		obj["intent"] = intentProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/interconnectAttachmentGroups")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new InterconnectAttachmentGroup: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for InterconnectAttachmentGroup: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating InterconnectAttachmentGroup: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/global/interconnectAttachmentGroups/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ComputeOperationWaitTime(
		config, res, project, "Creating InterconnectAttachmentGroup", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create InterconnectAttachmentGroup: %s", err)
	}

	log.Printf("[DEBUG] Finished creating InterconnectAttachmentGroup %q: %#v", d.Id(), res)

	return resourceComputeInterconnectAttachmentGroupRead(d, meta)
}

func resourceComputeInterconnectAttachmentGroupRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/interconnectAttachmentGroups/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for InterconnectAttachmentGroup: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ComputeInterconnectAttachmentGroup %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading InterconnectAttachmentGroup: %s", err)
	}

	if err := d.Set("description", flattenComputeInterconnectAttachmentGroupDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading InterconnectAttachmentGroup: %s", err)
	}
	if err := d.Set("creation_timestamp", flattenComputeInterconnectAttachmentGroupCreationTimestamp(res["creationTimestamp"], d, config)); err != nil {
		return fmt.Errorf("Error reading InterconnectAttachmentGroup: %s", err)
	}
	if err := d.Set("name", flattenComputeInterconnectAttachmentGroupName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading InterconnectAttachmentGroup: %s", err)
	}
	if err := d.Set("attachments", flattenComputeInterconnectAttachmentGroupAttachments(res["attachments"], d, config)); err != nil {
		return fmt.Errorf("Error reading InterconnectAttachmentGroup: %s", err)
	}
	if err := d.Set("interconnect_group", flattenComputeInterconnectAttachmentGroupInterconnectGroup(res["interconnectGroup"], d, config)); err != nil {
		return fmt.Errorf("Error reading InterconnectAttachmentGroup: %s", err)
	}
	if err := d.Set("intent", flattenComputeInterconnectAttachmentGroupIntent(res["intent"], d, config)); err != nil {
		return fmt.Errorf("Error reading InterconnectAttachmentGroup: %s", err)
	}
	if err := d.Set("logical_structure", flattenComputeInterconnectAttachmentGroupLogicalStructure(res["logicalStructure"], d, config)); err != nil {
		return fmt.Errorf("Error reading InterconnectAttachmentGroup: %s", err)
	}
	if err := d.Set("configured", flattenComputeInterconnectAttachmentGroupConfigured(res["configured"], d, config)); err != nil {
		return fmt.Errorf("Error reading InterconnectAttachmentGroup: %s", err)
	}

	return nil
}

func resourceComputeInterconnectAttachmentGroupUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for InterconnectAttachmentGroup: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandComputeInterconnectAttachmentGroupDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	attachmentsProp, err := expandComputeInterconnectAttachmentGroupAttachments(d.Get("attachments"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("attachments"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, attachmentsProp)) {
		obj["attachments"] = attachmentsProp
	}
	interconnectGroupProp, err := expandComputeInterconnectAttachmentGroupInterconnectGroup(d.Get("interconnect_group"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("interconnect_group"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, interconnectGroupProp)) {
		obj["interconnectGroup"] = interconnectGroupProp
	}
	intentProp, err := expandComputeInterconnectAttachmentGroupIntent(d.Get("intent"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("intent"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, intentProp)) {
		obj["intent"] = intentProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/interconnectAttachmentGroups/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating InterconnectAttachmentGroup %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating InterconnectAttachmentGroup %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating InterconnectAttachmentGroup %q: %#v", d.Id(), res)
	}

	err = ComputeOperationWaitTime(
		config, res, project, "Updating InterconnectAttachmentGroup", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceComputeInterconnectAttachmentGroupRead(d, meta)
}

func resourceComputeInterconnectAttachmentGroupDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for InterconnectAttachmentGroup: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/interconnectAttachmentGroups/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting InterconnectAttachmentGroup %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "InterconnectAttachmentGroup")
	}

	err = ComputeOperationWaitTime(
		config, res, project, "Deleting InterconnectAttachmentGroup", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting InterconnectAttachmentGroup %q: %#v", d.Id(), res)
	return nil
}

func resourceComputeInterconnectAttachmentGroupImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/global/interconnectAttachmentGroups/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/global/interconnectAttachmentGroups/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenComputeInterconnectAttachmentGroupDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupCreationTimestamp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupAttachments(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.(map[string]interface{})
	transformed := make([]interface{}, 0, len(l))
	for k, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"name":       k,
			"attachment": flattenComputeInterconnectAttachmentGroupAttachmentsAttachment(original["attachment"], d, config),
		})
	}
	return transformed
}
func flattenComputeInterconnectAttachmentGroupAttachmentsAttachment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupInterconnectGroup(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupIntent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["availability_sla"] =
		flattenComputeInterconnectAttachmentGroupIntentAvailabilitySla(original["availabilitySla"], d, config)
	return []interface{}{transformed}
}
func flattenComputeInterconnectAttachmentGroupIntentAvailabilitySla(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupLogicalStructure(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["regions"] =
		flattenComputeInterconnectAttachmentGroupLogicalStructureRegions(original["regions"], d, config)
	return []interface{}{transformed}
}
func flattenComputeInterconnectAttachmentGroupLogicalStructureRegions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"region": flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsRegion(original["region"], d, config),
			"metros": flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetros(original["metros"], d, config),
		})
	}
	return transformed
}
func flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsRegion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetros(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"metro":      flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosMetro(original["metro"], d, config),
			"facilities": flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilities(original["facilities"], d, config),
		})
	}
	return transformed
}
func flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosMetro(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilities(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"facility": flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilitiesFacility(original["facility"], d, config),
			"zones":    flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilitiesZones(original["zones"], d, config),
		})
	}
	return transformed
}
func flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilitiesFacility(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilitiesZones(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"zone":       flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilitiesZonesZone(original["zone"], d, config),
			"attachment": flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilitiesZonesAttachment(original["attachment"], d, config),
		})
	}
	return transformed
}
func flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilitiesZonesZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupLogicalStructureRegionsMetrosFacilitiesZonesAttachment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupConfigured(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["availability_sla"] =
		flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySla(original["availabilitySla"], d, config)
	return []interface{}{transformed}
}
func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySla(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["effective_sla"] =
		flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaEffectiveSla(original["effectiveSla"], d, config)
	transformed["intended_sla_blockers"] =
		flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockers(original["intendedSlaBlockers"], d, config)
	return []interface{}{transformed}
}
func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaEffectiveSla(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"blocker_type":       flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersBlockerType(original["blockerType"], d, config),
			"explanation":        flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersExplanation(original["explanation"], d, config),
			"documentation_link": flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersDocumentationLink(original["documentationLink"], d, config),
			"regions":            flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersRegions(original["regions"], d, config),
			"metros":             flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersMetros(original["metros"], d, config),
			"zones":              flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersZones(original["zones"], d, config),
			"attachments":        flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersAttachments(original["attachments"], d, config),
		})
	}
	return transformed
}
func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersBlockerType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersExplanation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersDocumentationLink(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersRegions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersMetros(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersZones(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeInterconnectAttachmentGroupConfiguredAvailabilitySlaIntendedSlaBlockersAttachments(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandComputeInterconnectAttachmentGroupDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectAttachmentGroupName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectAttachmentGroupAttachments(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAttachment, err := expandComputeInterconnectAttachmentGroupAttachmentsAttachment(original["attachment"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAttachment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["attachment"] = transformedAttachment
		}

		transformedName, err := tpgresource.ExpandString(original["name"], d, config)
		if err != nil {
			return nil, err
		}
		m[transformedName] = transformed
	}
	return m, nil
}

func expandComputeInterconnectAttachmentGroupAttachmentsAttachment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectAttachmentGroupInterconnectGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectAttachmentGroupIntent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAvailabilitySla, err := expandComputeInterconnectAttachmentGroupIntentAvailabilitySla(original["availability_sla"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAvailabilitySla); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["availabilitySla"] = transformedAvailabilitySla
	}

	return transformed, nil
}

func expandComputeInterconnectAttachmentGroupIntentAvailabilitySla(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
