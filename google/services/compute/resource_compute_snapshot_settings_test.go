// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/compute/resource_compute_snapshot_settings_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package compute_test

import (
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccComputeSnapshotSettings_snapshotSettings_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   acctest.RandString(t, 10),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		Steps: []resource.TestStep{
			{
				Config: testAccComputeSnapshotSettings_snapshotSettings_basic(context),
			},
			{
				ResourceName:      "google_compute_snapshot_settings.tf_test_snapshot_settings",
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccComputeSnapshotSettings_snapshotSettings_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_compute_snapshot_settings.tf_test_snapshot_settings", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:      "google_compute_snapshot_settings.tf_test_snapshot_settings",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccComputeSnapshotSettings_snapshotSettings_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "project" {
  project_id      = "tf-test%{random_suffix}"
  name            = "tf-test%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  deletion_policy = "DELETE"
}

resource "google_project_service" "compute" {
  project = google_project.project.project_id
  service = "compute.googleapis.com"
}

resource "time_sleep" "wait_120_seconds" {
  create_duration = "120s"
  depends_on = [google_project_service.compute]
}


resource "google_compute_snapshot_settings" "tf_test_snapshot_settings" {
    project   = google_project.project.project_id
    storage_location {
        policy    = "SPECIFIC_LOCATIONS"
        locations {
            name     = "us-central1"
            location = "us-central1"
        }
    }
    depends_on = [time_sleep.wait_120_seconds]
}
`, context)
}

func testAccComputeSnapshotSettings_snapshotSettings_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "project" {
  project_id      = "tf-test%{random_suffix}"
  name            = "tf-test%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  deletion_policy = "DELETE"
}

resource "google_project_service" "compute" {
  project = google_project.project.project_id
  service = "compute.googleapis.com"
}
resource "time_sleep" "wait_120_seconds" {
  create_duration = "120s"
  depends_on = [google_project_service.compute]
}

resource "google_compute_snapshot_settings" "tf_test_snapshot_settings" {
    project   = google_project.project.project_id
    storage_location {
        policy    = "NEAREST_MULTI_REGION"
    }
    depends_on = [time_sleep.wait_120_seconds]
}
`, context)
}
