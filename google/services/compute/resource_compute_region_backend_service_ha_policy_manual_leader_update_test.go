// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/compute/resource_compute_region_backend_service_ha_policy_manual_leader_update_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package compute_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccComputeRegionBackendService_regionBackendServiceHaPolicyManualLeader_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckComputeRegionBackendServiceDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionBackendService_regionBackendServiceHaPolicyManualLeader_full(context),
			},
			{
				ResourceName:            "google_compute_region_backend_service.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"iap.0.oauth2_client_secret", "network", "region"},
			},
			{
				Config: testAccComputeRegionBackendService_regionBackendServiceHaPolicyManualLeader_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_compute_region_backend_service.default", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_compute_region_backend_service.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"iap.0.oauth2_client_secret", "network", "region"},
			},
		},
	})
}

func testAccComputeRegionBackendService_regionBackendServiceHaPolicyManualLeader_full(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_network" "default" {
  name                    = "tf-test-rbs-net%{random_suffix}"
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "default" {
  name          = "tf-test-rbs-subnet%{random_suffix}"
  ip_cidr_range = "10.1.2.0/24"
  region        = "us-central1"
  network       = google_compute_network.default.id
}

resource "google_compute_network_endpoint" "endpoint1" {
  network_endpoint_group = google_compute_network_endpoint_group.neg.name

  instance   = google_compute_instance.endpoint-instance1.name
  ip_address = google_compute_instance.endpoint-instance1.network_interface[0].network_ip
}

resource "google_compute_network_endpoint" "endpoint2" {
  network_endpoint_group = google_compute_network_endpoint_group.neg.name

  instance   = google_compute_instance.endpoint-instance2.name
  ip_address = google_compute_instance.endpoint-instance2.network_interface[0].network_ip
}

data "google_compute_image" "my_image" {
  family  = "debian-12"
  project = "debian-cloud"
}

resource "google_compute_instance" "endpoint-instance1" {
  name         = "tf-test-rbs-instance1-%{random_suffix}"
  machine_type = "e2-medium"

  boot_disk {
    initialize_params {
      image = data.google_compute_image.my_image.self_link
    }
  }

  network_interface {
    subnetwork = google_compute_subnetwork.default.id
    access_config {
    }
  }
}

resource "google_compute_instance" "endpoint-instance2" {
  name         = "tf-test-rbs-instance2-%{random_suffix}"
  machine_type = "e2-medium"

  boot_disk {
    initialize_params {
      image = data.google_compute_image.my_image.self_link
    }
  }

  network_interface {
    subnetwork = google_compute_subnetwork.default.id
    access_config {
    }
  }
}

resource "google_compute_network_endpoint_group" "neg" {
  name         					= "tf-test-rbs-neg%{random_suffix}"
  network_endpoint_type				= "GCE_VM_IP"
  network     					= google_compute_network.default.id
  subnetwork   					= google_compute_subnetwork.default.id
  zone         					= "us-central1-a"
}

resource "google_compute_region_backend_service" "default" {
  region                			= "us-central1"
  name                  			= "tf-test-region-service%{random_suffix}"
  protocol              			= "UDP"
  load_balancing_scheme 			= "EXTERNAL"
  network               			= google_compute_network.default.id
  backend {
  	group				= google_compute_network_endpoint_group.neg.self_link
  	balancing_mode			= "CONNECTION"
  }
  ha_policy	{
  	fast_ip_move			= "GARP_RA"
  	leader {
  		backend_group		= google_compute_network_endpoint_group.neg.self_link
  		network_endpoint {
  			instance	= google_compute_instance.endpoint-instance1.name
  		}
  	}
  }
  // Must explicitly disable connection draining to override default value.
  connection_draining_timeout_sec		= 0
  // Explicitly depend on the endpoints to prevent test flakes due to creating
  // the BackendService before the endpoints have been added to the NEG.
  depends_on = [
  	google_compute_network_endpoint_group.neg,
	google_compute_network_endpoint.endpoint1,
	google_compute_network_endpoint.endpoint2
  ]
}
`, context)
}

func testAccComputeRegionBackendService_regionBackendServiceHaPolicyManualLeader_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_network" "default" {
  name                    = "tf-test-rbs-net%{random_suffix}"
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "default" {
  name          = "tf-test-rbs-subnet%{random_suffix}"
  ip_cidr_range = "10.1.2.0/24"
  region        = "us-central1"
  network       = google_compute_network.default.id
}

resource "google_compute_network_endpoint" "endpoint1" {
  network_endpoint_group = google_compute_network_endpoint_group.neg.name

  instance   = google_compute_instance.endpoint-instance1.name
  ip_address = google_compute_instance.endpoint-instance1.network_interface[0].network_ip
}

resource "google_compute_network_endpoint" "endpoint2" {
  network_endpoint_group = google_compute_network_endpoint_group.neg.name

  instance   = google_compute_instance.endpoint-instance2.name
  ip_address = google_compute_instance.endpoint-instance2.network_interface[0].network_ip
}

data "google_compute_image" "my_image" {
  family  = "debian-12"
  project = "debian-cloud"
}

resource "google_compute_instance" "endpoint-instance1" {
  name         = "tf-test-rbs-instance1-%{random_suffix}"
  machine_type = "e2-medium"

  boot_disk {
    initialize_params {
      image = data.google_compute_image.my_image.self_link
    }
  }

  network_interface {
    subnetwork = google_compute_subnetwork.default.id
    access_config {
    }
  }
}

resource "google_compute_instance" "endpoint-instance2" {
  name         = "tf-test-rbs-instance2-%{random_suffix}"
  machine_type = "e2-medium"

  boot_disk {
    initialize_params {
      image = data.google_compute_image.my_image.self_link
    }
  }

  network_interface {
    subnetwork = google_compute_subnetwork.default.id
    access_config {
    }
  }
}

resource "google_compute_network_endpoint_group" "neg" {
  name         					= "tf-test-rbs-neg%{random_suffix}"
  network_endpoint_type				= "GCE_VM_IP"
  network     					= google_compute_network.default.id
  subnetwork   					= google_compute_subnetwork.default.id
  zone         					= "us-central1-a"
}

resource "google_compute_region_backend_service" "default" {
  region                			= "us-central1"
  name                  			= "tf-test-region-service%{random_suffix}"
  protocol              			= "UDP"
  load_balancing_scheme 			= "EXTERNAL"
  network               			= google_compute_network.default.id
  backend {
  	group				= google_compute_network_endpoint_group.neg.self_link
  	balancing_mode			= "CONNECTION"
  }
  ha_policy	{
  	fast_ip_move			= "GARP_RA"
  	leader {
  		backend_group		= google_compute_network_endpoint_group.neg.self_link
  		network_endpoint {
  			instance	= google_compute_instance.endpoint-instance2.name
  		}
  	}
  }
  // Must explicitly disable connection draining to override default value.
  connection_draining_timeout_sec		= 0
  // Explicitly depend on the endpoints to prevent test flakes due to creating
  // the BackendService before the endpoints have been added to the NEG.
  depends_on = [
  	google_compute_network_endpoint_group.neg,
	google_compute_network_endpoint.endpoint1,
	google_compute_network_endpoint.endpoint2
  ]
}
`, context)
}
