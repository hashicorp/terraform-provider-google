// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/resourcemanager3/Capability.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package resourcemanager3

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceResourceManager3Capability() *schema.Resource {
	return &schema.Resource{
		Create: resourceResourceManager3CapabilityCreate,
		Read:   resourceResourceManager3CapabilityRead,
		Update: resourceResourceManager3CapabilityUpdate,
		Delete: resourceResourceManager3CapabilityDelete,

		Importer: &schema.ResourceImporter{
			State: resourceResourceManager3CapabilityImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(0 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"capability_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Capability name that should be updated on the folder.`,
			},
			"parent": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Folder on which Capability needs to be updated in the format folders/folder_id.`,
			},
			"value": {
				Type:        schema.TypeBool,
				Required:    true,
				Description: `Capability Value.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceResourceManager3CapabilityCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	valueProp, err := expandResourceManager3CapabilityValue(d.Get("value"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("value"); !tpgresource.IsEmptyValue(reflect.ValueOf(valueProp)) && (ok || !reflect.DeepEqual(v, valueProp)) {
		obj["value"] = valueProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ResourceManager3BasePath}}{{parent}}/capabilities/{{capability_name}}?updateMask=value")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Capability: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating Capability: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/capabilities/{{capability_name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ResourceManager3OperationWaitTime(
		config, res, "Creating Capability", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create Capability: %s", err)
	}

	log.Printf("[DEBUG] Finished creating Capability %q: %#v", d.Id(), res)

	return resourceResourceManager3CapabilityRead(d, meta)
}

func resourceResourceManager3CapabilityRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ResourceManager3BasePath}}{{parent}}/capabilities/{{capability_name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ResourceManager3Capability %q", d.Id()))
	}

	if err := d.Set("value", flattenResourceManager3CapabilityValue(res["value"], d, config)); err != nil {
		return fmt.Errorf("Error reading Capability: %s", err)
	}

	return nil
}

func resourceResourceManager3CapabilityUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	valueProp, err := expandResourceManager3CapabilityValue(d.Get("value"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("value"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, valueProp)) {
		obj["value"] = valueProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ResourceManager3BasePath}}{{parent}}/capabilities/{{capability_name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Capability %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("value") {
		updateMask = append(updateMask, "value")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Capability %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Capability %q: %#v", d.Id(), res)
		}

		err = ResourceManager3OperationWaitTime(
			config, res, "Updating Capability", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceResourceManager3CapabilityRead(d, meta)
}

func resourceResourceManager3CapabilityDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] ResourceManager3 Capability resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceResourceManager3CapabilityImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	// current import_formats can't import fields with forward slashes in their value
	if err := tpgresource.ParseImportId([]string{
		"(?P<parent>.+)/capabilities/(?P<capability_name>.+)",
	}, d, config); err != nil {
		return nil, err
	}

	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/capabilities/{{capability_name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenResourceManager3CapabilityValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandResourceManager3CapabilityValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
