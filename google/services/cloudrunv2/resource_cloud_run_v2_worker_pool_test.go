// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/cloudrunv2/resource_cloud_run_v2_worker_pool_test.go.tmpl
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package cloudrunv2_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolFullUpdate(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolFull(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "annotations", "labels", "terraform_labels"},
			},
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolFullUpdate(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "annotations", "labels", "terraform_labels", "deletion_protection"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolFull(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  description = "description creating"
  location = "us-central1"
  launch_stage = "ALPHA"
  annotations = {
    generated-by = "magic-modules"
  }
  
  labels = {
    label-1 = "value-1"
  }
  client = "client-1"
  client_version = "client-version-1"
  template {
    labels = {
      label-1 = "value-1"
    }
    service_account = google_service_account.service_account.email
    annotations = {
      generated-by = "magic-modules"
    }
    containers {
      name = "container-1"
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      env {
        name = "SOURCE"
        value = "remote"
      }
      env {
        name = "TARGET"
        value = "home"
      }
      resources {
        limits = {
          cpu = "4"
          memory = "2Gi"
        }
      }
    }
  }
}

resource "google_service_account" "service_account" {
  account_id   = "tf-test-my-account%{random_suffix}"
  display_name = "Test Service Account"
}
`, context)
}
func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolFullUpdate(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  description = "description updating"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  
  annotations = {
    generated-by = "magic-modules-files"
  }
  
  binary_authorization {
    use_default = true
    breakglass_justification = "Some justification"
  }
  labels = {
    label-1 = "value-update"
  }
  client = "client-update"
  client_version = "client-version-update"

  template {
    revision = "tf-test-cloudrun-worker-pool%{random_suffix}-001"
    labels = {
      label-1 = "value-update"
    }
    service_account = google_service_account.service_account.email
    annotations = {
      generated-by = "magic-modules"
    }
    containers {
      name = "container-update"
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      args    = ["arg1", "arg2"]
      command = ["/bin/sh", "-c"]
      env {
        name = "SOURCE_UPDATE"
        value = "remote-update"
      }
      env {
        name = "TARGET_UPDATE"
        value = "home-update"
      }
      resources {
        limits = {
          cpu = "2"
          memory = "8Gi"
        }
      }
      working_dir = "/home"
    }
  }
  instance_splits {
    type = "INSTANCE_SPLIT_ALLOCATION_TYPE_REVISION"
    revision = "tf-test-cloudrun-worker-pool%{random_suffix}-001"
  }
}

resource "google_service_account" "service_account" {
  account_id   = "tf-test-my-account%{random_suffix}"
  display_name = "Test Service Account"
}
`, context)
}
func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolGcsVolume(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolGcsVolume(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "annotations", "labels", "terraform_labels", "launch_stage", "deletion_protection"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolGcsVolume(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  description = "description creating"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  

  annotations = {
    generated-by = "magic-modules"
  }
  
  labels = {
    label-1 = "value-1"
  }
  client = "client-1"
  client_version = "client-version-1"
  template {
    labels = {
      label-1 = "value-1"
    }
    service_account = google_service_account.service_account.email
    annotations = {
      generated-by = "magic-modules"
    }
    volumes {
      name = "gcs"
      gcs {
        bucket = "gcp-public-data-landsat"
        read_only = true

      }
    }
    containers {
      name = "container-1"
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      env {
        name = "SOURCE"
        value = "remote"
      }
      env {
        name = "TARGET"
        value = "home"
      }
      volume_mounts {
        name = "gcs"
        mount_path = "/mnt/landsat"
      }
      resources {
        limits = {
          cpu = "4"
          memory = "2Gi"
        }
      }
    }
  }
}

resource "google_service_account" "service_account" {
  account_id   = "tf-test-my-account%{random_suffix}"
  display_name = "Test Service Account"
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolWithDirectVPCUpdate(t *testing.T) {
	t.Parallel()

	workerPoolName := fmt.Sprintf("tf-test-cloudrun-worker-pool%s", acctest.RandString(t, 10))
	context := map[string]interface{}{
		"service_name": workerPoolName,
		"project":      envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudRunWorkerPoolWithDirectVPC(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "deletion_protection"},
			},
			{
				Config: testAccCloudRunV2WorkerPool_cloudRunWorkerPoolWithDirectVPCAndNamedBinAuthPolicyUpdate(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "deletion_protection"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudRunWorkerPoolWithDirectVPC(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "%{service_name}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  
  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
    vpc_access {
      egress = "ALL_TRAFFIC"
      network_interfaces {
        network = "default"
      }
    }
  }
}
`, context)
}

func testAccCloudRunV2WorkerPool_cloudRunWorkerPoolWithDirectVPCAndNamedBinAuthPolicyUpdate(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "%{service_name}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  
  binary_authorization {
    policy = "projects/%{project}/platforms/cloudRun/policies/my-policy"
    breakglass_justification = "Some justification"
  }
  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
    vpc_access {
      network_interfaces {
        subnetwork = "default"
        tags = ["foo", "bar"]
      }
    }
  }
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolCustomAudienceUpdate(t *testing.T) {
	t.Parallel()

	workerPoolName := fmt.Sprintf("tf-test-cloudrun-worker-pool%s", acctest.RandString(t, 10))

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudRunWorkerPoolUpdateWithCustomAudience(workerPoolName, "test"),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "annotations", "launch_stage", "deletion_protection"},
			},
			{
				Config: testAccCloudRunV2WorkerPool_cloudRunWorkerPoolUpdateWithCustomAudience(workerPoolName, "test_update"),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "annotations", "launch_stage", "deletion_protection"},
			},
			{
				Config: testAccCloudRunV2WorkerPool_cloudRunWorkerPoolUpdateWithoutCustomAudience(workerPoolName),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "annotations", "launch_stage", "deletion_protection"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudRunWorkerPoolUpdateWithoutCustomAudience(workerPoolName string) string {
	return fmt.Sprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name         = "%s"
  location     = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}
`, workerPoolName)
}

func testAccCloudRunV2WorkerPool_cloudRunWorkerPoolUpdateWithCustomAudience(workerPoolName string, customAudience string) string {
	return fmt.Sprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name             = "%s"
  location         = "us-central1"
  deletion_protection = false
  custom_audiences = ["%s"]
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}
`, workerPoolName, customAudience)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolAttributionLabel(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":        acctest.RandString(t, 10),
		"add_attribution":      "true",
		"attribution_strategy": "CREATION_ONLY",
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolWithAttributionLabel(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "labels.%", "1"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "labels.user_label", "foo"),

					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "terraform_labels.%", "2"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "terraform_labels.user_label", "foo"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "terraform_labels.goog-terraform-provisioned", "true"),

					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "effective_labels.%", "2"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "effective_labels.user_label", "foo"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "effective_labels.goog-terraform-provisioned", "true"),
				),
			},
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolWithAttributionLabelUpdate(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "labels.%", "1"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "labels.user_label", "bar"),

					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "terraform_labels.%", "2"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "terraform_labels.user_label", "bar"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "terraform_labels.goog-terraform-provisioned", "true"),

					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "effective_labels.%", "2"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "effective_labels.user_label", "bar"),
					resource.TestCheckResourceAttr("google_cloud_run_v2_worker_pool.default", "effective_labels.goog-terraform-provisioned", "true"),
				),
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolWithAttributionLabel(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google" {
  add_terraform_attribution_label               = %{add_attribution}
  terraform_attribution_label_addition_strategy = "%{attribution_strategy}"
}

resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  

  labels = {
    user_label = "foo"
  }

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}
`, context)
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolWithAttributionLabelUpdate(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google" {
  add_terraform_attribution_label               = %{add_attribution}
  terraform_attribution_label_addition_strategy = "%{attribution_strategy}"
}

resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  

  labels = {
    user_label = "bar"
  }

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolWithManualScaling(t *testing.T) {
	t.Parallel()
	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolWithManualScaling(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "annotations", "labels", "terraform_labels", "launch_stage", "deletion_protection"},
			},
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolUpdateWithManualScaling(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location", "annotations", "labels", "terraform_labels", "launch_stage", "deletion_protection"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolWithManualScaling(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  description = "description creating"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  annotations = {
    generated-by = "magic-modules"
  }
  scaling {
    scaling_mode = "MANUAL"
    manual_instance_count = 5
  }
  
  labels = {
    label-1 = "value-1"
  }
  client = "client-1"
  client_version = "client-version-1"
  template {
    containers {
      name = "container-1"
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}

`, context)
}
func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolUpdateWithManualScaling(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  description = "description creating"
  location = "us-central1"
  deletion_protection = false
  annotations = {
    generated-by = "magic-modules"
  }
  
  labels = {
    label-1 = "value-1"
  }
  client = "client-1"
  client_version = "client-version-1"
  launch_stage = "ALPHA"
  scaling {
    scaling_mode = "MANUAL"
    manual_instance_count = 2
  }
  template {
    containers {
      name = "container-1"
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}

`, context)
}
