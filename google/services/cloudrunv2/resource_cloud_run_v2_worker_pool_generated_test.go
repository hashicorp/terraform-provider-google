// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package cloudrunv2_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolBasicExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  
  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolLimitsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolLimitsExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolLimitsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      resources {
        limits = {
          cpu    = "2"
          memory = "1024Mi"
        }
      }
    }
  }
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolSqlExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"deletion_protection": false,
		"random_suffix":       acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolSqlExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolSqlExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  
  template {
  
    volumes {
      name = "cloudsql"
      cloud_sql_instance {
        instances = [google_sql_database_instance.instance.connection_name]
      }
    }

    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"

      env {
        name = "FOO"
        value = "bar"
      }
      env {
        name = "SECRET_ENV_VAR"
        value_source {
          secret_key_ref {
            secret = google_secret_manager_secret.secret.secret_id
            version = "1"
          }
        }
      }
      volume_mounts {
        name = "cloudsql"
        mount_path = "/cloudsql"
      }
    }
  }

  instance_splits {
    type = "INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST"
    percent = 100
  }
  depends_on = [google_secret_manager_secret_version.secret-version-data]
}

data "google_project" "project" {
}

resource "google_secret_manager_secret" "secret" {
  secret_id = "tf-test-secret-1%{random_suffix}"
  replication {
    auto {}
  }
}

resource "google_secret_manager_secret_version" "secret-version-data" {
  secret = google_secret_manager_secret.secret.name
  secret_data = "secret-data"
}

resource "google_secret_manager_secret_iam_member" "secret-access" {
  secret_id = google_secret_manager_secret.secret.id
  role      = "roles/secretmanager.secretAccessor"
  member    = "serviceAccount:${data.google_project.project.number}-compute@developer.gserviceaccount.com"
  depends_on = [google_secret_manager_secret.secret]
}

resource "google_sql_database_instance" "instance" {
  name             = "tf-test-cloudrun-sql%{random_suffix}"
  region           = "us-central1"
  database_version = "MYSQL_5_7"
  settings {
    tier = "db-f1-micro"
  }

  deletion_protection  = %{deletion_protection}
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolDirectvpcExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolDirectvpcExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolDirectvpcExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
    vpc_access{
      network_interfaces {
        network = "default"
        subnetwork = "default"
        tags = ["tag1", "tag2", "tag3"]
      }
    }
  }
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolGpuExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolGpuExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolGpuExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      resources {
        limits = {
          "cpu" = "4"
          "memory" = "16Gi"
          "nvidia.com/gpu" = "1"
        }
      }
    }
    node_selector {
      accelerator = "nvidia-l4"
    }
  }
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolSecretExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolSecretExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolSecretExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    volumes {
      name = "a-volume"
      secret {
        secret = google_secret_manager_secret.secret.secret_id
        default_mode = 292 # 0444
        items {
          version = "1"
          path = "my-secret"
          mode = 0444
        }
      }
    }
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      volume_mounts {
        name = "a-volume"
        mount_path = "/secrets"
      }
    }
  }
  depends_on = [google_secret_manager_secret_version.secret-version-data]
}

data "google_project" "project" {
}

resource "google_secret_manager_secret" "secret" {
  secret_id = "tf-test-secret-1%{random_suffix}"
  replication {
    auto {}
  }
}

resource "google_secret_manager_secret_version" "secret-version-data" {
  secret = google_secret_manager_secret.secret.name
  secret_data = "secret-data"
}

resource "google_secret_manager_secret_iam_member" "secret-access" {
  secret_id = google_secret_manager_secret.secret.id
  role      = "roles/secretmanager.secretAccessor"
  member    = "serviceAccount:${data.google_project.project.number}-compute@developer.gserviceaccount.com"
  depends_on = [google_secret_manager_secret.secret]
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolMulticontainerExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolMulticontainerExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolMulticontainerExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      name = "hello-1"
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      depends_on = ["hello-2"]
      volume_mounts {
        name = "empty-dir-volume"
        mount_path = "/mnt"
      }
    }
    containers {
      name = "hello-2"
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
    volumes {
      name = "empty-dir-volume"
      empty_dir {
        medium = "MEMORY"
        size_limit = "256Mi"
      }
    }
  }
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolMountGcsExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolMountGcsExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolMountGcsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"

  location     = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      volume_mounts {
        name       = "bucket"
        mount_path = "/var/www"
      }
    }

    volumes {
      name = "bucket"
      gcs {
        bucket    = google_storage_bucket.default.name
        read_only = false
      }
    }
  }
}

resource "google_storage_bucket" "default" {
    name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
    location = "US"
    uniform_bucket_level_access = true
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolMountNfsExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolMountNfsExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolMountNfsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"

  location     = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool:latest"
      volume_mounts {
        name       = "nfs"
        mount_path = "/mnt/nfs/filestore"
      }
    }
    vpc_access {
      network_interfaces {
        network    = "default"
        subnetwork = "default"
      }
    }

    volumes {
      name = "nfs"
      nfs {
        server    = google_filestore_instance.default.networks[0].ip_addresses[0]
        path      = "/share1"
        read_only = false
      }
    }
  }
}

resource "google_filestore_instance" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1-b"
  tier     = "BASIC_HDD"

  file_shares {
    capacity_gb = 1024
    name        = "share1"
  }

  networks {
    network = "default"
    modes   = ["MODE_IPV4"]
  }
}
`, context)
}

func TestAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolCustomAudiencesExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckCloudRunV2WorkerPoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolCustomAudiencesExample(context),
			},
			{
				ResourceName:            "google_cloud_run_v2_worker_pool.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "deletion_protection", "labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccCloudRunV2WorkerPool_cloudrunv2WorkerPoolCustomAudiencesExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "tf-test-cloudrun-worker-pool%{random_suffix}"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  custom_audiences = ["aud1"]
  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}
`, context)
}

func testAccCheckCloudRunV2WorkerPoolDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_cloud_run_v2_worker_pool" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{CloudRunV2BasePath}}projects/{{project}}/locations/{{location}}/workerPools/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("CloudRunV2WorkerPool still exists at %s", url)
			}
		}

		return nil
	}
}
