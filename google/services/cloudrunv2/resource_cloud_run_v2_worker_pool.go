// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/cloudrunv2/WorkerPool.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package cloudrunv2

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceCloudRunV2WorkerPool() *schema.Resource {
	return &schema.Resource{
		Create: resourceCloudRunV2WorkerPoolCreate,
		Read:   resourceCloudRunV2WorkerPoolRead,
		Update: resourceCloudRunV2WorkerPoolUpdate,
		Delete: resourceCloudRunV2WorkerPoolDelete,

		Importer: &schema.ResourceImporter{
			State: resourceCloudRunV2WorkerPoolImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.SetAnnotationsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location of the cloud run worker pool`,
			},
			"name": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
				Description:      `Name of the WorkerPool.`,
			},
			"template": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `The template used to create revisions for this WorkerPool.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"annotations": {
							Type:     schema.TypeMap,
							Optional: true,
							Description: `Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.

Cloud Run API v2 does not support annotations with 'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected.
All system annotations in v1 now have a corresponding field in v2 WorkerPoolRevisionTemplate.

This field follows Kubernetes annotations' namespacing, limits, and rules.`,
							Elem: &schema.Schema{Type: schema.TypeString},
						},
						"containers": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Holds the containers that define the unit of execution for this WorkerPool.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"image": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images`,
									},
									"args": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"command": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"depends_on": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Containers which should be started before this container. If specified the container will wait to start until all containers with the listed names are healthy.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"env": {
										Type:        schema.TypeSet,
										Optional:    true,
										Description: `List of environment variables to set in the container.`,
										Elem:        cloudrunv2WorkerPoolTemplateContainersContainersEnvSchema(),
										// Default schema.HashSchema is used.
									},
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Name of the container specified as a DNS_LABEL.`,
									},
									"resources": {
										Type:        schema.TypeList,
										Computed:    true,
										Optional:    true,
										Description: `Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"limits": {
													Type:        schema.TypeMap,
													Computed:    true,
													Optional:    true,
													Description: `Only memory, CPU, and nvidia.com/gpu are supported. Use key 'cpu' for CPU limit, 'memory' for memory limit, 'nvidia.com/gpu' for gpu limit. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go`,
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
											},
										},
									},
									"volume_mounts": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Volume to mount into the container's filesystem.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"mount_path": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run`,
												},
												"name": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `This must match the Name of a Volume.`,
												},
											},
										},
									},
									"working_dir": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.`,
									},
								},
							},
						},
						"encryption_key": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek`,
						},
						"encryption_key_revocation_action": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"PREVENT_NEW", "SHUTDOWN", ""}),
							Description:  `The action to take if the encryption key is revoked. Possible values: ["PREVENT_NEW", "SHUTDOWN"]`,
						},
						"encryption_key_shutdown_duration": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `If encryptionKeyRevocationAction is SHUTDOWN, the duration before shutting down all instances. The minimum increment is 1 hour.

A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".`,
						},
						"gpu_zonal_redundancy_disabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `True if GPU zonal redundancy is disabled on this revision.`,
						},
						"labels": {
							Type:     schema.TypeMap,
							Optional: true,
							Description: `Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc.
For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.

Cloud Run API v2 does not support labels with 'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected.
All system labels in v1 now have a corresponding field in v2 WorkerPoolRevisionTemplate.`,
							Elem: &schema.Schema{Type: schema.TypeString},
						},
						"node_selector": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Node Selector describes the hardware requirements of the resources.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"accelerator": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The GPU to attach to an instance. See https://cloud.google.com/run/docs/configuring/services/gpu for configuring GPU.`,
									},
								},
							},
						},
						"revision": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The unique name for the revision. If this field is omitted, it will be automatically generated based on the WorkerPool name.`,
						},
						"service_account": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `Email address of the IAM service account associated with the revision of the WorkerPool. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.`,
						},
						"volumes": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `A list of Volumes to make available to containers.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Volume's name.`,
									},
									"cloud_sql_instance": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"instances": {
													Type:        schema.TypeSet,
													Optional:    true,
													Description: `The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
													Set: schema.HashString,
												},
											},
										},
									},
									"empty_dir": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Ephemeral storage used as a shared volume.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"medium": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"MEMORY", ""}),
													Description:  `The different types of medium supported for EmptyDir. Default value: "MEMORY" Possible values: ["MEMORY"]`,
													Default:      "MEMORY",
												},
												"size_limit": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. This field's values are of the 'Quantity' k8s type: https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir.`,
												},
											},
										},
									},
									"gcs": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"bucket": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `GCS Bucket name`,
												},
												"read_only": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `If true, mount the GCS bucket as read-only`,
												},
											},
										},
									},
									"nfs": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Represents an NFS mount.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"path": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Path that is exported by the NFS server.`,
												},
												"server": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Hostname or IP address of the NFS server`,
												},
												"read_only": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `If true, mount the NFS volume as read only`,
												},
											},
										},
									},
									"secret": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"secret": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.`,
												},
												"default_mode": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.`,
												},
												"items": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"path": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `The relative path of the secret in the container.`,
															},
															"mode": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.`,
															},
															"version": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version`,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"vpc_access": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"egress": {
										Type:         schema.TypeString,
										Computed:     true,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"ALL_TRAFFIC", "PRIVATE_RANGES_ONLY", ""}),
										Description:  `Traffic VPC egress settings. Possible values: ["ALL_TRAFFIC", "PRIVATE_RANGES_ONLY"]`,
									},
									"network_interfaces": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Direct VPC egress settings. Currently only single network interface is supported.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"network": {
													Type:     schema.TypeString,
													Computed: true,
													Optional: true,
													Description: `The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both
network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be
looked up from the subnetwork.`,
												},
												"subnetwork": {
													Type:     schema.TypeString,
													Computed: true,
													Optional: true,
													Description: `The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both
network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the
subnetwork with the same name with the network will be used.`,
												},
												"tags": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Network tags applied to this Cloud Run WorkerPool.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.

Cloud Run API v2 does not support annotations with 'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected in new resources.
All system annotations in v1 now have a corresponding field in v2 WorkerPool.

This field follows Kubernetes annotations' namespacing, limits, and rules.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"binary_authorization": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Settings for the Binary Authorization feature.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"breakglass_justification": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass`,
						},
						"policy": {
							Type:          schema.TypeString,
							Optional:      true,
							Description:   `The path to a binary authorization policy. Format: projects/{project}/platforms/cloudRun/{policy-name}`,
							ConflictsWith: []string{},
						},
						"use_default": {
							Type:          schema.TypeBool,
							Optional:      true,
							Description:   `If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.`,
							ConflictsWith: []string{},
						},
					},
				},
			},
			"client": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Arbitrary identifier for the API client.`,
			},
			"client_version": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Arbitrary version identifier for the API client.`,
			},
			"custom_audiences": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `User-provided description of the WorkerPool. This field currently has a 512-character limit.`,
			},
			"instance_splits": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"percent": {
							Type:        schema.TypeInt,
							Computed:    true,
							Optional:    true,
							Description: `Specifies percent of the instance split to this Revision. This defaults to zero if unspecified.`,
						},
						"revision": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Revision to which to assign this portion of instances, if split allocation is by revision.`,
						},
						"type": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST", "INSTANCE_SPLIT_ALLOCATION_TYPE_REVISION", ""}),
							Description:  `The allocation type for this instance split. Possible values: ["INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST", "INSTANCE_SPLIT_ALLOCATION_TYPE_REVISION"]`,
						},
					},
				},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.

Cloud Run API v2 does not support labels with  'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected.
All system labels in v1 now have a corresponding field in v2 WorkerPool.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"launch_stage": {
				Type:         schema.TypeString,
				Computed:     true,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED", ""}),
				Description: `The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.

For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output. Possible values: ["UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]`,
			},
			"scaling": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Scaling settings that apply to the worker pool.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"manual_instance_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `The total number of instances in manual scaling mode.`,
						},
						"max_instance_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `The maximum count of instances distributed among revisions based on the specified instance split percentages.`,
						},
						"min_instance_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `The minimum count of instances distributed among revisions based on the specified instance split percentages.`,
						},
						"scaling_mode": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"AUTOMATIC", "MANUAL", ""}),
							Description:  `The scaling mode for the worker pool. It defaults to MANUAL. Possible values: ["AUTOMATIC", "MANUAL"]`,
						},
					},
				},
			},
			"conditions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"execution_reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `A reason for the execution condition.`,
						},
						"last_transition_time": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `Last time the condition transitioned from one status to another.

A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".`,
						},
						"message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Human readable message indicating details about the current status.`,
						},
						"reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `A common (workerPool-level) reason for this condition.`,
						},
						"revision_reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `A reason for the revision condition.`,
						},
						"severity": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `How to interpret failures of this condition, one of Error, Warning, Info`,
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `State of the condition.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.`,
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The creation time.`,
			},
			"creator": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Email address of the authenticated creator.`,
			},
			"delete_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The deletion time.`,
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"etag": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.`,
			},
			"expire_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `For a deleted resource, the time after which it will be permanently deleted.`,
			},
			"generation": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.`,
			},
			"instance_split_statuses": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"percent": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Specifies percent of the instance split to this Revision.`,
						},
						"revision": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Revision to which this instance split is assigned.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The allocation type for this instance split.`,
						},
					},
				},
			},
			"last_modifier": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Email address of the last authenticated modifier.`,
			},
			"latest_created_revision": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.`,
			},
			"latest_ready_revision": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.`,
			},
			"observed_generation": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.`,
			},
			"reconciling": {
				Type:     schema.TypeBool,
				Computed: true,
				Description: `Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.

When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.

If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.

If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.`,
			},
			"terminal_condition": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"execution_reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `A reason for the execution condition.`,
						},
						"last_transition_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Last time the condition transitioned from one status to another.`,
						},
						"message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Human readable message indicating details about the current status.`,
						},
						"reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `A common (workerPool-level) reason for this condition.`,
						},
						"revision_reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `A reason for the revision condition.`,
						},
						"severity": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `How to interpret failures of this condition, one of Error, Warning, Info`,
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `State of the condition.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.`,
						},
					},
				},
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The last-modified time.`,
			},
			"deletion_protection": {
				Type:     schema.TypeBool,
				Optional: true,
				Description: `Whether Terraform will be prevented from destroying the service. Defaults to true.
When a'terraform destroy' or 'terraform apply' would delete the service,
the command will fail if this field is not set to false in Terraform state.
When the field is set to true or unset in Terraform state, a 'terraform apply'
or 'terraform destroy' that would delete the WorkerPool will fail.
When the field is set to false, deleting the WorkerPool is allowed.`,
				Default: true,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func cloudrunv2WorkerPoolTemplateContainersContainersEnvSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Name of the environment variable. Must be a C_IDENTIFIER, and may not exceed 32768 characters.`,
			},
			"value": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Literal value of the environment variable. Defaults to "" and the maximum allowed length is 32768 characters. Variable references are not supported in Cloud Run.`,
				Default:     "",
			},
			"value_source": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Source for the environment variable's value.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"secret_key_ref": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Selects a secret and a specific version from Cloud Secret Manager.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"secret": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The name of the secret in Cloud Secret Manager. Format: {secretName} if the secret is in the same project. projects/{project}/secrets/{secretName} if the secret is in a different project.`,
									},
									"version": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func resourceCloudRunV2WorkerPoolCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandCloudRunV2WorkerPoolDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	clientProp, err := expandCloudRunV2WorkerPoolClient(d.Get("client"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("client"); !tpgresource.IsEmptyValue(reflect.ValueOf(clientProp)) && (ok || !reflect.DeepEqual(v, clientProp)) {
		obj["client"] = clientProp
	}
	clientVersionProp, err := expandCloudRunV2WorkerPoolClientVersion(d.Get("client_version"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("client_version"); !tpgresource.IsEmptyValue(reflect.ValueOf(clientVersionProp)) && (ok || !reflect.DeepEqual(v, clientVersionProp)) {
		obj["clientVersion"] = clientVersionProp
	}
	launchStageProp, err := expandCloudRunV2WorkerPoolLaunchStage(d.Get("launch_stage"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("launch_stage"); !tpgresource.IsEmptyValue(reflect.ValueOf(launchStageProp)) && (ok || !reflect.DeepEqual(v, launchStageProp)) {
		obj["launchStage"] = launchStageProp
	}
	binaryAuthorizationProp, err := expandCloudRunV2WorkerPoolBinaryAuthorization(d.Get("binary_authorization"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("binary_authorization"); !tpgresource.IsEmptyValue(reflect.ValueOf(binaryAuthorizationProp)) && (ok || !reflect.DeepEqual(v, binaryAuthorizationProp)) {
		obj["binaryAuthorization"] = binaryAuthorizationProp
	}
	customAudiencesProp, err := expandCloudRunV2WorkerPoolCustomAudiences(d.Get("custom_audiences"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("custom_audiences"); !tpgresource.IsEmptyValue(reflect.ValueOf(customAudiencesProp)) && (ok || !reflect.DeepEqual(v, customAudiencesProp)) {
		obj["customAudiences"] = customAudiencesProp
	}
	scalingProp, err := expandCloudRunV2WorkerPoolScaling(d.Get("scaling"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("scaling"); !tpgresource.IsEmptyValue(reflect.ValueOf(scalingProp)) && (ok || !reflect.DeepEqual(v, scalingProp)) {
		obj["scaling"] = scalingProp
	}
	templateProp, err := expandCloudRunV2WorkerPoolTemplate(d.Get("template"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("template"); !tpgresource.IsEmptyValue(reflect.ValueOf(templateProp)) && (ok || !reflect.DeepEqual(v, templateProp)) {
		obj["template"] = templateProp
	}
	instanceSplitsProp, err := expandCloudRunV2WorkerPoolInstanceSplits(d.Get("instance_splits"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("instance_splits"); !tpgresource.IsEmptyValue(reflect.ValueOf(instanceSplitsProp)) && (ok || !reflect.DeepEqual(v, instanceSplitsProp)) {
		obj["instanceSplits"] = instanceSplitsProp
	}
	labelsProp, err := expandCloudRunV2WorkerPoolEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	annotationsProp, err := expandCloudRunV2WorkerPoolEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudRunV2BasePath}}projects/{{project}}/locations/{{location}}/workerPools?workerPoolId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new WorkerPool: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for WorkerPool: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating WorkerPool: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/workerPools/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = CloudRunV2OperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating WorkerPool", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error waiting to create WorkerPool: %s", err)
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/workerPools/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating WorkerPool %q: %#v", d.Id(), res)

	return resourceCloudRunV2WorkerPoolRead(d, meta)
}

func resourceCloudRunV2WorkerPoolRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudRunV2BasePath}}projects/{{project}}/locations/{{location}}/workerPools/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for WorkerPool: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("CloudRunV2WorkerPool %q", d.Id()))
	}

	// Explicitly set virtual fields to default values if unset
	if _, ok := d.GetOkExists("deletion_protection"); !ok {
		if err := d.Set("deletion_protection", true); err != nil {
			return fmt.Errorf("Error setting deletion_protection: %s", err)
		}
	}
	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}

	if err := d.Set("description", flattenCloudRunV2WorkerPoolDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("uid", flattenCloudRunV2WorkerPoolUid(res["uid"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("generation", flattenCloudRunV2WorkerPoolGeneration(res["generation"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("labels", flattenCloudRunV2WorkerPoolLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("annotations", flattenCloudRunV2WorkerPoolAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("create_time", flattenCloudRunV2WorkerPoolCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("update_time", flattenCloudRunV2WorkerPoolUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("delete_time", flattenCloudRunV2WorkerPoolDeleteTime(res["deleteTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("expire_time", flattenCloudRunV2WorkerPoolExpireTime(res["expireTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("creator", flattenCloudRunV2WorkerPoolCreator(res["creator"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("last_modifier", flattenCloudRunV2WorkerPoolLastModifier(res["lastModifier"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("client", flattenCloudRunV2WorkerPoolClient(res["client"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("client_version", flattenCloudRunV2WorkerPoolClientVersion(res["clientVersion"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("launch_stage", flattenCloudRunV2WorkerPoolLaunchStage(res["launchStage"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("binary_authorization", flattenCloudRunV2WorkerPoolBinaryAuthorization(res["binaryAuthorization"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("custom_audiences", flattenCloudRunV2WorkerPoolCustomAudiences(res["customAudiences"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("scaling", flattenCloudRunV2WorkerPoolScaling(res["scaling"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("template", flattenCloudRunV2WorkerPoolTemplate(res["template"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("instance_splits", flattenCloudRunV2WorkerPoolInstanceSplits(res["instanceSplits"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("observed_generation", flattenCloudRunV2WorkerPoolObservedGeneration(res["observedGeneration"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("terminal_condition", flattenCloudRunV2WorkerPoolTerminalCondition(res["terminalCondition"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("conditions", flattenCloudRunV2WorkerPoolConditions(res["conditions"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("latest_ready_revision", flattenCloudRunV2WorkerPoolLatestReadyRevision(res["latestReadyRevision"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("latest_created_revision", flattenCloudRunV2WorkerPoolLatestCreatedRevision(res["latestCreatedRevision"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("instance_split_statuses", flattenCloudRunV2WorkerPoolInstanceSplitStatuses(res["instanceSplitStatuses"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("reconciling", flattenCloudRunV2WorkerPoolReconciling(res["reconciling"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("etag", flattenCloudRunV2WorkerPoolEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("terraform_labels", flattenCloudRunV2WorkerPoolTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("effective_labels", flattenCloudRunV2WorkerPoolEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}
	if err := d.Set("effective_annotations", flattenCloudRunV2WorkerPoolEffectiveAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkerPool: %s", err)
	}

	return nil
}

func resourceCloudRunV2WorkerPoolUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for WorkerPool: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandCloudRunV2WorkerPoolDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	clientProp, err := expandCloudRunV2WorkerPoolClient(d.Get("client"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("client"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, clientProp)) {
		obj["client"] = clientProp
	}
	clientVersionProp, err := expandCloudRunV2WorkerPoolClientVersion(d.Get("client_version"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("client_version"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, clientVersionProp)) {
		obj["clientVersion"] = clientVersionProp
	}
	launchStageProp, err := expandCloudRunV2WorkerPoolLaunchStage(d.Get("launch_stage"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("launch_stage"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, launchStageProp)) {
		obj["launchStage"] = launchStageProp
	}
	binaryAuthorizationProp, err := expandCloudRunV2WorkerPoolBinaryAuthorization(d.Get("binary_authorization"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("binary_authorization"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, binaryAuthorizationProp)) {
		obj["binaryAuthorization"] = binaryAuthorizationProp
	}
	customAudiencesProp, err := expandCloudRunV2WorkerPoolCustomAudiences(d.Get("custom_audiences"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("custom_audiences"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, customAudiencesProp)) {
		obj["customAudiences"] = customAudiencesProp
	}
	scalingProp, err := expandCloudRunV2WorkerPoolScaling(d.Get("scaling"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("scaling"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, scalingProp)) {
		obj["scaling"] = scalingProp
	}
	templateProp, err := expandCloudRunV2WorkerPoolTemplate(d.Get("template"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("template"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, templateProp)) {
		obj["template"] = templateProp
	}
	instanceSplitsProp, err := expandCloudRunV2WorkerPoolInstanceSplits(d.Get("instance_splits"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("instance_splits"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, instanceSplitsProp)) {
		obj["instanceSplits"] = instanceSplitsProp
	}
	labelsProp, err := expandCloudRunV2WorkerPoolEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	annotationsProp, err := expandCloudRunV2WorkerPoolEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudRunV2BasePath}}projects/{{project}}/locations/{{location}}/workerPools/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating WorkerPool %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating WorkerPool %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating WorkerPool %q: %#v", d.Id(), res)
	}

	err = CloudRunV2OperationWaitTime(
		config, res, project, "Updating WorkerPool", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceCloudRunV2WorkerPoolRead(d, meta)
}

func resourceCloudRunV2WorkerPoolDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for WorkerPool: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudRunV2BasePath}}projects/{{project}}/locations/{{location}}/workerPools/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	if d.Get("deletion_protection").(bool) {
		return fmt.Errorf("cannot destroy WorkerPool without setting deletion_protection=false and running `terraform apply`")
	}

	log.Printf("[DEBUG] Deleting WorkerPool %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "WorkerPool")
	}

	err = CloudRunV2OperationWaitTime(
		config, res, project, "Deleting WorkerPool", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting WorkerPool %q: %#v", d.Id(), res)
	return nil
}

func resourceCloudRunV2WorkerPoolImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/workerPools/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/workerPools/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Explicitly set virtual fields to default values on import
	if err := d.Set("deletion_protection", true); err != nil {
		return nil, fmt.Errorf("Error setting deletion_protection: %s", err)
	}

	return []*schema.ResourceData{d}, nil
}

func flattenCloudRunV2WorkerPoolDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolGeneration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenCloudRunV2WorkerPoolAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("annotations"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenCloudRunV2WorkerPoolCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolDeleteTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolExpireTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolCreator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolLastModifier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolClient(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolClientVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolLaunchStage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolBinaryAuthorization(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["breakglass_justification"] =
		flattenCloudRunV2WorkerPoolBinaryAuthorizationBreakglassJustification(original["breakglassJustification"], d, config)
	transformed["use_default"] =
		flattenCloudRunV2WorkerPoolBinaryAuthorizationUseDefault(original["useDefault"], d, config)
	transformed["policy"] =
		flattenCloudRunV2WorkerPoolBinaryAuthorizationPolicy(original["policy"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolBinaryAuthorizationBreakglassJustification(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolBinaryAuthorizationUseDefault(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolBinaryAuthorizationPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolCustomAudiences(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolScaling(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["scaling_mode"] =
		flattenCloudRunV2WorkerPoolScalingScalingMode(original["scalingMode"], d, config)
	transformed["min_instance_count"] =
		flattenCloudRunV2WorkerPoolScalingMinInstanceCount(original["minInstanceCount"], d, config)
	transformed["max_instance_count"] =
		flattenCloudRunV2WorkerPoolScalingMaxInstanceCount(original["maxInstanceCount"], d, config)
	transformed["manual_instance_count"] =
		flattenCloudRunV2WorkerPoolScalingManualInstanceCount(original["manualInstanceCount"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolScalingScalingMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolScalingMinInstanceCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2WorkerPoolScalingMaxInstanceCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2WorkerPoolScalingManualInstanceCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2WorkerPoolTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["revision"] =
		flattenCloudRunV2WorkerPoolTemplateRevision(original["revision"], d, config)
	transformed["labels"] =
		flattenCloudRunV2WorkerPoolTemplateLabels(original["labels"], d, config)
	transformed["annotations"] =
		flattenCloudRunV2WorkerPoolTemplateAnnotations(original["annotations"], d, config)
	transformed["vpc_access"] =
		flattenCloudRunV2WorkerPoolTemplateVpcAccess(original["vpcAccess"], d, config)
	transformed["service_account"] =
		flattenCloudRunV2WorkerPoolTemplateServiceAccount(original["serviceAccount"], d, config)
	transformed["containers"] =
		flattenCloudRunV2WorkerPoolTemplateContainers(original["containers"], d, config)
	transformed["volumes"] =
		flattenCloudRunV2WorkerPoolTemplateVolumes(original["volumes"], d, config)
	transformed["encryption_key"] =
		flattenCloudRunV2WorkerPoolTemplateEncryptionKey(original["encryptionKey"], d, config)
	transformed["encryption_key_revocation_action"] =
		flattenCloudRunV2WorkerPoolTemplateEncryptionKeyRevocationAction(original["encryptionKeyRevocationAction"], d, config)
	transformed["encryption_key_shutdown_duration"] =
		flattenCloudRunV2WorkerPoolTemplateEncryptionKeyShutdownDuration(original["encryptionKeyShutdownDuration"], d, config)
	transformed["node_selector"] =
		flattenCloudRunV2WorkerPoolTemplateNodeSelector(original["nodeSelector"], d, config)
	transformed["gpu_zonal_redundancy_disabled"] =
		flattenCloudRunV2WorkerPoolTemplateGpuZonalRedundancyDisabled(original["gpuZonalRedundancyDisabled"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateRevision(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVpcAccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["egress"] =
		flattenCloudRunV2WorkerPoolTemplateVpcAccessEgress(original["egress"], d, config)
	transformed["network_interfaces"] =
		flattenCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfaces(original["networkInterfaces"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateVpcAccessEgress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfaces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"network":    flattenCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesNetwork(original["network"], d, config),
			"subnetwork": flattenCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesSubnetwork(original["subnetwork"], d, config),
			"tags":       flattenCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesTags(original["tags"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesSubnetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesTags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":          flattenCloudRunV2WorkerPoolTemplateContainersName(original["name"], d, config),
			"image":         flattenCloudRunV2WorkerPoolTemplateContainersImage(original["image"], d, config),
			"command":       flattenCloudRunV2WorkerPoolTemplateContainersCommand(original["command"], d, config),
			"args":          flattenCloudRunV2WorkerPoolTemplateContainersArgs(original["args"], d, config),
			"env":           flattenCloudRunV2WorkerPoolTemplateContainersEnv(original["env"], d, config),
			"resources":     flattenCloudRunV2WorkerPoolTemplateContainersResources(original["resources"], d, config),
			"volume_mounts": flattenCloudRunV2WorkerPoolTemplateContainersVolumeMounts(original["volumeMounts"], d, config),
			"working_dir":   flattenCloudRunV2WorkerPoolTemplateContainersWorkingDir(original["workingDir"], d, config),
			"depends_on":    flattenCloudRunV2WorkerPoolTemplateContainersDependsOn(original["dependsOn"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2WorkerPoolTemplateContainersName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersImage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersCommand(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersArgs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersEnv(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := schema.NewSet(schema.HashResource(cloudrunv2WorkerPoolTemplateContainersContainersEnvSchema()), []interface{}{})
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed.Add(map[string]interface{}{
			"name":         flattenCloudRunV2WorkerPoolTemplateContainersEnvName(original["name"], d, config),
			"value":        flattenCloudRunV2WorkerPoolTemplateContainersEnvValue(original["value"], d, config),
			"value_source": flattenCloudRunV2WorkerPoolTemplateContainersEnvValueSource(original["valueSource"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2WorkerPoolTemplateContainersEnvName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersEnvValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersEnvValueSource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret_key_ref"] =
		flattenCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRef(original["secretKeyRef"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRef(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret"] =
		flattenCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRefSecret(original["secret"], d, config)
	transformed["version"] =
		flattenCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRefVersion(original["version"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRefSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRefVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersResources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["limits"] =
		flattenCloudRunV2WorkerPoolTemplateContainersResourcesLimits(original["limits"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateContainersResourcesLimits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersVolumeMounts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":       flattenCloudRunV2WorkerPoolTemplateContainersVolumeMountsName(original["name"], d, config),
			"mount_path": flattenCloudRunV2WorkerPoolTemplateContainersVolumeMountsMountPath(original["mountPath"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2WorkerPoolTemplateContainersVolumeMountsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersVolumeMountsMountPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersWorkingDir(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateContainersDependsOn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":               flattenCloudRunV2WorkerPoolTemplateVolumesName(original["name"], d, config),
			"secret":             flattenCloudRunV2WorkerPoolTemplateVolumesSecret(original["secret"], d, config),
			"cloud_sql_instance": flattenCloudRunV2WorkerPoolTemplateVolumesCloudSqlInstance(original["cloudSqlInstance"], d, config),
			"empty_dir":          flattenCloudRunV2WorkerPoolTemplateVolumesEmptyDir(original["emptyDir"], d, config),
			"gcs":                flattenCloudRunV2WorkerPoolTemplateVolumesGcs(original["gcs"], d, config),
			"nfs":                flattenCloudRunV2WorkerPoolTemplateVolumesNfs(original["nfs"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2WorkerPoolTemplateVolumesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesSecretSecret(original["secret"], d, config)
	transformed["default_mode"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesSecretDefaultMode(original["defaultMode"], d, config)
	transformed["items"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesSecretItems(original["items"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateVolumesSecretSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesSecretDefaultMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2WorkerPoolTemplateVolumesSecretItems(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"path":    flattenCloudRunV2WorkerPoolTemplateVolumesSecretItemsPath(original["path"], d, config),
			"version": flattenCloudRunV2WorkerPoolTemplateVolumesSecretItemsVersion(original["version"], d, config),
			"mode":    flattenCloudRunV2WorkerPoolTemplateVolumesSecretItemsMode(original["mode"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2WorkerPoolTemplateVolumesSecretItemsPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesSecretItemsVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesSecretItemsMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2WorkerPoolTemplateVolumesCloudSqlInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["instances"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesCloudSqlInstanceInstances(original["instances"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateVolumesCloudSqlInstanceInstances(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return schema.NewSet(schema.HashString, v.([]interface{}))
}

func flattenCloudRunV2WorkerPoolTemplateVolumesEmptyDir(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["medium"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesEmptyDirMedium(original["medium"], d, config)
	transformed["size_limit"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesEmptyDirSizeLimit(original["sizeLimit"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateVolumesEmptyDirMedium(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesEmptyDirSizeLimit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesGcs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["bucket"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesGcsBucket(original["bucket"], d, config)
	transformed["read_only"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesGcsReadOnly(original["readOnly"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateVolumesGcsBucket(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesGcsReadOnly(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesNfs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["server"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesNfsServer(original["server"], d, config)
	transformed["path"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesNfsPath(original["path"], d, config)
	transformed["read_only"] =
		flattenCloudRunV2WorkerPoolTemplateVolumesNfsReadOnly(original["readOnly"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateVolumesNfsServer(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesNfsPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateVolumesNfsReadOnly(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateEncryptionKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateEncryptionKeyRevocationAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateEncryptionKeyShutdownDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateNodeSelector(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["accelerator"] =
		flattenCloudRunV2WorkerPoolTemplateNodeSelectorAccelerator(original["accelerator"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTemplateNodeSelectorAccelerator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTemplateGpuZonalRedundancyDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolInstanceSplits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type":     flattenCloudRunV2WorkerPoolInstanceSplitsType(original["type"], d, config),
			"revision": flattenCloudRunV2WorkerPoolInstanceSplitsRevision(original["revision"], d, config),
			"percent":  flattenCloudRunV2WorkerPoolInstanceSplitsPercent(original["percent"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2WorkerPoolInstanceSplitsType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolInstanceSplitsRevision(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolInstanceSplitsPercent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2WorkerPoolObservedGeneration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTerminalCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenCloudRunV2WorkerPoolTerminalConditionType(original["type"], d, config)
	transformed["state"] =
		flattenCloudRunV2WorkerPoolTerminalConditionState(original["state"], d, config)
	transformed["message"] =
		flattenCloudRunV2WorkerPoolTerminalConditionMessage(original["message"], d, config)
	transformed["last_transition_time"] =
		flattenCloudRunV2WorkerPoolTerminalConditionLastTransitionTime(original["lastTransitionTime"], d, config)
	transformed["severity"] =
		flattenCloudRunV2WorkerPoolTerminalConditionSeverity(original["severity"], d, config)
	transformed["reason"] =
		flattenCloudRunV2WorkerPoolTerminalConditionReason(original["reason"], d, config)
	transformed["revision_reason"] =
		flattenCloudRunV2WorkerPoolTerminalConditionRevisionReason(original["revisionReason"], d, config)
	transformed["execution_reason"] =
		flattenCloudRunV2WorkerPoolTerminalConditionExecutionReason(original["executionReason"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2WorkerPoolTerminalConditionType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTerminalConditionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTerminalConditionMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTerminalConditionLastTransitionTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTerminalConditionSeverity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTerminalConditionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTerminalConditionRevisionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTerminalConditionExecutionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type":                 flattenCloudRunV2WorkerPoolConditionsType(original["type"], d, config),
			"state":                flattenCloudRunV2WorkerPoolConditionsState(original["state"], d, config),
			"message":              flattenCloudRunV2WorkerPoolConditionsMessage(original["message"], d, config),
			"last_transition_time": flattenCloudRunV2WorkerPoolConditionsLastTransitionTime(original["lastTransitionTime"], d, config),
			"severity":             flattenCloudRunV2WorkerPoolConditionsSeverity(original["severity"], d, config),
			"reason":               flattenCloudRunV2WorkerPoolConditionsReason(original["reason"], d, config),
			"revision_reason":      flattenCloudRunV2WorkerPoolConditionsRevisionReason(original["revisionReason"], d, config),
			"execution_reason":     flattenCloudRunV2WorkerPoolConditionsExecutionReason(original["executionReason"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2WorkerPoolConditionsType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolConditionsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolConditionsMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolConditionsLastTransitionTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolConditionsSeverity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolConditionsReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolConditionsRevisionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolConditionsExecutionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolLatestReadyRevision(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolLatestCreatedRevision(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolInstanceSplitStatuses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type":     flattenCloudRunV2WorkerPoolInstanceSplitStatusesType(original["type"], d, config),
			"revision": flattenCloudRunV2WorkerPoolInstanceSplitStatusesRevision(original["revision"], d, config),
			"percent":  flattenCloudRunV2WorkerPoolInstanceSplitStatusesPercent(original["percent"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2WorkerPoolInstanceSplitStatusesType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolInstanceSplitStatusesRevision(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolInstanceSplitStatusesPercent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2WorkerPoolReconciling(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenCloudRunV2WorkerPoolEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2WorkerPoolEffectiveAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandCloudRunV2WorkerPoolDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolClient(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolClientVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolLaunchStage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolBinaryAuthorization(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBreakglassJustification, err := expandCloudRunV2WorkerPoolBinaryAuthorizationBreakglassJustification(original["breakglass_justification"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBreakglassJustification); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["breakglassJustification"] = transformedBreakglassJustification
	}

	transformedUseDefault, err := expandCloudRunV2WorkerPoolBinaryAuthorizationUseDefault(original["use_default"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUseDefault); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["useDefault"] = transformedUseDefault
	}

	transformedPolicy, err := expandCloudRunV2WorkerPoolBinaryAuthorizationPolicy(original["policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["policy"] = transformedPolicy
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolBinaryAuthorizationBreakglassJustification(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolBinaryAuthorizationUseDefault(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolBinaryAuthorizationPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolCustomAudiences(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolScaling(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedScalingMode, err := expandCloudRunV2WorkerPoolScalingScalingMode(original["scaling_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScalingMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scalingMode"] = transformedScalingMode
	}

	transformedMinInstanceCount, err := expandCloudRunV2WorkerPoolScalingMinInstanceCount(original["min_instance_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinInstanceCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minInstanceCount"] = transformedMinInstanceCount
	}

	transformedMaxInstanceCount, err := expandCloudRunV2WorkerPoolScalingMaxInstanceCount(original["max_instance_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxInstanceCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxInstanceCount"] = transformedMaxInstanceCount
	}

	transformedManualInstanceCount, err := expandCloudRunV2WorkerPoolScalingManualInstanceCount(original["manual_instance_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedManualInstanceCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["manualInstanceCount"] = transformedManualInstanceCount
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolScalingScalingMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolScalingMinInstanceCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolScalingMaxInstanceCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolScalingManualInstanceCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRevision, err := expandCloudRunV2WorkerPoolTemplateRevision(original["revision"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRevision); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["revision"] = transformedRevision
	}

	transformedLabels, err := expandCloudRunV2WorkerPoolTemplateLabels(original["labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["labels"] = transformedLabels
	}

	transformedAnnotations, err := expandCloudRunV2WorkerPoolTemplateAnnotations(original["annotations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAnnotations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["annotations"] = transformedAnnotations
	}

	transformedVpcAccess, err := expandCloudRunV2WorkerPoolTemplateVpcAccess(original["vpc_access"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVpcAccess); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vpcAccess"] = transformedVpcAccess
	}

	transformedServiceAccount, err := expandCloudRunV2WorkerPoolTemplateServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	transformedContainers, err := expandCloudRunV2WorkerPoolTemplateContainers(original["containers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContainers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["containers"] = transformedContainers
	}

	transformedVolumes, err := expandCloudRunV2WorkerPoolTemplateVolumes(original["volumes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumes"] = transformedVolumes
	}

	transformedEncryptionKey, err := expandCloudRunV2WorkerPoolTemplateEncryptionKey(original["encryption_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEncryptionKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["encryptionKey"] = transformedEncryptionKey
	}

	transformedEncryptionKeyRevocationAction, err := expandCloudRunV2WorkerPoolTemplateEncryptionKeyRevocationAction(original["encryption_key_revocation_action"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEncryptionKeyRevocationAction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["encryptionKeyRevocationAction"] = transformedEncryptionKeyRevocationAction
	}

	transformedEncryptionKeyShutdownDuration, err := expandCloudRunV2WorkerPoolTemplateEncryptionKeyShutdownDuration(original["encryption_key_shutdown_duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEncryptionKeyShutdownDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["encryptionKeyShutdownDuration"] = transformedEncryptionKeyShutdownDuration
	}

	transformedNodeSelector, err := expandCloudRunV2WorkerPoolTemplateNodeSelector(original["node_selector"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodeSelector); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodeSelector"] = transformedNodeSelector
	}

	transformedGpuZonalRedundancyDisabled, err := expandCloudRunV2WorkerPoolTemplateGpuZonalRedundancyDisabled(original["gpu_zonal_redundancy_disabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGpuZonalRedundancyDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gpuZonalRedundancyDisabled"] = transformedGpuZonalRedundancyDisabled
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateRevision(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandCloudRunV2WorkerPoolTemplateAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandCloudRunV2WorkerPoolTemplateVpcAccess(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEgress, err := expandCloudRunV2WorkerPoolTemplateVpcAccessEgress(original["egress"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEgress); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["egress"] = transformedEgress
	}

	transformedNetworkInterfaces, err := expandCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfaces(original["network_interfaces"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetworkInterfaces); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["networkInterfaces"] = transformedNetworkInterfaces
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateVpcAccessEgress(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfaces(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedNetwork, err := expandCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesNetwork(original["network"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["network"] = transformedNetwork
		}

		transformedSubnetwork, err := expandCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesSubnetwork(original["subnetwork"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSubnetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["subnetwork"] = transformedSubnetwork
		}

		transformedTags, err := expandCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesTags(original["tags"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTags); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tags"] = transformedTags
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesSubnetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVpcAccessNetworkInterfacesTags(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandCloudRunV2WorkerPoolTemplateContainersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedImage, err := expandCloudRunV2WorkerPoolTemplateContainersImage(original["image"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedImage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["image"] = transformedImage
		}

		transformedCommand, err := expandCloudRunV2WorkerPoolTemplateContainersCommand(original["command"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCommand); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["command"] = transformedCommand
		}

		transformedArgs, err := expandCloudRunV2WorkerPoolTemplateContainersArgs(original["args"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedArgs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["args"] = transformedArgs
		}

		transformedEnv, err := expandCloudRunV2WorkerPoolTemplateContainersEnv(original["env"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnv); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["env"] = transformedEnv
		}

		transformedResources, err := expandCloudRunV2WorkerPoolTemplateContainersResources(original["resources"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resources"] = transformedResources
		}

		transformedVolumeMounts, err := expandCloudRunV2WorkerPoolTemplateContainersVolumeMounts(original["volume_mounts"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVolumeMounts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["volumeMounts"] = transformedVolumeMounts
		}

		transformedWorkingDir, err := expandCloudRunV2WorkerPoolTemplateContainersWorkingDir(original["working_dir"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedWorkingDir); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["workingDir"] = transformedWorkingDir
		}

		transformedDependsOn, err := expandCloudRunV2WorkerPoolTemplateContainersDependsOn(original["depends_on"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDependsOn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["dependsOn"] = transformedDependsOn
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersImage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersCommand(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersArgs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersEnv(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandCloudRunV2WorkerPoolTemplateContainersEnvName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandCloudRunV2WorkerPoolTemplateContainersEnvValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedValueSource, err := expandCloudRunV2WorkerPoolTemplateContainersEnvValueSource(original["value_source"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValueSource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["valueSource"] = transformedValueSource
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersEnvName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersEnvValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersEnvValueSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretKeyRef, err := expandCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRef(original["secret_key_ref"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretKeyRef); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretKeyRef"] = transformedSecretKeyRef
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRef(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecret, err := expandCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRefSecret(original["secret"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecret); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secret"] = transformedSecret
	}

	transformedVersion, err := expandCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRefVersion(original["version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["version"] = transformedVersion
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRefSecret(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersEnvValueSourceSecretKeyRefVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLimits, err := expandCloudRunV2WorkerPoolTemplateContainersResourcesLimits(original["limits"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLimits); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["limits"] = transformedLimits
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersResourcesLimits(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersVolumeMounts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandCloudRunV2WorkerPoolTemplateContainersVolumeMountsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedMountPath, err := expandCloudRunV2WorkerPoolTemplateContainersVolumeMountsMountPath(original["mount_path"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMountPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["mountPath"] = transformedMountPath
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersVolumeMountsName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersVolumeMountsMountPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersWorkingDir(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateContainersDependsOn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandCloudRunV2WorkerPoolTemplateVolumesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedSecret, err := expandCloudRunV2WorkerPoolTemplateVolumesSecret(original["secret"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSecret); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["secret"] = transformedSecret
		}

		transformedCloudSqlInstance, err := expandCloudRunV2WorkerPoolTemplateVolumesCloudSqlInstance(original["cloud_sql_instance"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCloudSqlInstance); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["cloudSqlInstance"] = transformedCloudSqlInstance
		}

		transformedEmptyDir, err := expandCloudRunV2WorkerPoolTemplateVolumesEmptyDir(original["empty_dir"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEmptyDir); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["emptyDir"] = transformedEmptyDir
		}

		transformedGcs, err := expandCloudRunV2WorkerPoolTemplateVolumesGcs(original["gcs"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedGcs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["gcs"] = transformedGcs
		}

		transformedNfs, err := expandCloudRunV2WorkerPoolTemplateVolumesNfs(original["nfs"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNfs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["nfs"] = transformedNfs
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesSecret(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecret, err := expandCloudRunV2WorkerPoolTemplateVolumesSecretSecret(original["secret"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecret); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secret"] = transformedSecret
	}

	transformedDefaultMode, err := expandCloudRunV2WorkerPoolTemplateVolumesSecretDefaultMode(original["default_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultMode"] = transformedDefaultMode
	}

	transformedItems, err := expandCloudRunV2WorkerPoolTemplateVolumesSecretItems(original["items"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedItems); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["items"] = transformedItems
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesSecretSecret(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesSecretDefaultMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesSecretItems(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedPath, err := expandCloudRunV2WorkerPoolTemplateVolumesSecretItemsPath(original["path"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["path"] = transformedPath
		}

		transformedVersion, err := expandCloudRunV2WorkerPoolTemplateVolumesSecretItemsVersion(original["version"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["version"] = transformedVersion
		}

		transformedMode, err := expandCloudRunV2WorkerPoolTemplateVolumesSecretItemsMode(original["mode"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["mode"] = transformedMode
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesSecretItemsPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesSecretItemsVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesSecretItemsMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesCloudSqlInstance(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInstances, err := expandCloudRunV2WorkerPoolTemplateVolumesCloudSqlInstanceInstances(original["instances"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInstances); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["instances"] = transformedInstances
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesCloudSqlInstanceInstances(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesEmptyDir(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMedium, err := expandCloudRunV2WorkerPoolTemplateVolumesEmptyDirMedium(original["medium"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMedium); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["medium"] = transformedMedium
	}

	transformedSizeLimit, err := expandCloudRunV2WorkerPoolTemplateVolumesEmptyDirSizeLimit(original["size_limit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSizeLimit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sizeLimit"] = transformedSizeLimit
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesEmptyDirMedium(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesEmptyDirSizeLimit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesGcs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBucket, err := expandCloudRunV2WorkerPoolTemplateVolumesGcsBucket(original["bucket"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBucket); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bucket"] = transformedBucket
	}

	transformedReadOnly, err := expandCloudRunV2WorkerPoolTemplateVolumesGcsReadOnly(original["read_only"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReadOnly); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["readOnly"] = transformedReadOnly
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesGcsBucket(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesGcsReadOnly(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesNfs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServer, err := expandCloudRunV2WorkerPoolTemplateVolumesNfsServer(original["server"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServer); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["server"] = transformedServer
	}

	transformedPath, err := expandCloudRunV2WorkerPoolTemplateVolumesNfsPath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	transformedReadOnly, err := expandCloudRunV2WorkerPoolTemplateVolumesNfsReadOnly(original["read_only"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReadOnly); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["readOnly"] = transformedReadOnly
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesNfsServer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesNfsPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateVolumesNfsReadOnly(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateEncryptionKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateEncryptionKeyRevocationAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateEncryptionKeyShutdownDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateNodeSelector(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAccelerator, err := expandCloudRunV2WorkerPoolTemplateNodeSelectorAccelerator(original["accelerator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccelerator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["accelerator"] = transformedAccelerator
	}

	return transformed, nil
}

func expandCloudRunV2WorkerPoolTemplateNodeSelectorAccelerator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolTemplateGpuZonalRedundancyDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolInstanceSplits(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedType, err := expandCloudRunV2WorkerPoolInstanceSplitsType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		transformedRevision, err := expandCloudRunV2WorkerPoolInstanceSplitsRevision(original["revision"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRevision); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["revision"] = transformedRevision
		}

		transformedPercent, err := expandCloudRunV2WorkerPoolInstanceSplitsPercent(original["percent"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPercent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["percent"] = transformedPercent
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudRunV2WorkerPoolInstanceSplitsType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolInstanceSplitsRevision(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolInstanceSplitsPercent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudRunV2WorkerPoolEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandCloudRunV2WorkerPoolEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
