// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataplex_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccDataplexAspectTypeIamBindingGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
		"role":          "roles/viewer",
		"project_name":  envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexAspectTypeIamBinding_basicGenerated(context),
			},
			{
				// Test Iam Binding update
				Config: testAccDataplexAspectTypeIamBinding_updateGenerated(context),
			},
		},
	})
}

func TestAccDataplexAspectTypeIamMemberGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
		"role":          "roles/viewer",
		"project_name":  envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAccDataplexAspectTypeIamMember_basicGenerated(context),
			},
		},
	})
}

func TestAccDataplexAspectTypeIamPolicyGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
		"role":          "roles/viewer",
		"project_name":  envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexAspectTypeIamPolicy_basicGenerated(context),
				Check:  resource.TestCheckResourceAttrSet("data.google_dataplex_aspect_type_iam_policy.foo", "policy_data"),
			},
			{
				Config: testAccDataplexAspectTypeIamPolicy_emptyBinding(context),
			},
		},
	})
}

func testAccDataplexAspectTypeIamMember_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_aspect_type" "test_aspect_type_basic" {
  aspect_type_id = "tf-test-aspect-type-basic%{random_suffix}"
  project = "%{project_name}"
  location = "us-central1"

  metadata_template = <<EOF
{
  "name": "tf-test-template",
  "type": "record",
  "recordFields": [
    {
      "name": "type",
      "type": "enum",
      "annotations": {
        "displayName": "Type",
        "description": "Specifies the type of view represented by the entry."
      },
      "index": 1,
      "constraints": {
        "required": true
      },
      "enumValues": [
        {
          "name": "VIEW",
          "index": 1
        }
      ]
    }
  ]
}
EOF
}

resource "google_dataplex_aspect_type_iam_member" "foo" {
  project = google_dataplex_aspect_type.test_aspect_type_basic.project
  location = google_dataplex_aspect_type.test_aspect_type_basic.location
  aspect_type_id = google_dataplex_aspect_type.test_aspect_type_basic.aspect_type_id
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAccDataplexAspectTypeIamPolicy_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_aspect_type" "test_aspect_type_basic" {
  aspect_type_id = "tf-test-aspect-type-basic%{random_suffix}"
  project = "%{project_name}"
  location = "us-central1"

  metadata_template = <<EOF
{
  "name": "tf-test-template",
  "type": "record",
  "recordFields": [
    {
      "name": "type",
      "type": "enum",
      "annotations": {
        "displayName": "Type",
        "description": "Specifies the type of view represented by the entry."
      },
      "index": 1,
      "constraints": {
        "required": true
      },
      "enumValues": [
        {
          "name": "VIEW",
          "index": 1
        }
      ]
    }
  ]
}
EOF
}

data "google_iam_policy" "foo" {
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
}

resource "google_dataplex_aspect_type_iam_policy" "foo" {
  project = google_dataplex_aspect_type.test_aspect_type_basic.project
  location = google_dataplex_aspect_type.test_aspect_type_basic.location
  aspect_type_id = google_dataplex_aspect_type.test_aspect_type_basic.aspect_type_id
  policy_data = data.google_iam_policy.foo.policy_data
}

data "google_dataplex_aspect_type_iam_policy" "foo" {
  project = google_dataplex_aspect_type.test_aspect_type_basic.project
  location = google_dataplex_aspect_type.test_aspect_type_basic.location
  aspect_type_id = google_dataplex_aspect_type.test_aspect_type_basic.aspect_type_id
  depends_on = [
    google_dataplex_aspect_type_iam_policy.foo
  ]
}
`, context)
}

func testAccDataplexAspectTypeIamPolicy_emptyBinding(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_aspect_type" "test_aspect_type_basic" {
  aspect_type_id = "tf-test-aspect-type-basic%{random_suffix}"
  project = "%{project_name}"
  location = "us-central1"

  metadata_template = <<EOF
{
  "name": "tf-test-template",
  "type": "record",
  "recordFields": [
    {
      "name": "type",
      "type": "enum",
      "annotations": {
        "displayName": "Type",
        "description": "Specifies the type of view represented by the entry."
      },
      "index": 1,
      "constraints": {
        "required": true
      },
      "enumValues": [
        {
          "name": "VIEW",
          "index": 1
        }
      ]
    }
  ]
}
EOF
}

data "google_iam_policy" "foo" {
}

resource "google_dataplex_aspect_type_iam_policy" "foo" {
  project = google_dataplex_aspect_type.test_aspect_type_basic.project
  location = google_dataplex_aspect_type.test_aspect_type_basic.location
  aspect_type_id = google_dataplex_aspect_type.test_aspect_type_basic.aspect_type_id
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccDataplexAspectTypeIamBinding_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_aspect_type" "test_aspect_type_basic" {
  aspect_type_id = "tf-test-aspect-type-basic%{random_suffix}"
  project = "%{project_name}"
  location = "us-central1"

  metadata_template = <<EOF
{
  "name": "tf-test-template",
  "type": "record",
  "recordFields": [
    {
      "name": "type",
      "type": "enum",
      "annotations": {
        "displayName": "Type",
        "description": "Specifies the type of view represented by the entry."
      },
      "index": 1,
      "constraints": {
        "required": true
      },
      "enumValues": [
        {
          "name": "VIEW",
          "index": 1
        }
      ]
    }
  ]
}
EOF
}

resource "google_dataplex_aspect_type_iam_binding" "foo" {
  project = google_dataplex_aspect_type.test_aspect_type_basic.project
  location = google_dataplex_aspect_type.test_aspect_type_basic.location
  aspect_type_id = google_dataplex_aspect_type.test_aspect_type_basic.aspect_type_id
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAccDataplexAspectTypeIamBinding_updateGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_aspect_type" "test_aspect_type_basic" {
  aspect_type_id = "tf-test-aspect-type-basic%{random_suffix}"
  project = "%{project_name}"
  location = "us-central1"

  metadata_template = <<EOF
{
  "name": "tf-test-template",
  "type": "record",
  "recordFields": [
    {
      "name": "type",
      "type": "enum",
      "annotations": {
        "displayName": "Type",
        "description": "Specifies the type of view represented by the entry."
      },
      "index": 1,
      "constraints": {
        "required": true
      },
      "enumValues": [
        {
          "name": "VIEW",
          "index": 1
        }
      ]
    }
  ]
}
EOF
}

resource "google_dataplex_aspect_type_iam_binding" "foo" {
  project = google_dataplex_aspect_type.test_aspect_type_basic.project
  location = google_dataplex_aspect_type.test_aspect_type_basic.location
  aspect_type_id = google_dataplex_aspect_type.test_aspect_type_basic.aspect_type_id
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:gterraformtest1@gmail.com"]
}
`, context)
}
