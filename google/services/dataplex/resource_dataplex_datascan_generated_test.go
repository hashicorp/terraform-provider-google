// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataplex_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDataplexDatascan_dataplexDatascanBasicProfileExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_name":  envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDataplexDatascanDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexDatascan_dataplexDatascanBasicProfileExample(context),
			},
			{
				ResourceName:            "google_dataplex_datascan.basic_profile",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_scan_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccDataplexDatascan_dataplexDatascanBasicProfileExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_datascan" "basic_profile" {
  location     = "us-central1"
  data_scan_id = "tf-test-dataprofile-basic%{random_suffix}"

  data {
	  resource = "//bigquery.googleapis.com/projects/bigquery-public-data/datasets/samples/tables/shakespeare"
  }

  execution_spec {
    trigger {
      on_demand {}
    }
  }

data_profile_spec {}

  project = "%{project_name}"
}
`, context)
}

func TestAccDataplexDatascan_dataplexDatascanFullProfileExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_name":  envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDataplexDatascanDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexDatascan_dataplexDatascanFullProfileExample(context),
			},
			{
				ResourceName:            "google_dataplex_datascan.full_profile",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_scan_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccDataplexDatascan_dataplexDatascanFullProfileExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_datascan" "full_profile" {
  location     = "us-central1"
  display_name = "Full Datascan Profile"
  data_scan_id = "tf-test-dataprofile-full%{random_suffix}"
  description  = "Example resource - Full Datascan Profile"
  labels = {
    author = "billing"
  }

  data {
    resource = "//bigquery.googleapis.com/projects/bigquery-public-data/datasets/samples/tables/shakespeare"
  }

  execution_spec {
    trigger {
      schedule {
        cron = "TZ=America/New_York 1 1 * * *"
      }
    }
  }

  data_profile_spec {
    sampling_percent = 80
    row_filter = "word_count > 10"
    include_fields {
      field_names = ["word_count"]
    }
    exclude_fields {
      field_names = ["property_type"]
    }
    post_scan_actions {
      bigquery_export {
        results_table = "//bigquery.googleapis.com/projects/%{project_name}/datasets/tf_test_dataplex_dataset%{random_suffix}/tables/profile_export"
      }
    }
  }

  project = "%{project_name}"

  depends_on = [
    google_bigquery_dataset.source
  ]
}

resource "google_bigquery_dataset" "source" {
  dataset_id                  = "tf_test_dataplex_dataset%{random_suffix}"
  friendly_name               = "test"
  description                 = "This is a test description"
  location                    = "US"
  delete_contents_on_destroy = true
}
`, context)
}

func TestAccDataplexDatascan_dataplexDatascanBasicQualityExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_name":  envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDataplexDatascanDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexDatascan_dataplexDatascanBasicQualityExample(context),
			},
			{
				ResourceName:            "google_dataplex_datascan.basic_quality",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_scan_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccDataplexDatascan_dataplexDatascanBasicQualityExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_datascan" "basic_quality" {
  location     = "us-central1"
  data_scan_id = "tf-test-dataquality-basic%{random_suffix}"

  data {
    resource = "//bigquery.googleapis.com/projects/bigquery-public-data/datasets/samples/tables/shakespeare"
  }

  execution_spec {
    trigger {
      on_demand {}
    }
  }

  data_quality_spec {
    rules {
      dimension = "VALIDITY"
      name = "rule1"
      description = "rule 1 for validity dimension"
      table_condition_expectation {
        sql_expression = "COUNT(*) > 0"
      }
    }
  }

  project = "%{project_name}"
}
`, context)
}

func TestAccDataplexDatascan_dataplexDatascanFullQualityTestExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_name":  envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDataplexDatascanDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexDatascan_dataplexDatascanFullQualityTestExample(context),
			},
			{
				ResourceName:            "google_dataplex_datascan.full_quality_test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_scan_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccDataplexDatascan_dataplexDatascanFullQualityTestExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigquery_dataset" "tf_test_dataset" {
  dataset_id = "tf_test_dataset_id_%{random_suffix}"
  default_table_expiration_ms = 3600000
}

resource "google_bigquery_table" "tf_test_table" {
  dataset_id          = google_bigquery_dataset.tf_test_dataset.dataset_id
  table_id            = "tf_test_table_id_%{random_suffix}"
  deletion_protection = false
  schema              = <<EOF
    [
    {
      "name": "name",
      "type": "STRING",
      "mode": "NULLABLE"
    },
    {
      "name": "station_id",
      "type": "INTEGER",
      "mode": "NULLABLE",
      "description": "The id of the bike station"
    },
    {
      "name": "address",
      "type": "STRING",
      "mode": "NULLABLE",
      "description": "The address of the bike station"
    },
    {
      "name": "power_type",
      "type": "STRING",
      "mode": "NULLABLE",
      "description": "The powert type of the bike station"
    },
    {
      "name": "property_type",
      "type": "STRING",
      "mode": "NULLABLE",
      "description": "The type of the property"
    },
    {
      "name": "number_of_docks",
      "type": "INTEGER",
      "mode": "NULLABLE",
      "description": "The number of docks the property have"
    },
    {
      "name": "footprint_length",
      "type": "INTEGER",
      "mode": "NULLABLE",
      "description": "The footpring lenght of the property"
    },
    {
      "name": "council_district",
      "type": "INTEGER",
      "mode": "NULLABLE",
      "description": "The council district the property is in"
    }
    ]
  EOF
}


resource "google_dataplex_datascan" "full_quality_test" {
  location = "us-central1"
  display_name = "Full Datascan Quality Publishing"
  data_scan_id = "tf-test-dataquality-full-test%{random_suffix}"
  description = "Example resource - Full Datascan Quality with Publishing enabled"
  labels = {
    author = "billing"
  }

  data {
    resource = "//bigquery.googleapis.com/projects/%{project_name}/datasets/${google_bigquery_dataset.tf_test_dataset.dataset_id}/tables/${google_bigquery_table.tf_test_table.table_id}"
  }

  execution_spec {
    trigger {
      schedule {
        cron = "TZ=America/New_York 1 1 * * *"
      }
    }
  }

  data_quality_spec {
    sampling_percent = 5
    row_filter = "station_id > 1000"
    catalog_publishing_enabled = true
    post_scan_actions {
      notification_report {
        recipients {
          emails = ["jane.doe@example.com"]
        }
        score_threshold_trigger {
          score_threshold = 86
        }
      }
    }
    
    rules {
      column = "address"
      dimension = "VALIDITY"
      threshold = 0.99
      non_null_expectation {}
    }

    rules {
      column = "council_district"
      dimension = "VALIDITY"
      ignore_null = true
      threshold = 0.9
      range_expectation {
        min_value = 1
        max_value = 10
        strict_min_enabled = true
        strict_max_enabled = false
      }
    }

    rules {
      column = "power_type"
      dimension = "VALIDITY"
      ignore_null = false
      regex_expectation {
        regex = ".*solar.*"
      }
    }

    rules {
      column = "property_type"
      dimension = "VALIDITY"
      ignore_null = false
      set_expectation {
        values = ["sidewalk", "parkland"]
      }
    }


    rules {
      column = "address"
      dimension = "UNIQUENESS"
      uniqueness_expectation {}
    }

    rules {
      column = "number_of_docks"
      dimension = "VALIDITY"
      statistic_range_expectation {
        statistic = "MEAN"
        min_value = 5
        max_value = 15
        strict_min_enabled = true
        strict_max_enabled = true
      }
    }

    rules {
      column = "footprint_length"
      dimension = "VALIDITY"
      row_condition_expectation {
        sql_expression = "footprint_length > 0 AND footprint_length <= 10"
      }
    }

    rules {
      dimension = "VALIDITY"
      table_condition_expectation {
        sql_expression = "COUNT(*) > 0"
      }
    }

    rules {
      dimension = "VALIDITY"
      sql_assertion {
        sql_statement = "select * from %{project_name}.${google_bigquery_dataset.tf_test_dataset.dataset_id}.${google_bigquery_table.tf_test_table.table_id} where address is null"
      }
    }
  }


  project = "%{project_name}"
}
`, context)
}

func TestAccDataplexDatascan_dataplexDatascanBasicDiscoveryExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"location":      envvar.GetTestRegionFromEnv(),
		"project_name":  envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDataplexDatascanDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexDatascan_dataplexDatascanBasicDiscoveryExample(context),
			},
			{
				ResourceName:            "google_dataplex_datascan.basic_discovery",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_scan_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccDataplexDatascan_dataplexDatascanBasicDiscoveryExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_datascan" "basic_discovery" {
  location     = "us-central1"
  data_scan_id = "tf-test-datadiscovery-basic%{random_suffix}"

  data {
    resource = "//storage.googleapis.com/projects/${google_storage_bucket.tf_test_bucket.project}/buckets/${google_storage_bucket.tf_test_bucket.name}"
  }

  execution_spec {
    trigger {
      on_demand {}
    }
  }

  data_discovery_spec {}

  project = "%{project_name}"
}

resource "google_storage_bucket" "tf_test_bucket" {
  name     = "tf-test-bucket-name-%{random_suffix}"
  location = "%{location}"
  uniform_bucket_level_access = true
}
`, context)
}

func TestAccDataplexDatascan_dataplexDatascanFullDiscoveryExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"location":      envvar.GetTestRegionFromEnv(),
		"project_name":  envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDataplexDatascanDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexDatascan_dataplexDatascanFullDiscoveryExample(context),
			},
			{
				ResourceName:            "google_dataplex_datascan.full_discovery",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_scan_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccDataplexDatascan_dataplexDatascanFullDiscoveryExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_datascan" "full_discovery" {
  location     = "us-central1"
  display_name = "Full Datascan Discovery"
  data_scan_id = "tf-test-datadiscovery-full%{random_suffix}"
  description  = "Example resource - Full Datascan Discovery"
  labels = {
    author = "billing"
  }

  data {
    resource = "//storage.googleapis.com/projects/${google_storage_bucket.tf_test_bucket.project}/buckets/${google_storage_bucket.tf_test_bucket.name}"
  }

  execution_spec {
    trigger {
      schedule {
        cron = "TZ=America/New_York 1 1 * * *"
      }
    }
  }
  
  data_discovery_spec {
    bigquery_publishing_config {
      table_type = "BIGLAKE"
      connection = "projects/${google_bigquery_connection.tf_test_connection.project}/locations/${google_bigquery_connection.tf_test_connection.location}/connections/${google_bigquery_connection.tf_test_connection.connection_id}"
      location = "${google_storage_bucket.tf_test_bucket.location}"
      project = "projects/${google_storage_bucket.tf_test_bucket.project}"
    }

    storage_config {
      include_patterns = [
        "ai*",
        "ml*",
      ]
      exclude_patterns = [
        "doc*",
        "gen*",
      ]
      csv_options {
        header_rows = 5
        delimiter = ","
        encoding = "UTF-8"
        type_inference_disabled = false
        quote = "'"
      }
      json_options {
        encoding = "UTF-8"
        type_inference_disabled = false
      }
    }
  }

  project = "%{project_name}"
}

resource "google_storage_bucket" "tf_test_bucket" {
  name     = "tf-test-bucket-name-%{random_suffix}"
  location = "%{location}"
  uniform_bucket_level_access = true
}

resource "google_bigquery_connection" "tf_test_connection" {
   connection_id = "tf-test-connection-%{random_suffix}"
   location      = "us-central1"
   friendly_name = "tf-test-connection-%{random_suffix}"
   description   = "a bigquery connection for tf test"
   cloud_resource {}
}
`, context)
}

func testAccCheckDataplexDatascanDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_dataplex_datascan" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DataplexBasePath}}projects/{{project}}/locations/{{location}}/dataScans/{{data_scan_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DataplexDatascan still exists at %s", url)
			}
		}

		return nil
	}
}
