// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataplex_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccDataplexEntryLink_dataplexEntryLinkBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_number": envvar.GetTestProjectNumberFromEnv(),
		"random_suffix":  acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDataplexEntryLinkDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexEntryLink_dataplexEntryLinkBasicExample(context),
			},
			{
				ResourceName:            "google_dataplex_entry_link.basic_entry_link",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"entry_group_id", "entry_link_id", "location"},
			},
		},
	})
}

func testAccDataplexEntryLink_dataplexEntryLinkBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_entry_group" "entry-group-basic" {
  location = "us-central1"
  entry_group_id = "tf-test-entry-group%{random_suffix}"
  project = "%{project_number}"
}

resource "google_dataplex_entry" "source" {
  location = "us-central1"
  entry_group_id = google_dataplex_entry_group.entry-group-basic.entry_group_id
  entry_id = "tf-test-source-entry%{random_suffix}"
  entry_type = google_dataplex_entry_type.entry-type-basic.name
  project = "%{project_number}"
}

resource "google_dataplex_entry_type" "entry-type-basic" {
  entry_type_id = "tf-test-entry-type%{random_suffix}"
  location = "us-central1"
  project = "%{project_number}"
}

resource "google_dataplex_entry" "target" {
  location = "us-central1"
  entry_group_id = google_dataplex_entry_group.entry-group-basic.entry_group_id
  entry_id = "tf-test-target-entry%{random_suffix}"
  entry_type = google_dataplex_entry_type.entry-type-basic.name
  project = "%{project_number}"
}

resource "google_dataplex_entry_link" "basic_entry_link" {
  project = "%{project_number}"
  location = "us-central1"
  entry_group_id = google_dataplex_entry_group.entry-group-basic.entry_group_id
  entry_link_id = "tf-test-entry-link%{random_suffix}"

  entry_link_type = "projects/655216118709/locations/global/entryLinkTypes/related"

  entry_references {
    name = google_dataplex_entry.source.name
  }

  entry_references {
    name = google_dataplex_entry.target.name
  }
}
`, context)
}

func TestAccDataplexEntryLink_dataplexEntryLinkFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_number": envvar.GetTestProjectNumberFromEnv(),
		"random_suffix":  acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckDataplexEntryLinkDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataplexEntryLink_dataplexEntryLinkFullExample(context),
			},
			{
				ResourceName:            "google_dataplex_entry_link.full_entry_link",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"entry_group_id", "entry_link_id", "location"},
			},
		},
	})
}

func testAccDataplexEntryLink_dataplexEntryLinkFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_dataplex_entry_group" "entry-group-full" {
  location = "us-central1"
  entry_group_id = "tf-test-entry-group-full%{random_suffix}"
  project = "%{project_number}"
}

resource "google_dataplex_entry" "source" {
  location = "us-central1"
  entry_group_id = google_dataplex_entry_group.entry-group-full.entry_group_id
  entry_id = "tf-test-source-entry-full%{random_suffix}"
  entry_type = google_dataplex_entry_type.entry-type-full.name
  project = "%{project_number}"
}

resource "google_dataplex_entry_type" "entry-type-full" {
  entry_type_id = "tf-test-entry-type-full%{random_suffix}"
  location = "us-central1"
  project = "%{project_number}"
}

resource "google_dataplex_entry" "target" {
  location = "us-central1"
  entry_group_id = google_dataplex_entry_group.entry-group-full.entry_group_id
  entry_id = "tf-test-target-entry-full%{random_suffix}"
  entry_type = google_dataplex_entry_type.entry-type-full.name
  project = "%{project_number}"
}

resource "google_dataplex_entry_link" "full_entry_link" {
  project = "%{project_number}"
  location = "us-central1"
  entry_group_id = google_dataplex_entry_group.entry-group-full.entry_group_id
  entry_link_id = "tf-test-entry-link-full%{random_suffix}"

  entry_link_type = "projects/655216118709/locations/global/entryLinkTypes/related"

  entry_references {
    name = google_dataplex_entry.source.name
    path = ""
  }

  entry_references {
    name = google_dataplex_entry.target.name
  }
}
`, context)
}

func testAccCheckDataplexEntryLinkDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_dataplex_entry_link" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{DataplexBasePath}}projects/{{project}}/locations/{{location}}/entryGroups/{{entry_group_id}}/entryLinks/{{entry_link_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("DataplexEntryLink still exists at %s", url)
			}
		}

		return nil
	}
}
