// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/colab/NotebookExecution.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package colab

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceColabNotebookExecution() *schema.Resource {
	return &schema.Resource{
		Create: resourceColabNotebookExecutionCreate,
		Read:   resourceColabNotebookExecutionRead,
		Delete: resourceColabNotebookExecutionDelete,

		Importer: &schema.ResourceImporter{
			State: resourceColabNotebookExecutionImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Required. The display name of the Notebook Execution.`,
			},
			"gcs_output_uri": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The Cloud Storage location to upload the result to. Format:'gs://bucket-name'`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location for the resource: https://cloud.google.com/colab/docs/locations`,
			},
			"dataform_repository_source": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `The Dataform Repository containing the input notebook.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"dataform_repository_resource_name": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.CompareSelfLinkRelativePaths,
							Description:      `The resource name of the Dataform Repository.`,
						},
						"commit_sha": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `The commit SHA to read repository with. If unset, the file will be read at HEAD.`,
						},
					},
				},
				ExactlyOneOf: []string{"dataform_repository_source", "gcs_notebook_source", "direct_notebook_source"},
			},
			"direct_notebook_source": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `The content of the input notebook in ipynb format.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"content": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The base64-encoded contents of the input notebook file.`,
						},
					},
				},
				ExactlyOneOf: []string{"dataform_repository_source", "gcs_notebook_source", "direct_notebook_source"},
			},
			"execution_timeout": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `Max running time of the execution job in seconds (default 86400s / 24 hrs).`,
			},
			"execution_user": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
				Description:  `The user email to run the execution as.`,
				ExactlyOneOf: []string{"execution_user", "service_account"},
			},
			"gcs_notebook_source": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `The Cloud Storage uri for the input notebook.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"uri": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The Cloud Storage uri pointing to the ipynb file.`,
						},
						"generation": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `The version of the Cloud Storage object to read. If unset, the current version of the object is read. See https://cloud.google.com/storage/docs/metadata#generation-number.`,
						},
					},
				},
				ExactlyOneOf: []string{"dataform_repository_source", "gcs_notebook_source", "direct_notebook_source"},
			},
			"notebook_execution_job_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `User specified ID for the Notebook Execution Job`,
			},
			"notebook_runtime_template_resource_name": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
				Description:  `The NotebookRuntimeTemplate to source compute configuration from.`,
				ExactlyOneOf: []string{"notebook_runtime_template_resource_name"},
			},
			"service_account": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
				Description:  `The service account to run the execution as.`,
				ExactlyOneOf: []string{"execution_user", "service_account"},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceColabNotebookExecutionCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandColabNotebookExecutionDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	dataformRepositorySourceProp, err := expandColabNotebookExecutionDataformRepositorySource(d.Get("dataform_repository_source"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("dataform_repository_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(dataformRepositorySourceProp)) && (ok || !reflect.DeepEqual(v, dataformRepositorySourceProp)) {
		obj["dataformRepositorySource"] = dataformRepositorySourceProp
	}
	gcsNotebookSourceProp, err := expandColabNotebookExecutionGcsNotebookSource(d.Get("gcs_notebook_source"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("gcs_notebook_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(gcsNotebookSourceProp)) && (ok || !reflect.DeepEqual(v, gcsNotebookSourceProp)) {
		obj["gcsNotebookSource"] = gcsNotebookSourceProp
	}
	directNotebookSourceProp, err := expandColabNotebookExecutionDirectNotebookSource(d.Get("direct_notebook_source"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("direct_notebook_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(directNotebookSourceProp)) && (ok || !reflect.DeepEqual(v, directNotebookSourceProp)) {
		obj["directNotebookSource"] = directNotebookSourceProp
	}
	executionTimeoutProp, err := expandColabNotebookExecutionExecutionTimeout(d.Get("execution_timeout"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("execution_timeout"); !tpgresource.IsEmptyValue(reflect.ValueOf(executionTimeoutProp)) && (ok || !reflect.DeepEqual(v, executionTimeoutProp)) {
		obj["executionTimeout"] = executionTimeoutProp
	}
	notebookRuntimeTemplateResourceNameProp, err := expandColabNotebookExecutionNotebookRuntimeTemplateResourceName(d.Get("notebook_runtime_template_resource_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("notebook_runtime_template_resource_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(notebookRuntimeTemplateResourceNameProp)) && (ok || !reflect.DeepEqual(v, notebookRuntimeTemplateResourceNameProp)) {
		obj["notebookRuntimeTemplateResourceName"] = notebookRuntimeTemplateResourceNameProp
	}
	gcsOutputUriProp, err := expandColabNotebookExecutionGcsOutputUri(d.Get("gcs_output_uri"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("gcs_output_uri"); !tpgresource.IsEmptyValue(reflect.ValueOf(gcsOutputUriProp)) && (ok || !reflect.DeepEqual(v, gcsOutputUriProp)) {
		obj["gcsOutputUri"] = gcsOutputUriProp
	}
	executionUserProp, err := expandColabNotebookExecutionExecutionUser(d.Get("execution_user"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("execution_user"); !tpgresource.IsEmptyValue(reflect.ValueOf(executionUserProp)) && (ok || !reflect.DeepEqual(v, executionUserProp)) {
		obj["executionUser"] = executionUserProp
	}
	serviceAccountProp, err := expandColabNotebookExecutionServiceAccount(d.Get("service_account"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("service_account"); !tpgresource.IsEmptyValue(reflect.ValueOf(serviceAccountProp)) && (ok || !reflect.DeepEqual(v, serviceAccountProp)) {
		obj["serviceAccount"] = serviceAccountProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ColabBasePath}}projects/{{project}}/locations/{{location}}/notebookExecutionJobs?notebook_execution_job_id={{notebook_execution_job_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new NotebookExecution: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NotebookExecution: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating NotebookExecution: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ColabOperationWaitTime(
		config, res, project, "Creating NotebookExecution", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create NotebookExecution: %s", err)
	}

	// The operation for this resource contains the generated name that we need
	// in order to perform a READ.

	operationName, _ := res["name"].(string)
	parts := strings.Split(operationName, "/")
	parts[1] = project
	longName := strings.Join(parts[:len(parts)-2], "/")
	shortId := tpgresource.GetResourceNameFromSelfLink(longName)

	log.Printf("[DEBUG] Setting notebook execution job id to %s", shortId)
	if err := d.Set("notebook_execution_job_id", shortId); err != nil {
		return fmt.Errorf("Error setting id: %s", err)
	}

	log.Printf("[DEBUG] Setting resource id to %s", longName)
	d.SetId(longName)

	log.Printf("[DEBUG] Finished creating NotebookExecution %q: %#v", d.Id(), res)

	return resourceColabNotebookExecutionRead(d, meta)
}

func resourceColabNotebookExecutionRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ColabBasePath}}projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NotebookExecution: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ColabNotebookExecution %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading NotebookExecution: %s", err)
	}

	if err := d.Set("display_name", flattenColabNotebookExecutionDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading NotebookExecution: %s", err)
	}
	if err := d.Set("dataform_repository_source", flattenColabNotebookExecutionDataformRepositorySource(res["dataformRepositorySource"], d, config)); err != nil {
		return fmt.Errorf("Error reading NotebookExecution: %s", err)
	}
	if err := d.Set("gcs_notebook_source", flattenColabNotebookExecutionGcsNotebookSource(res["gcsNotebookSource"], d, config)); err != nil {
		return fmt.Errorf("Error reading NotebookExecution: %s", err)
	}
	if err := d.Set("execution_timeout", flattenColabNotebookExecutionExecutionTimeout(res["executionTimeout"], d, config)); err != nil {
		return fmt.Errorf("Error reading NotebookExecution: %s", err)
	}
	if err := d.Set("notebook_runtime_template_resource_name", flattenColabNotebookExecutionNotebookRuntimeTemplateResourceName(res["notebookRuntimeTemplateResourceName"], d, config)); err != nil {
		return fmt.Errorf("Error reading NotebookExecution: %s", err)
	}
	if err := d.Set("gcs_output_uri", flattenColabNotebookExecutionGcsOutputUri(res["gcsOutputUri"], d, config)); err != nil {
		return fmt.Errorf("Error reading NotebookExecution: %s", err)
	}
	if err := d.Set("execution_user", flattenColabNotebookExecutionExecutionUser(res["executionUser"], d, config)); err != nil {
		return fmt.Errorf("Error reading NotebookExecution: %s", err)
	}
	if err := d.Set("service_account", flattenColabNotebookExecutionServiceAccount(res["serviceAccount"], d, config)); err != nil {
		return fmt.Errorf("Error reading NotebookExecution: %s", err)
	}

	return nil
}

func resourceColabNotebookExecutionDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for NotebookExecution: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ColabBasePath}}projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting NotebookExecution %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "NotebookExecution")
	}

	err = ColabOperationWaitTime(
		config, res, project, "Deleting NotebookExecution", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting NotebookExecution %q: %#v", d.Id(), res)
	return nil
}

func resourceColabNotebookExecutionImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/notebookExecutionJobs/(?P<notebook_execution_job_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<notebook_execution_job_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<notebook_execution_job_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenColabNotebookExecutionDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenColabNotebookExecutionDataformRepositorySource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["dataform_repository_resource_name"] =
		flattenColabNotebookExecutionDataformRepositorySourceDataformRepositoryResourceName(original["dataformRepositoryResourceName"], d, config)
	transformed["commit_sha"] =
		flattenColabNotebookExecutionDataformRepositorySourceCommitSha(original["commitSha"], d, config)
	return []interface{}{transformed}
}
func flattenColabNotebookExecutionDataformRepositorySourceDataformRepositoryResourceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenColabNotebookExecutionDataformRepositorySourceCommitSha(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenColabNotebookExecutionGcsNotebookSource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["uri"] =
		flattenColabNotebookExecutionGcsNotebookSourceUri(original["uri"], d, config)
	transformed["generation"] =
		flattenColabNotebookExecutionGcsNotebookSourceGeneration(original["generation"], d, config)
	return []interface{}{transformed}
}
func flattenColabNotebookExecutionGcsNotebookSourceUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenColabNotebookExecutionGcsNotebookSourceGeneration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenColabNotebookExecutionExecutionTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenColabNotebookExecutionNotebookRuntimeTemplateResourceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenColabNotebookExecutionGcsOutputUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenColabNotebookExecutionExecutionUser(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenColabNotebookExecutionServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandColabNotebookExecutionDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionDataformRepositorySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDataformRepositoryResourceName, err := expandColabNotebookExecutionDataformRepositorySourceDataformRepositoryResourceName(original["dataform_repository_resource_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataformRepositoryResourceName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataformRepositoryResourceName"] = transformedDataformRepositoryResourceName
	}

	transformedCommitSha, err := expandColabNotebookExecutionDataformRepositorySourceCommitSha(original["commit_sha"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitSha); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitSha"] = transformedCommitSha
	}

	return transformed, nil
}

func expandColabNotebookExecutionDataformRepositorySourceDataformRepositoryResourceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionDataformRepositorySourceCommitSha(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionGcsNotebookSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandColabNotebookExecutionGcsNotebookSourceUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedGeneration, err := expandColabNotebookExecutionGcsNotebookSourceGeneration(original["generation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGeneration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generation"] = transformedGeneration
	}

	return transformed, nil
}

func expandColabNotebookExecutionGcsNotebookSourceUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionGcsNotebookSourceGeneration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionDirectNotebookSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedContent, err := expandColabNotebookExecutionDirectNotebookSourceContent(original["content"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["content"] = transformedContent
	}

	return transformed, nil
}

func expandColabNotebookExecutionDirectNotebookSourceContent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionExecutionTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionNotebookRuntimeTemplateResourceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionGcsOutputUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionExecutionUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
