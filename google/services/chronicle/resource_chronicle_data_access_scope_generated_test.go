// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package chronicle_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccChronicleDataAccessScope_chronicleDataaccessscopeWithLogtypeExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"chronicle_id":  envvar.GetTestChronicleInstanceIdFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckChronicleDataAccessScopeDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccChronicleDataAccessScope_chronicleDataaccessscopeWithLogtypeExample(context),
			},
			{
				ResourceName:            "google_chronicle_data_access_scope.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_access_scope_id", "instance", "location"},
			},
		},
	})
}

func testAccChronicleDataAccessScope_chronicleDataaccessscopeWithLogtypeExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_chronicle_data_access_scope" "example" {
  location = "us"
  instance = "%{chronicle_id}"
  data_access_scope_id = "tf-test-scope-id%{random_suffix}"
  description = "tf-test-scope-description%{random_suffix}"
  allowed_data_access_labels {
    log_type = "GCP_CLOUDAUDIT"
  }
  allowed_data_access_labels {
    log_type = "GITHUB"
  }
}
`, context)
}

func TestAccChronicleDataAccessScope_chronicleDataaccessscopeWithDataaccesslabelExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"chronicle_id":  envvar.GetTestChronicleInstanceIdFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckChronicleDataAccessScopeDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccChronicleDataAccessScope_chronicleDataaccessscopeWithDataaccesslabelExample(context),
			},
			{
				ResourceName:            "google_chronicle_data_access_scope.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_access_scope_id", "instance", "location"},
			},
		},
	})
}

func testAccChronicleDataAccessScope_chronicleDataaccessscopeWithDataaccesslabelExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_chronicle_data_access_label" "custom_data_access_label" {
  location = "us"
  instance = "%{chronicle_id}"
  data_access_label_id = "tf-test-label-id%{random_suffix}"
  udm_query = "principal.hostname=\"google.com\""
}

resource "google_chronicle_data_access_scope" "example" {
  location = "us"
  instance = "%{chronicle_id}"
  data_access_scope_id = "tf-test-scope-id%{random_suffix}"
  description = "tf-test-scope-description%{random_suffix}"
  allowed_data_access_labels {
    data_access_label = resource.google_chronicle_data_access_label.custom_data_access_label.data_access_label_id
  }
}
`, context)
}

func TestAccChronicleDataAccessScope_chronicleDataaccessscopeWithAssetNamespaceExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"chronicle_id":  envvar.GetTestChronicleInstanceIdFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckChronicleDataAccessScopeDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccChronicleDataAccessScope_chronicleDataaccessscopeWithAssetNamespaceExample(context),
			},
			{
				ResourceName:            "google_chronicle_data_access_scope.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_access_scope_id", "instance", "location"},
			},
		},
	})
}

func testAccChronicleDataAccessScope_chronicleDataaccessscopeWithAssetNamespaceExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_chronicle_data_access_scope" "example" {
  location = "us"
  instance = "%{chronicle_id}"
  data_access_scope_id = "tf-test-scope-id%{random_suffix}"
  description = "tf-test-scope-description%{random_suffix}"
  allowed_data_access_labels {
    asset_namespace = "my-namespace"
  }
}
`, context)
}

func TestAccChronicleDataAccessScope_chronicleDataaccessscopeWithIngestionLabelExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"chronicle_id":  envvar.GetTestChronicleInstanceIdFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckChronicleDataAccessScopeDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccChronicleDataAccessScope_chronicleDataaccessscopeWithIngestionLabelExample(context),
			},
			{
				ResourceName:            "google_chronicle_data_access_scope.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_access_scope_id", "instance", "location"},
			},
		},
	})
}

func testAccChronicleDataAccessScope_chronicleDataaccessscopeWithIngestionLabelExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_chronicle_data_access_scope" "example" {
  location = "us"
  instance = "%{chronicle_id}"
  data_access_scope_id = "tf-test-scope-id%{random_suffix}"
  description = "tf-test-scope-description%{random_suffix}"
  allowed_data_access_labels {
    ingestion_label {
	  ingestion_label_key = "ingestion_key"
      ingestion_label_value = "ingestion_value"
    }
  }
}
`, context)
}

func TestAccChronicleDataAccessScope_chronicleDataaccessscopeWithDeniedLabelsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"chronicle_id":  envvar.GetTestChronicleInstanceIdFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckChronicleDataAccessScopeDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccChronicleDataAccessScope_chronicleDataaccessscopeWithDeniedLabelsExample(context),
			},
			{
				ResourceName:            "google_chronicle_data_access_scope.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"data_access_scope_id", "instance", "location"},
			},
		},
	})
}

func testAccChronicleDataAccessScope_chronicleDataaccessscopeWithDeniedLabelsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_chronicle_data_access_label" "custom_data_access_label" {
  location = "us"
  instance = "%{chronicle_id}"
  data_access_label_id = "tf-test-label-id%{random_suffix}"
  udm_query = "principal.hostname=\"google.com\""
}

resource "google_chronicle_data_access_scope" "example" {
  location = "us"
  instance = "%{chronicle_id}"
  data_access_scope_id = "tf-test-scope-id%{random_suffix}"
  description = "tf-test-scope-description%{random_suffix}"
  allow_all = true
  denied_data_access_labels {
    log_type = "GCP_CLOUDAUDIT"
  }
  denied_data_access_labels {
    data_access_label = resource.google_chronicle_data_access_label.custom_data_access_label.data_access_label_id
  }
  denied_data_access_labels {
    ingestion_label {
	    ingestion_label_key = "ingestion_key"
      ingestion_label_value = "ingestion_value"
    }
  }
  denied_data_access_labels {
    asset_namespace = "my-namespace"
  }
}
`, context)
}

func testAccCheckChronicleDataAccessScopeDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_chronicle_data_access_scope" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ChronicleBasePath}}projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessScopes/{{data_access_scope_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ChronicleDataAccessScope still exists at %s", url)
			}
		}

		return nil
	}
}
