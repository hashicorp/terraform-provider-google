// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package chronicle_test

import (
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccChronicleRetrohunt_chronicleRetrohuntBasicExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	randomSuffix := acctest.RandString(t, 10)
	context := make(map[string]interface{})
	context["random_suffix"] = randomSuffix

	envVars := map[string]interface{}{
		"chronicle_id": envvar.GetTestChronicleInstanceIdFromEnv(t),
	}
	for k, v := range envVars {
		context[k] = v
	}

	overrides := map[string]interface{}{
		"end_time":   time.Now().Add(time.Hour * (-1)).Format(time.RFC3339),
		"start_time": time.Now().Add(time.Hour * (-12)).Format(time.RFC3339),
	}
	for k, v := range overrides {
		context[k] = v
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccChronicleRetrohunt_chronicleRetrohuntBasicExample(context),
			},
			{
				ResourceName:       "google_chronicle_retrohunt.example",
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
				ImportStateKind:    resource.ImportBlockWithResourceIdentity,
			},
		},
	})
}

func testAccChronicleRetrohunt_chronicleRetrohuntBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_chronicle_rule" "my-rule" {
 location = "us"
 instance = "%{chronicle_id}"
 deletion_policy = "FORCE"
 text = <<-EOT
             rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
         EOT
}

resource "google_chronicle_retrohunt" "example" {
 location = "us"
 instance = "%{chronicle_id}"
 rule = element(split("/", resource.google_chronicle_rule.my-rule.name), length(split("/", resource.google_chronicle_rule.my-rule.name)) - 1)
 process_interval {
    start_time = "%{start_time}"
    end_time = "%{end_time}"
 }
}
`, context)
}
