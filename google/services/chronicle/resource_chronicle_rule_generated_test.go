// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package chronicle_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccChronicleRule_chronicleRuleBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"chronicle_id":  envvar.GetTestChronicleInstanceIdFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckChronicleRuleDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccChronicleRule_chronicleRuleBasicExample(context),
			},
		},
	})
}

func testAccChronicleRule_chronicleRuleBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_chronicle_rule" "example" {
 location = "us"
 instance = "%{chronicle_id}"
 deletion_policy = "DEFAULT"
 text = <<-EOT
             rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
         EOT
}
`, context)
}

func TestAccChronicleRule_chronicleRuleWithForceDeletionExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"chronicle_id":  envvar.GetTestChronicleInstanceIdFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckChronicleRuleDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccChronicleRule_chronicleRuleWithForceDeletionExample(context),
			},
		},
	})
}

func testAccChronicleRule_chronicleRuleWithForceDeletionExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_chronicle_rule" "example" {
 location = "us"
 instance = "%{chronicle_id}"
 deletion_policy = "FORCE"
 text = <<-EOT
             rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
         EOT
}
`, context)
}

func TestAccChronicleRule_chronicleRuleWithDataAccessScopeExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"chronicle_id":  envvar.GetTestChronicleInstanceIdFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckChronicleRuleDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccChronicleRule_chronicleRuleWithDataAccessScopeExample(context),
			},
		},
	})
}

func testAccChronicleRule_chronicleRuleWithDataAccessScopeExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_chronicle_data_access_scope" "data_access_scope_test" {
 location = "us"
 instance = "%{chronicle_id}"
 data_access_scope_id = "tf-test-scope-name%{random_suffix}"
 description = "scope-description"
 allowed_data_access_labels {
   log_type = "GCP_CLOUDAUDIT"
 }
}

resource "google_chronicle_rule" "example" {
 location = "us"
 instance = "%{chronicle_id}"
 scope = resource.google_chronicle_data_access_scope.data_access_scope_test.name
 text = <<-EOT
             rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
         EOT
}
`, context)
}

func testAccCheckChronicleRuleDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_chronicle_rule" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ChronicleBasePath}}projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ChronicleRule still exists at %s", url)
			}
		}

		return nil
	}
}
