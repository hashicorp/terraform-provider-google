// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package datalossprevention

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceDataLossPreventionDiscoveryConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceDataLossPreventionDiscoveryConfigCreate,
		Read:   resourceDataLossPreventionDiscoveryConfigRead,
		Update: resourceDataLossPreventionDiscoveryConfigUpdate,
		Delete: resourceDataLossPreventionDiscoveryConfigDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDataLossPreventionDiscoveryConfigImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Location to create the discovery config in.`,
			},
			"parent": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The parent of the discovery config in any of the following formats:

* 'projects/{{project}}/locations/{{location}}'
* 'organizations/{{organization_id}}/locations/{{location}}'`,
			},
			"actions": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Actions to execute at the completion of scanning`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"export_data": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Export data profiles into a provided location`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"profile_table": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Store all table and column profiles in an existing table or a new table in an existing dataset. Each re-generation will result in a new row in BigQuery`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"dataset_id": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Dataset Id of the table`,
												},
												"project_id": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The Google Cloud Platform project ID of the project containing the table. If omitted, the project ID is inferred from the API call.`,
												},
												"table_id": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Name of the table`,
												},
											},
										},
									},
								},
							},
						},
						"pub_sub_notification": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Publish a message into the Pub/Sub topic.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"detail_of_message": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"TABLE_PROFILE", "RESOURCE_NAME", ""}),
										Description:  `How much data to include in the pub/sub message. Possible values: ["TABLE_PROFILE", "RESOURCE_NAME"]`,
									},
									"event": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"NEW_PROFILE", "CHANGED_PROFILE", "SCORE_INCREASED", "ERROR_CHANGED", ""}),
										Description:  `The type of event that triggers a Pub/Sub. At most one PubSubNotification per EventType is permitted. Possible values: ["NEW_PROFILE", "CHANGED_PROFILE", "SCORE_INCREASED", "ERROR_CHANGED"]`,
									},
									"pubsub_condition": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Conditions for triggering pubsub`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"expressions": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `An expression`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"conditions": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Conditions to apply to the expression`,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"minimum_risk_score": {
																			Type:         schema.TypeString,
																			Optional:     true,
																			ValidateFunc: verify.ValidateEnum([]string{"HIGH", "MEDIUM_OR_HIGH", ""}),
																			Description:  `The minimum data risk score that triggers the condition. Possible values: ["HIGH", "MEDIUM_OR_HIGH"]`,
																		},
																		"minimum_sensitivity_score": {
																			Type:         schema.TypeString,
																			Optional:     true,
																			ValidateFunc: verify.ValidateEnum([]string{"HIGH", "MEDIUM_OR_HIGH", ""}),
																			Description:  `The minimum sensitivity level that triggers the condition. Possible values: ["HIGH", "MEDIUM_OR_HIGH"]`,
																		},
																	},
																},
															},
															"logical_operator": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: verify.ValidateEnum([]string{"OR", "AND", ""}),
																Description:  `The operator to apply to the collection of conditions Possible values: ["OR", "AND"]`,
															},
														},
													},
												},
											},
										},
									},
									"topic": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.`,
									},
								},
							},
						},
					},
				},
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Display Name (max 1000 Chars)`,
			},
			"inspect_templates": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Detection logic for profile generation`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"org_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `A nested object resource`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"location": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The data to scan folder org or project`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"folder_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The ID for the folder within an organization to scan`,
									},
									"organization_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The ID of an organization to scan`,
									},
								},
							},
						},
						"project_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the cloud DLP API must be enabled.`,
						},
					},
				},
			},
			"status": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"RUNNING", "PAUSED", ""}),
				Description:  `Required. A status for this configuration Possible values: ["RUNNING", "PAUSED"]`,
			},
			"targets": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Target to match against for determining what to scan and how frequently`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"big_query_target": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `BigQuery target for Discovery. The first target to match a table will be the one applied.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"cadence": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `How often and when to update profiles. New tables that match both the fiter and conditions are scanned as quickly as possible depending on system capacity.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"schema_modified_cadence": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Governs when to update data profiles when a schema is modified`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"frequency": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: verify.ValidateEnum([]string{"UPDATE_FREQUENCY_NEVER", "UPDATE_FREQUENCY_DAILY", "UPDATE_FREQUENCY_MONTHLY", ""}),
																Description:  `How frequently profiles may be updated when schemas are modified. Default to monthly Possible values: ["UPDATE_FREQUENCY_NEVER", "UPDATE_FREQUENCY_DAILY", "UPDATE_FREQUENCY_MONTHLY"]`,
															},
															"types": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMN. Possible values: ["SCHEMA_NEW_COLUMNS", "SCHEMA_REMOVED_COLUMNS"]`,
																Elem: &schema.Schema{
																	Type:         schema.TypeString,
																	ValidateFunc: verify.ValidateEnum([]string{"SCHEMA_NEW_COLUMNS", "SCHEMA_REMOVED_COLUMNS"}),
																},
															},
														},
													},
												},
												"table_modified_cadence": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Governs when to update profile when a table is modified.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"frequency": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: verify.ValidateEnum([]string{"UPDATE_FREQUENCY_NEVER", "UPDATE_FREQUENCY_DAILY", "UPDATE_FREQUENCY_MONTHLY", ""}),
																Description:  `How frequently data profiles can be updated when tables are modified. Defaults to never. Possible values: ["UPDATE_FREQUENCY_NEVER", "UPDATE_FREQUENCY_DAILY", "UPDATE_FREQUENCY_MONTHLY"]`,
															},
															"types": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP Possible values: ["TABLE_MODIFIED_TIMESTAMP"]`,
																Elem: &schema.Schema{
																	Type:         schema.TypeString,
																	ValidateFunc: verify.ValidateEnum([]string{"TABLE_MODIFIED_TIMESTAMP"}),
																},
															},
														},
													},
												},
											},
										},
									},
									"conditions": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `In addition to matching the filter, these conditions must be true before a profile is generated`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"created_after": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `A timestamp in RFC3339 UTC "Zulu" format with nanosecond resolution and upto nine fractional digits.`,
												},
												"or_conditions": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `At least one of the conditions must be true for a table to be scanned.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"min_age": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Duration format. The minimum age a table must have before Cloud DLP can profile it. Value greater than 1.`,
															},
															"min_row_count": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Minimum number of rows that should be present before Cloud DLP profiles as a table.`,
															},
														},
													},
												},
												"type_collection": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"BIG_QUERY_COLLECTION_ALL_TYPES", "BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES", ""}),
													Description:  `Restrict discovery to categories of table types. Currently view, materialized view, snapshot and non-biglake external tables are supported. Possible values: ["BIG_QUERY_COLLECTION_ALL_TYPES", "BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES"]`,
												},
												"types": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Restrict discovery to specific table type`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"types": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `A set of BiqQuery table types Possible values: ["BIG_QUERY_TABLE_TYPE_TABLE", "BIG_QUERY_TABLE_TYPE_EXTERNAL_BIG_LAKE"]`,
																Elem: &schema.Schema{
																	Type:         schema.TypeString,
																	ValidateFunc: verify.ValidateEnum([]string{"BIG_QUERY_TABLE_TYPE_TABLE", "BIG_QUERY_TABLE_TYPE_EXTERNAL_BIG_LAKE"}),
																},
															},
														},
													},
												},
											},
										},
									},
									"disabled": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Tables that match this filter will not have profiles created.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
									},
									"filter": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Required. The tables the discovery cadence applies to. The first target with a matching filter will be the one to apply to a table`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"other_tables": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Catch-all. This should always be the last filter in the list because anything above it will apply first.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},
												"tables": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `A specific set of tables for this filter to apply to. A table collection must be specified in only one filter per config.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"include_regexes": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `A collection of regular expressions to match a BQ table against.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"patterns": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.`,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"dataset_id_regex": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `if unset, this property matches all datasets`,
																					},
																					"project_id_regex": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.`,
																					},
																					"table_id_regex": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `if unset, this property matches all tables`,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The creation timestamp of a DiscoveryConfig.`,
			},
			"errors": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Output only. A stream of errors encountered when the config was activated. Repeated errors may result in the config automatically being paused. Output only field. Will return the last 100 errors. Whenever the config is modified this list will be cleared.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"details": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Detailed error codes and messages.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"code": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: `The status code, which should be an enum value of google.rpc.Code.`,
									},
									"details": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `A list of messages that carry the error details.`,
										Elem: &schema.Schema{
											Type: schema.TypeMap,
										},
									},
									"message": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.`,
									},
								},
							},
						},
						"timestamp": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The times the error occurred. List includes the oldest timestamp and the last 9 timestamps.`,
						},
					},
				},
			},
			"last_run_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The timestamp of the last time this config was executed`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The last update timestamp of a DiscoveryConfig.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDataLossPreventionDiscoveryConfigCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandDataLossPreventionDiscoveryConfigDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	orgConfigProp, err := expandDataLossPreventionDiscoveryConfigOrgConfig(d.Get("org_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("org_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(orgConfigProp)) && (ok || !reflect.DeepEqual(v, orgConfigProp)) {
		obj["orgConfig"] = orgConfigProp
	}
	inspectTemplatesProp, err := expandDataLossPreventionDiscoveryConfigInspectTemplates(d.Get("inspect_templates"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("inspect_templates"); !tpgresource.IsEmptyValue(reflect.ValueOf(inspectTemplatesProp)) && (ok || !reflect.DeepEqual(v, inspectTemplatesProp)) {
		obj["inspectTemplates"] = inspectTemplatesProp
	}
	actionsProp, err := expandDataLossPreventionDiscoveryConfigActions(d.Get("actions"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("actions"); !tpgresource.IsEmptyValue(reflect.ValueOf(actionsProp)) && (ok || !reflect.DeepEqual(v, actionsProp)) {
		obj["actions"] = actionsProp
	}
	targetsProp, err := expandDataLossPreventionDiscoveryConfigTargets(d.Get("targets"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("targets"); !tpgresource.IsEmptyValue(reflect.ValueOf(targetsProp)) && (ok || !reflect.DeepEqual(v, targetsProp)) {
		obj["targets"] = targetsProp
	}
	statusProp, err := expandDataLossPreventionDiscoveryConfigStatus(d.Get("status"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("status"); !tpgresource.IsEmptyValue(reflect.ValueOf(statusProp)) && (ok || !reflect.DeepEqual(v, statusProp)) {
		obj["status"] = statusProp
	}

	obj, err = resourceDataLossPreventionDiscoveryConfigEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DataLossPreventionBasePath}}{{parent}}/discoveryConfigs")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new DiscoveryConfig: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating DiscoveryConfig: %s", err)
	}
	if err := d.Set("name", flattenDataLossPreventionDiscoveryConfigName(res["name"], d, config)); err != nil {
		return fmt.Errorf(`Error setting computed identity field "name": %s`, err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/discoveryConfigs/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating DiscoveryConfig %q: %#v", d.Id(), res)

	return resourceDataLossPreventionDiscoveryConfigRead(d, meta)
}

func resourceDataLossPreventionDiscoveryConfigRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DataLossPreventionBasePath}}{{parent}}/discoveryConfigs/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DataLossPreventionDiscoveryConfig %q", d.Id()))
	}

	res, err = resourceDataLossPreventionDiscoveryConfigDecoder(d, meta, res)
	if err != nil {
		return err
	}

	if res == nil {
		// Decoding the object has resulted in it being gone. It may be marked deleted
		log.Printf("[DEBUG] Removing DataLossPreventionDiscoveryConfig because it no longer exists.")
		d.SetId("")
		return nil
	}

	if err := d.Set("name", flattenDataLossPreventionDiscoveryConfigName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("display_name", flattenDataLossPreventionDiscoveryConfigDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("org_config", flattenDataLossPreventionDiscoveryConfigOrgConfig(res["orgConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("inspect_templates", flattenDataLossPreventionDiscoveryConfigInspectTemplates(res["inspectTemplates"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("actions", flattenDataLossPreventionDiscoveryConfigActions(res["actions"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("targets", flattenDataLossPreventionDiscoveryConfigTargets(res["targets"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("errors", flattenDataLossPreventionDiscoveryConfigErrors(res["errors"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("create_time", flattenDataLossPreventionDiscoveryConfigCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("update_time", flattenDataLossPreventionDiscoveryConfigUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("last_run_time", flattenDataLossPreventionDiscoveryConfigLastRunTime(res["lastRunTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}
	if err := d.Set("status", flattenDataLossPreventionDiscoveryConfigStatus(res["status"], d, config)); err != nil {
		return fmt.Errorf("Error reading DiscoveryConfig: %s", err)
	}

	return nil
}

func resourceDataLossPreventionDiscoveryConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	displayNameProp, err := expandDataLossPreventionDiscoveryConfigDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	orgConfigProp, err := expandDataLossPreventionDiscoveryConfigOrgConfig(d.Get("org_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("org_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, orgConfigProp)) {
		obj["orgConfig"] = orgConfigProp
	}
	inspectTemplatesProp, err := expandDataLossPreventionDiscoveryConfigInspectTemplates(d.Get("inspect_templates"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("inspect_templates"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, inspectTemplatesProp)) {
		obj["inspectTemplates"] = inspectTemplatesProp
	}
	actionsProp, err := expandDataLossPreventionDiscoveryConfigActions(d.Get("actions"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("actions"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, actionsProp)) {
		obj["actions"] = actionsProp
	}
	targetsProp, err := expandDataLossPreventionDiscoveryConfigTargets(d.Get("targets"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("targets"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, targetsProp)) {
		obj["targets"] = targetsProp
	}
	statusProp, err := expandDataLossPreventionDiscoveryConfigStatus(d.Get("status"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("status"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, statusProp)) {
		obj["status"] = statusProp
	}

	obj, err = resourceDataLossPreventionDiscoveryConfigUpdateEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DataLossPreventionBasePath}}{{parent}}/discoveryConfigs/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating DiscoveryConfig %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("org_config") {
		updateMask = append(updateMask, "orgConfig")
	}

	if d.HasChange("inspect_templates") {
		updateMask = append(updateMask, "inspectTemplates")
	}

	if d.HasChange("actions") {
		updateMask = append(updateMask, "actions")
	}

	if d.HasChange("targets") {
		updateMask = append(updateMask, "targets")
	}

	if d.HasChange("status") {
		updateMask = append(updateMask, "status")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating DiscoveryConfig %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating DiscoveryConfig %q: %#v", d.Id(), res)
		}

	}

	return resourceDataLossPreventionDiscoveryConfigRead(d, meta)
}

func resourceDataLossPreventionDiscoveryConfigDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{DataLossPreventionBasePath}}{{parent}}/discoveryConfigs/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting DiscoveryConfig %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "DiscoveryConfig")
	}

	log.Printf("[DEBUG] Finished deleting DiscoveryConfig %q: %#v", d.Id(), res)
	return nil
}

func resourceDataLossPreventionDiscoveryConfigImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	// Custom import to handle parent possibilities
	if err := tpgresource.ParseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
		return nil, err
	}
	parts := strings.Split(d.Get("name").(string), "/")
	if len(parts) == 6 {
		if err := d.Set("name", parts[5]); err != nil {
			return nil, fmt.Errorf("Error setting name: %s", err)
		}
	} else if len(parts) == 4 {
		if err := d.Set("name", parts[3]); err != nil {
			return nil, fmt.Errorf("Error setting name: %s", err)
		}
	} else {
		return nil, fmt.Errorf("Unexpected import id: %s, expected form {{parent}}/discoveryConfig/{{name}}", d.Get("name").(string))
	}
	// Remove "/discoveryConfig/{{name}}" from the id
	parts = parts[:len(parts)-2]
	if err := d.Set("parent", strings.Join(parts, "/")); err != nil {
		return nil, fmt.Errorf("Error setting parent: %s", err)
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/discoveryConfigs/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDataLossPreventionDiscoveryConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenDataLossPreventionDiscoveryConfigDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigOrgConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["project_id"] =
		flattenDataLossPreventionDiscoveryConfigOrgConfigProjectId(original["projectId"], d, config)
	transformed["location"] =
		flattenDataLossPreventionDiscoveryConfigOrgConfigLocation(original["location"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigOrgConfigProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigOrgConfigLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["organization_id"] =
		flattenDataLossPreventionDiscoveryConfigOrgConfigLocationOrganizationId(original["organizationId"], d, config)
	transformed["folder_id"] =
		flattenDataLossPreventionDiscoveryConfigOrgConfigLocationFolderId(original["folderId"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigOrgConfigLocationOrganizationId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigOrgConfigLocationFolderId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigInspectTemplates(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"export_data":          flattenDataLossPreventionDiscoveryConfigActionsExportData(original["exportData"], d, config),
			"pub_sub_notification": flattenDataLossPreventionDiscoveryConfigActionsPubSubNotification(original["pubSubNotification"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionDiscoveryConfigActionsExportData(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["profile_table"] =
		flattenDataLossPreventionDiscoveryConfigActionsExportDataProfileTable(original["profileTable"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigActionsExportDataProfileTable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["project_id"] =
		flattenDataLossPreventionDiscoveryConfigActionsExportDataProfileTableProjectId(original["projectId"], d, config)
	transformed["dataset_id"] =
		flattenDataLossPreventionDiscoveryConfigActionsExportDataProfileTableDatasetId(original["datasetId"], d, config)
	transformed["table_id"] =
		flattenDataLossPreventionDiscoveryConfigActionsExportDataProfileTableTableId(original["tableId"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigActionsExportDataProfileTableProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigActionsExportDataProfileTableDatasetId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigActionsExportDataProfileTableTableId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotification(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["topic"] =
		flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationTopic(original["topic"], d, config)
	transformed["event"] =
		flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationEvent(original["event"], d, config)
	transformed["pubsub_condition"] =
		flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubCondition(original["pubsubCondition"], d, config)
	transformed["detail_of_message"] =
		flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationDetailOfMessage(original["detailOfMessage"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationTopic(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationEvent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["expressions"] =
		flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressions(original["expressions"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["logical_operator"] =
		flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsLogicalOperator(original["logicalOperator"], d, config)
	transformed["conditions"] =
		flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditions(original["conditions"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsLogicalOperator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"minimum_risk_score":        flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumRiskScore(original["minimumRiskScore"], d, config),
			"minimum_sensitivity_score": flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumSensitivityScore(original["minimumSensitivityScore"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumRiskScore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumSensitivityScore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigActionsPubSubNotificationDetailOfMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargets(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"big_query_target": flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTarget(original["bigQueryTarget"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTarget(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["filter"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilter(original["filter"], d, config)
	transformed["conditions"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditions(original["conditions"], d, config)
	transformed["cadence"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadence(original["cadence"], d, config)
	transformed["disabled"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabled(original["disabled"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["tables"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTables(original["tables"], d, config)
	transformed["other_tables"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTables(original["otherTables"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTables(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["include_regexes"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexes(original["includeRegexes"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["patterns"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatterns(original["patterns"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatterns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"project_id_regex": flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsProjectIdRegex(original["projectIdRegex"], d, config),
			"dataset_id_regex": flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsDatasetIdRegex(original["datasetIdRegex"], d, config),
			"table_id_regex":   flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsTableIdRegex(original["tableIdRegex"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsProjectIdRegex(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsDatasetIdRegex(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsTableIdRegex(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTables(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["created_after"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsCreatedAfter(original["createdAfter"], d, config)
	transformed["or_conditions"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditions(original["orConditions"], d, config)
	transformed["types"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypes(original["types"], d, config)
	transformed["type_collection"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypeCollection(original["typeCollection"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsCreatedAfter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["min_age"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinAge(original["minAge"], d, config)
	transformed["min_row_count"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinRowCount(original["minRowCount"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinAge(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinRowCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["types"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesTypes(original["types"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypeCollection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadence(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["schema_modified_cadence"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadence(original["schemaModifiedCadence"], d, config)
	transformed["table_modified_cadence"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadence(original["tableModifiedCadence"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadence(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["types"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceTypes(original["types"], d, config)
	transformed["frequency"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceFrequency(original["frequency"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceFrequency(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadence(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["types"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceTypes(original["types"], d, config)
	transformed["frequency"] =
		flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceFrequency(original["frequency"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceFrequency(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDataLossPreventionDiscoveryConfigErrors(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"details":   flattenDataLossPreventionDiscoveryConfigErrorsDetails(original["details"], d, config),
			"timestamp": flattenDataLossPreventionDiscoveryConfigErrorsTimestamp(original["timestamp"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionDiscoveryConfigErrorsDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["code"] =
		flattenDataLossPreventionDiscoveryConfigErrorsDetailsCode(original["code"], d, config)
	transformed["message"] =
		flattenDataLossPreventionDiscoveryConfigErrorsDetailsMessage(original["message"], d, config)
	transformed["details"] =
		flattenDataLossPreventionDiscoveryConfigErrorsDetailsDetails(original["details"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionDiscoveryConfigErrorsDetailsCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDataLossPreventionDiscoveryConfigErrorsDetailsMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigErrorsDetailsDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigErrorsTimestamp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigLastRunTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionDiscoveryConfigStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDataLossPreventionDiscoveryConfigDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDataLossPreventionDiscoveryConfigOrgConfigProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedLocation, err := expandDataLossPreventionDiscoveryConfigOrgConfigLocation(original["location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["location"] = transformedLocation
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfigProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfigLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOrganizationId, err := expandDataLossPreventionDiscoveryConfigOrgConfigLocationOrganizationId(original["organization_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrganizationId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["organizationId"] = transformedOrganizationId
	}

	transformedFolderId, err := expandDataLossPreventionDiscoveryConfigOrgConfigLocationFolderId(original["folder_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFolderId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["folderId"] = transformedFolderId
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfigLocationOrganizationId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfigLocationFolderId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigInspectTemplates(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedExportData, err := expandDataLossPreventionDiscoveryConfigActionsExportData(original["export_data"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExportData); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["exportData"] = transformedExportData
		}

		transformedPubSubNotification, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotification(original["pub_sub_notification"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPubSubNotification); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["pubSubNotification"] = transformedPubSubNotification
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportData(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProfileTable, err := expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTable(original["profile_table"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProfileTable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["profileTable"] = transformedProfileTable
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedDatasetId, err := expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedTableId, err := expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableTableId(original["table_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tableId"] = transformedTableId
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableDatasetId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableTableId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotification(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedEvent, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationEvent(original["event"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEvent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["event"] = transformedEvent
	}

	transformedPubsubCondition, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubCondition(original["pubsub_condition"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPubsubCondition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pubsubCondition"] = transformedPubsubCondition
	}

	transformedDetailOfMessage, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationDetailOfMessage(original["detail_of_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDetailOfMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["detailOfMessage"] = transformedDetailOfMessage
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationEvent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubCondition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExpressions, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressions(original["expressions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExpressions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["expressions"] = transformedExpressions
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLogicalOperator, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsLogicalOperator(original["logical_operator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLogicalOperator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["logicalOperator"] = transformedLogicalOperator
	}

	transformedConditions, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditions(original["conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditions"] = transformedConditions
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsLogicalOperator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedMinimumRiskScore, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumRiskScore(original["minimum_risk_score"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMinimumRiskScore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["minimumRiskScore"] = transformedMinimumRiskScore
		}

		transformedMinimumSensitivityScore, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumSensitivityScore(original["minimum_sensitivity_score"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMinimumSensitivityScore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["minimumSensitivityScore"] = transformedMinimumSensitivityScore
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumRiskScore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumSensitivityScore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationDetailOfMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedBigQueryTarget, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTarget(original["big_query_target"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBigQueryTarget); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["bigQueryTarget"] = transformedBigQueryTarget
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTarget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilter, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilter(original["filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filter"] = transformedFilter
	}

	transformedConditions, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditions(original["conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditions"] = transformedConditions
	}

	transformedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadence(original["cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cadence"] = transformedCadence
	}

	transformedDisabled, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabled(original["disabled"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["disabled"] = transformedDisabled
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTables, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTables(original["tables"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTables); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tables"] = transformedTables
	}

	transformedOtherTables, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTables(original["other_tables"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["otherTables"] = transformedOtherTables
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTables(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIncludeRegexes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexes(original["include_regexes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludeRegexes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includeRegexes"] = transformedIncludeRegexes
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPatterns, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatterns(original["patterns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPatterns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["patterns"] = transformedPatterns
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatterns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedProjectIdRegex, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsProjectIdRegex(original["project_id_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedProjectIdRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["projectIdRegex"] = transformedProjectIdRegex
		}

		transformedDatasetIdRegex, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsDatasetIdRegex(original["dataset_id_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDatasetIdRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["datasetIdRegex"] = transformedDatasetIdRegex
		}

		transformedTableIdRegex, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsTableIdRegex(original["table_id_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTableIdRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tableIdRegex"] = transformedTableIdRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsProjectIdRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsDatasetIdRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsTableIdRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTables(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCreatedAfter, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsCreatedAfter(original["created_after"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCreatedAfter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["createdAfter"] = transformedCreatedAfter
	}

	transformedOrConditions, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditions(original["or_conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["orConditions"] = transformedOrConditions
	}

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	transformedTypeCollection, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypeCollection(original["type_collection"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypeCollection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["typeCollection"] = transformedTypeCollection
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsCreatedAfter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMinAge, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinAge(original["min_age"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinAge); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minAge"] = transformedMinAge
	}

	transformedMinRowCount, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinRowCount(original["min_row_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinRowCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minRowCount"] = transformedMinRowCount
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinAge(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinRowCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypeCollection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSchemaModifiedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadence(original["schema_modified_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSchemaModifiedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["schemaModifiedCadence"] = transformedSchemaModifiedCadence
	}

	transformedTableModifiedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadence(original["table_modified_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableModifiedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tableModifiedCadence"] = transformedTableModifiedCadence
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	transformedFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceFrequency(original["frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["frequency"] = transformedFrequency
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	transformedFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceFrequency(original["frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["frequency"] = transformedFrequency
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func resourceDataLossPreventionDiscoveryConfigEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	newObj := make(map[string]interface{})
	newObj["discoveryConfig"] = obj
	return newObj, nil
}

func resourceDataLossPreventionDiscoveryConfigUpdateEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	newObj := make(map[string]interface{})
	newObj["discoveryConfig"] = obj
	return newObj, nil
}

func resourceDataLossPreventionDiscoveryConfigDecoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}) (map[string]interface{}, error) {
	v, ok := res["discoveryConfig"]
	if !ok || v == nil {
		return res, nil
	}

	return v.(map[string]interface{}), nil
}
