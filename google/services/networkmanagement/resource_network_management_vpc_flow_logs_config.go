// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkmanagement

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func ResourceNetworkManagementVpcFlowLogsConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceNetworkManagementVpcFlowLogsConfigCreate,
		Read:   resourceNetworkManagementVpcFlowLogsConfigRead,
		Update: resourceNetworkManagementVpcFlowLogsConfigUpdate,
		Delete: resourceNetworkManagementVpcFlowLogsConfigDelete,

		Importer: &schema.ResourceImporter{
			State: resourceNetworkManagementVpcFlowLogsConfigImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"location": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `Resource ID segment making up resource 'name'. It identifies the resource
within its parent collection as described in https://google.aip.dev/122. See documentation
for resource type 'networkmanagement.googleapis.com/VpcFlowLogsConfig'.`,
			},
			"vpc_flow_logs_config_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Required. ID of the 'VpcFlowLogsConfig'.`,
			},
			"aggregation_interval": {
				Type:     schema.TypeString,
				Computed: true,
				Optional: true,
				Description: `Optional. The aggregation interval for the logs. Default value is
INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"`,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
of 512 characters.`,
			},
			"filter_expr": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Optional. Export filter used to define which VPC Flow Logs should be logged.`,
			},
			"flow_sampling": {
				Type:     schema.TypeFloat,
				Computed: true,
				Optional: true,
				Description: `Optional. The value of the field must be in (0, 1]. The sampling rate
of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
the state field instead. Default value is 1.0.`,
			},
			"interconnect_attachment": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Optional. Resource labels to represent user-provided metadata.


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"metadata": {
				Type:     schema.TypeString,
				Computed: true,
				Optional: true,
				Description: `Optional. Configures whether all, none or a subset of metadata fields
should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
  Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA`,
			},
			"metadata_fields": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Optional. Custom metadata fields to include in the reported VPC flow
logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"state": {
				Type:     schema.TypeString,
				Computed: true,
				Optional: true,
				Description: `Optional. The state of the VPC Flow Log configuration. Default value
is ENABLED. When creating a new configuration, it must be enabled.   Possible`,
			},
			"vpn_tunnel": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The time the config was created.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Identifier. Unique name of the configuration using the form:     'projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}'`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The time the config was updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceNetworkManagementVpcFlowLogsConfigCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkManagementVpcFlowLogsConfigDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	stateProp, err := expandNetworkManagementVpcFlowLogsConfigState(d.Get("state"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("state"); !tpgresource.IsEmptyValue(reflect.ValueOf(stateProp)) && (ok || !reflect.DeepEqual(v, stateProp)) {
		obj["state"] = stateProp
	}
	aggregationIntervalProp, err := expandNetworkManagementVpcFlowLogsConfigAggregationInterval(d.Get("aggregation_interval"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("aggregation_interval"); !tpgresource.IsEmptyValue(reflect.ValueOf(aggregationIntervalProp)) && (ok || !reflect.DeepEqual(v, aggregationIntervalProp)) {
		obj["aggregationInterval"] = aggregationIntervalProp
	}
	flowSamplingProp, err := expandNetworkManagementVpcFlowLogsConfigFlowSampling(d.Get("flow_sampling"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("flow_sampling"); !tpgresource.IsEmptyValue(reflect.ValueOf(flowSamplingProp)) && (ok || !reflect.DeepEqual(v, flowSamplingProp)) {
		obj["flowSampling"] = flowSamplingProp
	}
	metadataProp, err := expandNetworkManagementVpcFlowLogsConfigMetadata(d.Get("metadata"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(metadataProp)) && (ok || !reflect.DeepEqual(v, metadataProp)) {
		obj["metadata"] = metadataProp
	}
	metadataFieldsProp, err := expandNetworkManagementVpcFlowLogsConfigMetadataFields(d.Get("metadata_fields"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("metadata_fields"); !tpgresource.IsEmptyValue(reflect.ValueOf(metadataFieldsProp)) && (ok || !reflect.DeepEqual(v, metadataFieldsProp)) {
		obj["metadataFields"] = metadataFieldsProp
	}
	filterExprProp, err := expandNetworkManagementVpcFlowLogsConfigFilterExpr(d.Get("filter_expr"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_expr"); !tpgresource.IsEmptyValue(reflect.ValueOf(filterExprProp)) && (ok || !reflect.DeepEqual(v, filterExprProp)) {
		obj["filterExpr"] = filterExprProp
	}
	interconnectAttachmentProp, err := expandNetworkManagementVpcFlowLogsConfigInterconnectAttachment(d.Get("interconnect_attachment"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("interconnect_attachment"); !tpgresource.IsEmptyValue(reflect.ValueOf(interconnectAttachmentProp)) && (ok || !reflect.DeepEqual(v, interconnectAttachmentProp)) {
		obj["interconnectAttachment"] = interconnectAttachmentProp
	}
	vpnTunnelProp, err := expandNetworkManagementVpcFlowLogsConfigVpnTunnel(d.Get("vpn_tunnel"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("vpn_tunnel"); !tpgresource.IsEmptyValue(reflect.ValueOf(vpnTunnelProp)) && (ok || !reflect.DeepEqual(v, vpnTunnelProp)) {
		obj["vpnTunnel"] = vpnTunnelProp
	}
	labelsProp, err := expandNetworkManagementVpcFlowLogsConfigEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs?vpcFlowLogsConfigId={{vpc_flow_logs_config_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new VpcFlowLogsConfig: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for VpcFlowLogsConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating VpcFlowLogsConfig: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = NetworkManagementOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating VpcFlowLogsConfig", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create VpcFlowLogsConfig: %s", err)
	}

	if err := d.Set("name", flattenNetworkManagementVpcFlowLogsConfigName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating VpcFlowLogsConfig %q: %#v", d.Id(), res)

	return resourceNetworkManagementVpcFlowLogsConfigRead(d, meta)
}

func resourceNetworkManagementVpcFlowLogsConfigRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for VpcFlowLogsConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("NetworkManagementVpcFlowLogsConfig %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}

	if err := d.Set("name", flattenNetworkManagementVpcFlowLogsConfigName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("description", flattenNetworkManagementVpcFlowLogsConfigDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("state", flattenNetworkManagementVpcFlowLogsConfigState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("aggregation_interval", flattenNetworkManagementVpcFlowLogsConfigAggregationInterval(res["aggregationInterval"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("flow_sampling", flattenNetworkManagementVpcFlowLogsConfigFlowSampling(res["flowSampling"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("metadata", flattenNetworkManagementVpcFlowLogsConfigMetadata(res["metadata"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("metadata_fields", flattenNetworkManagementVpcFlowLogsConfigMetadataFields(res["metadataFields"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("filter_expr", flattenNetworkManagementVpcFlowLogsConfigFilterExpr(res["filterExpr"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("interconnect_attachment", flattenNetworkManagementVpcFlowLogsConfigInterconnectAttachment(res["interconnectAttachment"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("vpn_tunnel", flattenNetworkManagementVpcFlowLogsConfigVpnTunnel(res["vpnTunnel"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("labels", flattenNetworkManagementVpcFlowLogsConfigLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("create_time", flattenNetworkManagementVpcFlowLogsConfigCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("update_time", flattenNetworkManagementVpcFlowLogsConfigUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("terraform_labels", flattenNetworkManagementVpcFlowLogsConfigTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}
	if err := d.Set("effective_labels", flattenNetworkManagementVpcFlowLogsConfigEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading VpcFlowLogsConfig: %s", err)
	}

	return nil
}

func resourceNetworkManagementVpcFlowLogsConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for VpcFlowLogsConfig: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkManagementVpcFlowLogsConfigDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	stateProp, err := expandNetworkManagementVpcFlowLogsConfigState(d.Get("state"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("state"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, stateProp)) {
		obj["state"] = stateProp
	}
	aggregationIntervalProp, err := expandNetworkManagementVpcFlowLogsConfigAggregationInterval(d.Get("aggregation_interval"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("aggregation_interval"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, aggregationIntervalProp)) {
		obj["aggregationInterval"] = aggregationIntervalProp
	}
	flowSamplingProp, err := expandNetworkManagementVpcFlowLogsConfigFlowSampling(d.Get("flow_sampling"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("flow_sampling"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, flowSamplingProp)) {
		obj["flowSampling"] = flowSamplingProp
	}
	metadataProp, err := expandNetworkManagementVpcFlowLogsConfigMetadata(d.Get("metadata"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, metadataProp)) {
		obj["metadata"] = metadataProp
	}
	metadataFieldsProp, err := expandNetworkManagementVpcFlowLogsConfigMetadataFields(d.Get("metadata_fields"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("metadata_fields"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, metadataFieldsProp)) {
		obj["metadataFields"] = metadataFieldsProp
	}
	filterExprProp, err := expandNetworkManagementVpcFlowLogsConfigFilterExpr(d.Get("filter_expr"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_expr"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, filterExprProp)) {
		obj["filterExpr"] = filterExprProp
	}
	interconnectAttachmentProp, err := expandNetworkManagementVpcFlowLogsConfigInterconnectAttachment(d.Get("interconnect_attachment"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("interconnect_attachment"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, interconnectAttachmentProp)) {
		obj["interconnectAttachment"] = interconnectAttachmentProp
	}
	vpnTunnelProp, err := expandNetworkManagementVpcFlowLogsConfigVpnTunnel(d.Get("vpn_tunnel"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("vpn_tunnel"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, vpnTunnelProp)) {
		obj["vpnTunnel"] = vpnTunnelProp
	}
	labelsProp, err := expandNetworkManagementVpcFlowLogsConfigEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating VpcFlowLogsConfig %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("state") {
		updateMask = append(updateMask, "state")
	}

	if d.HasChange("aggregation_interval") {
		updateMask = append(updateMask, "aggregationInterval")
	}

	if d.HasChange("flow_sampling") {
		updateMask = append(updateMask, "flowSampling")
	}

	if d.HasChange("metadata") {
		updateMask = append(updateMask, "metadata")
	}

	if d.HasChange("metadata_fields") {
		updateMask = append(updateMask, "metadataFields")
	}

	if d.HasChange("filter_expr") {
		updateMask = append(updateMask, "filterExpr")
	}

	if d.HasChange("interconnect_attachment") {
		updateMask = append(updateMask, "interconnectAttachment")
	}

	if d.HasChange("vpn_tunnel") {
		updateMask = append(updateMask, "vpnTunnel")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating VpcFlowLogsConfig %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating VpcFlowLogsConfig %q: %#v", d.Id(), res)
		}

		err = NetworkManagementOperationWaitTime(
			config, res, project, "Updating VpcFlowLogsConfig", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceNetworkManagementVpcFlowLogsConfigRead(d, meta)
}

func resourceNetworkManagementVpcFlowLogsConfigDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for VpcFlowLogsConfig: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting VpcFlowLogsConfig %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "VpcFlowLogsConfig")
	}

	err = NetworkManagementOperationWaitTime(
		config, res, project, "Deleting VpcFlowLogsConfig", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting VpcFlowLogsConfig %q: %#v", d.Id(), res)
	return nil
}

func resourceNetworkManagementVpcFlowLogsConfigImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/vpcFlowLogsConfigs/(?P<vpc_flow_logs_config_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<vpc_flow_logs_config_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<vpc_flow_logs_config_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenNetworkManagementVpcFlowLogsConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigAggregationInterval(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigFlowSampling(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigMetadataFields(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigFilterExpr(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigInterconnectAttachment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigVpnTunnel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkManagementVpcFlowLogsConfigCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementVpcFlowLogsConfigTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkManagementVpcFlowLogsConfigEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandNetworkManagementVpcFlowLogsConfigDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementVpcFlowLogsConfigState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementVpcFlowLogsConfigAggregationInterval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementVpcFlowLogsConfigFlowSampling(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementVpcFlowLogsConfigMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementVpcFlowLogsConfigMetadataFields(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementVpcFlowLogsConfigFilterExpr(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementVpcFlowLogsConfigInterconnectAttachment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementVpcFlowLogsConfigVpnTunnel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementVpcFlowLogsConfigEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
