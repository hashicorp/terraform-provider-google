// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networkmanagement/ConnectivityTest.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package networkmanagement

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func ResourceNetworkManagementConnectivityTest() *schema.Resource {
	return &schema.Resource{
		Create: resourceNetworkManagementConnectivityTestCreate,
		Read:   resourceNetworkManagementConnectivityTestRead,
		Update: resourceNetworkManagementConnectivityTestUpdate,
		Delete: resourceNetworkManagementConnectivityTestDelete,

		Importer: &schema.ResourceImporter{
			State: resourceNetworkManagementConnectivityTestImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"destination": {
				Type:     schema.TypeList,
				Required: true,
				Description: `Required. Destination specification of the Connectivity Test.

You can use a combination of destination IP address, URI of a supported
endpoint, project ID, or VPC network to identify the destination location.

Reachability analysis proceeds even if the destination location is
ambiguous. However, the test result might include endpoints or use a
destination that you don't intend to test.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cloud_sql_instance": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A Cloud SQL instance URI.`,
						},
						"forwarding_rule": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Forwarding rule URI. Forwarding rules are frontends for load balancers,
PSC endpoints, and Protocol Forwarding.`,
						},
						"fqdn": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `A DNS endpoint of Google Kubernetes Engine cluster control plane.
Requires gke_master_cluster to be set, can't be used simultaneoulsly with
ip_address or network. Applicable only to destination endpoint.`,
						},
						"gke_master_cluster": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A cluster URI for Google Kubernetes Engine cluster control plane.`,
						},
						"instance": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A Compute Engine instance URI.`,
						},
						"ip_address": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The IP address of the endpoint, which can be an external or internal IP.`,
						},
						"network": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A VPC network URI.`,
						},
						"port": {
							Type:     schema.TypeInt,
							Optional: true,
							Description: `The IP protocol port of the endpoint. Only applicable when protocol is
TCP or UDP.`,
						},
						"project_id": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Project ID where the endpoint is located.
The project ID can be derived from the URI if you provide a endpoint or
network URI.
The following are two cases where you may need to provide the project ID:
1. Only the IP address is specified, and the IP address is within a Google
Cloud project.
2. When you are using Shared VPC and the IP address that you provide is
from the service project. In this case, the network that the IP address
resides in is defined in the host project.`,
						},
						"redis_cluster": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A Redis Cluster URI.`,
						},
						"redis_instance": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A Redis Instance URI.`,
						},
					},
				},
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Unique name for the connectivity test.`,
			},
			"source": {
				Type:     schema.TypeList,
				Required: true,
				Description: `Required. Source specification of the Connectivity Test.

You can use a combination of source IP address, URI of a supported
endpoint, project ID, or VPC network to identify the source location.

Reachability analysis might proceed even if the source location is
ambiguous. However, the test result might include endpoints or use a source
that you don't intend to test.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"app_engine_version": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `An App Engine service version.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"uri": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `An App Engine service version name.`,
									},
								},
							},
						},
						"cloud_function": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A Cloud Function.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"uri": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `A Cloud Function name.`,
									},
								},
							},
						},
						"cloud_run_revision": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A Cloud Run revision.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"uri": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `A Cloud Run revision URI.`,
									},
								},
							},
						},
						"cloud_sql_instance": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A Cloud SQL instance URI.`,
						},
						"gke_master_cluster": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A cluster URI for Google Kubernetes Engine cluster control plane.`,
						},
						"instance": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A Compute Engine instance URI.`,
						},
						"ip_address": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The IP address of the endpoint, which can be an external or internal IP.`,
						},
						"network": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A VPC network URI.`,
						},
						"network_type": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"GCP_NETWORK", "NON_GCP_NETWORK", ""}),
							Description:  `Type of the network where the endpoint is located. Possible values: ["GCP_NETWORK", "NON_GCP_NETWORK"]`,
						},
						"port": {
							Type:     schema.TypeInt,
							Optional: true,
							Description: `The IP protocol port of the endpoint. Only applicable when protocol is
TCP or UDP.`,
						},
						"project_id": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Project ID where the endpoint is located.
The project ID can be derived from the URI if you provide a endpoint or
network URI.
The following are two cases where you may need to provide the project ID:
1. Only the IP address is specified, and the IP address is within a Google
Cloud project.
2. When you are using Shared VPC and the IP address that you provide is
from the service project. In this case, the network that the IP address
resides in is defined in the host project.`,
						},
					},
				},
			},
			"bypass_firewall_checks": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Whether the analysis should skip firewall checking. Default value is false.`,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The user-supplied description of the Connectivity Test.
Maximum of 512 characters.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Resource labels to represent user-provided metadata.


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"protocol": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `IP Protocol of the test. When not provided, "TCP" is assumed.`,
				Default:     "TCP",
			},
			"related_projects": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Other projects that may be relevant for reachability analysis.
This is applicable to scenarios where a test can cross project
boundaries.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"round_trip": {
				Type:     schema.TypeBool,
				Optional: true,
				Description: `Whether run analysis for the return path from destination to source.
Default value is false.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceNetworkManagementConnectivityTestCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandNetworkManagementConnectivityTestName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	descriptionProp, err := expandNetworkManagementConnectivityTestDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	sourceProp, err := expandNetworkManagementConnectivityTestSource(d.Get("source"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("source"); !tpgresource.IsEmptyValue(reflect.ValueOf(sourceProp)) && (ok || !reflect.DeepEqual(v, sourceProp)) {
		obj["source"] = sourceProp
	}
	destinationProp, err := expandNetworkManagementConnectivityTestDestination(d.Get("destination"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("destination"); !tpgresource.IsEmptyValue(reflect.ValueOf(destinationProp)) && (ok || !reflect.DeepEqual(v, destinationProp)) {
		obj["destination"] = destinationProp
	}
	protocolProp, err := expandNetworkManagementConnectivityTestProtocol(d.Get("protocol"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("protocol"); !tpgresource.IsEmptyValue(reflect.ValueOf(protocolProp)) && (ok || !reflect.DeepEqual(v, protocolProp)) {
		obj["protocol"] = protocolProp
	}
	relatedProjectsProp, err := expandNetworkManagementConnectivityTestRelatedProjects(d.Get("related_projects"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("related_projects"); !tpgresource.IsEmptyValue(reflect.ValueOf(relatedProjectsProp)) && (ok || !reflect.DeepEqual(v, relatedProjectsProp)) {
		obj["relatedProjects"] = relatedProjectsProp
	}
	roundTripProp, err := expandNetworkManagementConnectivityTestRoundTrip(d.Get("round_trip"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("round_trip"); !tpgresource.IsEmptyValue(reflect.ValueOf(roundTripProp)) && (ok || !reflect.DeepEqual(v, roundTripProp)) {
		obj["roundTrip"] = roundTripProp
	}
	bypassFirewallChecksProp, err := expandNetworkManagementConnectivityTestBypassFirewallChecks(d.Get("bypass_firewall_checks"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("bypass_firewall_checks"); !tpgresource.IsEmptyValue(reflect.ValueOf(bypassFirewallChecksProp)) && (ok || !reflect.DeepEqual(v, bypassFirewallChecksProp)) {
		obj["bypassFirewallChecks"] = bypassFirewallChecksProp
	}
	labelsProp, err := expandNetworkManagementConnectivityTestEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/global/connectivityTests?testId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new ConnectivityTest: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectivityTest: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating ConnectivityTest: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/global/connectivityTests/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = NetworkManagementOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating ConnectivityTest", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create ConnectivityTest: %s", err)
	}

	if err := d.Set("name", flattenNetworkManagementConnectivityTestName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/global/connectivityTests/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating ConnectivityTest %q: %#v", d.Id(), res)

	return resourceNetworkManagementConnectivityTestRead(d, meta)
}

func resourceNetworkManagementConnectivityTestRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/global/connectivityTests/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectivityTest: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("NetworkManagementConnectivityTest %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}

	if err := d.Set("name", flattenNetworkManagementConnectivityTestName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("description", flattenNetworkManagementConnectivityTestDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("source", flattenNetworkManagementConnectivityTestSource(res["source"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("destination", flattenNetworkManagementConnectivityTestDestination(res["destination"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("protocol", flattenNetworkManagementConnectivityTestProtocol(res["protocol"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("related_projects", flattenNetworkManagementConnectivityTestRelatedProjects(res["relatedProjects"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("labels", flattenNetworkManagementConnectivityTestLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("round_trip", flattenNetworkManagementConnectivityTestRoundTrip(res["roundTrip"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("bypass_firewall_checks", flattenNetworkManagementConnectivityTestBypassFirewallChecks(res["bypassFirewallChecks"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("terraform_labels", flattenNetworkManagementConnectivityTestTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}
	if err := d.Set("effective_labels", flattenNetworkManagementConnectivityTestEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTest: %s", err)
	}

	return nil
}

func resourceNetworkManagementConnectivityTestUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectivityTest: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkManagementConnectivityTestDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	sourceProp, err := expandNetworkManagementConnectivityTestSource(d.Get("source"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("source"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, sourceProp)) {
		obj["source"] = sourceProp
	}
	destinationProp, err := expandNetworkManagementConnectivityTestDestination(d.Get("destination"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("destination"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, destinationProp)) {
		obj["destination"] = destinationProp
	}
	protocolProp, err := expandNetworkManagementConnectivityTestProtocol(d.Get("protocol"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("protocol"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, protocolProp)) {
		obj["protocol"] = protocolProp
	}
	relatedProjectsProp, err := expandNetworkManagementConnectivityTestRelatedProjects(d.Get("related_projects"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("related_projects"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, relatedProjectsProp)) {
		obj["relatedProjects"] = relatedProjectsProp
	}
	roundTripProp, err := expandNetworkManagementConnectivityTestRoundTrip(d.Get("round_trip"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("round_trip"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, roundTripProp)) {
		obj["roundTrip"] = roundTripProp
	}
	bypassFirewallChecksProp, err := expandNetworkManagementConnectivityTestBypassFirewallChecks(d.Get("bypass_firewall_checks"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("bypass_firewall_checks"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, bypassFirewallChecksProp)) {
		obj["bypassFirewallChecks"] = bypassFirewallChecksProp
	}
	labelsProp, err := expandNetworkManagementConnectivityTestEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/global/connectivityTests/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating ConnectivityTest %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("source") {
		updateMask = append(updateMask, "source.ipAddress",
			"source.port",
			"source.instance",
			"source.gkeMasterCluster",
			"source.cloudSqlInstance",
			"source.cloudFunction",
			"source.appEngineVersion",
			"source.cloudRunRevision",
			"source.network",
			"source.networkType",
			"source.projectId")
	}

	if d.HasChange("destination") {
		updateMask = append(updateMask, "destination.ipAddress",
			"destination.port",
			"destination.instance",
			"destination.forwardingRule",
			"destination.gkeMasterCluster",
			"destination.fqdn",
			"destination.cloudSqlInstance",
			"destination.redisInstance",
			"destination.redisCluster",
			"destination.network",
			"destination.projectId")
	}

	if d.HasChange("protocol") {
		updateMask = append(updateMask, "protocol")
	}

	if d.HasChange("related_projects") {
		updateMask = append(updateMask, "relatedProjects")
	}

	if d.HasChange("round_trip") {
		updateMask = append(updateMask, "roundTrip")
	}

	if d.HasChange("bypass_firewall_checks") {
		updateMask = append(updateMask, "bypassFirewallChecks")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating ConnectivityTest %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating ConnectivityTest %q: %#v", d.Id(), res)
		}

		err = NetworkManagementOperationWaitTime(
			config, res, project, "Updating ConnectivityTest", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceNetworkManagementConnectivityTestRead(d, meta)
}

func resourceNetworkManagementConnectivityTestDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectivityTest: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/global/connectivityTests/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting ConnectivityTest %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "ConnectivityTest")
	}

	err = NetworkManagementOperationWaitTime(
		config, res, project, "Deleting ConnectivityTest", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting ConnectivityTest %q: %#v", d.Id(), res)
	return nil
}

func resourceNetworkManagementConnectivityTestImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/global/connectivityTests/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/global/connectivityTests/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenNetworkManagementConnectivityTestName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenNetworkManagementConnectivityTestDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["ip_address"] =
		flattenNetworkManagementConnectivityTestSourceIpAddress(original["ipAddress"], d, config)
	transformed["port"] =
		flattenNetworkManagementConnectivityTestSourcePort(original["port"], d, config)
	transformed["instance"] =
		flattenNetworkManagementConnectivityTestSourceInstance(original["instance"], d, config)
	transformed["gke_master_cluster"] =
		flattenNetworkManagementConnectivityTestSourceGkeMasterCluster(original["gkeMasterCluster"], d, config)
	transformed["cloud_sql_instance"] =
		flattenNetworkManagementConnectivityTestSourceCloudSqlInstance(original["cloudSqlInstance"], d, config)
	transformed["cloud_function"] =
		flattenNetworkManagementConnectivityTestSourceCloudFunction(original["cloudFunction"], d, config)
	transformed["app_engine_version"] =
		flattenNetworkManagementConnectivityTestSourceAppEngineVersion(original["appEngineVersion"], d, config)
	transformed["cloud_run_revision"] =
		flattenNetworkManagementConnectivityTestSourceCloudRunRevision(original["cloudRunRevision"], d, config)
	transformed["network"] =
		flattenNetworkManagementConnectivityTestSourceNetwork(original["network"], d, config)
	transformed["network_type"] =
		flattenNetworkManagementConnectivityTestSourceNetworkType(original["networkType"], d, config)
	transformed["project_id"] =
		flattenNetworkManagementConnectivityTestSourceProjectId(original["projectId"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkManagementConnectivityTestSourceIpAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSourcePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkManagementConnectivityTestSourceInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSourceGkeMasterCluster(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSourceCloudSqlInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSourceCloudFunction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["uri"] =
		flattenNetworkManagementConnectivityTestSourceCloudFunctionUri(original["uri"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkManagementConnectivityTestSourceCloudFunctionUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSourceAppEngineVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["uri"] =
		flattenNetworkManagementConnectivityTestSourceAppEngineVersionUri(original["uri"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkManagementConnectivityTestSourceAppEngineVersionUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSourceCloudRunRevision(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["uri"] =
		flattenNetworkManagementConnectivityTestSourceCloudRunRevisionUri(original["uri"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkManagementConnectivityTestSourceCloudRunRevisionUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSourceNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSourceNetworkType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestSourceProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestination(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["ip_address"] =
		flattenNetworkManagementConnectivityTestDestinationIpAddress(original["ipAddress"], d, config)
	transformed["port"] =
		flattenNetworkManagementConnectivityTestDestinationPort(original["port"], d, config)
	transformed["instance"] =
		flattenNetworkManagementConnectivityTestDestinationInstance(original["instance"], d, config)
	transformed["forwarding_rule"] =
		flattenNetworkManagementConnectivityTestDestinationForwardingRule(original["forwardingRule"], d, config)
	transformed["gke_master_cluster"] =
		flattenNetworkManagementConnectivityTestDestinationGkeMasterCluster(original["gkeMasterCluster"], d, config)
	transformed["fqdn"] =
		flattenNetworkManagementConnectivityTestDestinationFqdn(original["fqdn"], d, config)
	transformed["cloud_sql_instance"] =
		flattenNetworkManagementConnectivityTestDestinationCloudSqlInstance(original["cloudSqlInstance"], d, config)
	transformed["redis_instance"] =
		flattenNetworkManagementConnectivityTestDestinationRedisInstance(original["redisInstance"], d, config)
	transformed["redis_cluster"] =
		flattenNetworkManagementConnectivityTestDestinationRedisCluster(original["redisCluster"], d, config)
	transformed["network"] =
		flattenNetworkManagementConnectivityTestDestinationNetwork(original["network"], d, config)
	transformed["project_id"] =
		flattenNetworkManagementConnectivityTestDestinationProjectId(original["projectId"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkManagementConnectivityTestDestinationIpAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestinationPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkManagementConnectivityTestDestinationInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestinationForwardingRule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestinationGkeMasterCluster(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestinationFqdn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestinationCloudSqlInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestinationRedisInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestinationRedisCluster(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestinationNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestDestinationProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestProtocol(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRelatedProjects(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkManagementConnectivityTestRoundTrip(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestBypassFirewallChecks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkManagementConnectivityTestEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandNetworkManagementConnectivityTestName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	// projects/X/tests/Y - note not "connectivityTests"
	f, err := tpgresource.ParseGlobalFieldValue("tests", v.(string), "project", d, config, true)
	if err != nil {
		return nil, fmt.Errorf("Invalid value for zone: %s", err)
	}
	return f.RelativeLink(), nil
}

func expandNetworkManagementConnectivityTestDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIpAddress, err := expandNetworkManagementConnectivityTestSourceIpAddress(original["ip_address"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIpAddress); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ipAddress"] = transformedIpAddress
	}

	transformedPort, err := expandNetworkManagementConnectivityTestSourcePort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedInstance, err := expandNetworkManagementConnectivityTestSourceInstance(original["instance"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInstance); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["instance"] = transformedInstance
	}

	transformedGkeMasterCluster, err := expandNetworkManagementConnectivityTestSourceGkeMasterCluster(original["gke_master_cluster"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGkeMasterCluster); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gkeMasterCluster"] = transformedGkeMasterCluster
	}

	transformedCloudSqlInstance, err := expandNetworkManagementConnectivityTestSourceCloudSqlInstance(original["cloud_sql_instance"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudSqlInstance); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudSqlInstance"] = transformedCloudSqlInstance
	}

	transformedCloudFunction, err := expandNetworkManagementConnectivityTestSourceCloudFunction(original["cloud_function"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudFunction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudFunction"] = transformedCloudFunction
	}

	transformedAppEngineVersion, err := expandNetworkManagementConnectivityTestSourceAppEngineVersion(original["app_engine_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAppEngineVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["appEngineVersion"] = transformedAppEngineVersion
	}

	transformedCloudRunRevision, err := expandNetworkManagementConnectivityTestSourceCloudRunRevision(original["cloud_run_revision"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudRunRevision); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudRunRevision"] = transformedCloudRunRevision
	}

	transformedNetwork, err := expandNetworkManagementConnectivityTestSourceNetwork(original["network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["network"] = transformedNetwork
	}

	transformedNetworkType, err := expandNetworkManagementConnectivityTestSourceNetworkType(original["network_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetworkType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["networkType"] = transformedNetworkType
	}

	transformedProjectId, err := expandNetworkManagementConnectivityTestSourceProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	return transformed, nil
}

func expandNetworkManagementConnectivityTestSourceIpAddress(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourcePort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourceInstance(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourceGkeMasterCluster(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourceCloudSqlInstance(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourceCloudFunction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandNetworkManagementConnectivityTestSourceCloudFunctionUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	return transformed, nil
}

func expandNetworkManagementConnectivityTestSourceCloudFunctionUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourceAppEngineVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandNetworkManagementConnectivityTestSourceAppEngineVersionUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	return transformed, nil
}

func expandNetworkManagementConnectivityTestSourceAppEngineVersionUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourceCloudRunRevision(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandNetworkManagementConnectivityTestSourceCloudRunRevisionUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	return transformed, nil
}

func expandNetworkManagementConnectivityTestSourceCloudRunRevisionUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourceNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourceNetworkType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestSourceProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestination(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIpAddress, err := expandNetworkManagementConnectivityTestDestinationIpAddress(original["ip_address"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIpAddress); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ipAddress"] = transformedIpAddress
	}

	transformedPort, err := expandNetworkManagementConnectivityTestDestinationPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedInstance, err := expandNetworkManagementConnectivityTestDestinationInstance(original["instance"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInstance); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["instance"] = transformedInstance
	}

	transformedForwardingRule, err := expandNetworkManagementConnectivityTestDestinationForwardingRule(original["forwarding_rule"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedForwardingRule); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["forwardingRule"] = transformedForwardingRule
	}

	transformedGkeMasterCluster, err := expandNetworkManagementConnectivityTestDestinationGkeMasterCluster(original["gke_master_cluster"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGkeMasterCluster); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gkeMasterCluster"] = transformedGkeMasterCluster
	}

	transformedFqdn, err := expandNetworkManagementConnectivityTestDestinationFqdn(original["fqdn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFqdn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["fqdn"] = transformedFqdn
	}

	transformedCloudSqlInstance, err := expandNetworkManagementConnectivityTestDestinationCloudSqlInstance(original["cloud_sql_instance"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudSqlInstance); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudSqlInstance"] = transformedCloudSqlInstance
	}

	transformedRedisInstance, err := expandNetworkManagementConnectivityTestDestinationRedisInstance(original["redis_instance"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRedisInstance); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["redisInstance"] = transformedRedisInstance
	}

	transformedRedisCluster, err := expandNetworkManagementConnectivityTestDestinationRedisCluster(original["redis_cluster"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRedisCluster); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["redisCluster"] = transformedRedisCluster
	}

	transformedNetwork, err := expandNetworkManagementConnectivityTestDestinationNetwork(original["network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["network"] = transformedNetwork
	}

	transformedProjectId, err := expandNetworkManagementConnectivityTestDestinationProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	return transformed, nil
}

func expandNetworkManagementConnectivityTestDestinationIpAddress(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationInstance(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationForwardingRule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationGkeMasterCluster(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationFqdn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationCloudSqlInstance(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationRedisInstance(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationRedisCluster(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestDestinationProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestProtocol(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestRelatedProjects(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestRoundTrip(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestBypassFirewallChecks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkManagementConnectivityTestEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
