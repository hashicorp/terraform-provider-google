// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/networkmanagement/data_source_network_management_connectivity_test_run_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package networkmanagement_test

import (
	"fmt"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccNetworkManagementConnectivityTestRun_basic(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkManagementConnectivityTestDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkManagementConnectivityTestRun_instanceToInstance(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestMatchResourceAttr("data.google_network_management_connectivity_test_run.conn-test",
						"reachability_details.0.result", regexp.MustCompile("REACHABLE")),
				),
			},
		},
	})
}

func testAccNetworkManagementConnectivityTestRun_instanceToInstance(context map[string]interface{}) string {
	connTestCfg := acctest.Nprintf(`
data "google_network_management_connectivity_test_run" "conn-test" {
  name = google_network_management_connectivity_test.conn-test.name
}

resource "google_network_management_connectivity_test" "conn-test" {
  name = "tf-test-conntest%{random_suffix}"
  source {
    instance = google_compute_instance.vm1.id
  }

  destination {
    instance = google_compute_instance.vm2.id
  }

  protocol = "TCP"
}
`, context)
	return fmt.Sprintf("%s\n\n%s\n\n", connTestCfg, testAccNetworkManagementConnectivityTestRun_baseResources(context))
}

func testAccNetworkManagementConnectivityTestRun_baseResources(context map[string]interface{}) string {
	return acctest.Nprintf(`

resource "google_compute_address" "addr" {
	name         = "tf-test-addr%{random_suffix}"
	subnetwork   = google_compute_subnetwork.subnet.id
	address_type = "INTERNAL"
	address      = "10.0.43.43"
	region       = "us-central1"
}

resource "google_compute_instance" "vm1" {
  	name = "tf-test-src-vm%{random_suffix}"
	machine_type = "e2-medium"
	boot_disk {
	  initialize_params {
	    image = data.google_compute_image.debian_11.id
	  }
	}	
	network_interface {
	  network = google_compute_network.vpc.id
	}
}

resource "google_compute_instance" "vm2" {
	name = "tf-test-vm-dest%{random_suffix}"
	machine_type = "e2-medium"
  
	boot_disk {
	  initialize_params {
		image = data.google_compute_image.debian_11.id
	  }
	}
  
	network_interface {
	  network = google_compute_network.vpc.id

	}
}

resource "google_compute_network" "vpc" {
	name = "tf-test-connnet%{random_suffix}"
}

resource "google_compute_subnetwork" "subnet" {
	name          = "tf-test-connet%{random_suffix}"
	ip_cidr_range = "10.0.0.0/16"
	region        = "us-central1"
	network       = google_compute_network.vpc.id
}	

data "google_compute_image" "debian_11" {
	family  = "debian-11"
	project = "debian-cloud"
}
`, context)
}
