// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/networkmanagement/data_source_network_management_connectivity_test_run.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package networkmanagement

import (
	"fmt"
	"log"
	"net/http"
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func DataSourceGoogleNetworkManagementTestRun() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceGoogleNetworkManagementTestRun,
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Unique name for the connectivity test.`,
			},
			"reachability_details": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Connectivity test reachability details.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"result": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Status of the connectivity test: RESULT_UNSPECIFIED, REACHABLE, UNREACHABLE, AMBIGUOUS or UNDETERMINED.`,
						},
						"traces": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `List of connectivity test traces.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"endpoint_info": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `Derived from the source and destination endpoints definition specified by user request, and validated by the data plane model.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"destination_ip": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `Destination IP address.`,
												},
												"destination_network_uri": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `URI of the network where this packet is sent to.`,
												},
												"destination_port": {
													Type:        schema.TypeInt,
													Computed:    true,
													Description: `Destination port. Only valid when protocol is TCP or UDP.`,
												},
												"protocol": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `IP protocol in string format, for example: "TCP", "UDP", "ICMP".`,
												},
												"source_agent_uri": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `URI of the source telemetry agent this packet originates from.`,
												},
												"source_ip": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `Source IP address.`,
												},
												"source_network_uri": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `URI of the network where this packet originates from.`,
												},
												"source_port": {
													Type:        schema.TypeInt,
													Computed:    true,
													Description: `Source port. Only valid when protocol is TCP or UDP.`,
												},
											},
										},
									},
									"forward_trace_id": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `ID of the trace.`,
									},
									"steps": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted).`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"causes_drop": {
													Type:        schema.TypeBool,
													Computed:    true,
													Description: `If this step leads to the final state Drop.`,
												},
												"description": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `Description of the connectivity test step.`,
												},
												"project_id": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `Project ID of the connectivity test step.`,
												},
												"state": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: `State of the connectivity test step.`,
												},
											},
										},
									},
								},
							},
						},
						"verify_time": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `Time when reachability details were determined. An RFC3339 timestamp in UTC time. 
This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.`,
						},
					},
				},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func dataSourceGoogleNetworkManagementTestRun(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandNetworkManagementConnectivityTestRunName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/global/connectivityTests/{{name}}:rerun")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Rerunning ConnectivityTestRun: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectivityTestRun: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error rerunning ConnectivityTestRun: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/global/connectivityTests/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = NetworkManagementOperationWaitTime(
		config, res, project, "Rerunning ConnectivityTestRun", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to rerun ConnectivityTestRun: %s", err)
	}

	log.Printf("[DEBUG] Finished rerunning ConnectivityTestRun %q: %#v", d.Id(), res)

	return dataSourceGoogleNetworkManagementTestRunRead(d, meta)
}

func dataSourceGoogleNetworkManagementTestRunRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkManagementBasePath}}projects/{{project}}/locations/global/connectivityTests/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConnectivityTestRun: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("NetworkManagementConnectivityTestRun %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading ConnectivityTestRun: %s", err)
	}

	if err := d.Set("name", flattenNetworkManagementConnectivityTestRunName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTestRun: %s", err)
	}
	if err := d.Set("reachability_details", flattenNetworkManagementConnectivityTestRunReachabilityDetails(res["reachabilityDetails"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConnectivityTestRun: %s", err)
	}

	return nil
}

func flattenNetworkManagementConnectivityTestRunName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.GetResourceNameFromSelfLink(v.(string))
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["result"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsResult(original["result"], d, config)
	transformed["verify_time"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsVerifyTime(original["verifyTime"], d, config)
	transformed["traces"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsTraces(original["traces"], d, config)
	return []interface{}{transformed}
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsResult(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsVerifyTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTraces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"endpoint_info":    flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfo(original["endpointInfo"], d, config),
			"steps":            flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesSteps(original["steps"], d, config),
			"forward_trace_id": flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesForwardTraceId(original["forwardTraceId"], d, config),
		})
	}
	return transformed
}
func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfo(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["source_ip"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoSourceIp(original["sourceIp"], d, config)
	transformed["destination_ip"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoDestinationIp(original["destinationIp"], d, config)
	transformed["protocol"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoProtocol(original["protocol"], d, config)
	transformed["source_port"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoSourcePort(original["sourcePort"], d, config)
	transformed["destination_port"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoDestinationPort(original["destinationPort"], d, config)
	transformed["source_network_uri"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoSourceNetworkUri(original["sourceNetworkUri"], d, config)
	transformed["destination_network_uri"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoDestinationNetworkUri(original["destinationNetworkUri"], d, config)
	transformed["source_agent_uri"] =
		flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoSourceAgentUri(original["sourceAgentUri"], d, config)
	return []interface{}{transformed}
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoSourceIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoDestinationIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoProtocol(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoSourcePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoDestinationPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoSourceNetworkUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoDestinationNetworkUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesEndpointInfoSourceAgentUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesSteps(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"description": flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesStepsDescription(original["description"], d, config),
			"state":       flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesStepsState(original["state"], d, config),
			"causes_drop": flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesStepsCausesDrop(original["causesDrop"], d, config),
			"project_id":  flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesStepsProjectId(original["projectId"], d, config),
		})
	}
	return transformed
}
func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesStepsDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesStepsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesStepsCausesDrop(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesStepsProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkManagementConnectivityTestRunReachabilityDetailsTracesForwardTraceId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func expandNetworkManagementConnectivityTestRunName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	f, err := tpgresource.ParseGlobalFieldValue("tests", v.(string), "project", d, config, true)
	if err != nil {
		return nil, fmt.Errorf("Invalid value for zone: %s", err)
	}
	return f.RelativeLink(), nil
}
