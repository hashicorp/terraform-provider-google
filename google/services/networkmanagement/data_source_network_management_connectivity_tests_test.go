// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/networkmanagement/data_source_network_management_connectivity_tests_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package networkmanagement_test

import (
	"errors"
	"fmt"
	"strconv"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccNetworkManagementConnectivityTests_basic(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckNetworkManagementConnectivityTestDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkManagementConnectivityTests_withoutFilter(context),
				Check: resource.ComposeTestCheckFunc(
					checkListDataSourceStateMatchesResourceStateWithIgnores(
						"data.google_network_management_connectivity_tests.conn-tests",
						"google_network_management_connectivity_test.conn-test-1",
						map[string]struct{}{
							"id":                 {},
							"project":            {},
							"terraform_labels.%": {},
							"terraform_labels.goog-terraform-provisioned": {},
						},
					),
				),
			},
			{
				Config: testAccNetworkManagementConnectivityTests_withFilter(context),
				Check: resource.ComposeTestCheckFunc(
					checkListDataSourceStateMatchesResourceStateWithIgnores(
						"data.google_network_management_connectivity_tests.conn-tests",
						"google_network_management_connectivity_test.conn-test-2",
						map[string]struct{}{
							"id":                 {},
							"project":            {},
							"terraform_labels.%": {},
							"terraform_labels.goog-terraform-provisioned": {},
						},
					),
				),
			},
		},
	})
}

func testAccNetworkManagementConnectivityTests_withoutFilter(context map[string]interface{}) string {
	connTestCfg := acctest.Nprintf(`
data "google_network_management_connectivity_tests" "conn-tests" {
  depends_on = [
  	google_network_management_connectivity_test.conn-test-1,
  	google_network_management_connectivity_test.conn-test-2
  ]
}


`, context)
	return fmt.Sprintf("%s\n\n%s\n\n", connTestCfg, testAccNetworkManagementConnectivityTests_baseResources(context))
}

func testAccNetworkManagementConnectivityTests_withFilter(context map[string]interface{}) string {
	connTestCfg := acctest.Nprintf(`
data "google_network_management_connectivity_tests" "conn-tests" {
  filter = "description:%{random_suffix}"
  depends_on = [
  	google_network_management_connectivity_test.conn-test-1,
  	google_network_management_connectivity_test.conn-test-2
  ]
}


`, context)
	return fmt.Sprintf("%s\n\n%s\n\n", connTestCfg, testAccNetworkManagementConnectivityTests_baseResources(context))
}

func testAccNetworkManagementConnectivityTests_baseResources(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_network_management_connectivity_test" "conn-test-1" {
  name = "tf-test-conntest%{random_suffix}"
  source {
      ip_address = google_compute_address.source-addr.address
      project_id = google_compute_address.source-addr.project
      network = google_compute_network.vpc.id
      network_type = "GCP_NETWORK"
  }

  destination {
      ip_address = google_compute_address.dest-addr.address
      project_id = google_compute_address.dest-addr.project
      network = google_compute_network.vpc.id
  }

  protocol = "UDP"
}

resource "google_network_management_connectivity_test" "conn-test-2" {
  name        = "tf-test-conntest-swap%{random_suffix}"
  description = "%{random_suffix}"
  source {
      ip_address = google_compute_address.dest-addr.address
      project_id = google_compute_address.dest-addr.project
      network = google_compute_network.vpc.id
      network_type = "GCP_NETWORK"
  }

  destination {
      ip_address = google_compute_address.source-addr.address
      project_id = google_compute_address.source-addr.project
      network = google_compute_network.vpc.id
  }

  protocol = "TCP"
}

resource "google_compute_network" "vpc" {
  name = "connectivity-vpc%{random_suffix}"
}

resource "google_compute_subnetwork" "subnet" {
  name          = "connectivity-vpc-subnet%{random_suffix}"
  ip_cidr_range = "10.0.0.0/16"
  region        = "us-central1"
  network       = google_compute_network.vpc.id
}

resource "google_compute_address" "source-addr" {
  name         = "src-addr%{random_suffix}"
  subnetwork   = google_compute_subnetwork.subnet.id
  address_type = "INTERNAL"
  address      = "10.0.42.42"
  region       = "us-central1"
}

resource "google_compute_address" "dest-addr" {
  name         = "dest-addr%{random_suffix}"
  subnetwork   = google_compute_subnetwork.subnet.id
  address_type = "INTERNAL"
  address      = "10.0.43.43"
  region       = "us-central1"
}`, context)
}

func checkListDataSourceStateMatchesResourceStateWithIgnores(dataSourceName, resourceName string, ignoreFields map[string]struct{}) func(*terraform.State) error {
	return func(s *terraform.State) error {
		ds, ok := s.RootModule().Resources[dataSourceName]
		if !ok {
			return fmt.Errorf("can't find %s in state", dataSourceName)
		}

		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("can't find %s in state", resourceName)
		}

		dsAttr := ds.Primary.Attributes
		rsAttr := rs.Primary.Attributes

		err := checkFieldsMatchForDataSourceStateAndResourceState(dsAttr, rsAttr, ignoreFields)
		if err != nil {
			return err
		}
		return nil
	}
}

func checkFieldsMatchForDataSourceStateAndResourceState(dsAttr, rsAttr map[string]string, ignoreFields map[string]struct{}) error {
	totalTests, err := strconv.Atoi(dsAttr["connectivity_tests.#"])
	if err != nil {
		return errors.New("Couldn't convert length of connectivity_tests list to integer")
	}
	index := "-1"
	for i := 0; i < totalTests; i++ {
		if dsAttr["connectivity_tests."+strconv.Itoa(i)+".name"] == rsAttr["name"] {
			index = strconv.Itoa(i)
			break
		}
	}

	if index == "-1" {
		return fmt.Errorf("The newly created connectivity test (%s) is not found in the data source", rsAttr["name"])
	}

	errMsg := ""
	// Data sources are often derived from resources, so iterate over the resource fields to
	// make sure all fields are accounted for in the data source.
	// If a field exists in the data source but not in the resource, its expected value should
	// be checked separately.
	for k := range rsAttr {
		if _, ok := ignoreFields[k]; ok {
			continue
		}
		if k == "%" {
			continue
		}
		if dsAttr["connectivity_tests."+index+"."+k] != rsAttr[k] {
			// ignore data sources where an empty list is being compared against a null list.
			if k[len(k)-1:] == "#" && (dsAttr["connectivity_tests."+index+"."+k] == "" || dsAttr["connectivity_tests."+index+"."+k] == "0") && (rsAttr[k] == "" || rsAttr[k] == "0") {
				continue
			}
			errMsg += fmt.Sprintf("%s is %s; want %s\n", k, dsAttr["connectivity_tests."+index+"."+k], rsAttr[k])
		}
	}

	if errMsg != "" {
		return errors.New(errMsg)
	}

	return nil
}

// This function checks state match for resourceName and asserts the absence of resourceName2 in data source
func checkListDataSourceStateMatchesResourceStateWithIgnoresForAppliedFilter(dataSourceName, resourceName, resourceName2 string, ignoreFields map[string]struct{}) func(*terraform.State) error {
	return func(s *terraform.State) error {
		ds, ok := s.RootModule().Resources[dataSourceName]
		if !ok {
			return fmt.Errorf("can't find %s in state", dataSourceName)
		}

		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("can't find %s in state", resourceName)
		}

		rs2, ok := s.RootModule().Resources[resourceName2]
		if !ok {
			return fmt.Errorf("can't find %s in state", resourceName2)
		}

		dsAttr := ds.Primary.Attributes
		rsAttr := rs.Primary.Attributes
		rsAttr2 := rs2.Primary.Attributes

		err := checkFieldsMatchForDataSourceStateAndResourceState(dsAttr, rsAttr, ignoreFields)
		if err != nil {
			return err
		}
		err = checkResourceAbsentInDataSourceAfterFilterApplied(dsAttr, rsAttr2)
		return err
	}
}

func checkResourceAbsentInDataSourceAfterFilterApplied(dsAttr, rsAttr map[string]string) error {
	totalTests, err := strconv.Atoi(dsAttr["connectivity_tests.#"])
	if err != nil {
		return errors.New("Couldn't convert length of connectivity tests list to integer")
	}
	for i := 0; i < totalTests; i++ {
		if dsAttr["connectivity_tests."+strconv.Itoa(i)+".name"] == rsAttr["name"] {
			return errors.New("The resource is present in the data source even after the filter is applied")
		}
	}
	return nil
}
