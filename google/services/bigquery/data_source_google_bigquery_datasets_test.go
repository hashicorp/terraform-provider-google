// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/services/bigquery/data_source_google_bigquery_datasets_test.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package bigquery_test

import (
	"fmt"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccDataSourceGoogleBigqueryDatasets_basic(t *testing.T) {
	t.Parallel()

	randomSuffix := acctest.RandString(t, 10)
	projectID := envvar.GetTestProjectFromEnv()

	expectedDatasetFoo := map[string]string{
		"dataset_id":                        fmt.Sprintf("tf_test_foo_%s", randomSuffix),
		"friendly_name":                     "Foo",
		"location":                          "US",
		"labels.%":                          "1",
		"labels.goog-terraform-provisioned": "true",
	}

	expectedDatasetBar := map[string]string{
		"dataset_id":                        fmt.Sprintf("tf_test_bar_%s", randomSuffix),
		"friendly_name":                     "bar",
		"location":                          "EU",
		"labels.%":                          "1",
		"labels.goog-terraform-provisioned": "true",
	}

	nonExpectedDataset := map[string]string{
		"dataset_id":                        "non_existent_dataset",
		"friendly_name":                     "I do not exist, and should throw an error",
		"location":                          "NON_EXIST",
		"labels.%":                          "8",
		"labels.goog-terraform-provisioned": "Nah",
	}

	context := map[string]interface{}{
		"random_suffix": randomSuffix,
		"project_id":    projectID,
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceGoogleBigqueryDatasets_basic(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckTypeSetElemNestedAttrs("data.google_bigquery_datasets.example", "datasets.*", expectedDatasetFoo),
					resource.TestCheckTypeSetElemNestedAttrs("data.google_bigquery_datasets.example", "datasets.*", expectedDatasetBar),
					// this check is intended to throw an error, see ExpectError below
					resource.TestCheckTypeSetElemNestedAttrs("data.google_bigquery_datasets.example", "datasets.*", nonExpectedDataset),
				),
				ExpectError: regexp.MustCompile(".*no TypeSet element \"datasets.*\", with nested attrs.*non_existent_dataset.*I do not exist, and should throw an error.*"),
			},
		},
	})
}

func testAccDataSourceGoogleBigqueryDatasets_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigquery_dataset" "foo" {
  dataset_id                  = "tf_test_foo_%{random_suffix}"
  friendly_name               = "Foo"
  description                 = "This is a test description"
  location                    = "US"
  default_table_expiration_ms = 3600000

  access {
    role          = "OWNER"
    user_by_email = google_service_account.bqowner.email
  }
}

resource "google_bigquery_dataset" "bar" {
  dataset_id                  = "tf_test_bar_%{random_suffix}"
  friendly_name               = "bar"
  description                 = "This is a test description"
  location                    = "EU"
  default_table_expiration_ms = 3600000

  access {
    role          = "OWNER"
    user_by_email = google_service_account.bqowner.email
  }
}

resource "google_service_account" "bqowner" {
  account_id = "tf-test-%{random_suffix}"
}

data "google_bigquery_datasets" "example" {
  project = "%{project_id}"
  depends_on = [
	google_bigquery_dataset.foo,
	google_bigquery_dataset.bar,
  ]
}
`, context)
}
