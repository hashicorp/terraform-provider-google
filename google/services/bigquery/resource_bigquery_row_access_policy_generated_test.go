// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package bigquery_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccBigQueryRowAccessPolicy_bigqueryRowAccessPolicyBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckBigQueryRowAccessPolicyDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBigQueryRowAccessPolicy_bigqueryRowAccessPolicyBasicExample(context),
			},
			{
				ResourceName:            "google_bigquery_row_access_policy.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"grantees"},
			},
		},
	})
}

func testAccBigQueryRowAccessPolicy_bigqueryRowAccessPolicyBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_bigquery_dataset" "example" {
  dataset_id = "tf_test_dataset_id%{random_suffix}"
  location = "US"
}

resource "google_bigquery_table" "example" {
  deletion_protection = false

  dataset_id = google_bigquery_dataset.example.dataset_id
  table_id   = "tf_test_table_id%{random_suffix}"
}

resource "google_bigquery_row_access_policy" "example" {
  dataset_id = google_bigquery_dataset.example.dataset_id
  table_id   = google_bigquery_table.example.table_id
  policy_id = "tf_test_policy_id%{random_suffix}"

  filter_predicate = "nullable_field is not NULL"
  grantees = [
    "domain:google.com"
  ]
}
`, context)
}

func testAccCheckBigQueryRowAccessPolicyDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_bigquery_row_access_policy" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{BigQueryBasePath}}projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}/rowAccessPolicies/{{policy_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("BigQueryRowAccessPolicy still exists at %s", url)
			}
		}

		return nil
	}
}
