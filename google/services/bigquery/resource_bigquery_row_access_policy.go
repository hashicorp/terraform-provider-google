// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/bigquery/RowAccessPolicy.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package bigquery

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"

	"google.golang.org/api/googleapi"
)

func ResourceBigQueryRowAccessPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceBigQueryRowAccessPolicyCreate,
		Read:   resourceBigQueryRowAccessPolicyRead,
		Update: resourceBigQueryRowAccessPolicyUpdate,
		Delete: resourceBigQueryRowAccessPolicyDelete,

		Importer: &schema.ResourceImporter{
			State: resourceBigQueryRowAccessPolicyImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"filter_predicate": {
				Type:     schema.TypeString,
				Required: true,
				Description: `A SQL boolean expression that represents the rows defined by this row
access policy, similar to the boolean expression in a WHERE clause of a
SELECT query on a table.
References to other tables, routines, and temporary functions are not
supported.

Examples: region="EU"
date_field = CAST('2019-9-27' as DATE)
nullable_field is not NULL
numeric_field BETWEEN 1.0 AND 5.0`,
			},
			"dataset_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the dataset containing this row access policy.`,
			},
			"policy_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The ID of the row access policy. The ID must contain only
letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum
length is 256 characters.`,
			},
			"table_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the table containing this row access policy.`,
			},

			"grantees": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Input only. The optional list of iam_member users or groups that specifies the initial
members that the row-level access policy should be created with.

grantees types:
- "user:alice@example.com": An email address that represents a specific
Google account.
- "serviceAccount:my-other-app@appspot.gserviceaccount.com": An email
address that represents a service account.
- "group:admins@example.com": An email address that represents a Google
group.
- "domain:example.com":The Google Workspace domain (primary) that
represents all the users of that domain.
- "allAuthenticatedUsers": A special identifier that represents all service
accounts and all users on the internet who have authenticated with a Google
Account. This identifier includes accounts that aren't connected to a
Google Workspace or Cloud Identity domain, such as personal Gmail accounts.
Users who aren't authenticated, such as anonymous visitors, aren't
included.
- "allUsers":A special identifier that represents anyone who is on
the internet, including authenticated and unauthenticated users. Because
BigQuery requires authentication before a user can access the service,
allUsers includes only authenticated users.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"creation_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The time when this row access policy was created, in milliseconds since
the epoch.`,
			},
			"last_modified_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The time when this row access policy was last modified, in milliseconds
since the epoch.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceBigQueryRowAccessPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	rowAccessPolicyReferenceProp, err := expandBigQueryRowAccessPolicyRowAccessPolicyReference(nil, d, config)
	if err != nil {
		return err
	} else if !tpgresource.IsEmptyValue(reflect.ValueOf(rowAccessPolicyReferenceProp)) {
		obj["rowAccessPolicyReference"] = rowAccessPolicyReferenceProp
	}
	filterPredicateProp, err := expandBigQueryRowAccessPolicyFilterPredicate(d.Get("filter_predicate"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_predicate"); !tpgresource.IsEmptyValue(reflect.ValueOf(filterPredicateProp)) && (ok || !reflect.DeepEqual(v, filterPredicateProp)) {
		obj["filterPredicate"] = filterPredicateProp
	}
	granteesProp, err := expandBigQueryRowAccessPolicyGrantees(d.Get("grantees"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("grantees"); !tpgresource.IsEmptyValue(reflect.ValueOf(granteesProp)) && (ok || !reflect.DeepEqual(v, granteesProp)) {
		obj["grantees"] = granteesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigQueryBasePath}}projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}/rowAccessPolicies")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new RowAccessPolicy: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RowAccessPolicy: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating RowAccessPolicy: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}/rowAccessPolicies/{{policy_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating RowAccessPolicy %q: %#v", d.Id(), res)

	return resourceBigQueryRowAccessPolicyRead(d, meta)
}

func resourceBigQueryRowAccessPolicyRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigQueryBasePath}}projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}/rowAccessPolicies/{{policy_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RowAccessPolicy: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("BigQueryRowAccessPolicy %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading RowAccessPolicy: %s", err)
	}

	// Terraform must set the top level schema field, but since this object contains collapsed properties
	// it's difficult to know what the top level should be. Instead we just loop over the map returned from flatten.
	if flattenedProp := flattenBigQueryRowAccessPolicyRowAccessPolicyReference(res["rowAccessPolicyReference"], d, config); flattenedProp != nil {
		if gerr, ok := flattenedProp.(*googleapi.Error); ok {
			return fmt.Errorf("Error reading RowAccessPolicy: %s", gerr)
		}
		casted := flattenedProp.([]interface{})[0]
		if casted != nil {
			for k, v := range casted.(map[string]interface{}) {
				if err := d.Set(k, v); err != nil {
					return fmt.Errorf("Error setting %s: %s", k, err)
				}
			}
		}
	}
	if err := d.Set("filter_predicate", flattenBigQueryRowAccessPolicyFilterPredicate(res["filterPredicate"], d, config)); err != nil {
		return fmt.Errorf("Error reading RowAccessPolicy: %s", err)
	}
	if err := d.Set("creation_time", flattenBigQueryRowAccessPolicyCreationTime(res["creationTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading RowAccessPolicy: %s", err)
	}
	if err := d.Set("last_modified_time", flattenBigQueryRowAccessPolicyLastModifiedTime(res["lastModifiedTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading RowAccessPolicy: %s", err)
	}

	return nil
}

func resourceBigQueryRowAccessPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RowAccessPolicy: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	rowAccessPolicyReferenceProp, err := expandBigQueryRowAccessPolicyRowAccessPolicyReference(nil, d, config)
	if err != nil {
		return err
	} else if !tpgresource.IsEmptyValue(reflect.ValueOf(rowAccessPolicyReferenceProp)) {
		obj["rowAccessPolicyReference"] = rowAccessPolicyReferenceProp
	}
	filterPredicateProp, err := expandBigQueryRowAccessPolicyFilterPredicate(d.Get("filter_predicate"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("filter_predicate"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, filterPredicateProp)) {
		obj["filterPredicate"] = filterPredicateProp
	}
	granteesProp, err := expandBigQueryRowAccessPolicyGrantees(d.Get("grantees"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("grantees"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, granteesProp)) {
		obj["grantees"] = granteesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigQueryBasePath}}projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}/rowAccessPolicies/{{policy_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating RowAccessPolicy %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PUT",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating RowAccessPolicy %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating RowAccessPolicy %q: %#v", d.Id(), res)
	}

	return resourceBigQueryRowAccessPolicyRead(d, meta)
}

func resourceBigQueryRowAccessPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RowAccessPolicy: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{BigQueryBasePath}}projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}/rowAccessPolicies/{{policy_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	// Always force-delete.
	obj = make(map[string]interface{})
	obj["force"] = true

	log.Printf("[DEBUG] Deleting RowAccessPolicy %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "RowAccessPolicy")
	}

	log.Printf("[DEBUG] Finished deleting RowAccessPolicy %q: %#v", d.Id(), res)
	return nil
}

func resourceBigQueryRowAccessPolicyImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/datasets/(?P<dataset_id>[^/]+)/tables/(?P<table_id>[^/]+)/rowAccessPolicies/(?P<policy_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<dataset_id>[^/]+)/(?P<table_id>[^/]+)/(?P<policy_id>[^/]+)$",
		"^(?P<dataset_id>[^/]+)/(?P<table_id>[^/]+)/(?P<policy_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}/rowAccessPolicies/{{policy_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenBigQueryRowAccessPolicyRowAccessPolicyReference(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["dataset_id"] =
		flattenBigQueryRowAccessPolicyRowAccessPolicyReferenceDatasetId(original["datasetId"], d, config)
	transformed["table_id"] =
		flattenBigQueryRowAccessPolicyRowAccessPolicyReferenceTableId(original["tableId"], d, config)
	transformed["policy_id"] =
		flattenBigQueryRowAccessPolicyRowAccessPolicyReferencePolicyId(original["policyId"], d, config)
	return []interface{}{transformed}
}
func flattenBigQueryRowAccessPolicyRowAccessPolicyReferenceDatasetId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigQueryRowAccessPolicyRowAccessPolicyReferenceTableId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigQueryRowAccessPolicyRowAccessPolicyReferencePolicyId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigQueryRowAccessPolicyFilterPredicate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigQueryRowAccessPolicyCreationTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigQueryRowAccessPolicyLastModifiedTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandBigQueryRowAccessPolicyRowAccessPolicyReference(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	transformed := make(map[string]interface{})

	project, _ := tpgresource.GetProject(d, config)
	transformed["projectId"] = project
	transformed["datasetId"] = d.Get("dataset_id")
	transformed["tableId"] = d.Get("table_id")
	transformed["policyId"] = d.Get("policy_id")

	return transformed, nil
}

func expandBigQueryRowAccessPolicyFilterPredicate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigQueryRowAccessPolicyGrantees(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
