// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceCloudDeployDeliveryPipeline() *schema.Resource {
	return &schema.Resource{
		Create: resourceCloudDeployDeliveryPipelineCreate,
		Read:   resourceCloudDeployDeliveryPipelineRead,
		Delete: resourceCloudDeployDeliveryPipelineDelete,

		Importer: &schema.ResourceImporter{
			State: resourceCloudDeployDeliveryPipelineImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"serial_pipeline": {
				Type:        schema.TypeList,
				Required:    true,
				ForceNew:    true,
				Description: `SerialPipeline defines a sequential set of stages for a DeliveryPipeline.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"stages": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `Stage specifies a location to which to deploy.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"target_id": {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
										Description: `The targetId to which this stage points. This field refers exclusively to the last segment of a target name.
For example, this field would just be my-target (rather than projects/project/locations/location/targets/my-target).
The location of the Target is inferred to be the same as the location of the DeliveryPipeline that contains this Stage.`,
									},
									"profiles": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Skaffold profiles to use when rendering the manifest for this stage's Target.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},
			"annotations": {
				Type:        schema.TypeMap,
				Optional:    true,
				ForceNew:    true,
				Description: `User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `Description of the DeliveryPipeline.`,
			},
			"labels": {
				Type:        schema.TypeMap,
				Optional:    true,
				ForceNew:    true,
				Description: `Resource labels to represent user-provided metadata.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `The name of the DeliveryPipeline. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.`,
			},
			"region": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `The region of the DeliveryPipeline Store. eg us-central1`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceCloudDeployDeliveryPipelineCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandCloudDeployDeliveryPipelineDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !isEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	labelsProp, err := expandCloudDeployDeliveryPipelineLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	annotationsProp, err := expandCloudDeployDeliveryPipelineAnnotations(d.Get("annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("annotations"); !isEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	serialPipelineProp, err := expandCloudDeployDeliveryPipelineSerialPipeline(d.Get("serial_pipeline"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("serial_pipeline"); !isEmptyValue(reflect.ValueOf(serialPipelineProp)) && (ok || !reflect.DeepEqual(v, serialPipelineProp)) {
		obj["serialPipeline"] = serialPipelineProp
	}

	url, err := replaceVars(d, config, "{{CloudDeployBasePath}}projects/{{project}}/locations/{{region}}/deliveryPipelines?deliveryPipelineId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new DeliveryPipeline: %#v", obj)
	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DeliveryPipeline: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating DeliveryPipeline: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "projects/{{project}}/locations/{{region}}/deliveryPipelines/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = cloudDeployOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating DeliveryPipeline", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create DeliveryPipeline: %s", err)
	}

	// This may have caused the ID to update - update it if so.
	id, err = replaceVars(d, config, "projects/{{project}}/locations/{{region}}/deliveryPipelines/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating DeliveryPipeline %q: %#v", d.Id(), res)

	return resourceCloudDeployDeliveryPipelineRead(d, meta)
}

func resourceCloudDeployDeliveryPipelineRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{CloudDeployBasePath}}projects/{{project}}/locations/{{region}}/deliveryPipelines/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DeliveryPipeline: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("CloudDeployDeliveryPipeline %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading DeliveryPipeline: %s", err)
	}

	if err := d.Set("description", flattenCloudDeployDeliveryPipelineDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeliveryPipeline: %s", err)
	}
	if err := d.Set("labels", flattenCloudDeployDeliveryPipelineLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeliveryPipeline: %s", err)
	}
	if err := d.Set("annotations", flattenCloudDeployDeliveryPipelineAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeliveryPipeline: %s", err)
	}
	if err := d.Set("serial_pipeline", flattenCloudDeployDeliveryPipelineSerialPipeline(res["serialPipeline"], d, config)); err != nil {
		return fmt.Errorf("Error reading DeliveryPipeline: %s", err)
	}

	return nil
}

func resourceCloudDeployDeliveryPipelineDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DeliveryPipeline: %s", err)
	}
	billingProject = project

	url, err := replaceVars(d, config, "{{CloudDeployBasePath}}projects/{{project}}/locations/{{region}}/deliveryPipelines/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting DeliveryPipeline %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "DELETE", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return handleNotFoundError(err, d, "DeliveryPipeline")
	}

	err = cloudDeployOperationWaitTime(
		config, res, project, "Deleting DeliveryPipeline", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting DeliveryPipeline %q: %#v", d.Id(), res)
	return nil
}

func resourceCloudDeployDeliveryPipelineImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*Config)
	if err := parseImportId([]string{
		"projects/(?P<project>[^/]+)/locations/(?P<region>[^/]+)/deliveryPipelines/(?P<name>[^/]+)",
		"(?P<project>[^/]+)/(?P<region>[^/]+)/(?P<name>[^/]+)",
		"(?P<region>[^/]+)/(?P<name>[^/]+)",
		"(?P<name>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := replaceVars(d, config, "projects/{{project}}/locations/{{region}}/deliveryPipelines/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenCloudDeployDeliveryPipelineDescription(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenCloudDeployDeliveryPipelineLabels(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenCloudDeployDeliveryPipelineAnnotations(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenCloudDeployDeliveryPipelineSerialPipeline(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["stages"] =
		flattenCloudDeployDeliveryPipelineSerialPipelineStages(original["stages"], d, config)
	return []interface{}{transformed}
}
func flattenCloudDeployDeliveryPipelineSerialPipelineStages(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"target_id": flattenCloudDeployDeliveryPipelineSerialPipelineStagesTargetId(original["targetId"], d, config),
			"profiles":  flattenCloudDeployDeliveryPipelineSerialPipelineStagesProfiles(original["profiles"], d, config),
		})
	}
	return transformed
}
func flattenCloudDeployDeliveryPipelineSerialPipelineStagesTargetId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenCloudDeployDeliveryPipelineSerialPipelineStagesProfiles(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func expandCloudDeployDeliveryPipelineDescription(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudDeployDeliveryPipelineLabels(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandCloudDeployDeliveryPipelineAnnotations(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandCloudDeployDeliveryPipelineSerialPipeline(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedStages, err := expandCloudDeployDeliveryPipelineSerialPipelineStages(original["stages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStages); val.IsValid() && !isEmptyValue(val) {
		transformed["stages"] = transformedStages
	}

	return transformed, nil
}

func expandCloudDeployDeliveryPipelineSerialPipelineStages(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedTargetId, err := expandCloudDeployDeliveryPipelineSerialPipelineStagesTargetId(original["target_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTargetId); val.IsValid() && !isEmptyValue(val) {
			transformed["targetId"] = transformedTargetId
		}

		transformedProfiles, err := expandCloudDeployDeliveryPipelineSerialPipelineStagesProfiles(original["profiles"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedProfiles); val.IsValid() && !isEmptyValue(val) {
			transformed["profiles"] = transformedProfiles
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudDeployDeliveryPipelineSerialPipelineStagesTargetId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudDeployDeliveryPipelineSerialPipelineStagesProfiles(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
