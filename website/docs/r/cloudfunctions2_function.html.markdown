---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Cloud Functions (2nd gen)"
layout: "google"
page_title: "Google: google_cloudfunctions2_function"
sidebar_current: "docs-google-cloudfunctions2-function"
description: |-
  A Cloud Function that contains user computation executed in response to an event.
---

# google\_cloudfunctions2\_function

A Cloud Function that contains user computation executed in response to an event.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.

To get more information about function, see:

* [API documentation](https://cloud.google.com/functions/docs/reference/rest/v2beta/projects.locations.functions)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=cloudfunctions2_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudfunctions2 Basic


```hcl
resource "google_storage_bucket" "bucket" {
  provider = google-beta
  name     = "cloudfunctions2-function-bucket"
  location = "US"
  uniform_bucket_level_access = true
}
 
resource "google_storage_bucket_object" "object" {
  provider = google-beta
  name   = "function-source.zip"
  bucket = google_storage_bucket.bucket.name
  source = "path/to/index.zip"
}
 
resource "google_cloudfunctions2_function" "terraform-test2" {
  provider = google-beta
  name = "test-function"
  location = "us-central1"
  description = "a new function"
 
  build_config {
    runtime = "nodejs12"
    entry_point = "helloHttp"
    source {
      storage_source {
        bucket = google_storage_bucket.bucket.name
        object = google_storage_bucket_object.object.name
      }
    }
  }
 
  service_config {
    max_instance_count  = 1
    available_memory    = "256M"
    timeout_seconds     = 60
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=cloudfunctions2_full&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudfunctions2 Full


```hcl
resource "google_pubsub_topic" "sub" {
  provider = google-beta
  name = "pubsub"
}

resource "google_storage_bucket" "bucket" {
  provider = google-beta
  name     = "cloudfunctions2-function-bucket"
  location = "US"
  uniform_bucket_level_access = true
}
 
resource "google_storage_bucket_object" "object" {
  provider = google-beta
  name   = "function-source.zip"
  bucket = google_storage_bucket.bucket.name
  source = "path/to/index.zip"
}
 
resource "google_cloudfunctions2_function" "terraform-test" {
  provider = google-beta
  name = "test-function"
  location = "us-central1"
  description = "a new function"
 
  build_config {
    runtime = "nodejs12"
    entry_point = "helloHttp"
    environment_variables = {
        BUILD_CONFIG_TEST = "build_test"
    }
    source {
      storage_source {
        bucket = google_storage_bucket.bucket.name
        object = google_storage_bucket_object.object.name
      }
    }
  }
 
  service_config {
    max_instance_count  = 3
    min_instance_count = 1
    available_memory    = "256M"
    timeout_seconds     = 60
    environment_variables = {
        SERVICE_CONFIG_TEST = "config_test"
    }
    ingress_settings = "ALLOW_INTERNAL_ONLY"
    all_traffic_on_latest_revision = true
  }

  event_trigger {
    trigger_region = "us-central1"
    event_type = "google.cloud.pubsub.topic.v1.messagePublished"
    pubsub_topic = google_pubsub_topic.sub.id
    retry_policy = "RETRY_POLICY_RETRY"
  }
}
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  A user-defined name of the function. Function names must
  be unique globally and match pattern `projects/*/locations/*/functions/*`.


- - -


* `description` -
  (Optional)
  User-provided description of a function.

* `build_config` -
  (Optional)
  Describes the Build step of the function that builds a container
  from the given source.
  Structure is [documented below](#nested_build_config).

* `service_config` -
  (Optional)
  Describes the Service being deployed.
  Structure is [documented below](#nested_service_config).

* `event_trigger` -
  (Optional)
  An Eventarc trigger managed by Google Cloud Functions that fires events in
  response to a condition in another service.
  Structure is [documented below](#nested_event_trigger).

* `labels` -
  (Optional)
  A set of key/value label pairs associated with this Cloud Function.

* `location` -
  (Optional)
  The location of this cloud function.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_build_config"></a>The `build_config` block supports:

* `build` -
  The Cloud Build name of the latest successful
  deployment of the function.

* `runtime` -
  (Optional)
  The runtime in which to run the function. Required when deploying a new
  function, optional when updating an existing function.

* `entry_point` -
  (Optional)
  The name of the function (as defined in source code) that will be executed.
  Defaults to the resource name suffix, if not specified. For backward
  compatibility, if function with given name is not found, then the system
  will try to use function named "function". For Node.js this is name of a
  function exported by the module specified in source_location.

* `source` -
  (Optional)
  The location of the function source code.
  Structure is [documented below](#nested_source).

* `worker_pool` -
  (Optional)
  Name of the Cloud Build Custom Worker Pool that should be used to build the function.

* `environment_variables` -
  (Optional)
  User-provided build-time environment variables for the function.

* `docker_repository` -
  (Optional)
  User managed repository created in Artifact Registry optionally with a customer managed encryption key.


<a name="nested_source"></a>The `source` block supports:

* `storage_source` -
  (Optional)
  If provided, get the source from this location in Google Cloud Storage.
  Structure is [documented below](#nested_storage_source).

* `repo_source` -
  (Optional)
  If provided, get the source from this location in a Cloud Source Repository.
  Structure is [documented below](#nested_repo_source).


<a name="nested_storage_source"></a>The `storage_source` block supports:

* `bucket` -
  (Optional)
  Google Cloud Storage bucket containing the source

* `object` -
  (Optional)
  Google Cloud Storage object containing the source.

* `generation` -
  (Optional)
  Google Cloud Storage generation for the object. If the generation 
  is omitted, the latest generation will be used.

<a name="nested_repo_source"></a>The `repo_source` block supports:

* `project_id` -
  (Optional)
  ID of the project that owns the Cloud Source Repository. If omitted, the 
  project ID requesting the build is assumed.

* `repo_name` -
  (Optional)
  Name of the Cloud Source Repository.

* `branch_name` -
  (Optional)
  Regex matching branches to build.

* `tag_name` -
  (Optional)
  Regex matching tags to build.

* `commit_sha` -
  (Optional)
  Regex matching tags to build.

* `dir` -
  (Optional)
  Directory, relative to the source root, in which to run the build.

* `invert_regex` -
  (Optional)
  Only trigger a build if the revision regex does 
  NOT match the revision regex.

<a name="nested_service_config"></a>The `service_config` block supports:

* `service` -
  (Optional)
  Name of the service associated with a Function.

* `timeout_seconds` -
  (Optional)
  The function execution timeout. Execution is considered failed and
  can be terminated if the function is not completed at the end of the
  timeout period. Defaults to 60 seconds.

* `available_memory` -
  (Optional)
  The amount of memory available for a function.
  Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
  supplied the value is interpreted as bytes.

* `environment_variables` -
  (Optional)
  Environment variables that shall be available during function execution.

* `max_instance_count` -
  (Optional)
  The limit on the maximum number of function instances that may coexist at a
  given time.

* `min_instance_count` -
  (Optional)
  The limit on the minimum number of function instances that may coexist at a
  given time.

* `vpc_connector` -
  (Optional)
  The Serverless VPC Access connector that this cloud function can connect to.

* `vpc_connector_egress_settings` -
  (Optional)
  Available egress settings.
  Possible values are `VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED`, `PRIVATE_RANGES_ONLY`, and `ALL_TRAFFIC`.

* `ingress_settings` -
  (Optional)
  Available ingress settings. Defaults to "ALLOW_ALL" if unspecified.
  Default value is `ALLOW_ALL`.
  Possible values are `ALLOW_ALL`, `ALLOW_INTERNAL_ONLY`, and `ALLOW_INTERNAL_AND_GCLB`.

* `uri` -
  URI of the Service deployed.

* `gcf_uri` -
  URIs of the Service deployed

* `service_account_email` -
  The email of the service account for this function.

* `all_traffic_on_latest_revision` -
  (Optional)
  Whether 100% of traffic is routed to the latest revision. Defaults to true.

<a name="nested_event_trigger"></a>The `event_trigger` block supports:

* `trigger` -
  The resource name of the Eventarc trigger.

* `trigger_region` -
  (Optional)
  The region that the trigger will be in. The trigger will only receive
  events originating in this region. It can be the same
  region as the function, a different region or multi-region, or the global
  region. If not provided, defaults to the same region as the function.

* `event_type` -
  (Optional)
  Required. The type of event to observe.

* `pubsub_topic` -
  (Optional)
  The name of a Pub/Sub topic in the same project that will be used
  as the transport topic for the event delivery.

* `service_account_email` -
  The email of the service account for this function.

* `retry_policy` -
  (Optional)
  Describes the retry policy in case of function's execution failure.
  Retried execution is charged as any other execution.
  Possible values are `RETRY_POLICY_UNSPECIFIED`, `RETRY_POLICY_DO_NOT_RETRY`, and `RETRY_POLICY_RETRY`.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/functions/{{name}}`

* `environment` -
  The environment the function is hosted on.

* `state` -
  Describes the current state of the function.

* `update_time` -
  The last update timestamp of a Cloud Function.


## Timeouts

This resource provides the following
[Timeouts](/docs/configuration/resources.html#timeouts) configuration options:

- `create` - Default is 60 minutes.
- `update` - Default is 60 minutes.
- `delete` - Default is 60 minutes.

## Import


function can be imported using any of these accepted formats:

```
$ terraform import google_cloudfunctions2_function.default projects/{{project}}/locations/{{location}}/functions/{{name}}
$ terraform import google_cloudfunctions2_function.default {{project}}/{{location}}/{{name}}
$ terraform import google_cloudfunctions2_function.default {{location}}/{{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://www.terraform.io/docs/providers/google/guides/provider_reference.html#user_project_override).
