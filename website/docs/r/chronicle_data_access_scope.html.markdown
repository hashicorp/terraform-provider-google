---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/chronicle/DataAccessScope.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Chronicle"
description: |-
  A DataAccessScope is a boolean expression of data access labels used to restrict access to data for users.
---

# google_chronicle_data_access_scope

A DataAccessScope is a boolean expression of data access labels used to restrict access to data for users.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.

To get more information about DataAccessScope, see:

* [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1alpha/projects.locations.instances.dataAccessScopes)
* How-to Guides
    * [Introduction to data RBAC](https://cloud.google.com/chronicle/docs/onboard/onboard-datarbac)

## Example Usage - Chronicle Dataaccessscope With Logtype


```hcl
resource "google_chronicle_data_access_scope" "example" {
  provider = "google-beta"
  location = "us"
  instance = "00000000-0000-0000-0000-000000000000"
  data_access_scope_id = "scope-id"
  description = "scope-description"
  allowed_data_access_labels {
    log_type = "GCP_CLOUDAUDIT"
  }
  allowed_data_access_labels {
    log_type = "GITHUB"
  }
}
```
## Example Usage - Chronicle Dataaccessscope With Dataaccesslabel


```hcl
resource "google_chronicle_data_access_label" "custom_data_access_label" {
  provider = "google-beta"
  location = "us"
  instance = "00000000-0000-0000-0000-000000000000"
  data_access_label_id = "label-id"
  udm_query = "principal.hostname=\"google.com\""
}

resource "google_chronicle_data_access_scope" "example" {
  provider = "google-beta"
  location = "us"
  instance = "00000000-0000-0000-0000-000000000000"
  data_access_scope_id = "scope-id"
  description = "scope-description"
  allowed_data_access_labels {
    data_access_label = resource.google_chronicle_data_access_label.custom_data_access_label.data_access_label_id
  }
}
```
## Example Usage - Chronicle Dataaccessscope With Asset Namespace


```hcl
resource "google_chronicle_data_access_scope" "example" {
  provider = "google-beta"
  location = "us"
  instance = "00000000-0000-0000-0000-000000000000"
  data_access_scope_id = "scope-id"
  description = "scope-description"
  allowed_data_access_labels {
    asset_namespace = "my-namespace"
  }
}
```
## Example Usage - Chronicle Dataaccessscope With Ingestion Label


```hcl
resource "google_chronicle_data_access_scope" "example" {
  provider = "google-beta"
  location = "us"
  instance = "00000000-0000-0000-0000-000000000000"
  data_access_scope_id = "scope-id"
  description = "scope-description"
  allowed_data_access_labels {
    ingestion_label {
	  ingestion_label_key = "ingestion_key"
      ingestion_label_value = "ingestion_value"
    }
  }
}
```
## Example Usage - Chronicle Dataaccessscope With Denied Labels


```hcl
resource "google_chronicle_data_access_label" "custom_data_access_label" {
  provider = "google-beta"
  location = "us"
  instance = "00000000-0000-0000-0000-000000000000"
  data_access_label_id = "label-id"
  udm_query = "principal.hostname=\"google.com\""
}

resource "google_chronicle_data_access_scope" "example" {
  provider = "google-beta"
  location = "us"
  instance = "00000000-0000-0000-0000-000000000000"
  data_access_scope_id = "scope-id"
  description = "scope-description"
  allow_all = true
  denied_data_access_labels {
    log_type = "GCP_CLOUDAUDIT"
  }
  denied_data_access_labels {
    data_access_label = resource.google_chronicle_data_access_label.custom_data_access_label.data_access_label_id
  }
  denied_data_access_labels {
    ingestion_label {
	    ingestion_label_key = "ingestion_key"
      ingestion_label_value = "ingestion_value"
    }
  }
  denied_data_access_labels {
    asset_namespace = "my-namespace"
  }
}
```

## Argument Reference

The following arguments are supported:


* `location` -
  (Required)
  The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".

* `instance` -
  (Required)
  The unique identifier for the Chronicle instance, which is the same as the customer ID.

* `data_access_scope_id` -
  (Required)
  Required. The user provided scope id which will become the last part of the name
  of the scope resource.
  Needs to be compliant with https://google.aip.dev/122


- - -


* `allowed_data_access_labels` -
  (Optional)
  The allowed labels for the scope. There has to be at
  least one label allowed for the scope to be valid.
  The logical operator for evaluation of the allowed labels is OR.
  Either allow_all or allowed_data_access_labels needs to be provided.
  E.g.: A customer with scope with allowed labels A and B will be able
  to see data with labeled with A or B or (A and B).
  Structure is [documented below](#nested_allowed_data_access_labels).

* `allow_all` -
  (Optional)
  Optional. Whether or not the scope allows all labels, allow_all and
  allowed_data_access_labels are mutually exclusive and one of them must be
  present. denied_data_access_labels can still be used along with allow_all.
  When combined with denied_data_access_labels, access will be granted to all
  data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
  A customer with scope with denied labels A and B and allow_all will be able
  to see all data except data labeled with A and data labeled with B and data
  with labels A and B.

* `denied_data_access_labels` -
  (Optional)
  Optional. The denied labels for the scope.
  The logical operator for evaluation of the denied labels is AND.
  E.g.: A customer with scope with denied labels A and B won't be able
  to see data labeled with A and data labeled with B
  and data with labels A and B.
  Structure is [documented below](#nested_denied_data_access_labels).

* `description` -
  (Optional)
  Optional. A description of the data access scope for a human reader.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_allowed_data_access_labels"></a>The `allowed_data_access_labels` block supports:

* `data_access_label` -
  (Optional)
  The name of the data access label.

* `log_type` -
  (Optional)
  The name of the log type.

* `asset_namespace` -
  (Optional)
  The asset namespace configured in the forwarder
  of the customer's events.

* `ingestion_label` -
  (Optional)
  Representation of an ingestion label type.
  Structure is [documented below](#nested_allowed_data_access_labels_allowed_data_access_labels_ingestion_label).

* `display_name` -
  (Output)
  Output only. The display name of the label.
  Data access label and log types's name
  will match the display name of the resource.
  The asset namespace will match the namespace itself.
  The ingestion key value pair will match the key of the tuple.


<a name="nested_allowed_data_access_labels_allowed_data_access_labels_ingestion_label"></a>The `ingestion_label` block supports:

* `ingestion_label_key` -
  (Required)
  Required. The key of the ingestion label. Always required.

* `ingestion_label_value` -
  (Optional)
  Optional. The value of the ingestion label. Optional. An object
  with no provided value and some key provided would match
  against the given key and ANY value.

<a name="nested_denied_data_access_labels"></a>The `denied_data_access_labels` block supports:

* `display_name` -
  (Output)
  Output only. The display name of the label.
  Data access label and log types's name
  will match the display name of the resource.
  The asset namespace will match the namespace itself.
  The ingestion key value pair will match the key of the tuple.

* `data_access_label` -
  (Optional)
  The name of the data access label.

* `log_type` -
  (Optional)
  The name of the log type.

* `asset_namespace` -
  (Optional)
  The asset namespace configured in the forwarder
  of the customer's events.

* `ingestion_label` -
  (Optional)
  Representation of an ingestion label type.
  Structure is [documented below](#nested_denied_data_access_labels_denied_data_access_labels_ingestion_label).


<a name="nested_denied_data_access_labels_denied_data_access_labels_ingestion_label"></a>The `ingestion_label` block supports:

* `ingestion_label_key` -
  (Required)
  Required. The key of the ingestion label. Always required.

* `ingestion_label_value` -
  (Optional)
  Optional. The value of the ingestion label. Optional. An object
  with no provided value and some key provided would match
  against the given key and ANY value.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessScopes/{{data_access_scope_id}}`

* `name` -
  The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
  Format:
  projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}

* `display_name` -
  Output only. The name to be used for display to customers of the data access scope.

* `create_time` -
  Output only. The time at which the data access scope was created.

* `author` -
  Output only. The user who created the data access scope.

* `last_editor` -
  Output only. The user who last updated the data access scope.

* `update_time` -
  Output only. The time at which the data access scope was last updated.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


DataAccessScope can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessScopes/{{data_access_scope_id}}`
* `{{project}}/{{location}}/{{instance}}/{{data_access_scope_id}}`
* `{{location}}/{{instance}}/{{data_access_scope_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataAccessScope using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessScopes/{{data_access_scope_id}}"
  to = google_chronicle_data_access_scope.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), DataAccessScope can be imported using one of the formats above. For example:

```
$ terraform import google_chronicle_data_access_scope.default projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessScopes/{{data_access_scope_id}}
$ terraform import google_chronicle_data_access_scope.default {{project}}/{{location}}/{{instance}}/{{data_access_scope_id}}
$ terraform import google_chronicle_data_access_scope.default {{location}}/{{instance}}/{{data_access_scope_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
