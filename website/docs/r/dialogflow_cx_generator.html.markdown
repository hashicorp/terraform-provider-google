---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dialogflowcx/Generator.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Dialogflow CX"
description: |-
  Generators contain prompt to be sent to the LLM model to generate text.
---

# google_dialogflow_cx_generator

Generators contain prompt to be sent to the LLM model to generate text. The prompt can contain parameters which will be resolved before calling the model. It can optionally contain banned phrases to ensure the model responses are safe.


To get more information about Generator, see:

* [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.generators)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=dialogflowcx_generator_basic&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Dialogflowcx Generator Basic


```hcl
resource "google_dialogflow_cx_agent" "agent" {
  display_name = "dialogflowcx-agent-fucntion"
  location = "global"
  default_language_code = "en"
  supported_language_codes = ["fr","de","es"]
  time_zone = "America/New_York"
  description = "Example description."
}

resource "google_dialogflow_cx_generator" "generator" {
  parent = google_dialogflow_cx_agent.agent.id
  language_code = "fr"
  display_name = "TF Prompt generator"
  llm_model_settings {
    model = "gemini-2.0-flash-001"
    prompt_text = "Return me some great results"
  }
  prompt_text {
    text = "Send me great results in french"
  }
  model_parameter {
    temperature = 0.55
  }
}
```

## Argument Reference

The following arguments are supported:


* `display_name` -
  (Required)
  The human-readable name of the generator, unique within the agent.

* `prompt_text` -
  (Required)
  Prompt for the LLM model.
  Structure is [documented below](#nested_prompt_text).


* `llm_model_settings` -
  (Optional)
  The LLM model settings.
  Structure is [documented below](#nested_llm_model_settings).

* `model_parameter` -
  (Optional)
  Parameters passed to the LLM to configure its behavior.
  Structure is [documented below](#nested_model_parameter).

* `placeholders` -
  (Optional)
  List of custom placeholders in the prompt text.
  Structure is [documented below](#nested_placeholders).

* `parent` -
  (Optional)
  The agent to create a Generator for.
  Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.

* `language_code` -
  (Optional)
  The language to create generators for the following fields:
  * Generator.prompt_text.text
  If not specified, the agent's default language is used.



<a name="nested_prompt_text"></a>The `prompt_text` block supports:

* `text` -
  (Optional)
  Text input which can be used for prompt or banned phrases.

<a name="nested_llm_model_settings"></a>The `llm_model_settings` block supports:

* `model` -
  (Optional)
  The selected LLM model.

* `prompt_text` -
  (Optional)
  The custom prompt to use.

<a name="nested_model_parameter"></a>The `model_parameter` block supports:

* `temperature` -
  (Optional)
  The temperature used for sampling. Temperature sampling occurs after both topP and topK have been applied.
  Valid range: [0.0, 1.0] Low temperature = less random. High temperature = more random.

* `max_decode_steps` -
  (Optional)
  The maximum number of tokens to generate.

* `top_p` -
  (Optional)
  If set, only the tokens comprising the top topP probability mass are considered.
  If both topP and topK are set, topP will be used for further refining candidates selected with topK.
  Valid range: (0.0, 1.0]. Small topP = less random. Large topP = more random.

* `top_k` -
  (Optional)
  If set, the sampling process in each step is limited to the topK tokens with highest probabilities.
  Valid range: [1, 40] or 1000+. Small topK = less random. Large topK = more random.

<a name="nested_placeholders"></a>The `placeholders` block supports:

* `id` -
  (Optional)
  Unique ID used to map custom placeholder to parameters in fulfillment.

* `name` -
  (Optional)
  Custom placeholder value in the prompt text.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `{{parent}}/generators/{{name}}`

* `name` -
  The unique identifier of the Generator.
  Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/generators/<Generator ID>.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 40 minutes.
- `update` - Default is 40 minutes.
- `delete` - Default is 20 minutes.

## Import


Generator can be imported using any of these accepted formats:

* `{{parent}}/generators/{{name}}`
* `{{parent}}/{{name}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Generator using one of the formats above. For example:

```tf
import {
  id = "{{parent}}/generators/{{name}}"
  to = google_dialogflow_cx_generator.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Generator can be imported using one of the formats above. For example:

```
$ terraform import google_dialogflow_cx_generator.default {{parent}}/generators/{{name}}
$ terraform import google_dialogflow_cx_generator.default {{parent}}/{{name}}
```
