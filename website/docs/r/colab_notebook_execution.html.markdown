---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Colab Enterprise"
description: |-
  'An instance of a notebook Execution'
---

# google_colab_notebook_execution

'An instance of a notebook Execution'


To get more information about NotebookExecution, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.notebookExecutionJobs)
* How-to Guides
    * [Schedule a notebook run](https://cloud.google.com/colab/docs/schedule-notebook-run)

## Example Usage - Colab Notebook Execution Basic


```hcl
resource "google_colab_runtime_template" "my_runtime_template" {
  name = "runtime-template-name"
  display_name = "Runtime template"
  location = "us-central1"

  machine_spec {
    machine_type     = "e2-standard-4"
  }

  network_spec {
    enable_internet_access = true
  }
}

resource "google_storage_bucket" "output_bucket" {
  name          = "my_bucket"
  location      = "US"
  force_destroy = true
  uniform_bucket_level_access = true
}

resource "google_colab_notebook_execution" "notebook-execution" {
  display_name = "Notebook execution basic"
  location = "us-central1"

  direct_notebook_source {
    content = base64encode(<<EOT
    {
      "cells": [
        {
          "cell_type": "code",
          "execution_count": null,
          "metadata": {},
          "outputs": [],
          "source": [
            "print(\"Hello, World!\")"
          ]
        }
      ],
      "metadata": {
        "kernelspec": {
          "display_name": "Python 3",
          "language": "python",
          "name": "python3"
        },
        "language_info": {
          "codemirror_mode": {
            "name": "ipython",
            "version": 3
          },
          "file_extension": ".py",
          "mimetype": "text/x-python",
          "name": "python",
          "nbconvert_exporter": "python",
          "pygments_lexer": "ipython3",
          "version": "3.8.5"
        }
      },
      "nbformat": 4,
      "nbformat_minor": 4
    }
    EOT
    )
  }
  
  notebook_runtime_template_resource_name = "projects/${google_colab_runtime_template.my_runtime_template.project}/locations/${google_colab_runtime_template.my_runtime_template.location}/notebookRuntimeTemplates/${google_colab_runtime_template.my_runtime_template.name}"
  
  gcs_output_uri = "gs://${google_storage_bucket.output_bucket.name}"
  
  service_account = "my@service-account.com"

  depends_on = [
    google_colab_runtime_template.my_runtime_template,
    google_storage_bucket.output_bucket,
  ]
  
}
```
## Example Usage - Colab Notebook Execution Full


```hcl
resource "google_colab_runtime_template" "my_runtime_template" {
  provider = google-beta
  name = "runtime-template-name"
  display_name = "Runtime template"
  location = "us-central1"

  machine_spec {
    machine_type     = "e2-standard-4"
  }

  network_spec {
    enable_internet_access = true
  }
}

resource "google_storage_bucket" "output_bucket" {
  provider = google-beta
  name          = "my_bucket"
  location      = "US"
  force_destroy = true
  uniform_bucket_level_access = true
}

resource "google_storage_bucket_object" "notebook" {
  provider = google-beta
  name   = "hello_world.ipynb"
  bucket = google_storage_bucket.output_bucket.name
  content = <<EOF
    {
      "cells": [
        {
          "cell_type": "code",
          "execution_count": null,
          "metadata": {},
          "outputs": [],
          "source": [
            "print(\"Hello, World!\")"
          ]
        }
      ],
      "metadata": {
        "kernelspec": {
          "display_name": "Python 3",
          "language": "python",
          "name": "python3"
        },
        "language_info": {
          "codemirror_mode": {
            "name": "ipython",
            "version": 3
          },
          "file_extension": ".py",
          "mimetype": "text/x-python",
          "name": "python",
          "nbconvert_exporter": "python",
          "pygments_lexer": "ipython3",
          "version": "3.8.5"
        }
      },
      "nbformat": 4,
      "nbformat_minor": 4
    }
    EOF
}

resource "google_colab_notebook_execution" "notebook-execution" {
  provider = google-beta
  notebook_execution_job_id = "colab-notebook-execution"
  display_name = "Notebook execution full"
  location = "us-central1"

  execution_timeout = "86400s"
  gcs_notebook_source {
  uri = "gs://${google_storage_bucket_object.notebook.bucket}/${google_storage_bucket_object.notebook.name}"
  generation = google_storage_bucket_object.notebook.generation
  }
  
  service_account = "my@service-account.com"

  gcs_output_uri = "gs://${google_storage_bucket.output_bucket.name}"
  notebook_runtime_template_resource_name = "projects/${google_colab_runtime_template.my_runtime_template.project}/locations/${google_colab_runtime_template.my_runtime_template.location}/notebookRuntimeTemplates/${google_colab_runtime_template.my_runtime_template.name}"

  depends_on = [
    google_storage_bucket_object.notebook,
    google_storage_bucket.output_bucket,
    google_colab_runtime_template.my_runtime_template,
  ]
  
}
```
## Example Usage - Colab Notebook Execution Dataform


```hcl
resource "google_colab_runtime_template" "my_runtime_template" {
  provider = google-beta
  name = "runtime-template-name"
  display_name = "Runtime template"
  location = "us-central1"

  machine_spec {
    machine_type     = "e2-standard-4"
  }

  network_spec {
    enable_internet_access = true
  }
}

resource "google_storage_bucket" "output_bucket" {
  provider = google-beta
  name          = "my_bucket"
  location      = "US"
  force_destroy = true
  uniform_bucket_level_access = true
}

resource "google_secret_manager_secret" "secret" {
  provider = google-beta
  secret_id = "secret"

  replication {
    auto {}
  }
}

resource "google_secret_manager_secret_version" "secret_version" {
  provider = google-beta
  secret = google_secret_manager_secret.secret.id

  secret_data = "secret-data"
}

resource "google_dataform_repository" "dataform_repository" {
  provider = google-beta
  name = "dataform-repository"
  display_name = "dataform_repository"
  npmrc_environment_variables_secret_version = google_secret_manager_secret_version.secret_version.id
  kms_key_name = "my-crypto-key"

  labels = {
    label_foo1 = "label-bar1"
  }

  git_remote_settings {
      url = "https://github.com/OWNER/REPOSITORY.git"
      default_branch = "main"
      authentication_token_secret_version = google_secret_manager_secret_version.secret_version.id
  }

  workspace_compilation_overrides {
    default_database = "database"
    schema_suffix = "_suffix"
    table_prefix = "prefix_"
  }

}

resource "google_colab_notebook_execution" "notebook-execution" {
  provider = google-beta
  display_name = "Notebook execution Dataform"
  location = "us-central1"

  dataform_repository_source {
  commit_sha = "randomsha123"
  dataform_repository_resource_name = "projects/${google_colab_runtime_template.my_runtime_template.project}/locations/${google_colab_runtime_template.my_runtime_template.location}/repositories/${google_dataform_repository.dataform_repository.name}"
  }
 
  notebook_runtime_template_resource_name = "projects/${google_colab_runtime_template.my_runtime_template.project}/locations/${google_colab_runtime_template.my_runtime_template.location}/notebookRuntimeTemplates/${google_colab_runtime_template.my_runtime_template.name}"
  
  gcs_output_uri = "gs://${google_storage_bucket.output_bucket.name}"
  
  service_account = "my@service-account.com"

  depends_on = [
    google_colab_runtime_template.my_runtime_template,
    google_storage_bucket.output_bucket,
    google_secret_manager_secret_version.secret_version,
    google_dataform_repository.dataform_repository,
    google_secret_manager_secret.secret,
  ]
  
}
```

## Argument Reference

The following arguments are supported:


* `display_name` -
  (Required)
  Required. The display name of the Notebook Execution.

* `gcs_output_uri` -
  (Required)
  The Cloud Storage location to upload the result to. Format:`gs://bucket-name`

* `location` -
  (Required)
  The location for the resource: https://cloud.google.com/colab/docs/locations


- - -


* `dataform_repository_source` -
  (Optional)
  The Dataform Repository containing the input notebook.
  Structure is [documented below](#nested_dataform_repository_source).

* `gcs_notebook_source` -
  (Optional)
  The Cloud Storage uri for the input notebook.
  Structure is [documented below](#nested_gcs_notebook_source).

* `direct_notebook_source` -
  (Optional)
  The content of the input notebook in ipynb format.
  Structure is [documented below](#nested_direct_notebook_source).

* `execution_timeout` -
  (Optional)
  Max running time of the execution job in seconds (default 86400s / 24 hrs).

* `notebook_runtime_template_resource_name` -
  (Optional)
  The NotebookRuntimeTemplate to source compute configuration from.

* `execution_user` -
  (Optional)
  The user email to run the execution as.

* `service_account` -
  (Optional)
  The service account to run the execution as.

* `notebook_execution_job_id` -
  (Optional)
  User specified ID for the Notebook Execution Job

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_dataform_repository_source"></a>The `dataform_repository_source` block supports:

* `dataform_repository_resource_name` -
  (Required)
  The resource name of the Dataform Repository.

* `commit_sha` -
  (Optional)
  The commit SHA to read repository with. If unset, the file will be read at HEAD.

<a name="nested_gcs_notebook_source"></a>The `gcs_notebook_source` block supports:

* `uri` -
  (Required)
  The Cloud Storage uri pointing to the ipynb file.

* `generation` -
  (Optional)
  The version of the Cloud Storage object to read. If unset, the current version of the object is read. See https://cloud.google.com/storage/docs/metadata#generation-number.

<a name="nested_direct_notebook_source"></a>The `direct_notebook_source` block supports:

* `content` -
  (Required)
  The base64-encoded contents of the input notebook file.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}`


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


NotebookExecution can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}`
* `{{project}}/{{location}}/{{notebook_execution_job_id}}`
* `{{location}}/{{notebook_execution_job_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import NotebookExecution using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}"
  to = google_colab_notebook_execution.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), NotebookExecution can be imported using one of the formats above. For example:

```
$ terraform import google_colab_notebook_execution.default projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}
$ terraform import google_colab_notebook_execution.default {{project}}/{{location}}/{{notebook_execution_job_id}}
$ terraform import google_colab_notebook_execution.default {{location}}/{{notebook_execution_job_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
