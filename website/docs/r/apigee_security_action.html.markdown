---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apigee/SecurityAction.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Apigee"
description: |-
  A SecurityAction is rule that can be enforced at an environment level.
---

# google_apigee_security_action

A SecurityAction is rule that can be enforced at an environment level.
The result is one of: - A denied API call - An explicitly allowed API call
- A flagged API call (HTTP headers added before the target receives it)
At least one condition is required to create a SecurityAction.


To get more information about SecurityAction, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.securityActions/create)
* How-to Guides
    * [Creating security actions](https://cloud.google.com/apigee/docs/api-security/security-actions-api#create-security-actions)

## Example Usage - Apigee Security Action Basic


```hcl
data "google_client_config" "current" {}

resource "google_compute_network" "apigee_network" {
    name = "my-network"
}

resource "google_compute_global_address" "apigee_range" {
    name          ="my-address"
    purpose       = "VPC_PEERING"
    address_type  = "INTERNAL"
    prefix_length = 16
    network       = google_compute_network.apigee_network.id
}

resource "google_service_networking_connection" "apigee_vpc_connection" {
    network                 = google_compute_network.apigee_network.id
    service                 = "servicenetworking.googleapis.com"
    reserved_peering_ranges = [google_compute_global_address.apigee_range.name]
}

resource "google_apigee_organization" "apigee_org" {
    analytics_region   = "us-central1"
    project_id         = data.google_client_config.current.project
    authorized_network = google_compute_network.apigee_network.id
    depends_on         = [google_service_networking_connection.apigee_vpc_connection]
}

resource "google_apigee_environment" "env" {
    name         = "my-environment"
    description  = "Apigee Environment"
    display_name = "environment-1"
    org_id       = google_apigee_organization.apigee_org.id
}

resource "google_apigee_addons_config" "apigee_org_security_addons_config" {
    org = google_apigee_organization.apigee_org.name
    addons_config {
        api_security_config {
            enabled = true
        }
    }
}

resource "google_apigee_security_action" "apigee_security_action" {
    security_action_id = "my-security-action"
    org_id             = google_apigee_organization.apigee_org.name
    env_id             = google_apigee_environment.env.name
    description        = "Apigee Security Action"
    state              = "ENABLED"

    condition_config {
        ip_address_ranges = [
            "100.0.220.1",
            "200.0.0.1",
        ]

        bot_reasons = [
            "Flooder",
            "Public Cloud Azure",
            "Public Cloud AWS",
        ]
    }

    allow {}

    expire_time = "2025-12-31T23:59:59Z"
    depends_on  = [
        google_apigee_addons_config.apigee_org_security_addons_config
    ]
}
```

## Argument Reference

The following arguments are supported:


* `state` -
  (Required)
  Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
  Possible values are: `ENABLED`, `DISABLED`.

* `condition_config` -
  (Required)
  A valid SecurityAction must contain at least one condition.
  Structure is [documented below](#nested_condition_config).

* `org_id` -
  (Required)
  The organization that this security action applies to.

* `env_id` -
  (Required)
  The Apigee environment that this security action applies to.

* `security_action_id` -
  (Required)
  The ID to use for the SecurityAction, which will become the final component of the action's resource name.
  This value should be 0-61 characters, and valid format is (^a-z?$).


* `description` -
  (Optional)
  An optional user provided description of the SecurityAction.

* `api_proxies` -
  (Optional)
  If unset, this would apply to all proxies in the environment.
  If set, this action is enforced only if at least one proxy in the repeated
  list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
  There can be at most 100 enabled actions with proxies set in an env.
  Several other restrictions apply on conditions and are detailed later.

* `allow` -
  (Optional)
  Allow a request through if it matches this SecurityAction.

* `deny` -
  (Optional)
  Deny a request through if it matches this SecurityAction.
  Structure is [documented below](#nested_deny).

* `flag` -
  (Optional)
  Flag a request through if it matches this SecurityAction.
  Structure is [documented below](#nested_flag).

* `expire_time` -
  (Optional)
  The expiration for this SecurityAction.
  Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
  fractional digits. Offsets other than "Z" are also accepted.
  Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".

* `ttl` -
  (Optional)
  The TTL for this SecurityAction.
  A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".



<a name="nested_condition_config"></a>The `condition_config` block supports:

* `ip_address_ranges` -
  (Optional)
  A list of IP addresses. This could be either IPv4 or IPv6. Limited to 100 per action.

* `bot_reasons` -
  (Optional)
  A list of Bot Reasons. Current options: Flooder, Brute Guessor, Static Content Scraper,
  OAuth Abuser, Robot Abuser, TorListRule, Advanced Anomaly Detection, Advanced API Scraper,
  Search Engine Crawlers, Public Clouds, Public Cloud AWS, Public Cloud Azure, and Public Cloud Google.

* `http_methods` -
  (Optional)
  Act only on particular HTTP methods. E.g. A read-only API can block POST/PUT/DELETE methods.
  Accepted values are: GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE and PATCH.

* `api_keys` -
  (Optional)
  A list of API keys. Limit 1000 per action.

* `access_tokens` -
  (Optional)
  A list of accessTokens. Limit 1000 per action.

* `api_products` -
  (Optional)
  A list of API Products. Limit 1000 per action.

* `developer_apps` -
  (Optional)
  A list of developer apps. Limit 1000 per action.

* `developers` -
  (Optional)
  A list of developers. Limit 1000 per action.

* `user_agents` -
  (Optional)
  A list of user agents to deny. We look for exact matches. Limit 50 per action.

* `region_codes` -
  (Optional)
  A list of countries/region codes to act on, e.g. US. This follows https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.

* `asns` -
  (Optional)
  A list of ASN numbers to act on, e.g. 23. https://en.wikipedia.org/wiki/Autonomous_system_(Internet)
  This uses int64 instead of uint32 because of https://linter.aip.dev/141/forbidden-types.

<a name="nested_deny"></a>The `deny` block supports:

* `response_code` -
  (Optional)
  The HTTP response code if the Action = DENY.

<a name="nested_flag"></a>The `flag` block supports:

* `headers` -
  (Optional)
  A list of HTTP headers to be sent to the target in case of a FLAG SecurityAction.
  Limit 5 headers per SecurityAction.
  At least one is mandatory.
  Structure is [documented below](#nested_flag_headers).


<a name="nested_flag_headers"></a>The `headers` block supports:

* `name` -
  (Optional)
  The header name to be sent to the target.

* `value` -
  (Optional)
  The header value to be sent to the target.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}`

* `create_time` -
  The create time for this SecurityAction.
  Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
  Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".

* `update_time` -
  The update time for this SecurityAction. This reflects when this SecurityAction changed states.
  Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
  Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


SecurityAction can be imported using any of these accepted formats:

* `organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}`
* `{{org_id}}/{{env_id}}/{{security_action_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import SecurityAction using one of the formats above. For example:

```tf
import {
  id = "organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}"
  to = google_apigee_security_action.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), SecurityAction can be imported using one of the formats above. For example:

```
$ terraform import google_apigee_security_action.default organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}
$ terraform import google_apigee_security_action.default {{org_id}}/{{env_id}}/{{security_action_id}}
```
