---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/redis/ClusterUserCreatedConnections.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Memorystore (Redis)"
description: |-
  Manages user created connections for Redis cluster
---

# google_redis_cluster_user_created_connections

Manages user created connections for Redis cluster


To get more information about ClusterUserCreatedConnections, see:

* [API documentation](https://cloud.google.com/memorystore/docs/cluster/reference/rest/v1/projects.locations.clusters)

~> **Note:** Please ensure your connections meet the requirements outlined at
https://cloud.devsite.corp.google.com/memorystore/docs/cluster/about-multiple-vpc-networking#application_connection_requirements.
If you remove a connections item from the resource, the corresponding forwarding rule will no longer be functioning.
If the corresponding forwarding rule is represented in your terraform configuration it is recommended to delete that
`google_compute_forwarding_rule` resource at the same time.

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=redis_cluster_user_created_connections&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Redis Cluster User Created Connections


```hcl
resource "google_redis_cluster_user_created_connections" "cluster-user-conn" {
  name = "cluster-user-conn"
  region = "us-central1"
  cluster_endpoints {
    connections {
      psc_connection {
        psc_connection_id = google_compute_forwarding_rule.forwarding_rule1_network1.psc_connection_id
        address = google_compute_address.ip1_network1.address
        forwarding_rule = google_compute_forwarding_rule.forwarding_rule1_network1.id
        network = google_compute_network.network1.id
        project_id = data.google_project.project.project_id
        service_attachment = google_redis_cluster.cluster-user-conn.psc_service_attachments[0].service_attachment
      }
    }
    connections {
      psc_connection {
        psc_connection_id = google_compute_forwarding_rule.forwarding_rule2_network1.psc_connection_id
        address = google_compute_address.ip2_network1.address
        forwarding_rule = google_compute_forwarding_rule.forwarding_rule2_network1.id
        network = google_compute_network.network1.id
        service_attachment = google_redis_cluster.cluster-user-conn.psc_service_attachments[1].service_attachment
      }
    }
  }
  cluster_endpoints {
    connections {
      psc_connection {
        psc_connection_id = google_compute_forwarding_rule.forwarding_rule1_network2.psc_connection_id
        address = google_compute_address.ip1_network2.address
        forwarding_rule = google_compute_forwarding_rule.forwarding_rule1_network2.id
        network = google_compute_network.network2.id
        service_attachment = google_redis_cluster.cluster-user-conn.psc_service_attachments[0].service_attachment
      }
    }
    connections {
      psc_connection {
        psc_connection_id = google_compute_forwarding_rule.forwarding_rule2_network2.psc_connection_id
        address = google_compute_address.ip2_network2.address
        forwarding_rule = google_compute_forwarding_rule.forwarding_rule2_network2.id
        network = google_compute_network.network2.id
        service_attachment = google_redis_cluster.cluster-user-conn.psc_service_attachments[1].service_attachment
      }
    }
  }
}

resource "google_compute_forwarding_rule" "forwarding_rule1_network1" {
  name                   = "fwd1-net1"
  region                 = "us-central1"
  ip_address             = google_compute_address.ip1_network1.id
  load_balancing_scheme  = ""
  network                = google_compute_network.network1.id
  target                 = google_redis_cluster.cluster-user-conn.psc_service_attachments[0].service_attachment
}

resource "google_compute_forwarding_rule" "forwarding_rule2_network1" {
  name                   = "fwd2-net1"
  region                 = "us-central1"
  ip_address             = google_compute_address.ip2_network1.id
  load_balancing_scheme  = ""
  network                = google_compute_network.network1.id
  target                 = google_redis_cluster.cluster-user-conn.psc_service_attachments[1].service_attachment
}

resource "google_compute_address" "ip1_network1" {
  name         = "ip1-net1"
  region       = "us-central1"
  subnetwork   = google_compute_subnetwork.subnet_network1.id
  address_type = "INTERNAL"
  purpose      = "GCE_ENDPOINT"
}

resource "google_compute_address" "ip2_network1" {
  name         = "ip2-net1"
  region       = "us-central1"
  subnetwork   = google_compute_subnetwork.subnet_network1.id
  address_type = "INTERNAL"
  purpose      = "GCE_ENDPOINT"
}

resource "google_compute_subnetwork" "subnet_network1" {
  name          = "subnet-net1"
  ip_cidr_range = "10.0.0.248/29"
  region        = "us-central1"
  network       = google_compute_network.network1.id
}

resource "google_compute_network" "network1" {
  name                    = "net1"
  auto_create_subnetworks = false
}

resource "google_compute_forwarding_rule" "forwarding_rule1_network2" {
  name                   = "fwd1-net2"
  region                 = "us-central1"
  ip_address             = google_compute_address.ip1_network2.id
  load_balancing_scheme  = ""
  network                = google_compute_network.network2.id
  target                 = google_redis_cluster.cluster-user-conn.psc_service_attachments[0].service_attachment
}

resource "google_compute_forwarding_rule" "forwarding_rule2_network2" {
  name                   = "fwd2-net2"
  region                 = "us-central1"
  ip_address             = google_compute_address.ip2_network2.id
  load_balancing_scheme  = ""
  network                = google_compute_network.network2.id
  target                 = google_redis_cluster.cluster-user-conn.psc_service_attachments[1].service_attachment
}

resource "google_compute_address" "ip1_network2" {
  name         = "ip1-net2"
  region       = "us-central1"
  subnetwork   = google_compute_subnetwork.subnet_network2.id
  address_type = "INTERNAL"
  purpose      = "GCE_ENDPOINT"
}

resource "google_compute_address" "ip2_network2" {
  name         = "ip2-net2"
  region       = "us-central1"
  subnetwork   = google_compute_subnetwork.subnet_network2.id
  address_type = "INTERNAL"
  purpose      = "GCE_ENDPOINT"
}

resource "google_compute_subnetwork" "subnet_network2" {
  name          = "subnet-net2"
  ip_cidr_range = "10.0.0.248/29"
  region        = "us-central1"
  network       = google_compute_network.network2.id
}

resource "google_compute_network" "network2" {
  name                    = "network2"
  auto_create_subnetworks = false
}

// redis cluster without endpoint
resource "google_redis_cluster" "cluster-user-conn" {
  name           = "cluster-user-conn"
  shard_count    = 3
  region = "us-central1"
  replica_count = 0
  deletion_protection_enabled = false
}

data "google_project" "project" {
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=redis_cluster_user_and_auto_created_connections&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Redis Cluster User And Auto Created Connections


```hcl
resource "google_redis_cluster_user_created_connections" "cluster-user-auto-conn" {
  name = "cluster-user-auto-conn"
  region = "us-central1"
  cluster_endpoints {
    connections {
      psc_connection {
        psc_connection_id = google_compute_forwarding_rule.forwarding_rule1_network2.psc_connection_id
        address = google_compute_address.ip1_network2.address
        forwarding_rule = google_compute_forwarding_rule.forwarding_rule1_network2.id
        network = google_compute_network.network2.id
        service_attachment = google_redis_cluster.cluster-user-auto-conn.psc_service_attachments[0].service_attachment
      }
    }
    connections {
      psc_connection {
        psc_connection_id = google_compute_forwarding_rule.forwarding_rule2_network2.psc_connection_id
        address = google_compute_address.ip2_network2.address
        forwarding_rule = google_compute_forwarding_rule.forwarding_rule2_network2.id
        network = google_compute_network.network2.id
        service_attachment = google_redis_cluster.cluster-user-auto-conn.psc_service_attachments[1].service_attachment
      }
    }
  }
}

resource "google_compute_forwarding_rule" "forwarding_rule1_network2" {
  name                   = "fwd1-net2"
  region                 = "us-central1"
  ip_address             = google_compute_address.ip1_network2.id
  load_balancing_scheme  = ""
  network                = google_compute_network.network2.id
  target                 = google_redis_cluster.cluster-user-auto-conn.psc_service_attachments[0].service_attachment
}

resource "google_compute_forwarding_rule" "forwarding_rule2_network2" {
  name                   = "fwd2-net2"
  region                 = "us-central1"
  ip_address             = google_compute_address.ip2_network2.id
  load_balancing_scheme  = ""
  network                = google_compute_network.network2.id
  target                 = google_redis_cluster.cluster-user-auto-conn.psc_service_attachments[1].service_attachment
}

resource "google_compute_address" "ip1_network2" {
  name         = "ip1-net2"
  region       = "us-central1"
  subnetwork   = google_compute_subnetwork.subnet_network2.id
  address_type = "INTERNAL"
  purpose      = "GCE_ENDPOINT"
}

resource "google_compute_address" "ip2_network2" {
  name         = "ip2-net2"
  region       = "us-central1"
  subnetwork   = google_compute_subnetwork.subnet_network2.id
  address_type = "INTERNAL"
  purpose      = "GCE_ENDPOINT"
}

resource "google_compute_subnetwork" "subnet_network2" {
  name          = "subnet-net2"
  ip_cidr_range = "10.0.0.248/29"
  region        = "us-central1"
  network       = google_compute_network.network2.id
}

resource "google_compute_network" "network2" {
  name                    = "network2"
  auto_create_subnetworks = false
}

// redis cluster without endpoint
resource "google_redis_cluster" "cluster-user-auto-conn" {
  name           = "cluster-user-auto-conn"
  shard_count    = 3
  region = "us-central1"
  replica_count = 0
  deletion_protection_enabled = false
  psc_configs {
    network = google_compute_network.network1.id
  }
  depends_on = [
    google_network_connectivity_service_connection_policy.default
  ]
}

resource "google_network_connectivity_service_connection_policy" "default" {
  name = "scpolicy"
  location = "us-central1"
  service_class = "gcp-memorystore-redis"
  description   = "my basic service connection policy"
  network = google_compute_network.network1.id
  psc_config {
    subnetworks = [google_compute_subnetwork.subnet_network1.id]
  }
}

resource "google_compute_subnetwork" "subnet_network1" {
  name          = "subnet-net1"
  ip_cidr_range = "10.0.0.248/29"
  region        = "us-central1"
  network       = google_compute_network.network1.id
}

resource "google_compute_network" "network1" {
  name                    = "net1"
  auto_create_subnetworks = false
}
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  The name of the Redis cluster these endpoints should be added to.

* `region` -
  (Required)
  The name of the region of the Redis cluster these endpoints should be added to.


- - -


* `cluster_endpoints` -
  (Optional)
  A list of cluster endpoints
  Structure is [documented below](#nested_cluster_endpoints).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_cluster_endpoints"></a>The `cluster_endpoints` block supports:

* `connections` -
  (Optional)
  Structure is [documented below](#nested_cluster_endpoints_cluster_endpoints_connections).


<a name="nested_cluster_endpoints_cluster_endpoints_connections"></a>The `connections` block supports:

* `psc_connection` -
  (Optional)
  Detailed information of a PSC connection that is created by the customer
  who owns the cluster.
  Structure is [documented below](#nested_cluster_endpoints_cluster_endpoints_connections_connections_psc_connection).


<a name="nested_cluster_endpoints_cluster_endpoints_connections_connections_psc_connection"></a>The `psc_connection` block supports:

* `psc_connection_id` -
  (Required)
  The PSC connection id of the forwarding rule connected to the
  service attachment.

* `address` -
  (Required)
  The IP allocated on the consumer network for the PSC forwarding rule.

* `forwarding_rule` -
  (Required)
  The URI of the consumer side forwarding rule.
  Format:
  projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}

* `project_id` -
  (Optional)
  The consumer project_id where the forwarding rule is created from.

* `network` -
  (Required)
  The consumer network where the IP address resides, in the form of
  projects/{project_id}/global/networks/{network_id}.

* `service_attachment` -
  (Required)
  The service attachment which is the target of the PSC connection, in the form of projects/{project-id}/regions/{region}/serviceAttachments/{service-attachment-id}.

* `psc_connection_status` -
  (Output)
  Output Only. The status of the PSC connection: whether a connection exists and ACTIVE or it no longer exists. 
   Possible values:
   ACTIVE 
   NOT_FOUND

* `connection_type` -
  (Output)
  Output Only. Type of a PSC Connection. 
   Possible values:
   CONNECTION_TYPE_DISCOVERY 
   CONNECTION_TYPE_PRIMARY 
   CONNECTION_TYPE_READER

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{region}}/clusters/{{name}}`


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 60 minutes.
- `update` - Default is 120 minutes.
- `delete` - Default is 30 minutes.

## Import


ClusterUserCreatedConnections can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/clusters/{{name}}`
* `{{project}}/{{region}}/{{name}}`
* `{{region}}/{{name}}`
* `{{name}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ClusterUserCreatedConnections using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{region}}/clusters/{{name}}"
  to = google_redis_cluster_user_created_connections.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), ClusterUserCreatedConnections can be imported using one of the formats above. For example:

```
$ terraform import google_redis_cluster_user_created_connections.default projects/{{project}}/locations/{{region}}/clusters/{{name}}
$ terraform import google_redis_cluster_user_created_connections.default {{project}}/{{region}}/{{name}}
$ terraform import google_redis_cluster_user_created_connections.default {{region}}/{{name}}
$ terraform import google_redis_cluster_user_created_connections.default {{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
