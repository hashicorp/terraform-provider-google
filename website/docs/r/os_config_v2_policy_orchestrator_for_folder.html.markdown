---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/osconfigv2/PolicyOrchestratorForFolder.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "OS Config v2"
description: |-
  PolicyOrchestrator helps managing project+zone level policy resources (e.
---

# google_os_config_v2_policy_orchestrator_for_folder

PolicyOrchestrator helps managing project+zone level policy resources (e.g.
OS Policy Assignments), by providing tools to create, update and delete them
across projects and locations, at scale.



## Example Usage - Osconfigv2 Policy Orchestrator For Folder Basic


```hcl
resource "google_folder" "my_folder" {
    display_name        = "po-folder"
    parent              = "organizations/123456789"
    deletion_protection = false
}

resource "google_folder_service_identity" "osconfig_sa" {
  folder  = google_folder.my_folder.folder_id
  service = "osconfig.googleapis.com"
}

resource "google_folder_service_identity" "ripple_sa" {
  folder  = google_folder.my_folder.folder_id
  service = "progressiverollout.googleapis.com"
}

resource "time_sleep" "wait_30_sec" {
    depends_on = [
        google_folder_service_identity.osconfig_sa,
        google_folder_service_identity.ripple_sa,
    ]
    create_duration = "30s"
}

resource "google_folder_iam_member" "iam_osconfig_service_agent" {
    depends_on = [time_sleep.wait_30_sec]
    folder = google_folder.my_folder.folder_id
    role   = "roles/osconfig.serviceAgent"
    member = google_folder_service_identity.osconfig_sa.member
}

resource "google_folder_iam_member" "iam_osconfig_rollout_service_agent" {
    depends_on = [google_folder_iam_member.iam_osconfig_service_agent]
    folder     = google_folder.my_folder.folder_id
    role       = "roles/osconfig.rolloutServiceAgent"
    member     = "serviceAccount:service-folder-${google_folder.my_folder.folder_id}@gcp-sa-osconfig-rollout.iam.gserviceaccount.com"
}

resource "google_folder_iam_member" "iam_progressiverollout_service_agent" {
    depends_on = [google_folder_iam_member.iam_osconfig_rollout_service_agent]
    folder = google_folder.my_folder.folder_id
    role   = "roles/progressiverollout.serviceAgent"
    member = google_folder_service_identity.ripple_sa.member
}

resource "time_sleep" "wait_3_min" {
    depends_on = [google_folder_iam_member.iam_progressiverollout_service_agent]
    create_duration = "180s"
}

resource "google_os_config_v2_policy_orchestrator_for_folder" "policy_orchestrator_for_folder" {
    depends_on = [time_sleep.wait_3_min]

    policy_orchestrator_id = "po-folder"
    folder_id = google_folder.my_folder.folder_id
    
    state = "ACTIVE"
    action = "UPSERT"
    
    orchestrated_resource {
        id = "test-orchestrated-resource-folder"
        os_policy_assignment_v1_payload {
            os_policies {
                id = "test-os-policy-folder"
                mode = "VALIDATION"
                resource_groups {
                    resources {
                        id = "resource-tf"
                        file {
                            content = "file-content-tf"
                            path = "file-path-tf-1"
                            state = "PRESENT"
                        }
                    }
                }
            }
            instance_filter {
                inventories {
                    os_short_name = "windows-10"
                }
            }
            rollout {
                disruption_budget {
                    percent = 100
                }
                min_wait_duration = "60s"
            }
        }
    }
    labels = {
        state = "active"
    }
    orchestration_scope {
        selectors {
            location_selector {
                included_locations = [""]
            }
        }
    }
}
```

## Argument Reference

The following arguments are supported:


* `action` -
  (Required)
  Action to be done by the orchestrator in
  `projects/{project_id}/zones/{zone_id}` locations defined by the
  `orchestration_scope`. Allowed values:
  - `UPSERT` - Orchestrator will create or update target resources.
  - `DELETE` - Orchestrator will delete target resources, if they exist

* `orchestrated_resource` -
  (Required)
  Represents a resource that is being orchestrated by the policy orchestrator.
  Structure is [documented below](#nested_orchestrated_resource).

* `folder_id` -
  (Required)
  The parent resource name in the form of `folders/{folder_id}/locations/global`.

* `policy_orchestrator_id` -
  (Required)
  The logical identifier of the policy orchestrator, with the following
  restrictions:
  * Must contain only lowercase letters, numbers, and hyphens.
  * Must start with a letter.
  * Must be between 1-63 characters.
  * Must end with a number or a letter.
  * Must be unique within the parent.


<a name="nested_orchestrated_resource"></a>The `orchestrated_resource` block supports:

* `os_policy_assignment_v1_payload` -
  (Optional)
  OS policy assignment is an API resource that is used to
  apply a set of OS policies to a dynamically targeted group of Compute Engine
  VM instances.
  An OS policy is used to define the desired state configuration for a
  Compute Engine VM instance through a set of configuration resources that
  provide capabilities such as installing or removing software packages, or
  executing a script.
  For more information about the OS policy resource definitions and examples,
  see
  [OS policy and OS policy
  assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload).

* `id` -
  (Optional)
  ID of the resource to be used while generating set of affected resources.
  For UPSERT action the value is auto-generated during PolicyOrchestrator
  creation when not set. When the value is set it should following next
  restrictions:
  * Must contain only lowercase letters, numbers, and hyphens.
  * Must start with a letter.
  * Must be between 1-63 characters.
  * Must end with a number or a letter.
  * Must be unique within the project.
  For DELETE action, ID must be specified explicitly during
  PolicyOrchestrator creation.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload"></a>The `os_policy_assignment_v1_payload` block supports:

* `name` -
  (Optional)
  Resource name.
  Format:
  `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}`
  This field is ignored when you create an OS policy assignment.

* `description` -
  (Optional)
  OS policy assignment description.
  Length of the description is limited to 1024 characters.

* `os_policies` -
  (Required)
  List of OS policies to be applied to the VMs.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies).

* `revision_id` -
  (Output)
  The assignment revision ID
  A new revision is committed whenever a rollout is triggered for a OS policy
  assignment

* `baseline` -
  (Output)
  Indicates that this revision has been successfully rolled out in this zone
  and new VMs will be assigned OS policies from this revision.
  For a given OS policy assignment, there is only one revision with a value
  of `true` for this field.

* `deleted` -
  (Output)
  Indicates that this revision deletes the OS policy assignment.

* `instance_filter` -
  (Required)
  Filters to select target VMs for an assignment.
  If more than one filter criteria is specified below, a VM will be selected
  if and only if it satisfies all of them.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_instance_filter).

* `rollout` -
  (Required)
  Message to configure the rollout at the zonal level for the OS policy
  assignment.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_rollout).

* `revision_create_time` -
  (Output)
  The timestamp that the revision was created.

* `etag` -
  (Output)
  The etag for this OS policy assignment.
  If this is provided on update, it must match the server's etag.

* `rollout_state` -
  (Output)
  OS policy assignment rollout state
  Possible values:
  IN_PROGRESS
  CANCELLING
  CANCELLED
  SUCCEEDED

* `reconciling` -
  (Output)
  Indicates that reconciliation is in progress for the revision.
  This value is `true` when the `rollout_state` is one of:
  * IN_PROGRESS
  * CANCELLING

* `uid` -
  (Output)
  Server generated unique id for the OS policy assignment resource.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies"></a>The `os_policies` block supports:

* `id` -
  (Required)
  The id of the OS policy with the following restrictions:
  * Must contain only lowercase letters, numbers, and hyphens.
  * Must start with a letter.
  * Must be between 1-63 characters.
  * Must end with a number or a letter.
  * Must be unique within the assignment.

* `description` -
  (Optional)
  Policy description.
  Length of the description is limited to 1024 characters.

* `mode` -
  (Required)
  Policy mode
  Possible values are: `VALIDATION`, `ENFORCEMENT`.

* `resource_groups` -
  (Required)
  List of resource groups for the policy.
  For a particular VM, resource groups are evaluated in the order specified
  and the first resource group that is applicable is selected and the rest
  are ignored.
  If none of the resource groups are applicable for a VM, the VM is
  considered to be non-compliant w.r.t this policy. This behavior can be
  toggled by the flag `allow_no_resource_group_match`
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups).

* `allow_no_resource_group_match` -
  (Optional)
  This flag determines the OS policy compliance status when none of the
  resource groups within the policy are applicable for a VM. Set this value
  to `true` if the policy needs to be reported as compliant even if the
  policy has nothing to validate or enforce.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups"></a>The `resource_groups` block supports:

* `inventory_filters` -
  (Optional)
  List of inventory filters for the resource group.
  The resources in this resource group are applied to the target VM if it
  satisfies at least one of the following inventory filters.
  For example, to apply this resource group to VMs running either `RHEL` or
  `CentOS` operating systems, specify 2 items for the list with following
  values:
  inventory_filters[0].os_short_name='rhel' and
  inventory_filters[1].os_short_name='centos'
  If the list is empty, this resource group will be applied to the target
  VM unconditionally.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_inventory_filters).

* `resources` -
  (Required)
  List of resources configured for this resource group.
  The resources are executed in the exact order specified here.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources).


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_inventory_filters"></a>The `inventory_filters` block supports:

* `os_short_name` -
  (Required)
  The OS short name

* `os_version` -
  (Optional)
  The OS version
  Prefix matches are supported if asterisk(*) is provided as the
  last character. For example, to match all versions with a major
  version of `7`, specify the following value for this field `7.*`
  An empty string matches all OS versions.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources"></a>The `resources` block supports:

* `id` -
  (Required)
  The id of the resource with the following restrictions:
  * Must contain only lowercase letters, numbers, and hyphens.
  * Must start with a letter.
  * Must be between 1-63 characters.
  * Must end with a number or a letter.
  * Must be unique within the OS policy.

* `pkg` -
  (Optional)
  A resource that manages a system package.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg).

* `repository` -
  (Optional)
  A resource that manages a package repository.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository).

* `exec` -
  (Optional)
  A resource that allows executing scripts on the VM.
  The `ExecResource` has 2 stages: `validate` and `enforce` and both stages
  accept a script as an argument to execute.
  When the `ExecResource` is applied by the agent, it first executes the
  script in the `validate` stage. The `validate` stage can signal that the
  `ExecResource` is already in the desired state by returning an exit code
  of `100`. If the `ExecResource` is not in the desired state, it should
  return an exit code of `101`. Any other exit code returned by this stage
  is considered an error.
  If the `ExecResource` is not in the desired state based on the exit code
  from the `validate` stage, the agent proceeds to execute the script from
  the `enforce` stage. If the `ExecResource` is already in the desired
  state, the `enforce` stage will not be run.
  Similar to `validate` stage, the `enforce` stage should return an exit
  code of `100` to indicate that the resource in now in its desired state.
  Any other exit code is considered an error.
  NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to
  have an explicit indicator of `in desired state`, `not in desired state`
  and errors. Because, for example, Powershell will always return an exit
  code of `0` unless an `exit` statement is provided in the script. So, for
  reasons of consistency and being explicit, exit codes `100` and `101`
  were chosen.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec).

* `file` -
  (Optional)
  A resource that manages the state of a file.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_file).


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg"></a>The `pkg` block supports:

* `googet` -
  (Optional)
  A package managed by GooGet.
  - install: `googet -noconfirm install package`
  - remove: `googet -noconfirm remove package`
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_googet).

* `msi` -
  (Optional)
  An MSI package. MSI packages only support INSTALLED state.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_msi).

* `desired_state` -
  (Required)
  The desired state the agent should maintain for this package.
  Possible values are: `INSTALLED`, `REMOVED`.

* `apt` -
  (Optional)
  A package managed by APT.
  - install: `apt-get update && apt-get -y install [name]`
  - remove: `apt-get -y remove [name]`
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_apt).

* `deb` -
  (Optional)
  A deb package file. dpkg packages only support INSTALLED state.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_deb).

* `yum` -
  (Optional)
  A package managed by YUM.
  - install: `yum -y install package`
  - remove: `yum -y remove package`
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_yum).

* `zypper` -
  (Optional)
  A package managed by Zypper.
  - install: `zypper -y install package`
  - remove: `zypper -y rm package`
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_zypper).

* `rpm` -
  (Optional)
  An RPM package file. RPM packages only support INSTALLED state.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_rpm).


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_googet"></a>The `googet` block supports:

* `name` -
  (Required)
  Package name.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_msi"></a>The `msi` block supports:

* `source` -
  (Required)
  A remote or local file.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_msi_source).

* `properties` -
  (Optional)
  Additional properties to use during installation.
  This should be in the format of Property=Setting.
  Appended to the defaults of `ACTION=INSTALL
  REBOOT=ReallySuppress`.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_msi_source"></a>The `source` block supports:

* `remote` -
  (Optional)
  Specifies a file available via some URI.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_msi_source_remote).

* `gcs` -
  (Optional)
  Specifies a file available as a Cloud Storage Object.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_msi_source_gcs).

* `local_path` -
  (Optional)
  A local path within the VM to use.

* `allow_insecure` -
  (Optional)
  Defaults to false. When false, files are subject to validations
  based on the file type:
  Remote: A checksum must be specified.
  Cloud Storage: An object generation number must be specified.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_msi_source_remote"></a>The `remote` block supports:

* `uri` -
  (Required)
  URI from which to fetch the object. It should contain both the
  protocol and path following the format `{protocol}://{location}`.

* `sha256_checksum` -
  (Optional)
  SHA256 checksum of the remote file.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_msi_source_gcs"></a>The `gcs` block supports:

* `bucket` -
  (Required)
  Bucket of the Cloud Storage object.

* `object` -
  (Required)
  Name of the Cloud Storage object.

* `generation` -
  (Optional)
  Generation number of the Cloud Storage object.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_apt"></a>The `apt` block supports:

* `name` -
  (Required)
  Package name.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_deb"></a>The `deb` block supports:

* `source` -
  (Required)
  A remote or local file.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_deb_source).

* `pull_deps` -
  (Optional)
  Whether dependencies should also be installed.
  - install when false: `dpkg -i package`
  - install when true: `apt-get update && apt-get -y install
  package.deb`


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_deb_source"></a>The `source` block supports:

* `remote` -
  (Optional)
  Specifies a file available via some URI.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_deb_source_remote).

* `gcs` -
  (Optional)
  Specifies a file available as a Cloud Storage Object.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_deb_source_gcs).

* `local_path` -
  (Optional)
  A local path within the VM to use.

* `allow_insecure` -
  (Optional)
  Defaults to false. When false, files are subject to validations
  based on the file type:
  Remote: A checksum must be specified.
  Cloud Storage: An object generation number must be specified.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_deb_source_remote"></a>The `remote` block supports:

* `sha256_checksum` -
  (Optional)
  SHA256 checksum of the remote file.

* `uri` -
  (Required)
  URI from which to fetch the object. It should contain both the
  protocol and path following the format `{protocol}://{location}`.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_deb_source_gcs"></a>The `gcs` block supports:

* `generation` -
  (Optional)
  Generation number of the Cloud Storage object.

* `bucket` -
  (Required)
  Bucket of the Cloud Storage object.

* `object` -
  (Required)
  Name of the Cloud Storage object.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_yum"></a>The `yum` block supports:

* `name` -
  (Required)
  Package name.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_zypper"></a>The `zypper` block supports:

* `name` -
  (Required)
  Package name.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_rpm"></a>The `rpm` block supports:

* `pull_deps` -
  (Optional)
  Whether dependencies should also be installed.
  - install when false: `rpm --upgrade --replacepkgs package.rpm`
  - install when true: `yum -y install package.rpm` or
  `zypper -y install package.rpm`

* `source` -
  (Required)
  A remote or local file.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_rpm_source).


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_rpm_source"></a>The `source` block supports:

* `remote` -
  (Optional)
  Specifies a file available via some URI.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_rpm_source_remote).

* `gcs` -
  (Optional)
  Specifies a file available as a Cloud Storage Object.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_rpm_source_gcs).

* `local_path` -
  (Optional)
  A local path within the VM to use.

* `allow_insecure` -
  (Optional)
  Defaults to false. When false, files are subject to validations
  based on the file type:
  Remote: A checksum must be specified.
  Cloud Storage: An object generation number must be specified.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_rpm_source_remote"></a>The `remote` block supports:

* `uri` -
  (Required)
  URI from which to fetch the object. It should contain both the
  protocol and path following the format `{protocol}://{location}`.

* `sha256_checksum` -
  (Optional)
  SHA256 checksum of the remote file.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_pkg_rpm_source_gcs"></a>The `gcs` block supports:

* `bucket` -
  (Required)
  Bucket of the Cloud Storage object.

* `object` -
  (Required)
  Name of the Cloud Storage object.

* `generation` -
  (Optional)
  Generation number of the Cloud Storage object.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository"></a>The `repository` block supports:

* `apt` -
  (Optional)
  Represents a single apt package repository. These will be added to
  a repo file that will be managed at
  `/etc/apt/sources.list.d/google_osconfig.list`.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository_apt).

* `yum` -
  (Optional)
  Represents a single yum package repository. These are added to a
  repo file that is managed at
  `/etc/yum.repos.d/google_osconfig.repo`.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository_yum).

* `zypper` -
  (Optional)
  Represents a single zypper package repository. These are added to a
  repo file that is managed at
  `/etc/zypp/repos.d/google_osconfig.repo`.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository_zypper).

* `goo` -
  (Optional)
  Represents a Goo package repository. These are added to a repo file
  that is managed at
  `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository_goo).


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository_apt"></a>The `apt` block supports:

* `components` -
  (Required)
  List of components for this repository. Must contain at least one
  item.

* `gpg_key` -
  (Optional)
  URI of the key file for this repository. The agent maintains a
  keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.

* `archive_type` -
  (Required)
  Type of archive files in this repository.
  Possible values are: `DEB`, `DEB_SRC`.

* `uri` -
  (Required)
  URI for this repository.

* `distribution` -
  (Required)
  Distribution of this repository.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository_yum"></a>The `yum` block supports:

* `display_name` -
  (Optional)
  The display name of the repository.

* `base_url` -
  (Required)
  The location of the repository directory.

* `gpg_keys` -
  (Optional)
  URIs of GPG keys.

* `id` -
  (Required)
  A one word, unique name for this repository. This is  the `repo
  id` in the yum config file and also the `display_name` if
  `display_name` is omitted. This id is also used as the unique
  identifier when checking for resource conflicts.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository_zypper"></a>The `zypper` block supports:

* `base_url` -
  (Required)
  The location of the repository directory.

* `gpg_keys` -
  (Optional)
  URIs of GPG keys.

* `id` -
  (Required)
  A one word, unique name for this repository. This is the `repo
  id` in the zypper config file and also the `display_name` if
  `display_name` is omitted. This id is also used as the unique
  identifier when checking for GuestPolicy conflicts.

* `display_name` -
  (Optional)
  The display name of the repository.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_repository_goo"></a>The `goo` block supports:

* `name` -
  (Required)
  The name of the repository.

* `url` -
  (Required)
  The url of the repository.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec"></a>The `exec` block supports:

* `validate` -
  (Required)
  A file or script to execute.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_validate).

* `enforce` -
  (Optional)
  A file or script to execute.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_enforce).


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_validate"></a>The `validate` block supports:

* `args` -
  (Optional)
  Optional arguments to pass to the source during execution.

* `interpreter` -
  (Required)
  The script interpreter to use.
  Possible values are: `NONE`, `SHELL`, `POWERSHELL`.

* `output_file_path` -
  (Optional)
  Only recorded for enforce Exec.
  Path to an output file (that is created by this Exec) whose
  content will be recorded in OSPolicyResourceCompliance after a
  successful run. Absence or failure to read this file will result in
  this ExecResource being non-compliant. Output file size is limited to
  500K bytes.

* `file` -
  (Optional)
  A remote or local file.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_validate_file).

* `script` -
  (Optional)
  An inline script.
  The size of the script is limited to 32KiB.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_validate_file"></a>The `file` block supports:

* `allow_insecure` -
  (Optional)
  Defaults to false. When false, files are subject to validations
  based on the file type:
  Remote: A checksum must be specified.
  Cloud Storage: An object generation number must be specified.

* `remote` -
  (Optional)
  Specifies a file available via some URI.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_validate_file_remote).

* `gcs` -
  (Optional)
  Specifies a file available as a Cloud Storage Object.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_validate_file_gcs).

* `local_path` -
  (Optional)
  A local path within the VM to use.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_validate_file_remote"></a>The `remote` block supports:

* `uri` -
  (Required)
  URI from which to fetch the object. It should contain both the
  protocol and path following the format `{protocol}://{location}`.

* `sha256_checksum` -
  (Optional)
  SHA256 checksum of the remote file.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_validate_file_gcs"></a>The `gcs` block supports:

* `bucket` -
  (Required)
  Bucket of the Cloud Storage object.

* `object` -
  (Required)
  Name of the Cloud Storage object.

* `generation` -
  (Optional)
  Generation number of the Cloud Storage object.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_enforce"></a>The `enforce` block supports:

* `args` -
  (Optional)
  Optional arguments to pass to the source during execution.

* `interpreter` -
  (Required)
  The script interpreter to use.
  Possible values are: `NONE`, `SHELL`, `POWERSHELL`.

* `output_file_path` -
  (Optional)
  Only recorded for enforce Exec.
  Path to an output file (that is created by this Exec) whose
  content will be recorded in OSPolicyResourceCompliance after a
  successful run. Absence or failure to read this file will result in
  this ExecResource being non-compliant. Output file size is limited to
  500K bytes.

* `file` -
  (Optional)
  A remote or local file.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_enforce_file).

* `script` -
  (Optional)
  An inline script.
  The size of the script is limited to 32KiB.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_enforce_file"></a>The `file` block supports:

* `remote` -
  (Optional)
  Specifies a file available via some URI.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_enforce_file_remote).

* `gcs` -
  (Optional)
  Specifies a file available as a Cloud Storage Object.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_enforce_file_gcs).

* `local_path` -
  (Optional)
  A local path within the VM to use.

* `allow_insecure` -
  (Optional)
  Defaults to false. When false, files are subject to validations
  based on the file type:
  Remote: A checksum must be specified.
  Cloud Storage: An object generation number must be specified.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_enforce_file_remote"></a>The `remote` block supports:

* `uri` -
  (Required)
  URI from which to fetch the object. It should contain both the
  protocol and path following the format `{protocol}://{location}`.

* `sha256_checksum` -
  (Optional)
  SHA256 checksum of the remote file.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_exec_enforce_file_gcs"></a>The `gcs` block supports:

* `bucket` -
  (Required)
  Bucket of the Cloud Storage object.

* `object` -
  (Required)
  Name of the Cloud Storage object.

* `generation` -
  (Optional)
  Generation number of the Cloud Storage object.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_file"></a>The `file` block supports:

* `file` -
  (Optional)
  A remote or local file.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_file_file).

* `content` -
  (Optional)
  A a file with this content.
  The size of the content is limited to 32KiB.

* `path` -
  (Required)
  The absolute path of the file within the VM.

* `state` -
  (Required)
  Desired state of the file.
  Possible values are: `PRESENT`, `ABSENT`, `CONTENTS_MATCH`.

* `permissions` -
  (Optional)
  Consists of three octal digits which represent, in
  order, the permissions of the owner, group, and other users for the
  file (similarly to the numeric mode used in the linux chmod
  utility). Each digit represents a three bit number with the 4 bit
  corresponding to the read permissions, the 2 bit corresponds to the
  write bit, and the one bit corresponds to the execute permission.
  Default behavior is 755.
  Below are some examples of permissions and their associated values:
  read, write, and execute: 7
  read and execute: 5
  read and write: 6
  read only: 4


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_file_file"></a>The `file` block supports:

* `allow_insecure` -
  (Optional)
  Defaults to false. When false, files are subject to validations
  based on the file type:
  Remote: A checksum must be specified.
  Cloud Storage: An object generation number must be specified.

* `remote` -
  (Optional)
  Specifies a file available via some URI.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_file_file_remote).

* `gcs` -
  (Optional)
  Specifies a file available as a Cloud Storage Object.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_file_file_gcs).

* `local_path` -
  (Optional)
  A local path within the VM to use.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_file_file_remote"></a>The `remote` block supports:

* `uri` -
  (Required)
  URI from which to fetch the object. It should contain both the
  protocol and path following the format `{protocol}://{location}`.

* `sha256_checksum` -
  (Optional)
  SHA256 checksum of the remote file.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_os_policies_os_policies_resource_groups_resource_groups_resources_resources_file_file_gcs"></a>The `gcs` block supports:

* `bucket` -
  (Required)
  Bucket of the Cloud Storage object.

* `object` -
  (Required)
  Name of the Cloud Storage object.

* `generation` -
  (Optional)
  Generation number of the Cloud Storage object.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_instance_filter"></a>The `instance_filter` block supports:

* `inclusion_labels` -
  (Optional)
  List of label sets used for VM inclusion.
  If the list has more than one `LabelSet`, the VM is included if any
  of the label sets are applicable for the VM.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_instance_filter_inclusion_labels).

* `exclusion_labels` -
  (Optional)
  List of label sets used for VM exclusion.
  If the list has more than one label set, the VM is excluded if any
  of the label sets are applicable for the VM.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_instance_filter_exclusion_labels).

* `inventories` -
  (Optional)
  List of inventories to select VMs.
  A VM is selected if its inventory data matches at least one of the
  following inventories.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_instance_filter_inventories).

* `all` -
  (Optional)
  Target all VMs in the project. If true, no other criteria is
  permitted.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_instance_filter_inclusion_labels"></a>The `inclusion_labels` block supports:

* `labels` -
  (Optional)
  Labels are identified by key/value pairs in this map.
  A VM should contain all the key/value pairs specified in this
  map to be selected.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_instance_filter_exclusion_labels"></a>The `exclusion_labels` block supports:

* `labels` -
  (Optional)
  Labels are identified by key/value pairs in this map.
  A VM should contain all the key/value pairs specified in this
  map to be selected.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_instance_filter_inventories"></a>The `inventories` block supports:

* `os_short_name` -
  (Required)
  The OS short name

* `os_version` -
  (Optional)
  The OS version
  Prefix matches are supported if asterisk(*) is provided as the
  last character. For example, to match all versions with a major
  version of `7`, specify the following value for this field `7.*`
  An empty string matches all OS versions.

<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_rollout"></a>The `rollout` block supports:

* `disruption_budget` -
  (Required)
  Message encapsulating a value that can be either absolute ("fixed") or
  relative ("percent") to a value.
  Structure is [documented below](#nested_orchestrated_resource_os_policy_assignment_v1_payload_rollout_disruption_budget).

* `min_wait_duration` -
  (Required)
  This determines the minimum duration of time to wait after the
  configuration changes are applied through the current rollout. A
  VM continues to count towards the `disruption_budget` at least
  until this duration of time has passed after configuration changes are
  applied.


<a name="nested_orchestrated_resource_os_policy_assignment_v1_payload_rollout_disruption_budget"></a>The `disruption_budget` block supports:

* `fixed` -
  (Optional)
  Specifies a fixed value.

* `percent` -
  (Optional)
  Specifies the relative value defined as a percentage, which will be
  multiplied by a reference value.

- - -


* `description` -
  (Optional)
  Freeform text describing the purpose of the resource.

* `state` -
  (Optional)
  State of the orchestrator. Can be updated to change orchestrator behaviour.
  Allowed values:
  - `ACTIVE` - orchestrator is actively looking for actions to be taken.
  - `STOPPED` - orchestrator won't make any changes.
  Note: There might be more states added in the future. We use string here
  instead of an enum, to avoid the need of propagating new states to all the
  client code.

* `orchestration_scope` -
  (Optional)
  Defines a set of selectors which drive which resources are in scope of policy
  orchestration.
  Structure is [documented below](#nested_orchestration_scope).

* `labels` -
  (Optional)
  Labels as key value pairs
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.


<a name="nested_orchestration_scope"></a>The `orchestration_scope` block supports:

* `selectors` -
  (Optional)
  Selectors of the orchestration scope. There is a logical AND between each
  selector defined.
  When there is no explicit `ResourceHierarchySelector` selector specified,
  the scope is by default bounded to the parent of the policy orchestrator
  resource.
  Structure is [documented below](#nested_orchestration_scope_selectors).


<a name="nested_orchestration_scope_selectors"></a>The `selectors` block supports:

* `resource_hierarchy_selector` -
  (Optional)
  Selector containing Cloud Resource Manager resource hierarchy nodes.
  Structure is [documented below](#nested_orchestration_scope_selectors_selectors_resource_hierarchy_selector).

* `location_selector` -
  (Optional)
  Selector containing locations in scope.
  Structure is [documented below](#nested_orchestration_scope_selectors_selectors_location_selector).


<a name="nested_orchestration_scope_selectors_selectors_resource_hierarchy_selector"></a>The `resource_hierarchy_selector` block supports:

* `included_projects` -
  (Optional)
  Names of the projects in scope.
  Format: `projects/{project_number}`

* `included_folders` -
  (Optional)
  Names of the folders in scope.
  Format: `folders/{folder_id}`

<a name="nested_orchestration_scope_selectors_selectors_location_selector"></a>The `location_selector` block supports:

* `included_locations` -
  (Optional)
  Names of the locations in scope.
  Format: `us-central1-a`

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}`

* `name` -
  Identifier. In form of
  * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
  * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
  * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`

* `etag` -
  This checksum is computed by the server based on the value of other
  fields, and may be sent on update and delete requests to ensure the
  client has an up-to-date value before proceeding.

* `reconciling` -
  Set to true, if the there are ongoing changes being applied by the
  orchestrator.

* `orchestration_state` -
  Describes the state of the orchestration process.
  Structure is [documented below](#nested_orchestration_state).

* `update_time` -
  Timestamp when the policy orchestrator resource was last modified.

* `create_time` -
  Timestamp when the policy orchestrator resource was created.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


<a name="nested_orchestration_state"></a>The `orchestration_state` block contains:

* `current_iteration_state` -
  (Output)
  Describes the state of a single iteration of the orchestrator.
  Structure is [documented below](#nested_orchestration_state_current_iteration_state).

* `previous_iteration_state` -
  (Output)
  Describes the state of a single iteration of the orchestrator.
  Structure is [documented below](#nested_orchestration_state_previous_iteration_state).


<a name="nested_orchestration_state_current_iteration_state"></a>The `current_iteration_state` block contains:

* `progress` -
  (Output)
  An estimated percentage of the progress. Number between 0 and 100.

* `performed_actions` -
  (Output)
  Overall number of actions done by the orchestrator so far.

* `failed_actions` -
  (Output)
  Number of orchestration actions which failed so far. For more details,
  query the Cloud Logs.

* `start_time` -
  (Output)
  Start time of the wave iteration.

* `finish_time` -
  (Output)
  Finish time of the wave iteration.

* `error` -
  (Output)
  The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). Each `Status` message contains
  three pieces of data: error code, error message, and error details.
  You can find out more about this error model and how to work with it in the
  [API Design Guide](https://cloud.google.com/apis/design/errors).
  Structure is [documented below](#nested_orchestration_state_current_iteration_state_error).

* `state` -
  (Output)
  State of the iteration.
  Possible values:
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  UNKNOWN

* `rollout_resource` -
  (Output)
  Handle to the Progressive Rollouts API rollout resource, which contains
  detailed information about a particular orchestration iteration.


<a name="nested_orchestration_state_current_iteration_state_error"></a>The `error` block contains:

* `details` -
  (Output)
  A list of messages that carry the error details.  There is a common set of
  message types for APIs to use.
  Structure is [documented below](#nested_orchestration_state_current_iteration_state_error_details).

* `code` -
  (Output)
  The status code, which should be an enum value of google.rpc.Code.

* `message` -
  (Output)
  A developer-facing error message, which should be in English. Any
  user-facing error message should be localized and sent in the
  google.rpc.Status.details field, or localized by the client.


<a name="nested_orchestration_state_current_iteration_state_error_details"></a>The `details` block contains:

* `type_url` -
  (Output)
  A URL/resource name that uniquely identifies the type of the serialized protocol buffer message

* `value` -
  (Output)

<a name="nested_orchestration_state_previous_iteration_state"></a>The `previous_iteration_state` block contains:

* `performed_actions` -
  (Output)
  Overall number of actions done by the orchestrator so far.

* `failed_actions` -
  (Output)
  Number of orchestration actions which failed so far. For more details,
  query the Cloud Logs.

* `start_time` -
  (Output)
  Start time of the wave iteration.

* `finish_time` -
  (Output)
  Finish time of the wave iteration.

* `error` -
  (Output)
  The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). Each `Status` message contains
  three pieces of data: error code, error message, and error details.
  You can find out more about this error model and how to work with it in the
  [API Design Guide](https://cloud.google.com/apis/design/errors).
  Structure is [documented below](#nested_orchestration_state_previous_iteration_state_error).

* `state` -
  (Output)
  State of the iteration.
  Possible values:
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  UNKNOWN

* `rollout_resource` -
  (Output)
  Handle to the Progressive Rollouts API rollout resource, which contains
  detailed information about a particular orchestration iteration.

* `progress` -
  (Output)
  An estimated percentage of the progress. Number between 0 and 100.


<a name="nested_orchestration_state_previous_iteration_state_error"></a>The `error` block contains:

* `code` -
  (Output)
  The status code, which should be an enum value of google.rpc.Code.

* `message` -
  (Output)
  A developer-facing error message, which should be in English. Any
  user-facing error message should be localized and sent in the
  google.rpc.Status.details field, or localized by the client.

* `details` -
  (Output)
  A list of messages that carry the error details.  There is a common set of
  message types for APIs to use.
  Structure is [documented below](#nested_orchestration_state_previous_iteration_state_error_details).


<a name="nested_orchestration_state_previous_iteration_state_error_details"></a>The `details` block contains:

* `type_url` -
  (Output)
  A URL/resource name that uniquely identifies the type of the serialized protocol buffer message

* `value` -
  (Output)

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


PolicyOrchestratorForFolder can be imported using any of these accepted formats:

* `folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}`
* `{{folder_id}}/{{policy_orchestrator_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import PolicyOrchestratorForFolder using one of the formats above. For example:

```tf
import {
  id = "folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}"
  to = google_os_config_v2_policy_orchestrator_for_folder.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), PolicyOrchestratorForFolder can be imported using one of the formats above. For example:

```
$ terraform import google_os_config_v2_policy_orchestrator_for_folder.default folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}
$ terraform import google_os_config_v2_policy_orchestrator_for_folder.default {{folder_id}}/{{policy_orchestrator_id}}
```
