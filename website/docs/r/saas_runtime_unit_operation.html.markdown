---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/saasservicemgmt/UnitOperation.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "SaaS Runtime"
description: |-
  A UnitOperation encapsulates the intent to change or interact with a Unit.
---

# google_saas_runtime_unit_operation

A UnitOperation encapsulates the intent to change or interact with a Unit. Operations such as provisioning, upgrading, or deprovisioning a Unit are triggered by creating a UnitOperation resource.



## Example Usage - Saas Runtime Unit Operation Basic


```hcl
locals {
  location          = "us-east1"
  tenant_project_id = "tenant"
}

resource "google_saas_runtime_saas" "example_saas" {
  provider = google-beta
  saas_id  = "example-saas"
  location = local.location

  locations {
    name = local.location
  }
}

resource "google_saas_runtime_unit_kind" "cluster_unit_kind" {
  provider        = google-beta
  location        = local.location
  unit_kind_id    = "vm-unitkind"
  saas            = google_saas_runtime_saas.example_saas.id
  default_release = "projects/my-project-name/locations/${local.location}/releases/example-release"
}

resource "google_saas_runtime_release" "example_release" {
  provider   = google-beta
  location   = local.location
  release_id = "example-release"
  unit_kind  = google_saas_runtime_unit_kind.cluster_unit_kind.id
  blueprint {
    package = "us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-alpha-image@sha256:7992fdbaeaf998ecd31a7f937bb26e38a781ecf49b24857a6176c1e9bfc299ee"
  }
}

resource "google_saas_runtime_unit" "example_unit" {
  provider  = google-beta
  location  = local.location
  unit_id   = "example-unit"
  unit_kind = google_saas_runtime_unit_kind.cluster_unit_kind.id
}

resource "google_project" "tenant_project" {
  provider        = google-beta
  project_id      = local.tenant_project_id
  name            = local.tenant_project_id
  billing_account = "000000-0000000-0000000-000000"
  org_id          = "123456789"
  deletion_policy = "DELETE"
}

resource "google_project_service" "saas_services" {
  provider                   = google-beta
  project                    = google_project.tenant_project.project_id
  service                    = "compute.googleapis.com"
  disable_dependent_services = true
}

resource "google_service_account" "actuation_service_account" {
  provider     = google-beta
  account_id   = "actuator"
  display_name = "SaaS Actuation Service Account"
}

resource "google_project_iam_member" "tenant_config_admin" {
  provider = google-beta
  project  = google_project.tenant_project.project_id
  role     = "roles/config.admin"
  member   = "serviceAccount:${google_service_account.actuation_service_account.email}"
}

resource "google_project_iam_member" "tenant_storage_admin" {
  provider = google-beta
  project  = google_project.tenant_project.project_id
  role     = "roles/storage.admin"
  member   = "serviceAccount:${google_service_account.actuation_service_account.email}"
}

resource "google_project_iam_member" "tenant_compute_admin" {
  provider = google-beta
  project  = google_project.tenant_project.project_id
  role     = "roles/compute.admin"
  member   = "serviceAccount:${google_service_account.actuation_service_account.email}"
}

resource "google_service_account_iam_member" "actuation_token_creator" {
  provider           = google-beta
  service_account_id = google_service_account.actuation_service_account.name
  role               = "roles/iam.serviceAccountTokenCreator"
  member             = "serviceAccount:service-1111111111111@gcp-sa-saasservicemgmt.iam.gserviceaccount.com"
}

resource "google_saas_runtime_unit_operation" "provision_unit_operation" {
  provider          = google-beta
  depends_on        = [google_project_iam_member.tenant_config_admin, google_project_iam_member.tenant_storage_admin, google_project_iam_member.tenant_compute_admin, google_service_account_iam_member.actuation_token_creator, google_project_service.saas_services]
  location          = local.location
  unit_operation_id = "provision-unit-operation"
  unit              = google_saas_runtime_unit.example_unit.id
  wait_for_completion = true

  provision {
    release = google_saas_runtime_release.example_release.id
    input_variables {
      variable = "tenant_project_id"
      value    = google_project.tenant_project.project_id
      type     = "STRING"
    }
    input_variables {
      variable = "tenant_project_number"
      value    = google_project.tenant_project.number
      type     = "INT"
    }
    input_variables {
      variable = "zone"
      value    = "us-central1-a"
      type     = "STRING"
    }
    input_variables {
      variable = "instance_name"
      value    = "terraform-test-instance"
      type     = "STRING"
    }
    input_variables {
      variable = "actuation_sa"
      value    = google_service_account.actuation_service_account.email
      type     = "STRING"
    }
  }
  labels = {
    "label-one" : "foo"
  }
  annotations = {
    "annotation-one" : "bar"
  }
}

resource "google_saas_runtime_unit_operation" "noop_upgrade_unit_operation" {
  provider          = google-beta
  depends_on        = [google_saas_runtime_unit_operation.provision_unit_operation]
  location          = local.location
  unit_operation_id = "upgrade-unit-operation"
  unit              = google_saas_runtime_unit.example_unit.id
  wait_for_completion = true

  upgrade {
    release = google_saas_runtime_release.example_release.id
    input_variables {
      variable = "tenant_project_id"
      value    = google_project.tenant_project.project_id
      type     = "STRING"
    }
    input_variables {
      variable = "tenant_project_number"
      value    = google_project.tenant_project.number
      type     = "INT"
    }
    input_variables {
      variable = "zone"
      value    = "us-central1-a"
      type     = "STRING"
    }
    input_variables {
      variable = "instance_name"
      value    = "terraform-test-instance"
      type     = "STRING"
    }
    input_variables {
      variable = "actuation_sa"
      value    = google_service_account.actuation_service_account.email
      type     = "STRING"
    }
  }
}

resource "google_saas_runtime_unit_operation" "deprovision_operation" {
  provider          = google-beta
  depends_on        = [google_saas_runtime_unit_operation.noop_upgrade_unit_operation]
  location          = local.location
  unit_operation_id = "deprovision-unit-operation"
  unit              = google_saas_runtime_unit.example_unit.id
  wait_for_completion = true
  deprovision {}
}
```

## Argument Reference

The following arguments are supported:


* `unit` -
  (Required)
  The Unit a given UnitOperation will act upon.

* `location` -
  (Required)
  Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.

* `unit_operation_id` -
  (Required)
  The ID value for the new unit operation.


* `annotations` -
  (Optional)
  Annotations is an unstructured key-value map stored with a resource that
  may be set by external tools to store and retrieve arbitrary metadata.
  They are not queryable and should be preserved when modifying objects.
  More info: https://kubernetes.io/docs/user-guide/annotations
  **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
  Please refer to the field `effective_annotations` for all of the annotations present on the resource.

* `deprovision` -
  (Optional)
  Deprovision is the unit operation that deprovision the underlying
  resources represented by a Unit. Can only execute if the Unit is currently
  provisioned.

* `labels` -
  (Optional)
  The labels on the resource, which can be used for categorization.
  similar to Kubernetes resource labels.
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `provision` -
  (Optional)
  Provision is the unit operation that provision the underlying resources
  represented by a Unit. Can only execute if the Unit is not currently
  provisioned.
  Structure is [documented below](#nested_provision).

* `upgrade` -
  (Optional)
  Upgrade is the unit operation that upgrades a provisioned unit, which may
  also include the underlying resources represented by a Unit. Can only execute
  if the Unit is currently provisioned.
  Structure is [documented below](#nested_upgrade).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.

* `wait_for_completion` - (Optional) If true, wait for the UnitOperation to reach a terminal state (SUCCEEDED, FAILED, CANCELLED)
before completing the apply.



<a name="nested_provision"></a>The `provision` block supports:

* `input_variables` -
  (Optional)
  Set of input variables. Maximum 100. (optional)
  Structure is [documented below](#nested_provision_input_variables).

* `release` -
  (Optional)
  Reference to the Release object to use for the Unit. (optional).


<a name="nested_provision_input_variables"></a>The `input_variables` block supports:

* `type` -
  (Optional)
  Name of a supported variable type. Supported types are string, int, bool.
  Possible values:
  STRING
  INT
  BOOL

* `value` -
  (Optional)
  String encoded value for the variable.

* `variable` -
  (Required)
  Name of the variable from actuation configs.

<a name="nested_upgrade"></a>The `upgrade` block supports:

* `input_variables` -
  (Optional)
  Set of input variables. Maximum 100. (optional)
  Structure is [documented below](#nested_upgrade_input_variables).

* `release` -
  (Optional)
  Reference to the Release object to use for the Unit. (optional).


<a name="nested_upgrade_input_variables"></a>The `input_variables` block supports:

* `type` -
  (Optional)
  Name of a supported variable type. Supported types are string, int, bool.
  Possible values:
  STRING
  INT
  BOOL

* `value` -
  (Optional)
  String encoded value for the variable.

* `variable` -
  (Required)
  Name of the variable from actuation configs.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/unitOperations/{{unit_operation_id}}`

* `conditions` -
  A set of conditions which indicate the various conditions this resource can
  have.
  Structure is [documented below](#nested_conditions).

* `create_time` -
  The timestamp when the resource was created.

* `engine_state` -
  The engine state for on-going
  deployment engine operation(s).
  This field is opaque for external usage.

* `error_category` -
  Possible values:
  NOT_APPLICABLE
  FATAL
  RETRIABLE
  IGNORABLE
  STANDARD

* `etag` -
  An opaque value that uniquely identifies a version or
  generation of a resource. It can be used to confirm that the client
  and server agree on the ordering of a resource being written.

* `name` -
  Identifier. The resource name (full URI of the resource) following the standard naming
  scheme:
  "projects/{project}/locations/{location}/unitOperations/{unitOperation}"

* `state` -
  UnitOperationState describes the current state of the unit operation.
  Possible values:
  UNIT_OPERATION_STATE_UNKNOWN
  UNIT_OPERATION_STATE_PENDING
  UNIT_OPERATION_STATE_SCHEDULED
  UNIT_OPERATION_STATE_RUNNING
  UNIT_OPERATION_STATE_SUCCEEDED
  UNIT_OPERATION_STATE_FAILED
  UNIT_OPERATION_STATE_CANCELLED

* `uid` -
  The unique identifier of the resource. UID is unique in the time
  and space for this resource within the scope of the service. It is
  typically generated by the server on successful creation of a resource
  and must not be changed. UID is used to uniquely identify resources
  with resource name reuses. This should be a UUID4.

* `update_time` -
  The timestamp when the resource was last updated. Any
  change to the resource made by users must refresh this value.
  Changes to a resource made by the service should refresh this value.

* `effective_annotations` -
  All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


<a name="nested_conditions"></a>The `conditions` block contains:

* `last_transition_time` -
  (Output)
  Last time the condition transited from one status to another.

* `message` -
  (Output)
  Human readable message indicating details about the last transition.

* `reason` -
  (Output)
  Brief reason for the condition's last transition.

* `status` -
  (Output)
  Status of the condition.
  Possible values:
  STATUS_UNKNOWN
  STATUS_TRUE
  STATUS_FALSE

* `type` -
  (Output)
  Type of the condition.
  Possible values:
  TYPE_SCHEDULED
  TYPE_RUNNING
  TYPE_SUCCEEDED
  TYPE_CANCELLED

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


UnitOperation can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/unitOperations/{{unit_operation_id}}`
* `{{project}}/{{location}}/{{unit_operation_id}}`
* `{{location}}/{{unit_operation_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import UnitOperation using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/unitOperations/{{unit_operation_id}}"
  to = google_saas_runtime_unit_operation.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), UnitOperation can be imported using one of the formats above. For example:

```
$ terraform import google_saas_runtime_unit_operation.default projects/{{project}}/locations/{{location}}/unitOperations/{{unit_operation_id}}
$ terraform import google_saas_runtime_unit_operation.default {{project}}/{{location}}/{{unit_operation_id}}
$ terraform import google_saas_runtime_unit_operation.default {{location}}/{{unit_operation_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
