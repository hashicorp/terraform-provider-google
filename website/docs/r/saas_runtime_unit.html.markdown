---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/saasservicemgmt/Unit.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "SaaS Runtime"
description: |-
  A Unit is the fundamental structural building block of a SaaS offering.
---

# google_saas_runtime_unit

A Unit is the fundamental structural building block of a SaaS offering. Each Unit is an instance of a UnitKind. It is a versioned, manageable component of a service that has its own lifecycle, representing elements like infrastructure, workloads, or an entire application stack that a service producer intends to manage as a single entity.



## Example Usage - Saas Runtime Unit Basic


```hcl
resource "google_saas_runtime_saas" "example_saas_regional" {
  provider = google-beta
  saas_id  = "example-saas"
  location = "us-central1"

  locations {
    name = "us-central1"
  }
}

resource "google_saas_runtime_unit_kind" "example_unit_kind" {
  provider = google-beta
  location = "us-central1"
  unit_kind_id = "example-unitkind"
  saas = google_saas_runtime_saas.example_saas_regional.id
}

resource "google_saas_runtime_unit" "example" {
  provider = google-beta
  location = "us-central1"
  unit_id = "example-unit"
  unit_kind = google_saas_runtime_unit_kind.example_unit_kind.id
  management_mode = "MANAGEMENT_MODE_USER"
}
```

## Argument Reference

The following arguments are supported:


* `location` -
  (Required)
  Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.

* `unit_id` -
  (Required)
  The ID value for the new unit.


* `annotations` -
  (Optional)
  Annotations is an unstructured key-value map stored with a resource that
  may be set by external tools to store and retrieve arbitrary metadata.
  They are not queryable and should be preserved when modifying objects.
  More info: https://kubernetes.io/docs/user-guide/annotations
  **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
  Please refer to the field `effective_annotations` for all of the annotations present on the resource.

* `labels` -
  (Optional)
  The labels on the resource, which can be used for categorization.
  similar to Kubernetes resource labels.
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `maintenance` -
  (Optional)
  Captures requested directives for performing future maintenance on the
  unit. This includes a request for the unit to skip maintenance for a period
  of time and remain pinned to its current release as well as controls for
  postponing maintenance scheduled in future.
  Structure is [documented below](#nested_maintenance).

* `management_mode` -
  (Optional)
  Indicates whether the Unit life cycle is controlled
  by the user or by the system.
  Immutable once created.
  Possible values:
  MANAGEMENT_MODE_USER
  MANAGEMENT_MODE_SYSTEM

* `tenant` -
  (Optional)
  Reference to the Saas Tenant resource this unit belongs to. This for
  example informs the maintenance policies to use for scheduling future
  updates on a unit. (optional and immutable once created)

* `unit_kind` -
  (Optional)
  Reference to the UnitKind this Unit belongs to. Immutable once set.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.



<a name="nested_maintenance"></a>The `maintenance` block supports:

* `pinned_until_time` -
  (Optional)
  If present, it fixes the release on the unit until the given time; i.e.
  changes to the release field will be rejected. Rollouts should and will
  also respect this by not requesting an upgrade in the first place.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/units/{{unit_id}}`

* `conditions` -
  A set of conditions which indicate the various conditions this resource can
  have.
  Structure is [documented below](#nested_conditions).

* `create_time` -
  The timestamp when the resource was created.

* `dependencies` -
  Set of dependencies for this unit. Maximum 10.
  Structure is [documented below](#nested_dependencies).

* `dependents` -
  List of Units that depend on this unit. Unit can only be deprovisioned if
  this list is empty. Maximum 1000.
  Structure is [documented below](#nested_dependents).

* `input_variables` -
  Indicates the current input variables deployed by the unit
  Structure is [documented below](#nested_input_variables).

* `name` -
  Identifier. The resource name (full URI of the resource) following the standard naming
  scheme:
  "projects/{project}/locations/{location}/units/{unit}"

* `ongoing_operations` -
  List of concurrent UnitOperations that are operating on this Unit.

* `output_variables` -
  Set of key/value pairs corresponding to output variables from execution of
  actuation templates. The variables are declared in actuation configs (e.g
  in helm chart or terraform) and the values are fetched and returned by the
  actuation engine upon completion of execution.
  Structure is [documented below](#nested_output_variables).

* `pending_operations` -
  List of pending (wait to be executed) UnitOperations for this unit.

* `release` -
  The current Release object for this Unit.

* `scheduled_operations` -
  List of scheduled UnitOperations for this unit.

* `state` -
  Current lifecycle state of the resource (e.g. if it's being
  created or ready to use).
  Possible values:
  UNIT_STATE_NOT_PROVISIONED
  UNIT_STATE_PROVISIONING
  UNIT_STATE_UPDATING
  UNIT_STATE_DEPROVISIONING
  UNIT_STATE_READY
  UNIT_STATE_ERROR

* `system_cleanup_at` -
  If set, indicates the time when the system will start removing the unit.

* `system_managed_state` -
  Indicates the system managed state of the unit.
  Possible values:
  SYSTEM_MANAGED_STATE_ACTIVE
  SYSTEM_MANAGED_STATE_INACTIVE
  SYSTEM_MANAGED_STATE_DECOMMISSIONED

* `uid` -
  The unique identifier of the resource. UID is unique in the time
  and space for this resource within the scope of the service. It is
  typically generated by the server on successful creation of a resource
  and must not be changed. UID is used to uniquely identify resources
  with resource name reuses. This should be a UUID4.

* `update_time` -
  The timestamp when the resource was last updated. Any
  change to the resource made by users must refresh this value.
  Changes to a resource made by the service should refresh this value.

* `effective_annotations` -
  All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


<a name="nested_conditions"></a>The `conditions` block contains:

* `last_transition_time` -
  (Required)
  Last time the condition transited from one status to another.

* `message` -
  (Required)
  Human readable message indicating details about the last transition.

* `reason` -
  (Required)
  Brief reason for the condition's last transition.

* `status` -
  (Required)
  Status of the condition.
  Possible values:
  STATUS_UNKNOWN
  STATUS_TRUE
  STATUS_FALSE

* `type` -
  (Required)
  Type of the condition.
  Possible values:
  TYPE_READY
  TYPE_UPDATING
  TYPE_PROVISIONED
  TYPE_OPERATION_ERROR

<a name="nested_dependencies"></a>The `dependencies` block contains:

* `alias` -
  (Output)
  Alias for the name of the dependency.

* `unit` -
  (Output)
  A reference to the Unit object.

<a name="nested_dependents"></a>The `dependents` block contains:

* `alias` -
  (Output)
  Alias for the name of the dependency.

* `unit` -
  (Output)
  A reference to the Unit object.

<a name="nested_input_variables"></a>The `input_variables` block contains:

* `type` -
  (Optional)
  Name of a supported variable type. Supported types are string, int, bool.
  Possible values:
  STRING
  INT
  BOOL

* `value` -
  (Optional)
  String encoded value for the variable.

* `variable` -
  (Required)
  Name of the variable from actuation configs.

<a name="nested_output_variables"></a>The `output_variables` block contains:

* `type` -
  (Optional)
  Name of a supported variable type. Supported types are string, int, bool.
  Possible values:
  STRING
  INT
  BOOL

* `value` -
  (Optional)
  String encoded value for the variable.

* `variable` -
  (Required)
  Name of the variable from actuation configs.

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Unit can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/units/{{unit_id}}`
* `{{project}}/{{location}}/{{unit_id}}`
* `{{location}}/{{unit_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Unit using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/units/{{unit_id}}"
  to = google_saas_runtime_unit.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Unit can be imported using one of the formats above. For example:

```
$ terraform import google_saas_runtime_unit.default projects/{{project}}/locations/{{location}}/units/{{unit_id}}
$ terraform import google_saas_runtime_unit.default {{project}}/{{location}}/{{unit_id}}
$ terraform import google_saas_runtime_unit.default {{location}}/{{unit_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
