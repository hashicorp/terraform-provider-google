---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/gemini/RepositoryGroup.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Gemini for Google Cloud"
description: |-
  The resource for managing Repository Group for Gemini Code Assist.
---

# google_gemini_repository_group

The resource for managing Repository Group for Gemini Code Assist.


To get more information about RepositoryGroup, see:

* [API documentation](https://cloud.google.com/gemini/docs/api/reference/rest/v1/projects.locations.codeRepositoryIndexes.repositoryGroups)

## Example Usage - Gemini Repository Group Basic


```hcl
resource "google_gemini_repository_group" "example" {
  location = "us-central1"
  code_repository_index = "example-cri"
  repository_group_id = "example-repository-group"
  repositories {
    resource = "projects/example-project/locations/us-central1/connections/example-connection/gitRepositoryLinks/example-repo"
    branch_pattern = "main"
  }
  labels = {"label1": "value1"}
}
```

## Argument Reference

The following arguments are supported:


* `repositories` -
  (Required)
  Required. List of repositories to group.
  Structure is [documented below](#nested_repositories).

* `location` -
  (Required)
  The location of the Code Repository Index, for example `us-central1`.

* `code_repository_index` -
  (Required)
  Required. Id of the Code Repository Index.

* `repository_group_id` -
  (Required)
  Required. Id of the Repository Group.


<a name="nested_repositories"></a>The `repositories` block supports:

* `resource` -
  (Required)
  Required. The DeveloperConnect repository full resource name, relative resource name
  or resource URL to be indexed.

* `branch_pattern` -
  (Required)
  Required. The Git branch pattern used for indexing in RE2 syntax.
  See https://github.com/google/re2/wiki/syntax for syntax.

- - -


* `labels` -
  (Optional)
  Optional. Labels as key value pairs.
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}`

* `name` -
  Immutable. Identifier. Name of Repository Group.

* `create_time` -
  Output only. Create time stamp.

* `update_time` -
  Output only. Update time stamp.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 30 minutes.
- `update` - Default is 30 minutes.
- `delete` - Default is 30 minutes.

## Import


RepositoryGroup can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}`
* `{{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}`
* `{{location}}/{{code_repository_index}}/{{repository_group_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import RepositoryGroup using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}"
  to = google_gemini_repository_group.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), RepositoryGroup can be imported using one of the formats above. For example:

```
$ terraform import google_gemini_repository_group.default projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}
$ terraform import google_gemini_repository_group.default {{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}
$ terraform import google_gemini_repository_group.default {{location}}/{{code_repository_index}}/{{repository_group_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
