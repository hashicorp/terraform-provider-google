---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/saasservicemgmt/Saas.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "SaaS Runtime"
description: |-
  A Saas resource is the top-level representation of a SaaS service managed by a producer.
---

# google_saas_runtime_saas

A Saas resource is the top-level representation of a SaaS service managed by a producer. It contains a list of locations where the service is available, which is used by the Rollout system to generate a rollout plan.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.


<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=saas_runtime_saas_basic&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Saas Runtime Saas Basic


```hcl
resource "google_saas_runtime_saas" "example" {
  provider = google-beta
  saas_id  = "test-saas"
  location = "global"

  locations {
    name = "us-central1"
  }
  locations {
    name = "europe-west1"
  }
}
```

## Argument Reference

The following arguments are supported:


* `location` -
  (Required)
  Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.

* `saas_id` -
  (Required)
  The ID value for the new saas.


* `annotations` -
  (Optional)
  Annotations is an unstructured key-value map stored with a resource that
  may be set by external tools to store and retrieve arbitrary metadata.
  They are not queryable and should be preserved when modifying objects.
  More info: https://kubernetes.io/docs/user-guide/annotations
  **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
  Please refer to the field `effective_annotations` for all of the annotations present on the resource.

* `labels` -
  (Optional)
  The labels on the resource, which can be used for categorization.
  similar to Kubernetes resource labels.
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `locations` -
  (Optional)
  List of locations that the service is available in. Rollout refers to the
  list to generate a rollout plan.
  Structure is [documented below](#nested_locations).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.



<a name="nested_locations"></a>The `locations` block supports:

* `name` -
  (Optional)
  Name of location.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/saas/{{saas_id}}`

* `create_time` -
  The timestamp when the resource was created.

* `etag` -
  An opaque value that uniquely identifies a version or
  generation of a resource. It can be used to confirm that the client
  and server agree on the ordering of a resource being written.

* `name` -
  Identifier. The resource name (full URI of the resource) following the standard naming
  scheme:
  "projects/{project}/locations/{location}/saas/{saas}"

* `uid` -
  The unique identifier of the resource. UID is unique in the time
  and space for this resource within the scope of the service. It is
  typically generated by the server on successful creation of a resource
  and must not be changed. UID is used to uniquely identify resources
  with resource name reuses. This should be a UUID4.

* `update_time` -
  The timestamp when the resource was last updated. Any
  change to the resource made by users must refresh this value.
  Changes to a resource made by the service should refresh this value.

* `effective_annotations` -
  All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Saas can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/saas/{{saas_id}}`
* `{{project}}/{{location}}/{{saas_id}}`
* `{{location}}/{{saas_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Saas using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/saas/{{saas_id}}"
  to = google_saas_runtime_saas.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Saas can be imported using one of the formats above. For example:

```
$ terraform import google_saas_runtime_saas.default projects/{{project}}/locations/{{location}}/saas/{{saas_id}}
$ terraform import google_saas_runtime_saas.default {{project}}/{{location}}/{{saas_id}}
$ terraform import google_saas_runtime_saas.default {{location}}/{{saas_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
