---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/firebaseapphosting/Domain.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Firebase App Hosting"
description: |-
  A domain name that is associated with a backend.
---

# google_firebase_app_hosting_domain

A domain name that is associated with a backend.



## Example Usage - Firebase App Hosting Domain Minimal


```hcl
resource "google_firebase_app_hosting_domain" "example" {
  project          = google_firebase_app_hosting_backend.example.project
  location         = google_firebase_app_hosting_backend.example.location
  backend          = google_firebase_app_hosting_backend.example.backend_id
  domain_id        = "example.com"
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "my-project-name"

  # Choose the region closest to your users
  location         = "us-central1"
  backend_id       = "domain-mini"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email
}

resource "google_service_account" "service_account" {
  project = "my-project-name"

  # Must be firebase-app-hosting-compute
  account_id                   = "sa-id"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}
```
## Example Usage - Firebase App Hosting Domain Full


```hcl
resource "google_firebase_app_hosting_domain" "example" {
  project          = google_firebase_app_hosting_backend.example.project
  location         = google_firebase_app_hosting_backend.example.location
  backend          = google_firebase_app_hosting_backend.example.backend_id
  domain_id        = "example.com"

  serve {
    redirect {
      uri = "google.com"
      status = "302"
    }
  }
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "my-project-name"

  # Choose the region closest to your users
  location         = "us-central1"
  backend_id       = "domain-full"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email
}

resource "google_service_account" "service_account" {
  project = "my-project-name"

  # Must be firebase-app-hosting-compute
  account_id                   = "sa-id"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}
```

## Argument Reference

The following arguments are supported:


* `location` -
  (Required)
  The location of the Backend that this Domain is associated with

* `backend` -
  (Required)
  The ID of the Backend that this Domain is associated with

* `domain_id` -
  (Required)
  Id of the domain to create.
  Must be a valid domain name, such as "foo.com"


- - -


* `serve` -
  (Optional)
  The serving behavior of the domain. If specified, the domain will
  serve content other than its Backend's live content.
  Structure is [documented below](#nested_serve).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_serve"></a>The `serve` block supports:

* `redirect` -
  (Optional)
  Specifies redirect behavior for a domain.
  Structure is [documented below](#nested_serve_redirect).


<a name="nested_serve_redirect"></a>The `redirect` block supports:

* `uri` -
  (Required)
  The URI of the redirect's intended destination. This URI will be
  prepended to the original request path. URI without a scheme are
  assumed to be HTTPS.

* `status` -
  (Optional)
  The status code to use in a redirect response. Must be a valid HTTP 3XX
  status code. Defaults to 302 if not present.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}`

* `custom_domain_status` -
  The status of a custom domain's linkage to the Backend.
  Structure is [documented below](#nested_custom_domain_status).

* `name` -
  Identifier. The resource name of the domain, e.g.
  `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`

* `uid` -
  System-assigned, unique identifier.

* `etag` -
  Server-computed checksum based on other values; may be sent
  on update or delete to ensure operation is done on expected resource.

* `update_time` -
  Time at which the domain was last updated.

* `purge_time` -
  Time at which a soft-deleted domain will be purged, rendering in
  permanently deleted.

* `delete_time` -
  Time at which the domain was deleted.

* `create_time` -
  Time at which the domain was created.


<a name="nested_custom_domain_status"></a>The `custom_domain_status` block contains:

* `cert_state` -
  (Output)
  Possible values:
  CERT_PREPARING
  CERT_VALIDATING
  CERT_PROPAGATING
  CERT_ACTIVE
  CERT_EXPIRING_SOON
  CERT_EXPIRED

* `required_dns_updates` -
  (Output)
  Lists the records that must added or removed to a custom domain's DNS
  in order to finish setup and start serving content.
  Field is present during onboarding. Also present after onboarding if one
  or more of the above states is not *_ACTIVE, indicating the domain's DNS
  records are in a bad state.
  Structure is [documented below](#nested_custom_domain_status_required_dns_updates).

* `issues` -
  (Output)
  A list of issues with domain configuration. Allows users to self-correct
  problems with DNS records.
  Structure is [documented below](#nested_custom_domain_status_issues).

* `host_state` -
  (Output)
  Possible values:
  HOST_UNHOSTED
  HOST_UNREACHABLE
  HOST_NON_FAH
  HOST_CONFLICT
  HOST_WRONG_SHARD
  HOST_ACTIVE

* `ownership_state` -
  (Output)
  Possible values:
  OWNERSHIP_MISSING
  OWNERSHIP_UNREACHABLE
  OWNERSHIP_MISMATCH
  OWNERSHIP_CONFLICT
  OWNERSHIP_PENDING
  OWNERSHIP_ACTIVE


<a name="nested_custom_domain_status_required_dns_updates"></a>The `required_dns_updates` block contains:

* `domain_name` -
  (Output)
  The domain name the DNS updates pertain to.

* `discovered` -
  (Output)
  The set of DNS records App Hosting discovered when inspecting a domain.
  Structure is [documented below](#nested_custom_domain_status_required_dns_updates_required_dns_updates_discovered).

* `desired` -
  (Output)
  The set of DNS records App Hosting needs in order to be able to serve
  secure content on the domain.
  Structure is [documented below](#nested_custom_domain_status_required_dns_updates_required_dns_updates_desired).

* `check_time` -
  (Output)
  The last time App Hosting checked your custom domain's DNS records.


<a name="nested_custom_domain_status_required_dns_updates_required_dns_updates_discovered"></a>The `discovered` block contains:

* `domain_name` -
  (Output)
  The domain name the record set pertains to.

* `check_error` -
  (Output)
  The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). Each `Status` message contains
  three pieces of data: error code, error message, and error details.
  You can find out more about this error model and how to work with it in the
  [API Design Guide](https://cloud.google.com/apis/design/errors).
  Structure is [documented below](#nested_custom_domain_status_required_dns_updates_required_dns_updates_discovered_discovered_check_error).

* `records` -
  (Output)
  Records on the domain.
  Structure is [documented below](#nested_custom_domain_status_required_dns_updates_required_dns_updates_discovered_discovered_records).


<a name="nested_custom_domain_status_required_dns_updates_required_dns_updates_discovered_discovered_check_error"></a>The `check_error` block contains:

* `code` -
  (Output)
  The status code, which should be an enum value of google.rpc.Code.

* `message` -
  (Output)
  A developer-facing error message, which should be in English. Any
  user-facing error message should be localized and sent in the
  google.rpc.Status.details field, or localized by the client.

* `details` -
  (Output)
  A list of messages that carry the error details.

<a name="nested_custom_domain_status_required_dns_updates_required_dns_updates_discovered_discovered_records"></a>The `records` block contains:

* `domain_name` -
  (Output)
  The domain the record pertains to, e.g. `foo.bar.com.`.

* `type` -
  (Output)
  The record's type, which determines what data the record contains.
  Possible values:
  A
  CNAME
  TXT
  AAAA
  CAA

* `rdata` -
  (Output)
  The data of the record. The meaning of the value depends on record type:
  - A and AAAA: IP addresses for the domain.
  - CNAME: Another domain to check for records.
  - TXT: Arbitrary text strings associated with the domain. App Hosting
  uses TXT records to determine which Firebase projects have
  permission to act on the domain's behalf.
  - CAA: The record's flags, tag, and value, e.g. `0 issue "pki.goog"`.

* `required_action` -
  (Output)
  An enum that indicates the a required action for this record. Populated
  when the record is part of a required change in a  `DnsUpdates`
  `discovered` or `desired` record set.
  Possible values:
  NONE
  ADD
  REMOVE

* `relevant_state` -
  (Output)
  An enum that indicates which state(s) this DNS record applies to. Populated
  for all records with an `ADD` or `REMOVE` required action.

<a name="nested_custom_domain_status_required_dns_updates_required_dns_updates_desired"></a>The `desired` block contains:

* `domain_name` -
  (Output)
  The domain name the record set pertains to.

* `check_error` -
  (Output)
  The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). Each `Status` message contains
  three pieces of data: error code, error message, and error details.
  You can find out more about this error model and how to work with it in the
  [API Design Guide](https://cloud.google.com/apis/design/errors).
  Structure is [documented below](#nested_custom_domain_status_required_dns_updates_required_dns_updates_desired_desired_check_error).

* `records` -
  (Output)
  Records on the domain.
  Structure is [documented below](#nested_custom_domain_status_required_dns_updates_required_dns_updates_desired_desired_records).


<a name="nested_custom_domain_status_required_dns_updates_required_dns_updates_desired_desired_check_error"></a>The `check_error` block contains:

* `code` -
  (Output)
  The status code, which should be an enum value of google.rpc.Code.

* `message` -
  (Output)
  A developer-facing error message, which should be in English. Any
  user-facing error message should be localized and sent in the
  google.rpc.Status.details field, or localized by the client.

* `details` -
  (Output)
  A list of messages that carry the error details.

<a name="nested_custom_domain_status_required_dns_updates_required_dns_updates_desired_desired_records"></a>The `records` block contains:

* `required_action` -
  (Output)
  An enum that indicates the a required action for this record. Populated
  when the record is part of a required change in a  `DnsUpdates`
  `discovered` or `desired` record set.
  Possible values:
  NONE
  ADD
  REMOVE

* `relevant_state` -
  (Output)
  An enum that indicates which state(s) this DNS record applies to. Populated
  for all records with an `ADD` or `REMOVE` required action.

* `domain_name` -
  (Output)
  The domain the record pertains to, e.g. `foo.bar.com.`.

* `type` -
  (Output)
  The record's type, which determines what data the record contains.
  Possible values:
  A
  CNAME
  TXT
  AAAA
  CAA

* `rdata` -
  (Output)
  The data of the record. The meaning of the value depends on record type:
  - A and AAAA: IP addresses for the domain.
  - CNAME: Another domain to check for records.
  - TXT: Arbitrary text strings associated with the domain. App Hosting
  uses TXT records to determine which Firebase projects have
  permission to act on the domain's behalf.
  - CAA: The record's flags, tag, and value, e.g. `0 issue "pki.goog"`.

<a name="nested_custom_domain_status_issues"></a>The `issues` block contains:

* `code` -
  (Output)
  The status code, which should be an enum value of google.rpc.Code.

* `message` -
  (Output)
  A developer-facing error message, which should be in English. Any
  user-facing error message should be localized and sent in the
  google.rpc.Status.details field, or localized by the client.

* `details` -
  (Output)
  A list of messages that carry the error details.

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Domain can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}`
* `{{project}}/{{location}}/{{backend}}/{{domain_id}}`
* `{{location}}/{{backend}}/{{domain_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Domain using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}"
  to = google_firebase_app_hosting_domain.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Domain can be imported using one of the formats above. For example:

```
$ terraform import google_firebase_app_hosting_domain.default projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}
$ terraform import google_firebase_app_hosting_domain.default {{project}}/{{location}}/{{backend}}/{{domain_id}}
$ terraform import google_firebase_app_hosting_domain.default {{location}}/{{backend}}/{{domain_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
