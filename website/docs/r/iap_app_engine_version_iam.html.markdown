---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Identity-Aware Proxy"
layout: "google"
page_title: "Google: google_iap_app_engine_version_iam"
sidebar_current: "docs-google-iap-app-engine-version-iam"
description: |-
  Collection of resources to manage IAM policy for IapAppEngineVersion
---

# IAM policy for IapAppEngineVersion
Three different resources help you manage your IAM policy for Iap AppEngineVersion. Each of these resources serves a different use case:

* `google_iap_app_engine_version_iam_policy`: Authoritative. Sets the IAM policy for the appengineversion and replaces any existing policy already attached.
* `google_iap_app_engine_version_iam_binding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the appengineversion are preserved.
* `google_iap_app_engine_version_iam_member`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the appengineversion are preserved.

~> **Note:** `google_iap_app_engine_version_iam_policy` **cannot** be used in conjunction with `google_iap_app_engine_version_iam_binding` and `google_iap_app_engine_version_iam_member` or they will fight over what your policy should be.

~> **Note:** `google_iap_app_engine_version_iam_binding` resources **can be** used in conjunction with `google_iap_app_engine_version_iam_member` resources **only if** they do not grant privilege to the same role.



## google\_iap\_app\_engine\_version\_iam\_policy

```hcl
data "google_iam_policy" "admin" {
  binding {
    role = "roles/iap.httpsResourceAccessor"
    members = [
      "user:jane@example.com",
    ]
  }
}

resource "google_iap_app_engine_version_iam_policy" "editor" {
  project = "${google_app_engine_standard_app_version.version.project}"
  app_id = "${google_app_engine_standard_app_version.version.project}"
  service = "${google_app_engine_standard_app_version.version.service}"
  version_id = "${google_app_engine_standard_app_version.version.version_id}"
  policy_data = "${data.google_iam_policy.admin.policy_data}"
}
```

## google\_iap\_app\_engine\_version\_iam\_binding

```hcl
resource "google_iap_app_engine_version_iam_binding" "editor" {
  project = "${google_app_engine_standard_app_version.version.project}"
  app_id = "${google_app_engine_standard_app_version.version.project}"
  service = "${google_app_engine_standard_app_version.version.service}"
  version_id = "${google_app_engine_standard_app_version.version.version_id}"
  role = "roles/iap.httpsResourceAccessor"
  members = [
    "user:jane@example.com",
  ]
}
```

## google\_iap\_app\_engine\_version\_iam\_member

```hcl
resource "google_iap_app_engine_version_iam_member" "editor" {
  project = "${google_app_engine_standard_app_version.version.project}"
  app_id = "${google_app_engine_standard_app_version.version.project}"
  service = "${google_app_engine_standard_app_version.version.service}"
  version_id = "${google_app_engine_standard_app_version.version.version_id}"
  role = "roles/iap.httpsResourceAccessor"
  member = "user:jane@example.com"
}
```

## Argument Reference

The following arguments are supported:

* `app_id` - (Required) Id of the App Engine application. Used to find the parent resource to bind the IAM policy to
* `service` - (Required) Service id of the App Engine application Used to find the parent resource to bind the IAM policy to
* `version_id` - (Required) Version id of the App Engine application Used to find the parent resource to bind the IAM policy to

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.

* `member/members` - (Required) Identities that will be granted the privilege in `role`.
  Each entry can have one of the following values:
  * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
  * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
  * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
  * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
  * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
  * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.

* `role` - (Required) The role that should be applied. Only one
    `google_iap_app_engine_version_iam_binding` can be used per role. Note that custom roles must be of the format
    `[projects|organizations]/{parent-name}/roles/{role-name}`.

* `policy_data` - (Required only by `google_iap_app_engine_version_iam_policy`) The policy data generated by
  a `google_iam_policy` data source.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are
exported:

* `etag` - (Computed) The etag of the IAM policy.

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/iap_web/appengine-{{appId}}/services/{{service}}/versions/{{versionId}}
* {{project}}/{{appId}}/{{service}}/{{versionId}}
* {{appId}}/{{service}}/{{versionId}}
* {{version}}

Any variables not passed in the import command will be taken from the provider configuration.

Iap appengineversion IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
```
$ terraform import google_iap_app_engine_version_iam_member.editor "projects/{{project}}/iap_web/appengine-{{appId}}/services/{{service}}/versions/{{versionId}} roles/iap.httpsResourceAccessor jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
```
$ terraform import google_iap_app_engine_version_iam_binding.editor "projects/{{project}}/iap_web/appengine-{{appId}}/services/{{service}}/versions/{{versionId}} roles/iap.httpsResourceAccessor"
```

IAM policy imports use the identifier of the resource in question, e.g.
```
$ terraform import google_iap_app_engine_version_iam_policy.editor projects/{{project}}/iap_web/appengine-{{appId}}/services/{{service}}/versions/{{versionId}}
```

-> If you're importing a resource with beta features, make sure to include `-provider=google-beta`
as an argument so that Terraform uses the correct provider to import your resource.

-> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

## User Project Overrides

This resource supports [User Project Overrides](https://www.terraform.io/docs/providers/google/guides/provider_reference.html#user_project_override).
