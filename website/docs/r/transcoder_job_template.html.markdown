---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Transcoder"
description: |-
  Transcoding Job Template Resource
---

# google_transcoder_job_template

Transcoding Job Template Resource


To get more information about JobTemplate, see:

* [API documentation](https://cloud.google.com/transcoder/docs/reference/rest/v1/projects.locations.jobTemplates)
* How-to Guides
    * [Transcoder](https://cloud.google.com/transcoder/docs/)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=transcoder_job_template_basic&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Transcoder Job Template Basic


```hcl
resource "google_transcoder_job_template" "default" {
  job_template_id = "example-job-template"
  location = "us-central1"

  config {
    inputs {
      key = "input0"
    }
    edit_list {
      key               = "atom0"
      inputs            = ["input0"]
      start_time_offset = "0s"
    }
    ad_breaks {
      start_time_offset = "3.500s"
    }
    elementary_streams {
      key = "video-stream0"
      video_stream {
        h264 {
          width_pixels      = 640
          height_pixels     = 360
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 550000
          vbv_fullness_bits = 495000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"
        }
      }
    }
    elementary_streams {
      key = "video-stream1"
      video_stream {
        h264 {
          width_pixels      = 1280
          height_pixels     = 720
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 2500000
          vbv_fullness_bits = 2250000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"

        }
      }
    }
    elementary_streams {
      key = "audio-stream0"
      audio_stream {
        codec             = "aac"
        bitrate_bps       = 64000
        channel_count     = 2
        channel_layout    = ["fl", "fr"]
        sample_rate_hertz = 48000
      }
    }
    mux_streams {
      key                = "sd"
      file_name          = "sd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream0", "audio-stream0"]
    }
    mux_streams {
      key                = "hd"
      file_name          = "hd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream1", "audio-stream0"]
    }
  }
  labels = {
    "label" = "key"
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=transcoder_job_template_overlays&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Transcoder Job Template Overlays


```hcl
resource "google_transcoder_job_template" "default" {
  job_template_id = "example-job-template"
  location = "us-central1"
  config {
    inputs {
      key = "input0"
      uri = "gs://example/example.mp4"
    }
    output {
      uri = "gs://example/outputs/"
    }
    edit_list {
      key               = "atom0"
      inputs            = ["input0"]
      start_time_offset = "0s"
    }
    ad_breaks {
      start_time_offset = "3.500s"
    }
    overlays {
      animations {
        animation_fade {
          fade_type         = "FADE_IN"
          start_time_offset = "1.500s"
          end_time_offset   = "3.500s"
          xy {
            x = 1
            y = 0.5
          }
        }
      }
      image {
        uri = "gs://example/overlay.png"
      }
    }
    elementary_streams {
      key = "video-stream0"
      video_stream {
        h264 {
          width_pixels      = 640
          height_pixels     = 360
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 550000
          vbv_fullness_bits = 495000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"

        }
      }
    }
    elementary_streams {
      key = "video-stream1"
      video_stream {
        h264 {
          width_pixels      = 1280
          height_pixels     = 720
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 2500000
          vbv_fullness_bits = 2250000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"
        }
      }
    }
    elementary_streams {
      key = "audio-stream0"
      audio_stream {
        codec             = "aac"
        bitrate_bps       = 64000
        channel_count     = 2
        channel_layout    = ["fl", "fr"]
        sample_rate_hertz = 48000
      }
    }
    mux_streams {
      key                = "sd"
      file_name          = "sd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream0", "audio-stream0"]
    }
    mux_streams {
      key                = "hd"
      file_name          = "hd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream1", "audio-stream0"]
    }
  }
  labels = {
    "label" = "key"
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=transcoder_job_template_encryptions&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Transcoder Job Template Encryptions


```hcl
resource "google_secret_manager_secret" "encryption_key" {
  secret_id = "transcoder-encryption-key"
  replication {
    auto {}
  }
}

resource "google_secret_manager_secret_version" "encryption_key" {
  secret     = google_secret_manager_secret.encryption_key.name
  secret_data = "4A67F2C1B8E93A4F6D3E7890A1BC23DF"
}

resource "google_transcoder_job_template" "default" {
  job_template_id = "example-job-template"
  location        = "us-central1"

  config {
    elementary_streams {
      key = "es_video"
      video_stream {
        h264 {
          profile      = "main"
          height_pixels = 600
          width_pixels  = 800
          bitrate_bps  = 1000000
          frame_rate   = 60
        }
      }
    }

    elementary_streams {
      key = "es_audio"
      audio_stream {
        codec        = "aac"
        channel_count = 2
        bitrate_bps  = 160000
      }
    }

    encryptions {
      id = "aes-128"
      secret_manager_key_source {
        secret_version = google_secret_manager_secret_version.encryption_key.name
      }
      drm_systems {
        clearkey {}
      }
      aes128 {}
    }

    encryptions {
      id = "cenc"
      secret_manager_key_source {
        secret_version = google_secret_manager_secret_version.encryption_key.name
      }
      drm_systems {
        widevine {}
      }
      mpeg_cenc {
        scheme = "cenc"
      }
    }

    encryptions {
      id = "cbcs"
      secret_manager_key_source {
        secret_version = google_secret_manager_secret_version.encryption_key.name
      }
      drm_systems {
        widevine {}
      }
      mpeg_cenc {
        scheme = "cbcs"
      }
    }

    mux_streams {
      key                 = "ts_aes128"
      container           = "ts"
      elementary_streams  = ["es_video", "es_audio"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "aes-128"
    }

    mux_streams {
      key                 = "fmp4_cenc_video"
      container           = "fmp4"
      elementary_streams  = ["es_video"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "cenc"
    }

    mux_streams {
      key                 = "fmp4_cenc_audio"
      container           = "fmp4"
      elementary_streams  = ["es_audio"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "cenc"
    }

    mux_streams {
      key                 = "fmp4_cbcs_video"
      container           = "fmp4"
      elementary_streams  = ["es_video"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "cbcs"
    }

    mux_streams {
      key                 = "fmp4_cbcs_audio"
      container           = "fmp4"
      elementary_streams  = ["es_audio"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "cbcs"
    }

    manifests {
      file_name = "manifest_aes128.m3u8"
      type      = "HLS"
      mux_streams = ["ts_aes128"]
    }

    manifests {
      file_name = "manifest_cenc.mpd"
      type      = "DASH"
      mux_streams = ["fmp4_cenc_video", "fmp4_cenc_audio"]
    }

    manifests {
      file_name = "manifest_cbcs.mpd"
      type      = "DASH"
      mux_streams = ["fmp4_cbcs_video", "fmp4_cbcs_audio"]
    }
  }
  labels = {
    "label" = "key"
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=transcoder_job_template_pubsub&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Transcoder Job Template Pubsub


```hcl
resource "google_pubsub_topic" "transcoder_notifications" {
  name = "transcoder-notifications"
}

resource "google_transcoder_job_template" "default" {
  job_template_id = "example-job-template"
  location = "us-central1"
  config {
    inputs {
      key = "input0"
      uri = "gs://example/example.mp4"
    }
    output {
      uri = "gs://example/outputs/"
    }
    edit_list {
      key               = "atom0"
      inputs            = ["input0"]
      start_time_offset = "0s"
    }
    ad_breaks {
      start_time_offset = "3.500s"
    }
    elementary_streams {
      key = "video-stream0"
      video_stream {
        h264 {
          width_pixels      = 640
          height_pixels     = 360
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 550000
          vbv_fullness_bits = 495000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"

        }
      }
    }
    elementary_streams {
      key = "video-stream1"
      video_stream {
        h264 {
          width_pixels      = 1280
          height_pixels     = 720
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 2500000
          vbv_fullness_bits = 2250000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"
        }
      }
    }
    elementary_streams {
      key = "audio-stream0"
      audio_stream {
        codec             = "aac"
        bitrate_bps       = 64000
        channel_count     = 2
        channel_layout    = ["fl", "fr"]
        sample_rate_hertz = 48000
      }
    }
    mux_streams {
      key                = "sd"
      file_name          = "sd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream0", "audio-stream0"]
    }
    mux_streams {
      key                = "hd"
      file_name          = "hd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream1", "audio-stream0"]
    }
    pubsub_destination {
      topic = google_pubsub_topic.transcoder_notifications.id
    }
  }
  labels = {
    "label" = "key"
  }
}
```

## Argument Reference

The following arguments are supported:


* `job_template_id` -
  (Required)
  ID to use for the Transcoding job template.

* `location` -
  (Required)
  The location of the transcoding job template resource.


- - -


* `labels` -
  (Optional)
  The labels associated with this job template. You can use these to organize and group your job templates.

  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `config` -
  (Optional)
  The configuration for this template.
  Structure is [documented below](#nested_config).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_config"></a>The `config` block supports:

* `inputs` -
  (Optional)
  List of input assets stored in Cloud Storage.
  Structure is [documented below](#nested_inputs).

* `edit_list` -
  (Optional)
  List of input assets stored in Cloud Storage.
  Structure is [documented below](#nested_edit_list).

* `elementary_streams` -
  (Optional)
  List of input assets stored in Cloud Storage.
  Structure is [documented below](#nested_elementary_streams).

* `mux_streams` -
  (Optional)
  Multiplexing settings for output stream.
  Structure is [documented below](#nested_mux_streams).

* `manifests` -
  (Optional)
  Manifest configuration.
  Structure is [documented below](#nested_manifests).

* `output` -
  (Optional)
  Location of output file(s) in a Cloud Storage bucket.
  Structure is [documented below](#nested_output).

* `ad_breaks` -
  (Optional)
  Ad break.
  Structure is [documented below](#nested_ad_breaks).

* `pubsub_destination` -
  (Optional)
  Pub/Sub destination.
  Structure is [documented below](#nested_pubsub_destination).

* `overlays` -
  (Optional)
  List of overlays on the output video, in descending Z-order.
  Structure is [documented below](#nested_overlays).

* `encryptions` -
  (Optional)
  List of encryption configurations for the content.
  Structure is [documented below](#nested_encryptions).


<a name="nested_inputs"></a>The `inputs` block supports:

* `key` -
  (Optional)
  A unique key for this input. Must be specified when using advanced mapping and edit lists.

* `uri` -
  (Optional)
  URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, gs://bucket/inputs/file.mp4).
  If empty, the value is populated from Job.input_uri.

<a name="nested_edit_list"></a>The `edit_list` block supports:

* `key` -
  (Optional)
  A unique key for this atom.

* `inputs` -
  (Optional)
  List of values identifying files that should be used in this atom.

* `start_time_offset` -
  (Optional)
  Start time in seconds for the atom, relative to the input file timeline.  The default is `0s`.

<a name="nested_elementary_streams"></a>The `elementary_streams` block supports:

* `key` -
  (Optional)
  A unique key for this atom.

* `video_stream` -
  (Optional)
  Encoding of a video stream.
  Structure is [documented below](#nested_video_stream).

* `audio_stream` -
  (Optional)
  Encoding of an audio stream.
  Structure is [documented below](#nested_audio_stream).


<a name="nested_video_stream"></a>The `video_stream` block supports:

* `h264` -
  (Optional)
  H264 codec settings
  Structure is [documented below](#nested_h264).


<a name="nested_h264"></a>The `h264` block supports:

* `width_pixels` -
  (Optional)
  The width of the video in pixels.

* `height_pixels` -
  (Optional)
  The height of the video in pixels.

* `frame_rate` -
  (Required)
  The target video frame rate in frames per second (FPS).

* `bitrate_bps` -
  (Required)
  The video bitrate in bits per second.

* `pixel_format` -
  (Optional)
  Pixel format to use. The default is `yuv420p`.

* `rate_control_mode` -
  (Optional)
  Specify the mode. The default is `vbr`.

* `crf_level` -
  (Optional)
  Target CRF level. The default is `21`.

* `vbv_size_bits` -
  (Optional)
  Size of the Video Buffering Verifier (VBV) buffer in bits.

* `vbv_fullness_bits` -
  (Optional)
  Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.

* `entropy_coder` -
  (Optional)
  The entropy coder to use. The default is `cabac`.

* `profile` -
  (Optional)
  Enforces the specified codec profile.

* `preset` -
  (Optional)
  Enforces the specified codec preset. The default is `veryfast`.

* `gop_duration` -
  (Optional)
  Select the GOP size based on the specified duration. The default is `3s`.

* `sdr` -
  (Optional)
  SDR color format setting for H264.

* `hlg` -
  (Optional)
  HLG color format setting for H264.

<a name="nested_audio_stream"></a>The `audio_stream` block supports:

* `codec` -
  (Optional)
  The codec for this audio stream. The default is `aac`.

* `bitrate_bps` -
  (Required)
  Audio bitrate in bits per second.

* `channel_count` -
  (Optional)
  Number of audio channels. The default is `2`.

* `channel_layout` -
  (Optional)
  A list of channel names specifying layout of the audio channels.  The default is ["fl", "fr"].

* `sample_rate_hertz` -
  (Optional)
  The audio sample rate in Hertz. The default is `48000`.

<a name="nested_mux_streams"></a>The `mux_streams` block supports:

* `key` -
  (Optional)
  A unique key for this multiplexed stream.

* `file_name` -
  (Optional)
  The name of the generated file.

* `container` -
  (Optional)
  The container format. The default is `mp4`.

* `elementary_streams` -
  (Optional)
  List of ElementaryStream.key values multiplexed in this stream.

* `segment_settings` -
  (Optional)
  Segment settings for ts, fmp4 and vtt.
  Structure is [documented below](#nested_segment_settings).

* `encryption_id` -
  (Optional)
  Identifier of the encryption configuration to use.


<a name="nested_segment_settings"></a>The `segment_settings` block supports:

* `segment_duration` -
  (Optional)
  Duration of the segments in seconds. The default is `6.0s`.

<a name="nested_manifests"></a>The `manifests` block supports:

* `file_name` -
  (Optional)
  The name of the generated file. The default is `manifest`.

* `type` -
  (Required)
  Type of the manifest.
  Possible values are: `MANIFEST_TYPE_UNSPECIFIED`, `HLS`, `DASH`.

* `mux_streams` -
  (Optional)
  List of user supplied MuxStream.key values that should appear in this manifest.

<a name="nested_output"></a>The `output` block supports:

* `uri` -
  (Optional)
  URI for the output file(s). For example, gs://my-bucket/outputs/.

<a name="nested_ad_breaks"></a>The `ad_breaks` block supports:

* `start_time_offset` -
  (Optional)
  Start time in seconds for the ad break, relative to the output file timeline

<a name="nested_pubsub_destination"></a>The `pubsub_destination` block supports:

* `topic` -
  (Optional)
  The name of the Pub/Sub topic to publish job completion notification to. For example: projects/{project}/topics/{topic}.

<a name="nested_overlays"></a>The `overlays` block supports:

* `image` -
  (Optional)
  Image overlay.
  Structure is [documented below](#nested_image).

* `animations` -
  (Optional)
  List of animations. The list should be chronological, without any time overlap.
  Structure is [documented below](#nested_animations).


<a name="nested_image"></a>The `image` block supports:

* `uri` -
  (Required)
  URI of the image in Cloud Storage. For example, gs://bucket/inputs/image.png.

<a name="nested_animations"></a>The `animations` block supports:

* `animation_fade` -
  (Optional)
  Display overlay object with fade animation.
  Structure is [documented below](#nested_animation_fade).


<a name="nested_animation_fade"></a>The `animation_fade` block supports:

* `xy` -
  (Optional)
  Normalized coordinates based on output video resolution.
  Structure is [documented below](#nested_xy).

* `start_time_offset` -
  (Optional)
  The time to start the fade animation, in seconds.

* `end_time_offset` -
  (Optional)
  The time to end the fade animation, in seconds.

* `fade_type` -
  (Required)
  Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
  The possible values are:
  * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
  * `FADE_IN`: Fade the overlay object into view.
  * `FADE_OUT`: Fade the overlay object out of view.
  Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.


<a name="nested_xy"></a>The `xy` block supports:

* `x` -
  (Optional)
  Normalized x coordinate.

* `y` -
  (Optional)
  Normalized y coordinate.

<a name="nested_encryptions"></a>The `encryptions` block supports:

* `id` -
  (Required)
  Identifier for this set of encryption options.

* `drm_systems` -
  (Optional)
  DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
  Structure is [documented below](#nested_drm_systems).

* `aes128` -
  (Optional)
  Configuration for AES-128 encryption.

* `sample_aes` -
  (Optional)
  Configuration for SAMPLE-AES encryption.

* `mpeg_cenc` -
  (Optional)
  Configuration for MPEG Common Encryption (MPEG-CENC).
  Structure is [documented below](#nested_mpeg_cenc).

* `secret_manager_key_source` -
  (Optional)
  Configuration for secrets stored in Google Secret Manager.
  Structure is [documented below](#nested_secret_manager_key_source).


<a name="nested_drm_systems"></a>The `drm_systems` block supports:

* `widevine` -
  (Optional)
  Widevine configuration.

* `fairplay` -
  (Optional)
  Fairplay configuration.

* `playready` -
  (Optional)
  Playready configuration.

* `clearkey` -
  (Optional)
  Clearkey configuration.

<a name="nested_mpeg_cenc"></a>The `mpeg_cenc` block supports:

* `scheme` -
  (Required)
  Specify the encryption scheme.

<a name="nested_secret_manager_key_source"></a>The `secret_manager_key_source` block supports:

* `secret_version` -
  (Required)
  The name of the Secret Version containing the encryption key in the following format: projects/{project}/secrets/{secret_id}/versions/{version_number}.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}`

* `name` -
  The resource name of the job template.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


JobTemplate can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}`
* `{{project}}/{{location}}/{{job_template_id}}`
* `{{location}}/{{job_template_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import JobTemplate using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}"
  to = google_transcoder_job_template.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), JobTemplate can be imported using one of the formats above. For example:

```
$ terraform import google_transcoder_job_template.default projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}
$ terraform import google_transcoder_job_template.default {{project}}/{{location}}/{{job_template_id}}
$ terraform import google_transcoder_job_template.default {{location}}/{{job_template_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
