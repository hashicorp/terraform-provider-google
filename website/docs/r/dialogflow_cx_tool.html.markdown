---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dialogflowcx/Tool.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Dialogflow CX"
description: |-
  A tool provides a list of actions which are available to the Playbook to attain its goal.
---

# google_dialogflow_cx_tool

A tool provides a list of actions which are available to the Playbook to attain its goal.
A Tool consists of a description of the tool's usage and a specification of the tool which contains the schema and authentication information.


To get more information about Tool, see:

* [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.tools)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)

~> **Warning:** All arguments including the following potentially sensitive
values will be stored in the raw state as plain text: `open_api_spec.authentication.api_key_config.api_key`, `open_api_spec.authentication.oauth_config.client_secret`, `open_api_spec.authentication.bearer_token_config.token`.
[Read more about sensitive data in state](https://www.terraform.io/language/state/sensitive-data).

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=dialogflowcx_tool_open_api&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Dialogflowcx Tool Open Api


```hcl
resource "google_dialogflow_cx_agent" "agent" {
  display_name = "dialogflowcx-agent-open-api"
  location = "global"
  default_language_code = "en"
  time_zone = "America/New_York"
  description = "Example description."
}

resource "google_dialogflow_cx_tool" "open_api_tool" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Example Open API Tool"
  description  = "Example Description"
  open_api_spec {
    authentication {
      oauth_config {
        oauth_grant_type                 = "CLIENT_CREDENTIAL"
        client_id                        = "example client ID"
        client_secret                    = "example client secret"
        scopes                           = [
          "example scope"
        ]
        secret_version_for_client_secret = "projects/-/secrets/-/versions/-"
        token_endpoint                   = "https://example.com/oauth/token"
      }
    }
    tls_config {
      ca_certs {
        display_name = "example ca cert name"
        cert = base64encode("example cert")
      }
    }
    service_directory_config {
      service = "projects/-/locations/-/namespaces/-/services/-"
    }
    text_schema = <<EOF
    {
      "openapi": "3.0.0",
      "info": {
        "title": "Time API",
        "version": "1.0.0",
        "description": "A simple API to get the current time."
      },
      "servers": [
        {
          "url": "https://example-api-endpoint.com"
        }
      ],
      "paths": {
        "/time": {
          "get": {
            "operationId": "getCurrentTime",
            "summary": "Gets the current server time.",
            "responses": {
              "200": {
                "description": "Successful response with the current time.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "currentTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The current time in ISO 8601 format."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    EOF
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=dialogflowcx_tool_data_store&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Dialogflowcx Tool Data Store


```hcl
resource "google_dialogflow_cx_agent" "agent" {
  display_name = "dialogflowcx-agent-data-store"
  location = "global"
  default_language_code = "en"
  time_zone = "America/New_York"
  description = "Example description."
  delete_chat_engine_on_destroy = true
  depends_on = [
    google_discovery_engine_data_store.my_datastore
  ]
}

resource "google_dialogflow_cx_tool" "data_store_tool" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Example Data Store Tool"
  description  = "Example Description"
  data_store_spec {
    data_store_connections {
      data_store_type = "UNSTRUCTURED"
      data_store = "projects/${data.google_project.project.number}/locations/global/collections/default_collection/dataStores/${google_discovery_engine_data_store.my_datastore.data_store_id}"
      document_processing_mode = "DOCUMENTS"
    }
    fallback_prompt {} 
  }
  depends_on = [
    google_discovery_engine_data_store.my_datastore,
    google_dialogflow_cx_agent.agent
  ]
}

resource "google_discovery_engine_data_store" "my_datastore" {
  location          = "global"
  data_store_id     = "datastore-tool-test-%{random_suffix}"
  display_name      = "datastore for Tool test"
  industry_vertical = "GENERIC"
  content_config    = "NO_CONTENT"
  solution_types    = ["SOLUTION_TYPE_CHAT"]
}

data "google_project" "project" {
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=dialogflowcx_tool_function&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Dialogflowcx Tool Function


```hcl
resource "google_dialogflow_cx_agent" "agent" {
  display_name = "dialogflowcx-agent-fucntion"
  location = "global"
  default_language_code = "en"
  time_zone = "America/New_York"
  description = "Example description."
}

resource "google_dialogflow_cx_tool" "function_tool" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Example Function Tool"
  description  = "Example Description"
  function_spec {
    input_schema  = <<EOF
      {
        "type": "object",
        "properties": {
          "message_to_echo": {
            "type": "string",
            "description": "The message that should be echoed back."
          }
        },
        "required": [
          "message_to_echo"
        ]
      }
    EOF
    output_schema = <<EOF
      {
        "type": "object",
        "properties": {
          "echoed_message": {
            "type": "string",
            "description": "The message that is echoed back."
          }
        }
      }
    EOF
  }
}
```

## Argument Reference

The following arguments are supported:


* `display_name` -
  (Required)
  The human-readable name of the tool, unique within the agent.

* `description` -
  (Required)
  High level description of the Tool and its usage.


- - -


* `open_api_spec` -
  (Optional)
  OpenAPI specification of the Tool.
  This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
  Structure is [documented below](#nested_open_api_spec).

* `data_store_spec` -
  (Optional)
  Data store search tool specification.
  This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
  Structure is [documented below](#nested_data_store_spec).

* `function_spec` -
  (Optional)
  Client side executed function specification.
  This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
  Structure is [documented below](#nested_function_spec).

* `parent` -
  (Optional)
  The agent to create a Tool for.
  Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.


<a name="nested_open_api_spec"></a>The `open_api_spec` block supports:

* `authentication` -
  (Optional)
  Optional. Authentication information required by the API.
  Structure is [documented below](#nested_open_api_spec_authentication).

* `tls_config` -
  (Optional)
  Optional. TLS configuration for the HTTPS verification.
  Structure is [documented below](#nested_open_api_spec_tls_config).

* `service_directory_config` -
  (Optional)
  Optional. Service Directory configuration.
  Structure is [documented below](#nested_open_api_spec_service_directory_config).

* `text_schema` -
  (Required)
  The OpenAPI schema specified as a text.
  This field is part of a union field `schema`: only one of `textSchema` may be set.


<a name="nested_open_api_spec_authentication"></a>The `authentication` block supports:

* `api_key_config` -
  (Optional)
  Config for API key auth.
  This field is part of a union field `auth_config`: Only one of `apiKeyConfig`, `oauthConfig`, `serviceAgentAuthConfig`, or `bearerTokenConfig` may be set.
  Structure is [documented below](#nested_open_api_spec_authentication_api_key_config).

* `oauth_config` -
  (Optional)
  Config for OAuth.
  This field is part of a union field `auth_config`: Only one of `apiKeyConfig`, `oauthConfig`, `serviceAgentAuthConfig`, or `bearerTokenConfig` may be set.
  Structure is [documented below](#nested_open_api_spec_authentication_oauth_config).

* `service_agent_auth_config` -
  (Optional)
  Config for [Diglogflow service agent](https://cloud.google.com/iam/docs/service-agents#dialogflow-service-agent) auth.
  This field is part of a union field `auth_config`: Only one of `apiKeyConfig`, `oauthConfig`, `serviceAgentAuthConfig`, or `bearerTokenConfig` may be set.
  Structure is [documented below](#nested_open_api_spec_authentication_service_agent_auth_config).

* `bearer_token_config` -
  (Optional)
  Config for bearer token auth.
  This field is part of a union field `auth_config`: Only one of `apiKeyConfig`, `oauthConfig`, `serviceAgentAuthConfig`, or `bearerTokenConfig` may be set.
  Structure is [documented below](#nested_open_api_spec_authentication_bearer_token_config).


<a name="nested_open_api_spec_authentication_api_key_config"></a>The `api_key_config` block supports:

* `key_name` -
  (Required)
  The parameter name or the header name of the API key.
  E.g., If the API request is "https://example.com/act?X-Api-Key=", "X-Api-Key" would be the parameter name.

* `api_key` -
  (Optional)
  Optional. The API key. If the `secretVersionForApiKey`` field is set, this field will be ignored.
  **Note**: This property is sensitive and will not be displayed in the plan.

* `secret_version_for_api_key` -
  (Optional)
  Optional. The name of the SecretManager secret version resource storing the API key.
  If this field is set, the apiKey field will be ignored.
  Format: projects/{project}/secrets/{secret}/versions/{version}

* `request_location` -
  (Required)
  Key location in the request.
  See [RequestLocation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.tools#requestlocation) for valid values.

<a name="nested_open_api_spec_authentication_oauth_config"></a>The `oauth_config` block supports:

* `oauth_grant_type` -
  (Required)
  OAuth grant types.
  See [OauthGrantType](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.tools#oauthgranttype) for valid values

* `client_id` -
  (Required)
  The client ID from the OAuth provider.

* `client_secret` -
  (Optional)
  Optional. The client secret from the OAuth provider. If the `secretVersionForClientSecret` field is set, this field will be ignored.
  **Note**: This property is sensitive and will not be displayed in the plan.

* `secret_version_for_client_secret` -
  (Optional)
  Optional. The name of the SecretManager secret version resource storing the client secret.
  If this field is set, the clientSecret field will be ignored.
  Format: projects/{project}/secrets/{secret}/versions/{version}

* `token_endpoint` -
  (Required)
  The token endpoint in the OAuth provider to exchange for an access token.

* `scopes` -
  (Optional)
  Optional. The OAuth scopes to grant.

<a name="nested_open_api_spec_authentication_service_agent_auth_config"></a>The `service_agent_auth_config` block supports:

* `service_agent_auth` -
  (Optional)
  Optional. Indicate the auth token type generated from the Diglogflow service agent.
  The generated token is sent in the Authorization header.
  See [ServiceAgentAuth](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.tools#serviceagentauth) for valid values.

<a name="nested_open_api_spec_authentication_bearer_token_config"></a>The `bearer_token_config` block supports:

* `token` -
  (Optional)
  Optional. The text token appended to the text Bearer to the request Authorization header.
  [Session parameters reference](https://cloud.google.com/dialogflow/cx/docs/concept/parameter#session-ref) can be used to pass the token dynamically, e.g. `$session.params.parameter-id`.
  **Note**: This property is sensitive and will not be displayed in the plan.

* `secret_version_for_token` -
  (Optional)
  Optional. The name of the SecretManager secret version resource storing the Bearer token. If this field is set, the `token` field will be ignored.
  Format: projects/{project}/secrets/{secret}/versions/{version}

<a name="nested_open_api_spec_tls_config"></a>The `tls_config` block supports:

* `ca_certs` -
  (Required)
  Specifies a list of allowed custom CA certificates for HTTPS verification.
  Structure is [documented below](#nested_open_api_spec_tls_config_ca_certs).


<a name="nested_open_api_spec_tls_config_ca_certs"></a>The `ca_certs` block supports:

* `display_name` -
  (Required)
  The name of the allowed custom CA certificates. This can be used to disambiguate the custom CA certificates.

* `cert` -
  (Required)
  The allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store.
  If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates.
  N.B. Make sure the HTTPS server certificates are signed with "subject alt name".
  For instance a certificate can be self-signed using the following command:
  ```
    openssl x509 -req -days 200 -in example.com.csr \
      -signkey example.com.key \
      -out example.com.crt \
      -extfile <(printf "\nsubjectAltName='DNS:www.example.com'")
  ```
  A base64-encoded string.

<a name="nested_open_api_spec_service_directory_config"></a>The `service_directory_config` block supports:

* `service` -
  (Required)
  The name of [Service Directory](https://cloud.google.com/service-directory/docs) service.
  Format: projects/<ProjectID>/locations/<LocationID>/namespaces/<NamespaceID>/services/<ServiceID>. LocationID of the service directory must be the same as the location of the agent.

<a name="nested_data_store_spec"></a>The `data_store_spec` block supports:

* `data_store_connections` -
  (Required)
  List of data stores to search.
  Structure is [documented below](#nested_data_store_spec_data_store_connections).

* `fallback_prompt` -
  (Required)
  Fallback prompt configurations to use.


<a name="nested_data_store_spec_data_store_connections"></a>The `data_store_connections` block supports:

* `data_store_type` -
  (Optional)
  The type of the connected data store.
  See [DataStoreType](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/DataStoreConnection#datastoretype) for valid values.

* `data_store` -
  (Optional)
  The full name of the referenced data store. Formats: projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore} projects/{project}/locations/{location}/dataStores/{dataStore}

* `document_processing_mode` -
  (Optional)
  The document processing mode for the data store connection. Should only be set for PUBLIC_WEB and UNSTRUCTURED data stores. If not set it is considered as DOCUMENTS, as this is the legacy mode.
  See [DocumentProcessingMode](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/DataStoreConnection#documentprocessingmode) for valid values.

<a name="nested_function_spec"></a>The `function_spec` block supports:

* `input_schema` -
  (Optional)
  Optional. The JSON schema is encapsulated in a [google.protobuf.Struct](https://protobuf.dev/reference/protobuf/google.protobuf/#struct) to describe the input of the function.
  This input is a JSON object that contains the function's parameters as properties of the object

* `output_schema` -
  (Optional)
  Optional. The JSON schema is encapsulated in a [google.protobuf.Struct](https://protobuf.dev/reference/protobuf/google.protobuf/#struct) to describe the output of the function.
  This output is a JSON object that contains the function's parameters as properties of the object

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `{{parent}}/tools/{{name}}`

* `name` -
  The unique identifier of the Tool.
  Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/tools/<Tool ID>.

* `tool_type` -
  The tool type.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 40 minutes.
- `update` - Default is 40 minutes.
- `delete` - Default is 20 minutes.

## Import


Tool can be imported using any of these accepted formats:

* `{{parent}}/tools/{{name}}`
* `{{parent}}/{{name}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Tool using one of the formats above. For example:

```tf
import {
  id = "{{parent}}/tools/{{name}}"
  to = google_dialogflow_cx_tool.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Tool can be imported using one of the formats above. For example:

```
$ terraform import google_dialogflow_cx_tool.default {{parent}}/tools/{{name}}
$ terraform import google_dialogflow_cx_tool.default {{parent}}/{{name}}
```
