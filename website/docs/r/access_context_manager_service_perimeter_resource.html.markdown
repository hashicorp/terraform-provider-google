---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/accesscontextmanager/ServicePerimeterResource.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Access Context Manager (VPC Service Controls)"
description: |-
  Allows configuring a single GCP resource that should be inside the `status` block of a service perimeter.
---

# google_access_context_manager_service_perimeter_resource

Allows configuring a single GCP resource that should be inside the `status` block of a service perimeter.
This resource is intended to be used in cases where it is not possible to compile a full list
of projects to include in a `google_access_context_manager_service_perimeter` resource,
to enable them to be added separately.
If your perimeter is in dry-run mode use `google_access_context_manager_service_perimeter_dry_run_resource` instead.

~> **Note:** If this resource is used alongside a `google_access_context_manager_service_perimeter` resource,
the service perimeter resource must have a `lifecycle` block with `ignore_changes = [status[0].resources]` so
they don't fight over which resources should be in the policy.


To get more information about ServicePerimeterResource, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters)
* How-to Guides
    * [Service Perimeter Quickstart](https://cloud.google.com/vpc-service-controls/docs/quickstart)

~> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage - Access Context Manager Service Perimeter Resource Basic


```hcl
resource "google_access_context_manager_service_perimeter_resource" "service-perimeter-resource" {
  perimeter_name = google_access_context_manager_service_perimeter.service-perimeter-resource.name
  resource = "projects/987654321"
}

resource "google_access_context_manager_service_perimeter" "service-perimeter-resource" {
  parent = "accessPolicies/${google_access_context_manager_access_policy.access-policy.name}"
  name   = "accessPolicies/${google_access_context_manager_access_policy.access-policy.name}/servicePerimeters/restrict_all"
  title  = "restrict_all"
  status {
    restricted_services = ["storage.googleapis.com"]
  }

  lifecycle {
    ignore_changes = [status[0].resources]
  }
}

resource "google_access_context_manager_access_policy" "access-policy" {
  parent = "organizations/123456789"
  title  = "my policy"
}
```

## Argument Reference

The following arguments are supported:


* `resource` -
  (Required)
  A GCP resource that is inside of the service perimeter.
  Currently only projects are allowed.
  Format: projects/{project_number}

* `perimeter_name` -
  (Required)
  The name of the Service Perimeter to add this resource to.


- - -



## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `{{perimeter_name}}/{{resource}}`

* `access_policy_id` -
  The name of the Access Policy this resource belongs to.

* `etag` -
  The perimeter etag is internally used to prevent overwriting the list of perimeter resources on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of resources. The resource to add or remove is merged into that list and then this etag is sent with the PATCH call along with the updated resource list.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


ServicePerimeterResource can be imported using any of these accepted formats:

* `{{perimeter_name}}/{{resource}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ServicePerimeterResource using one of the formats above. For example:

```tf
import {
  id = "{{perimeter_name}}/{{resource}}"
  to = google_access_context_manager_service_perimeter_resource.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), ServicePerimeterResource can be imported using one of the formats above. For example:

```
$ terraform import google_access_context_manager_service_perimeter_resource.default {{perimeter_name}}/{{resource}}
```
