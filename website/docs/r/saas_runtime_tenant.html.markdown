---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/saasservicemgmt/Tenant.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "SaaS Runtime"
description: |-
  The Tenant resource represents the service producer's view of a service instance created for a consumer.
---

# google_saas_runtime_tenant

The Tenant resource represents the service producer's view of a service instance created for a consumer. It enables the association between the service producer's managed resources and the end consumer.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.


## Example Usage - Saas Runtime Tenant Basic


```hcl
resource "google_saas_runtime_saas" "example_saas" {
  provider = google-beta
  saas_id  = "example-saas"
  location = "global"

  locations {
    name = "us-central1"
  }
}

resource "google_saas_runtime_tenant" "example" {
  provider = google-beta
  location = "global"
  tenant_id = "example-tenant"
  saas = google_saas_runtime_saas.example_saas.id
  consumer_resource = "//compute.googleapis.com/projects/example-project/zones/us-central1-a/instances/example-instance"
}
```

## Argument Reference

The following arguments are supported:


* `saas` -
  (Required)
  A reference to the Saas that defines the product (managed service) that
  the producer wants to manage with SaaS Runtime. Part of the
  SaaS Runtime common data model.

* `location` -
  (Required)
  Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.

* `tenant_id` -
  (Required)
  The ID value for the new tenant.


* `annotations` -
  (Optional)
  Annotations is an unstructured key-value map stored with a resource that
  may be set by external tools to store and retrieve arbitrary metadata.
  They are not queryable and should be preserved when modifying objects.
  More info: https://kubernetes.io/docs/user-guide/annotations
  **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
  Please refer to the field `effective_annotations` for all of the annotations present on the resource.

* `consumer_resource` -
  (Optional)
  A reference to the consumer resource this SaaS Tenant is representing.
  The relationship with a consumer resource can be used by SaaS Runtime for
  retrieving consumer-defined settings and policies such as maintenance
  policies (using Unified Maintenance Policy API).

* `labels` -
  (Optional)
  The labels on the resource, which can be used for categorization.
  similar to Kubernetes resource labels.
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.



## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/tenants/{{tenant_id}}`

* `create_time` -
  The timestamp when the resource was created.

* `name` -
  Identifier. The resource name (full URI of the resource) following the standard naming
  scheme:
  "projects/{project}/locations/{location}/tenants/{tenant}"

* `uid` -
  The unique identifier of the resource. UID is unique in the time
  and space for this resource within the scope of the service. It is
  typically generated by the server on successful creation of a resource
  and must not be changed. UID is used to uniquely identify resources
  with resource name reuses. This should be a UUID4.

* `update_time` -
  The timestamp when the resource was last updated. Any
  change to the resource made by users must refresh this value.
  Changes to a resource made by the service should refresh this value.

* `effective_annotations` -
  All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Tenant can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/tenants/{{tenant_id}}`
* `{{project}}/{{location}}/{{tenant_id}}`
* `{{location}}/{{tenant_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Tenant using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/tenants/{{tenant_id}}"
  to = google_saas_runtime_tenant.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Tenant can be imported using one of the formats above. For example:

```
$ terraform import google_saas_runtime_tenant.default projects/{{project}}/locations/{{location}}/tenants/{{tenant_id}}
$ terraform import google_saas_runtime_tenant.default {{project}}/{{location}}/{{tenant_id}}
$ terraform import google_saas_runtime_tenant.default {{location}}/{{tenant_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
