---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apihub/Plugin.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "API Hub"
description: |-
  A plugin resource in the API hub.
---

# google_apihub_plugin

A plugin resource in the API hub.



## Example Usage - Apihub Plugin Full


```hcl
resource "google_apihub_plugin" "apihub_plugin_full" {
  location = "us-central1"
  display_name = "Test Plugin"
  description="Test description"
  plugin_id = "plugin-full"
  plugin_category = "API_GATEWAY"
  actions_config {
    id = "sync-metadata"
    display_name = "Sync Metadata"
    description = "Syncs API metadata."
    trigger_mode = "API_HUB_SCHEDULE_TRIGGER"
  }
  documentation {
    external_uri = "https://example.com/plugin-documentation"
  }
  hosting_service {
    service_uri = "https://your-plugin-service.example.com/api"
  }
  config_template {
    auth_config_template {
      supported_auth_types = ["NO_AUTH", "USER_PASSWORD"]
      service_account {
        service_account = "test@developer.gserviceaccount.com"
      }
    }
    additional_config_template {
      id = "string-val"
      description = "API key for the service."
      value_type = "STRING"
      required = false
      validation_regex = "^[a-zA-Z0-9]{5,20}$"
    }
    additional_config_template {
      id = "integer-val"
      description = "API key for the service."
      value_type = "INT"
      required = true
      validation_regex = ""
    }
    additional_config_template {
      id = "bool-val"
      description = "API key for the service."
      value_type = "BOOL"
      required = false
      validation_regex = ""
    }
    additional_config_template {
      id = "enum-val"
      description = "API key for the service."
      value_type = "ENUM"
      enum_options {
        id = "Option1"
        display_name = "Option1"
        description = "Description for Option1"
      }
      enum_options {
        id = "Option2"
        display_name = "Option2"
        description = "Description for Option2"
      }
      required = false
      validation_regex = ""
    }
  }
}
```

## Argument Reference

The following arguments are supported:


* `display_name` -
  (Required)
  The display name of the plugin. Max length is 50 characters (Unicode code
  points).

* `location` -
  (Required)
  Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.

* `plugin_id` -
  (Required)
  The ID to use for the Plugin resource, which will become the final
  component of the Plugin's resource name. This field is optional.
  * If provided, the same will be used. The service will throw an error if
  the specified id is already used by another Plugin resource in the API hub
  instance.
  * If not provided, a system generated id will be used.
  This value should be 4-63 characters, overall resource name which will be
  of format
  `projects/{project}/locations/{location}/plugins/{plugin}`,
  its length is limited to 1000 characters and valid characters are
  /a-z[0-9]-_/.


- - -


* `description` -
  (Optional)
  The plugin description. Max length is 2000 characters (Unicode code
  points).

* `actions_config` -
  (Optional)
  The configuration of actions supported by the plugin.
  Structure is [documented below](#nested_actions_config).

* `documentation` -
  (Optional)
  Documentation details.
  Structure is [documented below](#nested_documentation).

* `plugin_category` -
  (Optional)
  Possible values:
  PLUGIN_CATEGORY_UNSPECIFIED
  API_GATEWAY
  API_PRODUCER

* `config_template` -
  (Optional)
  ConfigTemplate represents the configuration template for a plugin.
  Structure is [documented below](#nested_config_template).

* `hosting_service` -
  (Optional)
  The information related to the service implemented by the plugin
  developer, used to invoke the plugin's functionality.
  Structure is [documented below](#nested_hosting_service).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_actions_config"></a>The `actions_config` block supports:

* `id` -
  (Required)
  The id of the action.

* `display_name` -
  (Required)
  The display name of the action.

* `description` -
  (Required)
  The description of the operation performed by the action.

* `trigger_mode` -
  (Required)
  The trigger mode supported by the action.
  Possible values:
  TRIGGER_MODE_UNSPECIFIED
  API_HUB_ON_DEMAND_TRIGGER
  API_HUB_SCHEDULE_TRIGGER
  NON_API_HUB_MANAGED

<a name="nested_documentation"></a>The `documentation` block supports:

* `external_uri` -
  (Optional)
  The uri of the externally hosted documentation.

<a name="nested_config_template"></a>The `config_template` block supports:

* `auth_config_template` -
  (Optional)
  AuthConfigTemplate represents the authentication template for a plugin.
  Structure is [documented below](#nested_config_template_auth_config_template).

* `additional_config_template` -
  (Optional)
  The list of additional configuration variables for the plugin's
  configuration.
  Structure is [documented below](#nested_config_template_additional_config_template).


<a name="nested_config_template_auth_config_template"></a>The `auth_config_template` block supports:

* `supported_auth_types` -
  (Required)
  The list of authentication types supported by the plugin.

* `service_account` -
  (Optional)
  Config for Google service account authentication.
  Structure is [documented below](#nested_config_template_auth_config_template_service_account).


<a name="nested_config_template_auth_config_template_service_account"></a>The `service_account` block supports:

* `service_account` -
  (Required)
  The service account to be used for authenticating request.
  The `iam.serviceAccounts.getAccessToken` permission should be granted on
  this service account to the impersonator service account.

<a name="nested_config_template_additional_config_template"></a>The `additional_config_template` block supports:

* `required` -
  (Optional)
  Flag represents that this `ConfigVariable` must be provided for a
  PluginInstance.

* `enum_options` -
  (Optional)
  Enum options. To be populated if `ValueType` is `ENUM`.
  Structure is [documented below](#nested_config_template_additional_config_template_additional_config_template_enum_options).

* `multi_select_options` -
  (Optional)
  Multi select options. To be populated if `ValueType` is `MULTI_SELECT`.
  Structure is [documented below](#nested_config_template_additional_config_template_additional_config_template_multi_select_options).

* `id` -
  (Required)
  ID of the config variable. Must be unique within the configuration.

* `value_type` -
  (Required)
  Type of the parameter: string, int, bool etc.
  Possible values:
  VALUE_TYPE_UNSPECIFIED
  STRING
  INT
  BOOL
  SECRET
  ENUM
  MULTI_SELECT
  MULTI_STRING
  MULTI_INT

* `description` -
  (Optional)
  Description.

* `validation_regex` -
  (Optional)
  Regular expression in RE2 syntax used for validating the `value` of a
  `ConfigVariable`.


<a name="nested_config_template_additional_config_template_additional_config_template_enum_options"></a>The `enum_options` block supports:

* `id` -
  (Required)
  Id of the option.

* `display_name` -
  (Required)
  Display name of the option.

* `description` -
  (Optional)
  Description of the option.

<a name="nested_config_template_additional_config_template_additional_config_template_multi_select_options"></a>The `multi_select_options` block supports:

* `id` -
  (Required)
  Id of the option.

* `display_name` -
  (Required)
  Display name of the option.

* `description` -
  (Optional)
  Description of the option.

<a name="nested_hosting_service"></a>The `hosting_service` block supports:

* `service_uri` -
  (Optional)
  The URI of the service implemented by the plugin developer, used to
  invoke the plugin's functionality. This information is only required for
  user defined plugins.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}`

* `state` -
  Represents the state of the plugin.
  Note this field will not be set for plugins developed via plugin
  framework as the state will be managed at plugin instance level.
  Possible values:
  STATE_UNSPECIFIED
  ENABLED
  DISABLED

* `ownership_type` -
  The type of the plugin, indicating whether it is 'SYSTEM_OWNED' or
  'USER_OWNED'.
  Possible values:
  OWNERSHIP_TYPE_UNSPECIFIED
  SYSTEM_OWNED
  USER_OWNED

* `name` -
  Identifier. The name of the plugin.
  Format: `projects/{project}/locations/{location}/plugins/{plugin}`

* `create_time` -
  Timestamp indicating when the plugin was created.

* `update_time` -
  Timestamp indicating when the plugin was last updated.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Plugin can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}`
* `{{project}}/{{location}}/{{plugin_id}}`
* `{{location}}/{{plugin_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Plugin using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}"
  to = google_apihub_plugin.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Plugin can be imported using one of the formats above. For example:

```
$ terraform import google_apihub_plugin.default projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}
$ terraform import google_apihub_plugin.default {{project}}/{{location}}/{{plugin_id}}
$ terraform import google_apihub_plugin.default {{location}}/{{plugin_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
