---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/DataConnector.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Discovery Engine"
description: |-
  DataConnector manages the connection to external data sources for all data stores grouped
  under a Collection.
---

# google_discovery_engine_data_connector

DataConnector manages the connection to external data sources for all data stores grouped
under a Collection. It's a singleton resource of Collection. The initialization is only
supported through DataConnectorService.SetUpDataConnector method, which will create a new
Collection and initialize its DataConnector.


To get more information about DataConnector, see:

* [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rpc/google.cloud.discoveryengine.v1alpha#dataconnectorservice)
* How-to Guides
    * [Introduction](https://cloud.google.com/agentspace/docs/introduction-to-connectors-and-data-stores)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=discoveryengine_dataconnector_jira_basic&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Discoveryengine Dataconnector Jira Basic


```hcl
resource "google_discovery_engine_data_connector" "jira-basic" {
  location                  = "global"
  collection_id             = "collection-id"
  collection_display_name   = "tf-test-dataconnector-jira"
  data_source             = "jira"
  params = {
      instance_id         = "33db20a3-dc45-4305-a505-d70b68599840"
      instance_uri        = "https://vaissptbots1.atlassian.net/"
      client_secret       = "client-secret"
      client_id           = "client-id"
      refresh_token       = "fill-in-the-blank"
  }
  refresh_interval        = "86400s"
  entities {
      entity_name         = "project"
  }
  entities {
      entity_name         = "issue"
  }
  entities {
      entity_name         = "attachment"
  }
  entities {
      entity_name         = "comment"
  }
  entities {
      entity_name         = "worklog"
  }
  static_ip_enabled       = true
}
```

## Argument Reference

The following arguments are supported:


* `data_source` -
  (Required)
  The name of the data source.
  Supported values: `salesforce`, `jira`, `confluence`, `bigquery`.

* `refresh_interval` -
  (Required)
  The refresh interval for data sync. If duration is set to 0, the data will
  be synced in real time. The streaming feature is not supported yet. The
  minimum is 30 minutes and maximum is 7 days. When the refresh interval is
  set to the same value as the incremental refresh interval, incremental
  sync will be disabled.

* `location` -
  (Required)
  The geographic location where the data store should reside. The value can
  only be one of "global", "us" and "eu".

* `collection_id` -
  (Required)
  The ID to use for the Collection, which will become the final component
  of the Collection's resource name. A new Collection is created as
  part of the DataConnector setup. DataConnector is a singleton
  resource under Collection, managing all DataStores of the Collection.
  This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
  standard with a length limit of 63 characters. Otherwise, an
  INVALID_ARGUMENT error is returned.

* `collection_display_name` -
  (Required)
  The display name of the Collection.
  Should be human readable, used to display collections in the Console
  Dashboard. UTF-8 encoded string with limit of 1024 characters.


* `params` -
  (Optional)
  Params needed to access the source in the format of String-to-String (Key, Value) pairs.

* `json_params` -
  (Optional)
  Params needed to access the source in the format of json string.

* `entities` -
  (Optional)
  List of entities from the connected data source to ingest.
  Structure is [documented below](#nested_entities).

* `kms_key_name` -
  (Optional)
  The KMS key to be used to protect the DataStores managed by this connector.
  Must be set for requests that need to comply with CMEK Org Policy
  protections.
  If this field is set and processed successfully, the DataStores created by
  this connector will be protected by the KMS key.

* `static_ip_enabled` -
  (Optional)
  Whether customer has enabled static IP addresses for this connector.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.



<a name="nested_entities"></a>The `entities` block supports:

* `entity_name` -
  (Optional)
  The name of the entity. Supported values by data source:
  * Salesforce: `Lead`, `Opportunity`, `Contact`, `Account`, `Case`, `Contract`, `Campaign`
  * Jira: project, issue, attachment, comment, worklog
  * Confluence: `Content`, `Space`

* `key_property_mappings` -
  (Optional)
  Attributes for indexing.
  Key: Field name.
  Value: The key property to map a field to, such as `title`, and
  `description`. Supported key properties:
  * `title`: The title for data record. This would be displayed on search
    results.
  * `description`: The description for data record. This would be displayed
    on search results.

* `data_store` -
  (Output)
  The full resource name of the associated data store for the source
  entity.
  Format: `projects/*/locations/*/collections/*/dataStores/*`.
  When the connector is initialized by the DataConnectorService.SetUpDataConnector
  method, a DataStore is automatically created for each source entity.

* `params` -
  (Optional)
  The parameters for the entity to facilitate data ingestion.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector`

* `name` -
  The full resource name of the Data Connector.
  Format: `projects/*/locations/*/collections/*/dataConnector`.

* `state` -
  The state of connector. The possible value can be:
  'STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'RUNNING', 'WARNING',
  'INITIALIZATION_FAILED', 'UPDATING'.

* `create_time` -
  Timestamp when the DataConnector was created.

* `latest_pause_time` -
  The most recent timestamp when this [DataConnector][] was paused,
  affecting all functionalities such as data synchronization.
  Pausing a connector has the following effects:
    - All functionalities, including data synchronization, are halted.
    - Any ongoing data synchronization job will be canceled.
    - No future data synchronization runs will be scheduled nor can be
  triggered.

* `last_sync_time` -
  For periodic connectors only, the last time a data sync was completed.

* `update_time` -
  Timestamp when the DataConnector was updated.

* `errors` -
  The errors from initialization or from the latest connector run.
  Structure is [documented below](#nested_errors).

* `action_state` -
  State of the action connector. This reflects whether the action connector
  is initializing, active or has encountered errors. The possible value can be:
  'STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'RUNNING', 'WARNING',
  'INITIALIZATION_FAILED', 'UPDATING'.

* `static_ip_addresses` -
  The static IP addresses used by this connector.

* `blocking_reasons` -
  User actions that must be completed before the connector can start syncing data.
  The possible values can be: 'ALLOWLIST_STATIC_IP', 'ALLOWLIST_IN_SERVICE_ATTACHMENT'.

* `private_connectivity_project_id` -
  The tenant project ID associated with private connectivity connectors.
  This project must be allowlisted by in order for the connector to function.

* `connector_type` -
  The type of connector. Each source can only map to one type.
  For example, salesforce, confluence and jira have THIRD_PARTY connector
  type. It is not mutable once set by system. The possible value can be:
  'CONNECTOR_TYPE_UNSPECIFIED', 'THIRD_PARTY', 'GCP_FHIR', 'BIG_QUERY',
  'GCS', 'GOOGLE_MAIL', 'GOOGLE_CALENDAR', 'GOOGLE_DRIVE',
  'NATIVE_CLOUD_IDENTITY', 'THIRD_PARTY_FEDERATED', 'THIRD_PARTY_EUA', 'GCNV'.

* `realtime_state` -
  The real-time sync state. The possible values can be:
  'STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'RUNNING', 'WARNING',
  'INITIALIZATION_FAILED', 'UPDATING'.


<a name="nested_errors"></a>The `errors` block contains:

* `code` -
  (Output)
  The status code, which should be an enum value of google.rpc.Code.

* `message` -
  (Output)
  A developer-facing error message, which should be in English.

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 5 minutes.
- `delete` - Default is 20 minutes.

## Import


DataConnector can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector`
* `{{project}}/{{location}}/{{collection_id}}`
* `{{location}}/{{collection_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataConnector using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector"
  to = google_discovery_engine_data_connector.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), DataConnector can be imported using one of the formats above. For example:

```
$ terraform import google_discovery_engine_data_connector.default projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector
$ terraform import google_discovery_engine_data_connector.default {{project}}/{{location}}/{{collection_id}}
$ terraform import google_discovery_engine_data_connector.default {{location}}/{{collection_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
