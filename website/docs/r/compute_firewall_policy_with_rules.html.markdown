---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Compute Engine"
description: |-
  The Compute FirewallPolicy with rules resource.
---

# google_compute_firewall_policy_with_rules

The Compute FirewallPolicy with rules resource. It declaratively manges all
rules in the firewall policy.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.


## Example Usage - Compute Firewall Policy With Rules Full


```hcl
data "google_project" "project" {
  provider = google-beta
}

resource "google_compute_firewall_policy_with_rules" "firewall-policy-with-rules" {
  short_name = "tf-fw-org-policy-with-rules"
  description = "Terraform test"
  parent = "organizations/123456789"
  provider = google-beta

  rule {
    description    = "tcp rule"
    priority       = 1000
    enable_logging = true
    action         = "allow"
    direction      = "EGRESS"
    match {
      layer4_config {
        ip_protocol = "tcp"
        ports       = [8080, 7070]
      }
      dest_ip_ranges = ["11.100.0.1/32"]
      dest_fqdns = ["www.yyy.com", "www.zzz.com"]
      dest_region_codes = ["HK", "IN"]
      dest_threat_intelligences = ["iplist-search-engines-crawlers", "iplist-tor-exit-nodes"]
      dest_address_groups = [google_network_security_address_group.address_group_1.id]
    }
    target_resources = ["https://www.googleapis.com/compute/beta/projects/${data.google_project.project.name}/global/networks/default"]
  }
  rule {
    description    = "udp rule"
    priority       = 2000
    enable_logging = false
    action         = "deny"
    direction      = "INGRESS"
    match {
      layer4_config {
        ip_protocol = "udp"
      }
      src_ip_ranges = ["0.0.0.0/0"]
      src_fqdns = ["www.abc.com", "www.def.com"]
      src_region_codes = ["US", "CA"]
      src_threat_intelligences = ["iplist-known-malicious-ips", "iplist-public-clouds"]
      src_address_groups = [google_network_security_address_group.address_group_1.id]
    }
    disabled = true
  }
  rule {
    description    = "security profile group rule"
    rule_name      = "tcp rule"
    priority       = 3000
    enable_logging = false
    action         = "apply_security_profile_group"
    direction      = "INGRESS"
    match {
      layer4_config {
        ip_protocol = "tcp"
      }
      src_ip_ranges = ["0.0.0.0/0"]
    }
    target_service_accounts = ["test@google.com"]
    security_profile_group = "//networksecurity.googleapis.com/${google_network_security_security_profile_group.security_profile_group_1.id}"
    tls_inspect = true
  }
}

resource "google_network_security_address_group" "address_group_1" {
  provider    = google-beta
  name        = "tf-address-group"
  parent      = "organizations/123456789"
  description = "Global address group"
  location    = "global"
  items       = ["208.80.154.224/32"]
  type        = "IPV4"
  capacity    = 100
}

resource "google_network_security_security_profile_group" "security_profile_group_1" {
  provider                  = google-beta
  name                      = "tf-security-profile-group"
  parent                    = "organizations/123456789"
  description               = "my description"
  threat_prevention_profile = google_network_security_security_profile.security_profile_1.id
}

resource "google_network_security_security_profile" "security_profile_1" {
  provider    = google-beta
  name        = "tf-security-profile"
  type        = "THREAT_PREVENTION"
  parent      = "organizations/123456789"
  location    = "global"
}
```

## Argument Reference

The following arguments are supported:


* `short_name` -
  (Required)
  A textual name of the security policy.

* `rule` -
  (Required)
  A list of firewall policy rules.
  Structure is [documented below](#nested_rule).

* `parent` -
  (Required)
  The parent of this FirewallPolicy in the Cloud Resource Hierarchy.
  Format: organizations/{organization_id} or folders/{folder_id}


<a name="nested_rule"></a>The `rule` block supports:

* `description` -
  (Optional)
  A description of the rule.

* `rule_name` -
  (Optional)
  An optional name for the rule. This field is not a unique identifier
  and can be updated.

* `priority` -
  (Required)
  An integer indicating the priority of a rule in the list. The priority must be a value
  between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the
  highest priority and 2147483647 is the lowest priority.

* `match` -
  (Required)
  A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
  Structure is [documented below](#nested_match).

* `action` -
  (Required)
  The Action to perform when the client connection triggers the rule. Can currently be either
  "allow", "deny", "apply_security_profile_group" or "goto_next".

* `direction` -
  (Optional)
  The direction in which this rule applies. If unspecified an INGRESS rule is created.
  Possible values are: `INGRESS`, `EGRESS`.

* `enable_logging` -
  (Optional)
  Denotes whether to enable logging for a particular rule.
  If logging is enabled, logs will be exported to the
  configured export destination in Stackdriver.

* `target_service_accounts` -
  (Optional)
  A list of service accounts indicating the sets of
  instances that are applied with this rule.

* `security_profile_group` -
  (Optional)
  A fully-qualified URL of a SecurityProfile resource instance.
  Example:
  https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
  Must be specified if action is 'apply_security_profile_group'.

* `tls_inspect` -
  (Optional)
  Boolean flag indicating if the traffic should be TLS decrypted.
  It can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.

* `target_resources` -
  (Optional)
  A list of network resource URLs to which this rule applies.
  This field allows you to control which network's VMs get
  this rule. If this field is left blank, all VMs
  within the organization will receive the rule.

* `disabled` -
  (Optional)
  Denotes whether the firewall policy rule is disabled. When set to true,
  the firewall policy rule is not enforced and traffic behaves as if it did
  not exist. If this is unspecified, the firewall policy rule will be
  enabled.


<a name="nested_match"></a>The `match` block supports:

* `src_ip_ranges` -
  (Optional)
  Source IP address range in CIDR format. Required for
  INGRESS rules.

* `dest_ip_ranges` -
  (Optional)
  Destination IP address range in CIDR format. Required for
  EGRESS rules.

* `src_address_groups` -
  (Optional)
  Address groups which should be matched against the traffic source.
  Maximum number of source address groups is 10.

* `dest_address_groups` -
  (Optional)
  Address groups which should be matched against the traffic destination.
  Maximum number of destination address groups is 10.

* `src_fqdns` -
  (Optional)
  Fully Qualified Domain Name (FQDN) which should be matched against
  traffic source. Maximum number of source fqdn allowed is 100.

* `dest_fqdns` -
  (Optional)
  Fully Qualified Domain Name (FQDN) which should be matched against
  traffic destination. Maximum number of destination fqdn allowed is 100.

* `src_region_codes` -
  (Optional)
  Region codes whose IP addresses will be used to match for source
  of traffic. Should be specified as 2 letter country code defined as per
  ISO 3166 alpha-2 country codes. ex."US"
  Maximum number of source region codes allowed is 5000.

* `dest_region_codes` -
  (Optional)
  Region codes whose IP addresses will be used to match for destination
  of traffic. Should be specified as 2 letter country code defined as per
  ISO 3166 alpha-2 country codes. ex."US"
  Maximum number of destination region codes allowed is 5000.

* `src_threat_intelligences` -
  (Optional)
  Names of Network Threat Intelligence lists.
  The IPs in these lists will be matched against traffic source.

* `dest_threat_intelligences` -
  (Optional)
  Names of Network Threat Intelligence lists.
  The IPs in these lists will be matched against traffic destination.

* `layer4_config` -
  (Required)
  Pairs of IP protocols and ports that the rule should match.
  Structure is [documented below](#nested_layer4_config).


<a name="nested_layer4_config"></a>The `layer4_config` block supports:

* `ip_protocol` -
  (Required)
  The IP protocol to which this rule applies. The protocol
  type is required when creating a firewall rule.
  This value can either be one of the following well
  known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp),
  or the IP protocol number.

* `ports` -
  (Optional)
  An optional list of ports to which this rule applies. This field
  is only applicable for UDP or TCP protocol. Each entry must be
  either an integer or a range. If not specified, this rule
  applies to connections through any port.
  Example inputs include: ["22"], ["80","443"], and
  ["12345-12349"].

- - -


* `description` -
  (Optional)
  An optional description of this resource.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `locations/global/firewallPolicies/{{policy_id}}`

* `creation_timestamp` -
  Creation timestamp in RFC3339 text format.

* `policy_id` -
  The unique identifier for the resource. This identifier is defined by the server.

* `predefined_rules` -
  A list of pre-define firewall policy rules.
  Structure is [documented below](#nested_predefined_rules).

* `fingerprint` -
  Fingerprint of the resource. This field is used internally during updates of this resource.

* `self_link` -
  Server-defined URL for the resource.

* `self_link_with_id` -
  Server-defined URL for this resource with the resource id.

* `rule_tuple_count` -
  Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.


<a name="nested_predefined_rules"></a>The `predefined_rules` block contains:

* `description` -
  (Output)
  A description of the rule.

* `rule_name` -
  (Output)
  An optional name for the rule. This field is not a unique identifier
  and can be updated.

* `priority` -
  (Output)
  An integer indicating the priority of a rule in the list. The priority must be a value
  between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the
  highest priority and 2147483647 is the lowest priority.

* `match` -
  (Output)
  A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
  Structure is [documented below](#nested_match).

* `action` -
  (Output)
  The Action to perform when the client connection triggers the rule. Can currently be either
  "allow", "deny", "apply_security_profile_group" or "goto_next".

* `direction` -
  (Output)
  The direction in which this rule applies. If unspecified an INGRESS rule is created.

* `enable_logging` -
  (Output)
  Denotes whether to enable logging for a particular rule.
  If logging is enabled, logs will be exported to the
  configured export destination in Stackdriver.

* `target_service_accounts` -
  (Output)
  A list of service accounts indicating the sets of
  instances that are applied with this rule.

* `security_profile_group` -
  (Output)
  A fully-qualified URL of a SecurityProfile resource instance.
  Example:
  https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
  Must be specified if action is 'apply_security_profile_group'.

* `tls_inspect` -
  (Output)
  Boolean flag indicating if the traffic should be TLS decrypted.
  It can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.

* `target_resources` -
  (Output)
  A list of network resource URLs to which this rule applies.
  This field allows you to control which network's VMs get
  this rule. If this field is left blank, all VMs
  within the organization will receive the rule.

* `disabled` -
  (Output)
  Denotes whether the firewall policy rule is disabled. When set to true,
  the firewall policy rule is not enforced and traffic behaves as if it did
  not exist. If this is unspecified, the firewall policy rule will be
  enabled.


<a name="nested_match"></a>The `match` block contains:

* `src_ip_ranges` -
  (Output)
  Source IP address range in CIDR format. Required for
  INGRESS rules.

* `dest_ip_ranges` -
  (Output)
  Destination IP address range in CIDR format. Required for
  EGRESS rules.

* `src_address_groups` -
  (Output)
  Address groups which should be matched against the traffic source.
  Maximum number of source address groups is 10.

* `dest_address_groups` -
  (Output)
  Address groups which should be matched against the traffic destination.
  Maximum number of destination address groups is 10.

* `src_fqdns` -
  (Output)
  Fully Qualified Domain Name (FQDN) which should be matched against
  traffic source. Maximum number of source fqdn allowed is 100.

* `dest_fqdns` -
  (Output)
  Fully Qualified Domain Name (FQDN) which should be matched against
  traffic destination. Maximum number of destination fqdn allowed is 100.

* `src_region_codes` -
  (Output)
  Region codes whose IP addresses will be used to match for source
  of traffic. Should be specified as 2 letter country code defined as per
  ISO 3166 alpha-2 country codes. ex."US"
  Maximum number of source region codes allowed is 5000.

* `dest_region_codes` -
  (Output)
  Region codes whose IP addresses will be used to match for destination
  of traffic. Should be specified as 2 letter country code defined as per
  ISO 3166 alpha-2 country codes. ex."US"
  Maximum number of destination region codes allowed is 5000.

* `src_threat_intelligences` -
  (Output)
  Names of Network Threat Intelligence lists.
  The IPs in these lists will be matched against traffic source.

* `dest_threat_intelligences` -
  (Output)
  Names of Network Threat Intelligence lists.
  The IPs in these lists will be matched against traffic destination.

* `layer4_config` -
  (Output)
  Pairs of IP protocols and ports that the rule should match.
  Structure is [documented below](#nested_layer4_config).


<a name="nested_layer4_config"></a>The `layer4_config` block contains:

* `ip_protocol` -
  (Output)
  The IP protocol to which this rule applies. The protocol
  type is required when creating a firewall rule.
  This value can either be one of the following well
  known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp),
  or the IP protocol number.

* `ports` -
  (Output)
  An optional list of ports to which this rule applies. This field
  is only applicable for UDP or TCP protocol. Each entry must be
  either an integer or a range. If not specified, this rule
  applies to connections through any port.
  Example inputs include: ["22"], ["80","443"], and
  ["12345-12349"].

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


FirewallPolicyWithRules can be imported using any of these accepted formats:

* `locations/global/firewallPolicies/{{policy_id}}`
* `{{policy_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import FirewallPolicyWithRules using one of the formats above. For example:

```tf
import {
  id = "locations/global/firewallPolicies/{{policy_id}}"
  to = google_compute_firewall_policy_with_rules.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), FirewallPolicyWithRules can be imported using one of the formats above. For example:

```
$ terraform import google_compute_firewall_policy_with_rules.default locations/global/firewallPolicies/{{policy_id}}
$ terraform import google_compute_firewall_policy_with_rules.default {{policy_id}}
```
