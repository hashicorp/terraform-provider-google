---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Certificate manager"
page_title: "Google: google_certificate_manager_certificate"
description: |-
  Certificate represents a HTTP-reachable backend for a Certificate.
---

# google\_certificate\_manager\_certificate

Certificate represents a HTTP-reachable backend for a Certificate.



~> **Warning:** All arguments including `self_managed.certificate_pem` and `self_managed.private_key_pem` will be stored in the raw
state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/language/state/sensitive-data).

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=certificate_manager_certificate_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Certificate Manager Certificate Basic


```hcl
resource "google_certificate_manager_certificate" "default" {
  name        = "dns-cert"
  description = "The default cert"
  scope       = "EDGE_CACHE"
  managed {
    domains = [
      google_certificate_manager_dns_authorization.instance.domain,
      google_certificate_manager_dns_authorization.instance2.domain,
      ]
    dns_authorizations = [
      google_certificate_manager_dns_authorization.instance.id,
      google_certificate_manager_dns_authorization.instance2.id,
      ]
  }
}


resource "google_certificate_manager_dns_authorization" "instance" {
  name        = "dns-auth"
  description = "The default dnss"
  domain      = "subdomain.hashicorptest.com"
}

resource "google_certificate_manager_dns_authorization" "instance2" {
  name        = "dns-auth2"
  description = "The default dnss"
  domain      = "subdomain2.hashicorptest.com"
}
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  A user-defined name of the certificate. Certificate names must be unique
  The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
  and all following characters must be a dash, underscore, letter or digit.


- - -


* `description` -
  (Optional)
  A human-readable description of the resource.

* `labels` -
  (Optional)
  Set of label tags associated with the Certificate resource.

* `scope` -
  (Optional)
  The scope of the certificate.
  DEFAULT: Certificates with default scope are served from core Google data centers.
  If unsure, choose this option.
  EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates,
  served from non-core Google data centers.
  Currently allowed only for managed certificates.

* `self_managed` -
  (Optional)
  Certificate data for a SelfManaged Certificate.
  SelfManaged Certificates are uploaded by the user. Updating such
  certificates before they expire remains the user's responsibility.
  Structure is [documented below](#nested_self_managed).

* `managed` -
  (Optional)
  Configuration and state of a Managed Certificate.
  Certificate Manager provisions and renews Managed Certificates
  automatically, for as long as it's authorized to do so.
  Structure is [documented below](#nested_managed).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_self_managed"></a>The `self_managed` block supports:

* `certificate_pem` -
  (Required)
  The certificate chain in PEM-encoded form.
  Leaf certificate comes first, followed by intermediate ones if any.
  **Note**: This property is sensitive and will not be displayed in the plan.

* `private_key_pem` -
  (Required)
  The private key of the leaf certificate in PEM-encoded form.
  **Note**: This property is sensitive and will not be displayed in the plan.

<a name="nested_managed"></a>The `managed` block supports:

* `domains` -
  (Optional)
  The domains for which a managed SSL certificate will be generated.
  Wildcard domains are only supported with DNS challenge resolution

* `dns_authorizations` -
  (Optional)
  Authorizations that will be used for performing domain authorization

* `state` -
  A state of this Managed Certificate.

* `provisioning_issue` -
  Information about issues with provisioning this Managed Certificate.
  Structure is [documented below](#nested_provisioning_issue).

* `authorization_attempt_info` -
  Detailed state of the latest authorization attempt for each domain
  specified for this Managed Certificate.
  Structure is [documented below](#nested_authorization_attempt_info).


<a name="nested_provisioning_issue"></a>The `provisioning_issue` block contains:

* `reason` -
  Reason for provisioning failures.

* `details` -
  Human readable explanation about the issue. Provided to help address
  the configuration issues.
  Not guaranteed to be stable. For programmatic access use `reason` field.

<a name="nested_authorization_attempt_info"></a>The `authorization_attempt_info` block contains:

* `domain` -
  Domain name of the authorization attempt.

* `state` -
  State of the domain for managed certificate issuance.

* `failure_reason` -
  Reason for failure of the authorization attempt for the domain.

* `details` -
  Human readable explanation for reaching the state. Provided to help
  address the configuration issues.
  Not guaranteed to be stable. For programmatic access use `failure_reason` field.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/global/certificates/{{name}}`


## Timeouts

This resource provides the following
[Timeouts](/docs/configuration/resources.html#timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Certificate can be imported using any of these accepted formats:

```
$ terraform import google_certificate_manager_certificate.default projects/{{project}}/locations/global/certificates/{{name}}
$ terraform import google_certificate_manager_certificate.default {{project}}/{{name}}
$ terraform import google_certificate_manager_certificate.default {{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://www.terraform.io/docs/providers/google/guides/provider_reference.html#user_project_override).
