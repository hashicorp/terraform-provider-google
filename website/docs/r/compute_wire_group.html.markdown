---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/compute/WireGroup.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Compute Engine"
description: |-
  The WireGroup resource represents a group of redundant wires between interconnects in two different metros.
---

# google_compute_wire_group

The WireGroup resource represents a group of redundant wires between interconnects in two different metros. Each WireGroup belongs to a CrossSiteNetwork. A wire group defines endpoints and the wires which exist between them.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.

To get more information about WireGroup, see:

* [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/wireGroups)
* How-to Guides
    * [Create a WireGroup](https://cloud.google.com/network-connectivity/docs/interconnect/how-to/cross-site/modify-network#add-wire-group)

## Example Usage - Compute Wire Group Basic


```hcl
data "google_project" "project" {
provider = google-beta
}

resource "google_compute_cross_site_network" "example-cross-site-network" {
  name        = "test-cross-site-network"
  description = "Example cross site network"
  provider    = google-beta
}

resource "google_compute_wire_group" "example-test-wire-group" {
  name               = "test-wire-group"
  description        = "Example Wire Group"
  cross_site_network = "test-cross-site-network"
  provider           = google-beta
  depends_on = [
    google_compute_cross_site_network.example-cross-site-network
  ]
  wire_properties {
    bandwidth_unmetered = 10
  }
  wire_group_properties {
    type = "WIRE"
  }
}
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  Name of the resource. Provided by the client when the resource is created. The name must be
  1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
  long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first
  character must be a lowercase letter, and all following characters must be a dash,
  lowercase letter, or digit, except the last character, which cannot be a dash.

* `cross_site_network` -
  (Required)
  Required cross site network to which wire group belongs.


- - -


* `description` -
  (Optional)
  An optional description of this resource. Provide this property when you create the resource.

* `endpoints` -
  (Optional)
  Endpoints grouped by location, each mapping to interconnect configurations.

* `admin_enabled` -
  (Optional)
  Indicates whether the wire group is administratively enabled.

* `wire_group_properties` -
  (Optional)
  Properties specific to the wire group.
  Structure is [documented below](#nested_wire_group_properties).

* `wire_properties` -
  (Optional)
  Default properties for wires within the group.
  Structure is [documented below](#nested_wire_properties).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_wire_group_properties"></a>The `wire_group_properties` block supports:

* `type` -
  (Optional)
  Type of wire group (enum).
  WIRE: a single pseudowire over two Interconnect connections   with no redundancy.
  REDUNDANT: two pseudowires over four Interconnect connections, with two connections in one metro and two connections in another metro.
  BOX_AND_CROSS: four pseudowires over four Interconnect connections, with two connections in one metro and two connections in another metro.

<a name="nested_wire_properties"></a>The `wire_properties` block supports:

* `bandwidth_unmetered` -
  (Optional)
  The unmetered bandwidth setting.

* `fault_response` -
  (Optional)
  Response when a fault is detected in a pseudowire:
  NONE: default.
  DISABLE_PORT: set the port line protocol down when inline probes detect a fault. This setting is only permitted on port mode pseudowires.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}`

* `creation_timestamp` -
  Creation timestamp in RFC3339 text format.

* `wires` -
  The single/redundant wire(s) managed by the wire group.
  Structure is [documented below](#nested_wires).

* `topology` -
  Topology details for the wire group configuration.
  Structure is [documented below](#nested_topology).


<a name="nested_wires"></a>The `wires` block contains:

* `label` -
  (Optional)

* `endpoints` -
  (Optional)
  'Wire endpoints are specific Interconnect connections.'
  Structure is [documented below](#nested_wires_wires_endpoints).

* `wire_properties` -
  (Output)
  A nested object resource.
  Structure is [documented below](#nested_wires_wires_wire_properties).

* `admin_enabled` -
  (Optional)


<a name="nested_wires_wires_endpoints"></a>The `endpoints` block supports:

* `interconnect` -
  (Optional)

* `vlan_tag` -
  (Optional)

<a name="nested_wires_wires_wire_properties"></a>The `wire_properties` block contains:

* `bandwidth_unmetered` -
  (Optional)

* `fault_response` -
  (Optional)

<a name="nested_topology"></a>The `topology` block contains:

* `endpoints` -
  (Optional)
  Structure is [documented below](#nested_topology_endpoints).


<a name="nested_topology_endpoints"></a>The `endpoints` block supports:

* `label` -
  (Optional)

* `city` -
  (Optional)

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


WireGroup can be imported using any of these accepted formats:

* `projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}`
* `{{project}}/{{cross_site_network}}/{{name}}`
* `{{cross_site_network}}/{{name}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WireGroup using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}"
  to = google_compute_wire_group.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), WireGroup can be imported using one of the formats above. For example:

```
$ terraform import google_compute_wire_group.default projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}
$ terraform import google_compute_wire_group.default {{project}}/{{cross_site_network}}/{{name}}
$ terraform import google_compute_wire_group.default {{cross_site_network}}/{{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
