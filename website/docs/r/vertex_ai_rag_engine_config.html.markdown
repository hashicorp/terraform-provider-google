---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/vertexai/RagEngineConfig.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Vertex AI"
description: |-
  Vertex AI RAG Engine lets you scale your RagManagedDb instance based on your usage and performance requirements using a choice of two tiers, and optionally, lets you delete your Vertex AI RAG Engine data using a third tier.
---

# google_vertex_ai_rag_engine_config

Vertex AI RAG Engine lets you scale your RagManagedDb instance based on your usage and performance requirements using a choice of two tiers, and optionally, lets you delete your Vertex AI RAG Engine data using a third tier. The tier is a project-level setting that's available in the RagEngineConfig resource that impacts all RAG corpora using RagManagedDb. The following tiers are available in RagEngineConfig: Basic, Scaled and Unprovisioned.


To get more information about RagEngineConfig, see:

* [API documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/reference/rest/v1/RagEngineConfig)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/rag-engine/understanding-ragmanageddb)

## Example Usage - Vertex Ai Rag Engine Config Basic


```hcl
resource "google_vertex_ai_rag_engine_config" "" {
  region = "us-central1"
  rag_managed_db_config {
    basic {
    }
  }
}
```
## Example Usage - Vertex Ai Rag Engine Config Scaled


```hcl
resource "google_vertex_ai_rag_engine_config" "" {
  region = "us-central1"
  rag_managed_db_config {
    scaled {
    }
  }
}
```
## Example Usage - Vertex Ai Rag Engine Config Unprovisioned


```hcl
resource "google_vertex_ai_rag_engine_config" "" {
  region = "us-central1"
  rag_managed_db_config {
    unprovisioned {
    }
  }
}
```

## Argument Reference

The following arguments are supported:


* `rag_managed_db_config` -
  (Required)
  Required. The config of the RagManagedDb used by RagEngine.
  Structure is [documented below](#nested_rag_managed_db_config).


* `region` -
  (Optional)
  The region of the RagEngineConfig. eg us-central1

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.



<a name="nested_rag_managed_db_config"></a>The `rag_managed_db_config` block supports:

* `scaled` -
  (Optional)
  Scaled tier offers production grade performance along with autoscaling functionality. It is suitable for customers with large amounts of data or performance sensitive workloads.

* `basic` -
  (Optional)
  Basic tier is a cost-effective and low compute tier suitable for the following cases: Experimenting with RagManagedDb, Small data size, Latency insensitive workload, Only using RAG Engine with external vector DBs.
  NOTE: This is the default tier if not explicitly chosen.

* `unprovisioned` -
  (Optional)
  Disables the RAG Engine service and deletes all your data held within this service. This will halt the billing of the service.
  NOTE: Once deleted the data cannot be recovered. To start using RAG Engine again, you will need to update the tier by calling the UpdateRagEngineConfig API.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{region}}/ragEngineConfig`

* `name` -
  The resource name of the Dataset. This value is set by Google.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


RagEngineConfig can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/ragEngineConfig`
* `{{project}}/{{region}}`
* `{{region}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import RagEngineConfig using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{region}}/ragEngineConfig"
  to = google_vertex_ai_rag_engine_config.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), RagEngineConfig can be imported using one of the formats above. For example:

```
$ terraform import google_vertex_ai_rag_engine_config.default projects/{{project}}/locations/{{region}}/ragEngineConfig
$ terraform import google_vertex_ai_rag_engine_config.default {{project}}/{{region}}
$ terraform import google_vertex_ai_rag_engine_config.default {{region}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
