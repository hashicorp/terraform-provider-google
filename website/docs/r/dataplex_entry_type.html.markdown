---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Dataplex"
description: |-
  An Entry Type is a template for creating Entries.
---

# google_dataplex_entry_type

An Entry Type is a template for creating Entries.



## Example Usage - Dataplex Entry Type Basic


```hcl
resource "google_dataplex_entry_type" "test_entry_type_basic" {
  entry_type_id = "entry-type-basic"
  project = "my-project-name"
  location = "us-central1"
}
```
## Example Usage - Dataplex Entry Type Full


```hcl
resource "google_dataplex_aspect_type" "test_entry_type_full" {
  aspect_type_id         = "tf-test-aspect-type%{random_suffix}"
  location     = "us-central1"
  project      = "my-project-name"

  metadata_template = <<EOF
{
  "name": "tf-test-template",
  "type": "record",
  "recordFields": [
    {
      "name": "type",
      "type": "enum",
      "annotations": {
        "displayName": "Type",
        "description": "Specifies the type of view represented by the entry."
      },
      "index": 1,
      "constraints": {
        "required": true
      },
      "enumValues": [
        {
          "name": "VIEW",
          "index": 1
        }
      ]
    }
  ]
}
EOF
}

resource "google_dataplex_entry_type" "test_entry_type_full" {
  entry_type_id = "entry-type-full"
  project = "my-project-name"
  location = "us-central1"

  labels = { "tag": "test-tf" }
  display_name = "terraform entry type"
  description = "entry type created by Terraform"

  type_aliases = ["TABLE", "DATABASE"]
  platform = "GCS"
  system = "CloudSQL"
  
  required_aspects {
    type = google_dataplex_aspect_type.test_entry_type_full.name
  }
}
```

## Argument Reference

The following arguments are supported:



- - -


* `description` -
  (Optional)
  Description of the EntryType.

* `display_name` -
  (Optional)
  User friendly display name.

* `labels` -
  (Optional)
  User-defined labels for the EntryType.

  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `type_aliases` -
  (Optional)
  Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.

* `platform` -
  (Optional)
  The platform that Entries of this type belongs to.

* `system` -
  (Optional)
  The system that Entries of this type belongs to.

* `required_aspects` -
  (Optional)
  AspectInfo for the entry type.
  Structure is [documented below](#nested_required_aspects).

* `location` -
  (Optional)
  The location where entry type will be created in.

* `entry_type_id` -
  (Optional)
  The entry type id of the entry type.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_required_aspects"></a>The `required_aspects` block supports:

* `type` -
  (Optional)
  Required aspect type for the entry type.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}`

* `name` -
  The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}

* `uid` -
  System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.

* `create_time` -
  The time when the EntryType was created.

* `update_time` -
  The time when the EntryType was last updated.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 5 minutes.
- `update` - Default is 5 minutes.
- `delete` - Default is 5 minutes.

## Import


EntryType can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}`
* `{{project}}/{{location}}/{{entry_type_id}}`
* `{{location}}/{{entry_type_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EntryType using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}"
  to = google_dataplex_entry_type.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), EntryType can be imported using one of the formats above. For example:

```
$ terraform import google_dataplex_entry_type.default projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
$ terraform import google_dataplex_entry_type.default {{project}}/{{location}}/{{entry_type_id}}
$ terraform import google_dataplex_entry_type.default {{location}}/{{entry_type_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
