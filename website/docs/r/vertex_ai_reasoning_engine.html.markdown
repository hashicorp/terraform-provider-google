---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/vertexai/ReasoningEngine.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Vertex AI"
description: |-
  ReasoningEngine provides a customizable runtime for models to determine which actions to take and in which order.
---

# google_vertex_ai_reasoning_engine

ReasoningEngine provides a customizable runtime for models to determine which actions to take and in which order.


To get more information about ReasoningEngine, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.reasoningEngines/)
* How-to Guides
    * [Develop and deploy agents on Vertex AI Agent Engine](https://cloud.google.com/vertex-ai/generative-ai/docs/agent-engine/quickstart)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=vertex_ai_reasoning_engine_full&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Vertex Ai Reasoning Engine Full


```hcl
# Generate pickle files with the cloudpickle library:
#
# local_agent = LangchainAgent(
#   model=MODEL,
#   agent_executor_kwargs={"return_intermediate_steps": True},
# )
#
# output_filename = "pickle.pkl"
#
# with open(output_filename, "wb") as f:
#   cloudpickle.dump(local_agent, f)

locals {
  class_methods = [
    {
      api_mode = "async"
      description = null
      name = "async_query"
      parameters = {
        type     = "object"
        required = []
        properties = {}
      }
    }
  ]
}

resource "google_vertex_ai_reasoning_engine" "reasoning_engine" {
  display_name = "reasoning-engine"
  description  = "A basic reasoning engine"
  region       = "us-central1"

  encryption_spec {
    kms_key_name = "example-key"
  }

  spec {
    agent_framework = "google-adk"
    class_methods   = jsonencode(local.class_methods)
    service_account = google_service_account.service_account.email

    deployment_spec {

      env {
        name  = "var_1"
        value = "value_2"
      }

      env {
        name  = "var_2"
        value = "value_2"
      }

      secret_env {
        name = "secret_var_1"

        secret_ref {
          secret  = google_secret_manager_secret.secret.secret_id
          version = "latest"
        }
      }

      secret_env {
        name = "secret_var_2"

        secret_ref {
          secret  = google_secret_manager_secret.secret.secret_id
          version = "latest"
        }
      }
    }

    package_spec {
      dependency_files_gcs_uri = "${google_storage_bucket.bucket.url}/${google_storage_bucket_object.bucket_obj_dependencies_tar_gz.name}"
      pickle_object_gcs_uri    = "${google_storage_bucket.bucket.url}/${google_storage_bucket_object.bucket_obj_pickle.name}"
      python_version           = "3.11"
      requirements_gcs_uri     = "${google_storage_bucket.bucket.url}/${google_storage_bucket_object.bucket_obj_requirements_txt.name}"
    }
  }

  depends_on = [
    time_sleep.wait_5_minutes
  ]
}

# Ensure we wait enough time for IAM permissions to be propagated
resource "time_sleep" "wait_5_minutes" {
  create_duration = "5m"

  depends_on = [
    google_project_iam_member.sa_iam_ai_platform_user,
    google_project_iam_member.sa_iam_object_viewer,
    google_project_iam_member.sa_iam_viewer,
    google_secret_manager_secret_iam_member.secret_access,
    google_secret_manager_secret_version.secret_version
  ]
}

resource "google_secret_manager_secret_version" "secret_version" {
  secret      = google_secret_manager_secret.secret.id
  secret_data = "test"
}

resource "google_secret_manager_secret" "secret" {
  secret_id = "secret"

  replication {
    auto {}
  }
}

resource "google_secret_manager_secret_iam_member" "secret_access" {
  secret_id  = google_secret_manager_secret.secret.id
  role       = "roles/secretmanager.secretAccessor"
  member     = google_service_account.service_account.member
}

resource "google_storage_bucket" "bucket" {
  name                        = "reasoning-engine"
  location                    = "us-central1"
  uniform_bucket_level_access = true
  force_destroy               = true
}

resource "google_storage_bucket_object" "bucket_obj_requirements_txt" {
  name   = "requirements.txt"
  bucket = google_storage_bucket.bucket.id
  source = "./test-fixtures/requirements_adk.txt"
}

resource "google_storage_bucket_object" "bucket_obj_pickle" {
  name   = "code.pkl"
  bucket = google_storage_bucket.bucket.id
  source = "./test-fixtures/pickle_adk.pkl"
}

resource "google_storage_bucket_object" "bucket_obj_dependencies_tar_gz" {
  name   = "dependencies.tar.gz"
  bucket = google_storage_bucket.bucket.id
  source = "./test-fixtures/dependencies_adk.tar.gz"
}

resource "google_service_account" "service_account" {
  account_id = "sa"
}

resource "google_project_iam_member" "sa_iam_object_viewer" {
  role    = "roles/storage.objectViewer"
  project = data.google_project.project.id
  member  = google_service_account.service_account.member
}

resource "google_project_iam_member" "sa_iam_ai_platform_user" {
  role    = "roles/aiplatform.user"
  project = data.google_project.project.id
  member  = google_service_account.service_account.member
}

resource "google_project_iam_member" "sa_iam_viewer" {
  role    = "roles/viewer"
  project = data.google_project.project.id
  member  = google_service_account.service_account.member
}

data "google_project" "project" {
}
```

## Argument Reference

The following arguments are supported:


* `display_name` -
  (Required)
  The display name of the ReasoningEngine.


* `description` -
  (Optional)
  The description of the ReasoningEngine.

* `encryption_spec` -
  (Optional)
  Optional. Customer-managed encryption key spec for a ReasoningEngine.
  If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
  Structure is [documented below](#nested_encryption_spec).

* `spec` -
  (Optional)
  Optional. Configurations of the ReasoningEngine.
  Structure is [documented below](#nested_spec).

* `region` -
  (Optional)
  The region of the reasoning engine. eg us-central1

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.



<a name="nested_encryption_spec"></a>The `encryption_spec` block supports:

* `kms_key_name` -
  (Required)
  Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
  Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key.
  The key needs to be in the same region as where the compute resource is created.

<a name="nested_spec"></a>The `spec` block supports:

* `agent_framework` -
  (Optional)
  Optional. The OSS agent framework used to develop the agent.

* `class_methods` -
  (Optional)
  Optional. Declarations for object class methods in OpenAPI specification format.

* `deployment_spec` -
  (Optional)
  Optional. The specification of a Reasoning Engine deployment.
  Structure is [documented below](#nested_spec_deployment_spec).

* `package_spec` -
  (Optional)
  Optional. User provided package spec of the ReasoningEngine.
  Ignored when users directly specify a deployment image through
  deploymentSpec.first_party_image_override, but keeping the
  field_behavior to avoid introducing breaking changes.
  Structure is [documented below](#nested_spec_package_spec).

* `service_account` -
  (Optional)
  Optional. The service account that the Reasoning Engine artifact runs as.
  It should have "roles/storage.objectViewer" for reading the user project's
  Cloud Storage and "roles/aiplatform.user" for using Vertex extensions.
  If not specified, the Vertex AI Reasoning Engine service Agent in the project will be used.


<a name="nested_spec_deployment_spec"></a>The `deployment_spec` block supports:

* `env` -
  (Optional)
  Optional. Environment variables to be set with the Reasoning Engine deployment.
  Structure is [documented below](#nested_spec_deployment_spec_env).

* `secret_env` -
  (Optional)
  Optional. Environment variables where the value is a secret in Cloud Secret Manager. To use this feature, add 'Secret Manager Secret Accessor' role (roles/secretmanager.secretAccessor) to AI Platform Reasoning Engine service Agent.
  Structure is [documented below](#nested_spec_deployment_spec_secret_env).


<a name="nested_spec_deployment_spec_env"></a>The `env` block supports:

* `name` -
  (Required)
  The name of the environment variable. Must be a valid C identifier.

* `value` -
  (Required)
  Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.

<a name="nested_spec_deployment_spec_secret_env"></a>The `secret_env` block supports:

* `name` -
  (Required)
  The name of the environment variable. Must be a valid C identifier.

* `secret_ref` -
  (Required)
  Reference to a secret stored in the Cloud Secret Manager that will provide the value for this environment variable.
  Structure is [documented below](#nested_spec_deployment_spec_secret_env_secret_env_secret_ref).


<a name="nested_spec_deployment_spec_secret_env_secret_env_secret_ref"></a>The `secret_ref` block supports:

* `secret` -
  (Required)
  The name of the secret in Cloud Secret Manager. Format: {secret_name}.

* `version` -
  (Optional)
  The Cloud Secret Manager secret version. Can be 'latest' for the latest version, an integer for a specific version, or a version alias.

<a name="nested_spec_package_spec"></a>The `package_spec` block supports:

* `dependency_files_gcs_uri` -
  (Optional)
  Optional. The Cloud Storage URI of the dependency files in tar.gz format.

* `pickle_object_gcs_uri` -
  (Optional)
  Optional. The Cloud Storage URI of the pickled python object.

* `python_version` -
  (Optional)
  Optional. The Python version.

* `requirements_gcs_uri` -
  (Optional)
  Optional. The Cloud Storage URI of the requirements.txt file

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}`

* `name` -
  The generated name of the ReasoningEngine, in the format
  'projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}'

* `create_time` -
  The timestamp of when the Index was created in RFC3339 UTC "Zulu" format,
  with nanosecond resolution and up to nine fractional digits.

* `update_time` -
  The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format,
  with nanosecond resolution and up to nine fractional digits.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


ReasoningEngine can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}`
* `{{project}}/{{region}}/{{name}}`
* `{{region}}/{{name}}`
* `{{name}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ReasoningEngine using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}"
  to = google_vertex_ai_reasoning_engine.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), ReasoningEngine can be imported using one of the formats above. For example:

```
$ terraform import google_vertex_ai_reasoning_engine.default projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}
$ terraform import google_vertex_ai_reasoning_engine.default {{project}}/{{region}}/{{name}}
$ terraform import google_vertex_ai_reasoning_engine.default {{region}}/{{name}}
$ terraform import google_vertex_ai_reasoning_engine.default {{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
