---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/firebaseapphosting/Build.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Firebase App Hosting"
description: |-
  A single build for a backend, at a specific point codebase reference tag
  and point in time.
---

# google_firebase_app_hosting_build

A single build for a backend, at a specific point codebase reference tag
and point in time. Encapsulates several resources, including an Artifact Registry
container image, a Cloud Build invocation that built the image, and the
Cloud Run revision that uses that image.



## Example Usage - Firebase App Hosting Build Minimal


```hcl
resource "google_firebase_app_hosting_build" "example" {
  project          = google_firebase_app_hosting_backend.example.project
  location         = google_firebase_app_hosting_backend.example.location
  backend          = google_firebase_app_hosting_backend.example.backend_id
  build_id         = "mini-build"

  source {
    container {
      image = "us-docker.pkg.dev/cloudrun/container/hello"
    }
  }
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "my-project-name"
  # Choose the region closest to your users

  location         = "us-central1"
  backend_id       = "mini"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email

  depends_on = [google_project_service.fah]
}

### Include these blocks only once per project if you are starting from scratch ###
resource "google_service_account" "service_account" {
  project = "my-project-name"

  # Must be firebase-app-hosting-compute
  account_id                   = "firebase-app-hosting-compute"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}

resource "google_project_iam_member" "app_hosting_sa_runner" {
  project = "my-project-name"

  # For App Hosting
  role   = "roles/firebaseapphosting.computeRunner"
  member = google_service_account.service_account.member
}

resource "google_project_service" "fah" {
  project = "my-project-name"
  service = "firebaseapphosting.googleapis.com"

  disable_on_destroy = false
}
###
```
## Example Usage - Firebase App Hosting Build Full


```hcl
resource "google_firebase_app_hosting_build" "example" {
  project          = google_firebase_app_hosting_backend.example.project
  location         = google_firebase_app_hosting_backend.example.location
  backend          = google_firebase_app_hosting_backend.example.backend_id
  build_id         = "full-build"
  display_name     = "My Build"

  annotations = {
    "key" = "value"
  }

  labels = {
    "key" = "value"
  }

  source {
    container {
      image = "us-docker.pkg.dev/cloudrun/container/hello"
    }
  }
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "my-project-name"
  # Choose the region closest to your users

  location         = "us-central1"
  backend_id       = "full"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = google_service_account.service_account.email

  depends_on = [google_project_service.fah]
}

### Include these blocks only once per project if you are starting from scratch ###
resource "google_service_account" "service_account" {
  project = "my-project-name"

  # Must be firebase-app-hosting-compute
  account_id                   = "firebase-app-hosting-compute"
  display_name                 = "Firebase App Hosting compute service account"

  # Do not throw if already exists
  create_ignore_already_exists = true
}

resource "google_project_iam_member" "app_hosting_sa_runner" {
  project = "my-project-name"

  # For App Hosting
  role   = "roles/firebaseapphosting.computeRunner"
  member = google_service_account.service_account.member
}

resource "google_project_service" "fah" {
  project = "my-project-name"
  service = "firebaseapphosting.googleapis.com"

  disable_on_destroy = false
}
###
```
## Example Usage - Firebase App Hosting Build Github


```hcl
resource "google_firebase_app_hosting_build" "example" {
  project          = google_firebase_app_hosting_backend.example.project
  location         = google_firebase_app_hosting_backend.example.location
  backend          = google_firebase_app_hosting_backend.example.backend_id
  build_id         = "gh-build"

  source {
    codebase {
      branch = "main"
    }
  }
}

resource "google_firebase_app_hosting_backend" "example" {
  project          = "my-project-name"

  # Choose the region closest to your users
  location         = "us-central1"
  backend_id       = "mini"
  app_id           = "1:0000000000:web:674cde32020e16fbce9dbd"
  display_name     = "My Backend"
  serving_locality = "GLOBAL_ACCESS"
  service_account  = "firebase-app-hosting-compute@my-project-name.iam.gserviceaccount.com"
  environment      = "prod"

  annotations = {
    "key" = "value"
  }

  labels = {
    "key" = "value"
  }

  codebase {
    repository = google_developer_connect_git_repository_link.my-repository.name
    root_directory = "/"
  }
}

resource "google_developer_connect_git_repository_link" "my-repository" {
  provider = google-beta

  project  = "my-project-name"
  location = "us-central1"
  provider = google-beta

  provider = google-beta
  project  = "my-project-name"
  service  = "developerconnect.googleapis.com"
}

resource "google_project_iam_member" "devconnect-secret" {
  provider = google-beta

  project  = "my-project-name"
  role     = "roles/secretmanager.admin"
  member   = google_project_service_identity.devconnect-p4sa.member
}
###

### Include these blocks only once per Github account ###
resource "google_developer_connect_connection" "my-connection" {
  project  = "my-project-name"
  location = "us-central1"
  connection_id = "tf-test-connection-new"
  github_config {
    github_app = "FIREBASE"
  }
  depends_on = [google_project_iam_member.devconnect-secret]
}

output "next_steps" {
  description = "Follow the action_uri if present to continue setup"
  value = google_developer_connect_connection.my-connection.installation_state
}
###
```

## Argument Reference

The following arguments are supported:


* `source` -
  (Required)
  The source for the build.
  Structure is [documented below](#nested_source).

* `location` -
  (Required)
  The location of the Backend that this Build applies to

* `backend` -
  (Required)
  The ID of the Backend that this Build applies to

* `build_id` -
  (Required)
  The user-specified ID of the build being created.


<a name="nested_source"></a>The `source` block supports:

* `container` -
  (Optional)
  The URI of an Artifact Registry
  [container
  image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
  to use as the build source.
  Structure is [documented below](#nested_source_container).

* `codebase` -
  (Optional)
  A codebase source, representing the state of the codebase
  that the build will be created at.
  Structure is [documented below](#nested_source_codebase).


<a name="nested_source_container"></a>The `container` block supports:

* `image` -
  (Required)
  A URI representing a container for the backend to use.

<a name="nested_source_codebase"></a>The `codebase` block supports:

* `display_name` -
  (Output)
  The human-friendly name to use for this Codebase when displaying a build.
  We use the first eight characters of the SHA-1 hash for GitHub.com.

* `hash` -
  (Output)
  The full SHA-1 hash of a Git commit, if available.

* `commit_message` -
  (Output)
  The message of a codebase change.

* `uri` -
  (Output)
  A URI linking to the codebase on an hosting provider's website. May
  not be valid if the commit has been rebased or force-pushed out of
  existence in the linked repository.

* `author` -
  (Output)
  Version control metadata for a user associated with a resolved codebase.
  Currently assumes a Git user.
  Structure is [documented below](#nested_source_codebase_author).

* `commit_time` -
  (Output)
  The time the change was made.

* `branch` -
  (Optional)
  The branch in the codebase to build from, using the latest commit.

* `commit` -
  (Optional)
  The commit in the codebase to build from.


<a name="nested_source_codebase_author"></a>The `author` block contains:

* `display_name` -
  (Output)
  The 'name' field in a Git user's git.config. Required by Git.

* `email` -
  (Output)
  The 'email' field in a Git user's git.config, if available.

* `image_uri` -
  (Output)
  The URI of an image file associated with the user's account in an
  external source control provider, if available.

- - -


* `display_name` -
  (Optional)
  Human-readable name. 63 character limit.

* `annotations` -
  (Optional)
  Unstructured key value map that may be set by external tools to
  store and arbitrary metadata. They are not queryable and should be
  preserved when modifying objects.
  **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
  Please refer to the field `effective_annotations` for all of the annotations present on the resource.

* `labels` -
  (Optional)
  Unstructured key value map that can be used to organize and categorize
  objects.
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}`

* `name` -
  Identifier. The resource name of the build.
  Format:
  `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.

* `create_time` -
  Time at which the build was created.

* `update_time` -
  Time at which the build was last updated.

* `etag` -
  Server-computed checksum based on other values; may be sent
  on update or delete to ensure operation is done on expected resource.

* `uid` -
  System-assigned, unique identifier.

* `image` -
  The Artifact Registry
  [container
  image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
  URI, used by the Cloud Run
  [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
  for this build.

* `build_logs_uri` -
  The location of the [Cloud Build
  logs](https://cloud.google.com/build/docs/view-build-results) for the build
  process.

* `state` -
  The state of the build.
  Possible values:
  BUILDING
  BUILT
  DEPLOYING
  READY
  FAILED

* `error_source` -
  The source of the error for the build, if in a `FAILED` state.
  Possible values:
  CLOUD_BUILD
  CLOUD_RUN

* `environment` -
  The environment name of the backend when this build was created.

* `error` -
  The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). Each `Status` message contains
  three pieces of data: error code, error message, and error details.
  You can find out more about this error model and how to work with it in the
  [API Design Guide](https://cloud.google.com/apis/design/errors).
  Structure is [documented below](#nested_error).

* `effective_annotations` -
  All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


<a name="nested_error"></a>The `error` block contains:

* `code` -
  (Output)
  The status code, which should be an enum value of google.rpc.Code.

* `message` -
  (Output)
  A developer-facing error message, which should be in English. Any
  user-facing error message should be localized and sent in the
  google.rpc.Status.details field, or localized by the client.

* `details` -
  (Output)
  A list of messages that carry the error details. There is a common set of
  message types for APIs to use.

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Build can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}`
* `{{project}}/{{location}}/{{backend}}/{{build_id}}`
* `{{location}}/{{backend}}/{{build_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Build using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}"
  to = google_firebase_app_hosting_build.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Build can be imported using one of the formats above. For example:

```
$ terraform import google_firebase_app_hosting_build.default projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}
$ terraform import google_firebase_app_hosting_build.default {{project}}/{{location}}/{{backend}}/{{build_id}}
$ terraform import google_firebase_app_hosting_build.default {{location}}/{{backend}}/{{build_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
