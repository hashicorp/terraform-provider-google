---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dataplex/Entry.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Dataplex"
description: |-
  An entry represents a data asset that you capture metadata for.
---

# google_dataplex_entry

An entry represents a data asset that you capture metadata for. Every entry is an instance of an entry type.
Each operation on aspects for an entry needs to comply with the required aspects of its entry type.
For example, when you create an entry, you must provide values for all the aspect types defined by the entry type.
You can't delete those aspects for an entry that are marked as required in the entry type.


To get more information about Entry, see:

* [API documentation](https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.entryGroups.entries)
* How-to Guides
    * [Manage entries and ingest custom sources](https://cloud.google.com/dataplex/docs/ingest-custom-sources)

## Example Usage - Dataplex Entry Basic


```hcl
resource "google_dataplex_entry_group" "entry-group-basic" {
  entry_group_id = "entry-group-basic"
  project = "1111111111111"
  location = "us-central1"
}

resource "google_dataplex_entry_type" "entry-type-basic" {
  entry_type_id = "entry-type-basic"
  project = "1111111111111"
  location = "us-central1"
}

resource "google_dataplex_entry" "test_basic" {
  entry_group_id = google_dataplex_entry_group.entry-group-basic.entry_group_id
  project = "1111111111111"
  location = "us-central1"
  entry_id = "entry-basic"
  entry_type = google_dataplex_entry_type.entry-type-basic.name
}
```
## Example Usage - Dataplex Entry Full


```hcl
resource "google_dataplex_aspect_type" "aspect-type-full-one" {
  aspect_type_id         = "aspect-type-full-one"
  location     = "us-central1"
  project      = "1111111111111"

  metadata_template = <<EOF
{
  "name": "tf-test-template",
  "type": "record",
  "recordFields": [
    {
      "name": "type",
      "type": "enum",
      "annotations": {
        "displayName": "Type",
        "description": "Specifies the type of view represented by the entry."
      },
      "index": 1,
      "constraints": {
        "required": true
      },
      "enumValues": [
        {
          "name": "VIEW",
          "index": 1
        }
      ]
    }
  ]
}
EOF
}

resource "google_dataplex_aspect_type" "aspect-type-full-two" {
  aspect_type_id         = "aspect-type-full-two"
  location     = "us-central1"
  project      = "1111111111111"

  metadata_template = <<EOF
{
  "name": "tf-test-template",
  "type": "record",
  "recordFields": [
    {
      "name": "story",
      "type": "enum",
      "annotations": {
        "displayName": "Story",
        "description": "Specifies the story of an entry."
      },
      "index": 1,
      "constraints": {
        "required": true
      },
      "enumValues": [
        {
          "name": "SEQUENCE",
          "index": 1
        }
      ]
    }
  ]
}
EOF
}

resource "google_dataplex_entry_group" "entry-group-full" {
  entry_group_id = "entry-group-full"
  project = "1111111111111"
  location = "us-central1"
}

resource "google_dataplex_entry_type" "entry-type-full" {
  entry_type_id = "entry-type-full"
  project = "1111111111111"
  location = "us-central1"

  required_aspects {
    type = google_dataplex_aspect_type.aspect-type-full-one.name
  }
}

resource "google_dataplex_entry" "test_entry_full" {
  entry_group_id = google_dataplex_entry_group.entry-group-full.entry_group_id
  project = "1111111111111"
  location = "us-central1"
  entry_id = "entry-full"
  entry_type = google_dataplex_entry_type.entry-type-full.name
  fully_qualified_name = "bigquery:1111111111111.test-dataset"
  parent_entry = "projects/1111111111111/locations/us-central1/entryGroups/entry-group-full/entries/some-other-entry"
  entry_source {
    resource = "bigquery:1111111111111.test-dataset"
    system = "System III"
    platform = "BigQuery"
    display_name = "Human readable name"
    description = "Description from source system"
    labels = {
      "some-label": "some-value"
    }

    ancestors {
      name = "ancestor-one"
      type = "type-one"
    }

    ancestors {
      name = "ancestor-two"
      type = "type-two"
    }

    create_time = "2023-08-03T19:19:00.094Z"
    update_time = "2023-08-03T20:19:00.094Z"
  }

  aspects {
    aspect_key = "1111111111111.us-central1.aspect-type-full-one"
    aspect_value {
      data = <<EOF
          {"type": "VIEW"    }
        EOF
    }
  }

  aspects {
    aspect_key = "1111111111111.us-central1.aspect-type-full-two"
    aspect_value {
      data = <<EOF
          {"story": "SEQUENCE"    }
        EOF
    }
  }
 depends_on = [google_dataplex_aspect_type.aspect-type-full-two, google_dataplex_aspect_type.aspect-type-full-one]
}
```

## Argument Reference

The following arguments are supported:


* `entry_type` -
  (Required)
  The relative resource name of the entry type that was used to create this entry, in the format projects/{project_number}/locations/{locationId}/entryTypes/{entryTypeId}.


- - -


* `aspects` -
  (Optional)
  The aspects that are attached to the entry.
  Structure is [documented below](#nested_aspects).

* `parent_entry` -
  (Optional)
  The resource name of the parent entry, in the format projects/{project_number}/locations/{locationId}/entryGroups/{entryGroupId}/entries/{entryId}.

* `fully_qualified_name` -
  (Optional)
  A name for the entry that can be referenced by an external system. For more information, see https://cloud.google.com/dataplex/docs/fully-qualified-names.
  The maximum size of the field is 4000 characters.

* `entry_source` -
  (Optional)
  A nested object resource.
  Structure is [documented below](#nested_entry_source).

* `location` -
  (Optional)
  The location where entry will be created.

* `entry_group_id` -
  (Optional)
  The entry group id of the entry group the entry will be created in.

* `entry_id` -
  (Optional)
  The entry id of the entry.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_aspects"></a>The `aspects` block supports:

* `aspect_key` -
  (Required)
  Depending on how the aspect is attached to the entry, the format of the aspect key can be one of the following:
  If the aspect is attached directly to the entry: {project_number}.{locationId}.{aspectTypeId}
  If the aspect is attached to an entry's path: {project_number}.{locationId}.{aspectTypeId}@{path}

* `aspect_value` -
  (Optional)
  A nested object resource.
  Structure is [documented below](#nested_aspects_aspects_aspect_value).


<a name="nested_aspects_aspects_aspect_value"></a>The `aspect_value` block supports:

* `aspect_type` -
  (Output)
  The resource name of the type used to create this Aspect.

* `path` -
  (Output)
  The path in the entry under which the aspect is attached.

* `create_time` -
  (Output)
  The time when the Aspect was created.

* `update_time` -
  (Output)
  The time when the Aspect was last modified.

* `data` -
  (Required)
  The content of the aspect in JSON form, according to its aspect type schema. The maximum size of the field is 120KB (encoded as UTF-8).

<a name="nested_entry_source"></a>The `entry_source` block supports:

* `resource` -
  (Optional)
  The name of the resource in the source system. Maximum length is 4,000 characters.

* `system` -
  (Optional)
  The name of the source system. Maximum length is 64 characters.

* `platform` -
  (Optional)
  The platform containing the source system. Maximum length is 64 characters.

* `display_name` -
  (Optional)
  A user-friendly display name. Maximum length is 500 characters.

* `description` -
  (Optional)
  A description of the data resource. Maximum length is 2,000 characters.

* `labels` -
  (Optional)
  User-defined labels. The maximum size of keys and values is 128 characters each.
  An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

* `ancestors` -
  (Optional)
  Structure is [documented below](#nested_entry_source_ancestors).

* `create_time` -
  (Optional)
  The time when the resource was created in the source system.

* `update_time` -
  (Optional)
  The time when the resource was last updated in the source system.
  If the entry exists in the system and its EntrySource has updateTime populated,
  further updates to the EntrySource of the entry must provide incremental updates to its updateTime.

* `location` -
  (Output)
  Location of the resource in the source system. You can search the entry by this location.
  By default, this should match the location of the entry group containing this entry.
  A different value allows capturing the source location for data external to Google Cloud.


<a name="nested_entry_source_ancestors"></a>The `ancestors` block supports:

* `name` -
  (Optional)
  The name of the ancestor resource.

* `type` -
  (Optional)
  The type of the ancestor resource.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/entryGroups/{{entry_group_id}}/entries/{{entry_id}}`

* `name` -
  The relative resource name of the entry, in the format projects/{project_number}/locations/{locationId}/entryGroups/{entryGroupId}/entries/{entryId}.

* `create_time` -
  The time when the Entry was created in Dataplex.

* `update_time` -
  The time when the entry was last updated in Dataplex.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 5 minutes.
- `update` - Default is 5 minutes.
- `delete` - Default is 5 minutes.

## Import


Entry can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/entryGroups/{{entry_group_id}}/entries/{{entry_id}}`
* `{{project}}/{{location}}/{{entry_group_id}}/{{entry_id}}`
* `{{location}}/{{entry_group_id}}/{{entry_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Entry using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/entryGroups/{{entry_group_id}}/entries/{{entry_id}}"
  to = google_dataplex_entry.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Entry can be imported using one of the formats above. For example:

```
$ terraform import google_dataplex_entry.default projects/{{project}}/locations/{{location}}/entryGroups/{{entry_group_id}}/entries/{{entry_id}}
$ terraform import google_dataplex_entry.default {{project}}/{{location}}/{{entry_group_id}}/{{entry_id}}
$ terraform import google_dataplex_entry.default {{location}}/{{entry_group_id}}/{{entry_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
