---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/cloudrunv2/WorkerPool.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Cloud Run (v2 API)"
description: |-
  WorkerPool acts as a top-level container that manages a set of configurations and revision templates which implement a pull-based workload.
---

# google_cloud_run_v2_worker_pool

WorkerPool acts as a top-level container that manages a set of configurations and revision templates which implement a pull-based workload. WorkerPool exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership.


To get more information about WorkerPool, see:

* [API documentation](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.workerPools)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/run/docs/)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_basic&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Basic


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  
  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_limits&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Limits


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      resources {
        limits = {
          cpu    = "2"
          memory = "1024Mi"
        }
      }
    }
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_sql&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Sql


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"
  
  template {
  
    volumes {
      name = "cloudsql"
      cloud_sql_instance {
        instances = [google_sql_database_instance.instance.connection_name]
      }
    }

    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"

      env {
        name = "FOO"
        value = "bar"
      }
      env {
        name = "SECRET_ENV_VAR"
        value_source {
          secret_key_ref {
            secret = google_secret_manager_secret.secret.secret_id
            version = "1"
          }
        }
      }
      volume_mounts {
        name = "cloudsql"
        mount_path = "/cloudsql"
      }
    }
  }

  instance_splits {
    type = "INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST"
    percent = 100
  }
  depends_on = [google_secret_manager_secret_version.secret-version-data]
}

data "google_project" "project" {
}

resource "google_secret_manager_secret" "secret" {
  secret_id = "secret-1"
  replication {
    auto {}
  }
}

resource "google_secret_manager_secret_version" "secret-version-data" {
  secret = google_secret_manager_secret.secret.name
  secret_data = "secret-data"
}

resource "google_secret_manager_secret_iam_member" "secret-access" {
  secret_id = google_secret_manager_secret.secret.id
  role      = "roles/secretmanager.secretAccessor"
  member    = "serviceAccount:${data.google_project.project.number}-compute@developer.gserviceaccount.com"
  depends_on = [google_secret_manager_secret.secret]
}

resource "google_sql_database_instance" "instance" {
  name             = "cloudrun-sql"
  region           = "us-central1"
  database_version = "MYSQL_5_7"
  settings {
    tier = "db-f1-micro"
  }

  deletion_protection  = true
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_directvpc&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Directvpc


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
    vpc_access{
      network_interfaces {
        network = "default"
        subnetwork = "default"
        tags = ["tag1", "tag2", "tag3"]
      }
    }
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_gpu&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Gpu


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      resources {
        limits = {
          "cpu" = "4"
          "memory" = "16Gi"
          "nvidia.com/gpu" = "1"
        }
      }
    }
    node_selector {
      accelerator = "nvidia-l4"
    }
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_secret&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Secret


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    volumes {
      name = "a-volume"
      secret {
        secret = google_secret_manager_secret.secret.secret_id
        default_mode = 292 # 0444
        items {
          version = "1"
          path = "my-secret"
          mode = 0444
        }
      }
    }
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      volume_mounts {
        name = "a-volume"
        mount_path = "/secrets"
      }
    }
  }
  depends_on = [google_secret_manager_secret_version.secret-version-data]
}

data "google_project" "project" {
}

resource "google_secret_manager_secret" "secret" {
  secret_id = "secret-1"
  replication {
    auto {}
  }
}

resource "google_secret_manager_secret_version" "secret-version-data" {
  secret = google_secret_manager_secret.secret.name
  secret_data = "secret-data"
}

resource "google_secret_manager_secret_iam_member" "secret-access" {
  secret_id = google_secret_manager_secret.secret.id
  role      = "roles/secretmanager.secretAccessor"
  member    = "serviceAccount:${data.google_project.project.number}-compute@developer.gserviceaccount.com"
  depends_on = [google_secret_manager_secret.secret]
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_multicontainer&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Multicontainer


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      name = "hello-1"
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      depends_on = ["hello-2"]
      volume_mounts {
        name = "empty-dir-volume"
        mount_path = "/mnt"
      }
    }
    containers {
      name = "hello-2"
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      env {
        name = "PORT"
        value = "8081"
      }
    }
    volumes {
      name = "empty-dir-volume"
      empty_dir {
        medium = "MEMORY"
        size_limit = "256Mi"
      }
    }
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_mount_gcs&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Mount Gcs


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"

  location     = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
      volume_mounts {
        name       = "bucket"
        mount_path = "/var/www"
      }
    }

    volumes {
      name = "bucket"
      gcs {
        bucket    = google_storage_bucket.default.name
        read_only = false
      }
    }
  }
}

resource "google_storage_bucket" "default" {
    name     = "cloudrun-worker-pool"
    location = "US"
    uniform_bucket_level_access = true
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_mount_nfs&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Mount Nfs


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"

  location     = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool:latest"
      volume_mounts {
        name       = "nfs"
        mount_path = "/mnt/nfs/filestore"
      }
    }
    vpc_access {
      network_interfaces {
        network    = "default"
        subnetwork = "default"
      }
    }

    volumes {
      name = "nfs"
      nfs {
        server    = google_filestore_instance.default.networks[0].ip_addresses[0]
        path      = "/share1"
        read_only = false
      }
    }
  }
}

resource "google_filestore_instance" "default" {
  name     = "cloudrun-worker-pool"
  location = "us-central1-b"
  tier     = "BASIC_HDD"

  file_shares {
    capacity_gb = 1024
    name        = "share1"
  }

  networks {
    network = "default"
    modes   = ["MODE_IPV4"]
  }
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=cloudrunv2_worker_pool_custom_audiences&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloudrunv2 Worker Pool Custom Audiences


```hcl
resource "google_cloud_run_v2_worker_pool" "default" {
  name     = "cloudrun-worker-pool"
  location = "us-central1"
  deletion_protection = false
  launch_stage = "ALPHA"

  custom_audiences = ["aud1"]
  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/worker-pool"
    }
  }
}
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  Name of the WorkerPool.

* `template` -
  (Required)
  The template used to create revisions for this WorkerPool.
  Structure is [documented below](#nested_template).

* `location` -
  (Required)
  The location of the cloud run worker pool


<a name="nested_template"></a>The `template` block supports:

* `revision` -
  (Optional)
  The unique name for the revision. If this field is omitted, it will be automatically generated based on the WorkerPool name.

* `labels` -
  (Optional)
  Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc.
  For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
  Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
  All system labels in v1 now have a corresponding field in v2 WorkerPoolRevisionTemplate.

* `annotations` -
  (Optional)
  Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
  Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
  All system annotations in v1 now have a corresponding field in v2 WorkerPoolRevisionTemplate.
  This field follows Kubernetes annotations' namespacing, limits, and rules.

* `vpc_access` -
  (Optional)
  VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
  Structure is [documented below](#nested_template_vpc_access).

* `service_account` -
  (Optional)
  Email address of the IAM service account associated with the revision of the WorkerPool. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.

* `containers` -
  (Optional)
  Holds the containers that define the unit of execution for this WorkerPool.
  Structure is [documented below](#nested_template_containers).

* `volumes` -
  (Optional)
  A list of Volumes to make available to containers.
  Structure is [documented below](#nested_template_volumes).

* `encryption_key` -
  (Optional)
  A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek

* `encryption_key_revocation_action` -
  (Optional)
  The action to take if the encryption key is revoked.
  Possible values are: `PREVENT_NEW`, `SHUTDOWN`.

* `encryption_key_shutdown_duration` -
  (Optional)
  If encryptionKeyRevocationAction is SHUTDOWN, the duration before shutting down all instances. The minimum increment is 1 hour.
  A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".

* `node_selector` -
  (Optional)
  Node Selector describes the hardware requirements of the resources.
  Structure is [documented below](#nested_template_node_selector).

* `gpu_zonal_redundancy_disabled` -
  (Optional)
  True if GPU zonal redundancy is disabled on this revision.


<a name="nested_template_vpc_access"></a>The `vpc_access` block supports:

* `egress` -
  (Optional)
  Traffic VPC egress settings.
  Possible values are: `ALL_TRAFFIC`, `PRIVATE_RANGES_ONLY`.

* `network_interfaces` -
  (Optional)
  Direct VPC egress settings. Currently only single network interface is supported.
  Structure is [documented below](#nested_template_vpc_access_network_interfaces).


<a name="nested_template_vpc_access_network_interfaces"></a>The `network_interfaces` block supports:

* `network` -
  (Optional)
  The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both
  network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be
  looked up from the subnetwork.

* `subnetwork` -
  (Optional)
  The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both
  network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the
  subnetwork with the same name with the network will be used.

* `tags` -
  (Optional)
  Network tags applied to this Cloud Run WorkerPool.

<a name="nested_template_containers"></a>The `containers` block supports:

* `name` -
  (Optional)
  Name of the container specified as a DNS_LABEL.

* `image` -
  (Required)
  URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images

* `command` -
  (Optional)
  Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

* `args` -
  (Optional)
  Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.

* `env` -
  (Optional)
  List of environment variables to set in the container.
  Structure is [documented below](#nested_template_containers_containers_env).

* `resources` -
  (Optional)
  Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
  Structure is [documented below](#nested_template_containers_containers_resources).

* `volume_mounts` -
  (Optional)
  Volume to mount into the container's filesystem.
  Structure is [documented below](#nested_template_containers_containers_volume_mounts).

* `working_dir` -
  (Optional)
  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.

* `depends_on` -
  (Optional)
  Containers which should be started before this container. If specified the container will wait to start until all containers with the listed names are healthy.


<a name="nested_template_containers_containers_env"></a>The `env` block supports:

* `name` -
  (Required)
  Name of the environment variable. Must be a C_IDENTIFIER, and may not exceed 32768 characters.

* `value` -
  (Optional)
  Literal value of the environment variable. Defaults to "" and the maximum allowed length is 32768 characters. Variable references are not supported in Cloud Run.

* `value_source` -
  (Optional)
  Source for the environment variable's value.
  Structure is [documented below](#nested_template_containers_containers_env_env_value_source).


<a name="nested_template_containers_containers_env_env_value_source"></a>The `value_source` block supports:

* `secret_key_ref` -
  (Optional)
  Selects a secret and a specific version from Cloud Secret Manager.
  Structure is [documented below](#nested_template_containers_containers_env_env_value_source_secret_key_ref).


<a name="nested_template_containers_containers_env_env_value_source_secret_key_ref"></a>The `secret_key_ref` block supports:

* `secret` -
  (Required)
  The name of the secret in Cloud Secret Manager. Format: {secretName} if the secret is in the same project. projects/{project}/secrets/{secretName} if the secret is in a different project.

* `version` -
  (Optional)
  The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.

<a name="nested_template_containers_containers_resources"></a>The `resources` block supports:

* `limits` -
  (Optional)
  Only memory, CPU, and nvidia.com/gpu are supported. Use key `cpu` for CPU limit, `memory` for memory limit, `nvidia.com/gpu` for gpu limit. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go

<a name="nested_template_containers_containers_volume_mounts"></a>The `volume_mounts` block supports:

* `name` -
  (Required)
  This must match the Name of a Volume.

* `mount_path` -
  (Required)
  Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run

<a name="nested_template_volumes"></a>The `volumes` block supports:

* `name` -
  (Required)
  Volume's name.

* `secret` -
  (Optional)
  Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  Structure is [documented below](#nested_template_volumes_volumes_secret).

* `cloud_sql_instance` -
  (Optional)
  For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
  Structure is [documented below](#nested_template_volumes_volumes_cloud_sql_instance).

* `empty_dir` -
  (Optional)
  Ephemeral storage used as a shared volume.
  Structure is [documented below](#nested_template_volumes_volumes_empty_dir).

* `gcs` -
  (Optional)
  Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment.
  Structure is [documented below](#nested_template_volumes_volumes_gcs).

* `nfs` -
  (Optional)
  Represents an NFS mount.
  Structure is [documented below](#nested_template_volumes_volumes_nfs).


<a name="nested_template_volumes_volumes_secret"></a>The `secret` block supports:

* `secret` -
  (Required)
  The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.

* `default_mode` -
  (Optional)
  Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.

* `items` -
  (Optional)
  If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
  Structure is [documented below](#nested_template_volumes_volumes_secret_items).


<a name="nested_template_volumes_volumes_secret_items"></a>The `items` block supports:

* `path` -
  (Required)
  The relative path of the secret in the container.

* `version` -
  (Optional)
  The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version

* `mode` -
  (Optional)
  Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.

<a name="nested_template_volumes_volumes_cloud_sql_instance"></a>The `cloud_sql_instance` block supports:

* `instances` -
  (Optional)
  The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}

<a name="nested_template_volumes_volumes_empty_dir"></a>The `empty_dir` block supports:

* `medium` -
  (Optional)
  The different types of medium supported for EmptyDir.
  Default value is `MEMORY`.
  Possible values are: `MEMORY`.

* `size_limit` -
  (Optional)
  Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. This field's values are of the 'Quantity' k8s type: https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir.

<a name="nested_template_volumes_volumes_gcs"></a>The `gcs` block supports:

* `bucket` -
  (Required)
  GCS Bucket name

* `read_only` -
  (Optional)
  If true, mount the GCS bucket as read-only

* `mount_options` -
  (Optional, [Beta](https://terraform.io/docs/providers/google/guides/provider_versions.html))
  A list of flags to pass to the gcsfuse command for configuring this volume.
  Flags should be passed without leading dashes.

<a name="nested_template_volumes_volumes_nfs"></a>The `nfs` block supports:

* `server` -
  (Required)
  Hostname or IP address of the NFS server

* `path` -
  (Required)
  Path that is exported by the NFS server.

* `read_only` -
  (Optional)
  If true, mount the NFS volume as read only

<a name="nested_template_node_selector"></a>The `node_selector` block supports:

* `accelerator` -
  (Required)
  The GPU to attach to an instance. See https://cloud.google.com/run/docs/configuring/services/gpu for configuring GPU.

- - -


* `description` -
  (Optional)
  User-provided description of the WorkerPool. This field currently has a 512-character limit.

* `labels` -
  (Optional)
  Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
  environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
  Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
  All system labels in v1 now have a corresponding field in v2 WorkerPool.
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `annotations` -
  (Optional)
  Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
  Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
  All system annotations in v1 now have a corresponding field in v2 WorkerPool.
  This field follows Kubernetes annotations' namespacing, limits, and rules.
  **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
  Please refer to the field `effective_annotations` for all of the annotations present on the resource.

* `client` -
  (Optional)
  Arbitrary identifier for the API client.

* `client_version` -
  (Optional)
  Arbitrary version identifier for the API client.

* `launch_stage` -
  (Optional)
  The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
  If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
  For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
  Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.

* `binary_authorization` -
  (Optional)
  Settings for the Binary Authorization feature.
  Structure is [documented below](#nested_binary_authorization).

* `custom_audiences` -
  (Optional)
  One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
  For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.

* `scaling` -
  (Optional)
  Scaling settings that apply to the worker pool.
  Structure is [documented below](#nested_scaling).

* `instance_splits` -
  (Optional)
  Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
  Structure is [documented below](#nested_instance_splits).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.

* `deletion_protection` - (Optional) Whether Terraform will be prevented from destroying the service. Defaults to true.
When a`terraform destroy` or `terraform apply` would delete the service,
the command will fail if this field is not set to false in Terraform state.
When the field is set to true or unset in Terraform state, a `terraform apply`
or `terraform destroy` that would delete the WorkerPool will fail.
When the field is set to false, deleting the WorkerPool is allowed.


<a name="nested_binary_authorization"></a>The `binary_authorization` block supports:

* `breakglass_justification` -
  (Optional)
  If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass

* `use_default` -
  (Optional)
  If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.

* `policy` -
  (Optional)
  The path to a binary authorization policy. Format: projects/{project}/platforms/cloudRun/{policy-name}

<a name="nested_scaling"></a>The `scaling` block supports:

* `scaling_mode` -
  (Optional)
  The scaling mode for the worker pool. It defaults to MANUAL.
  Possible values are: `AUTOMATIC`, `MANUAL`.

* `min_instance_count` -
  (Optional)
  The minimum count of instances distributed among revisions based on the specified instance split percentages.

* `max_instance_count` -
  (Optional)
  The maximum count of instances distributed among revisions based on the specified instance split percentages.

* `manual_instance_count` -
  (Optional)
  The total number of instances in manual scaling mode.

<a name="nested_instance_splits"></a>The `instance_splits` block supports:

* `type` -
  (Optional)
  The allocation type for this instance split.
  Possible values are: `INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST`, `INSTANCE_SPLIT_ALLOCATION_TYPE_REVISION`.

* `revision` -
  (Optional)
  Revision to which to assign this portion of instances, if split allocation is by revision.

* `percent` -
  (Optional)
  Specifies percent of the instance split to this Revision. This defaults to zero if unspecified.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/workerPools/{{name}}`

* `uid` -
  Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.

* `generation` -
  A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.

* `create_time` -
  The creation time.

* `update_time` -
  The last-modified time.

* `delete_time` -
  The deletion time.

* `expire_time` -
  For a deleted resource, the time after which it will be permanently deleted.

* `creator` -
  Email address of the authenticated creator.

* `last_modifier` -
  Email address of the last authenticated modifier.

* `observed_generation` -
  The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.

* `terminal_condition` -
  The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
  Structure is [documented below](#nested_terminal_condition).

* `conditions` -
  The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
  Structure is [documented below](#nested_conditions).

* `latest_ready_revision` -
  Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.

* `latest_created_revision` -
  Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.

* `instance_split_statuses` -
  Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.
  Structure is [documented below](#nested_instance_split_statuses).

* `reconciling` -
  Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.
  When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
  If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
  If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.

* `etag` -
  A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.

* `effective_annotations` -
  All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.


<a name="nested_terminal_condition"></a>The `terminal_condition` block contains:

* `type` -
  (Output)
  type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.

* `state` -
  (Output)
  State of the condition.

* `message` -
  (Output)
  Human readable message indicating details about the current status.

* `last_transition_time` -
  (Output)
  Last time the condition transitioned from one status to another.

* `severity` -
  (Output)
  How to interpret failures of this condition, one of Error, Warning, Info

* `reason` -
  (Output)
  A common (workerPool-level) reason for this condition.

* `revision_reason` -
  (Output)
  A reason for the revision condition.

* `execution_reason` -
  (Output)
  A reason for the execution condition.

<a name="nested_conditions"></a>The `conditions` block contains:

* `type` -
  (Output)
  type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.

* `state` -
  (Output)
  State of the condition.

* `message` -
  (Output)
  Human readable message indicating details about the current status.

* `last_transition_time` -
  (Output)
  Last time the condition transitioned from one status to another.
  A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".

* `severity` -
  (Output)
  How to interpret failures of this condition, one of Error, Warning, Info

* `reason` -
  (Output)
  A common (workerPool-level) reason for this condition.

* `revision_reason` -
  (Output)
  A reason for the revision condition.

* `execution_reason` -
  (Output)
  A reason for the execution condition.

<a name="nested_instance_split_statuses"></a>The `instance_split_statuses` block contains:

* `type` -
  (Output)
  The allocation type for this instance split.

* `revision` -
  (Output)
  Revision to which this instance split is assigned.

* `percent` -
  (Output)
  Specifies percent of the instance split to this Revision.

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


WorkerPool can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/workerPools/{{name}}`
* `{{project}}/{{location}}/{{name}}`
* `{{location}}/{{name}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WorkerPool using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/workerPools/{{name}}"
  to = google_cloud_run_v2_worker_pool.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), WorkerPool can be imported using one of the formats above. For example:

```
$ terraform import google_cloud_run_v2_worker_pool.default projects/{{project}}/locations/{{location}}/workerPools/{{name}}
$ terraform import google_cloud_run_v2_worker_pool.default {{project}}/{{location}}/{{name}}
$ terraform import google_cloud_run_v2_worker_pool.default {{location}}/{{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
