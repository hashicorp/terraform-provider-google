---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/saasservicemgmt/Release.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "SaaS Runtime"
description: |-
  A version to be propagated and deployed to Units.
---

# google_saas_runtime_release

A version to be propagated and deployed to Units. It points to a specific version of a Blueprint that can be applied to Units, for example, via a Rollout.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.


## Example Usage - Saas Runtime Release Basic


```hcl
resource "google_saas_runtime_saas" "example_saas" {
  provider = google-beta
  saas_id  = "example-saas"
  location = "global"

  locations {
    name = "us-central1"
  }
}

resource "google_saas_runtime_unit_kind" "example_unitkind" {
  provider     = google-beta
  location     = "global"
  unit_kind_id = "example-unitkind"
  saas         = google_saas_runtime_saas.example_saas.id
}

resource "google_saas_runtime_release" "example_previous" {
  provider          = google-beta
  location          = "global"
  release_id        = "previous-release"
  unit_kind         = google_saas_runtime_unit_kind.example_unitkind.id
  blueprint {
    package = "us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-alpha-image@sha256:7992fdbaeaf998ecd31a7f937bb26e38a781ecf49b24857a6176c1e9bfc299ee"
  }
}

resource "google_saas_runtime_release" "example" {
  provider          = google-beta
  location          = "global"
  release_id        = "example-release"
  unit_kind         = google_saas_runtime_unit_kind.example_unitkind.id
  blueprint {
    package = "us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-beta-image@sha256:7bba0fa85b2956df7768f7b32e715b6fe11f4f4193e2a70a35bf3f286a6cdf9e"
  }
  input_variable_defaults {
    variable = "name"
    value    = "test"
    type     = "STRING"
  }
}
```

## Argument Reference

The following arguments are supported:


* `unit_kind` -
  (Required)
  Reference to the UnitKind this Release corresponds to (required and
  immutable once created).

* `location` -
  (Required)
  Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.

* `release_id` -
  (Required)
  The ID value for the new release.


* `annotations` -
  (Optional)
  Annotations is an unstructured key-value map stored with a resource that
  may be set by external tools to store and retrieve arbitrary metadata.
  They are not queryable and should be preserved when modifying objects.
  More info: https://kubernetes.io/docs/user-guide/annotations
  **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
  Please refer to the field `effective_annotations` for all of the annotations present on the resource.

* `blueprint` -
  (Optional)
  Blueprints are OCI Images that contain all of the artifacts needed to
  provision a unit. Metadata such as, type of the engine used to actuate the
  blueprint (e.g. terraform, helm etc) and version will come from the image
  manifest. If the hostname is omitted, it will be assumed to be the regional
  path to Artifact Registry (eg. us-east1-docker.pkg.dev).
  Structure is [documented below](#nested_blueprint).

* `input_variable_defaults` -
  (Optional)
  Mapping of input variables to default values. Maximum 100
  Structure is [documented below](#nested_input_variable_defaults).

* `labels` -
  (Optional)
  The labels on the resource, which can be used for categorization.
  similar to Kubernetes resource labels.
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `release_requirements` -
  (Optional)
  Set of requirements to be fulfilled on the Unit when using this Release.
  Structure is [documented below](#nested_release_requirements).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.



<a name="nested_blueprint"></a>The `blueprint` block supports:

* `engine` -
  (Output)
  Type of the engine used to actuate the blueprint. e.g. terraform, helm etc.

* `package` -
  (Optional)
  URI to a blueprint used by the Unit (required unless unitKind or release is
  set).

* `version` -
  (Output)
  Version metadata if present on the blueprint.

<a name="nested_input_variable_defaults"></a>The `input_variable_defaults` block supports:

* `type` -
  (Optional)
  Name of a supported variable type. Supported types are STRING, INT, BOOL.
  Possible values are: `TYPE_UNSPECIFIED`, `STRING`, `INT`, `BOOL`.

* `value` -
  (Optional)
  String encoded value for the variable.

* `variable` -
  (Required)
  Name of the variable from actuation configs.

<a name="nested_release_requirements"></a>The `release_requirements` block supports:

* `upgradeable_from_releases` -
  (Optional)
  A list of releases from which a unit can be upgraded to this one
  (optional). If left empty no constraints will be applied. When provided,
  unit upgrade requests to this release will check and enforce this
  constraint.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/releases/{{release_id}}`

* `create_time` -
  The timestamp when the resource was created.

* `etag` -
  An opaque value that uniquely identifies a version or
  generation of a resource. It can be used to confirm that the client
  and server agree on the ordering of a resource being written.

* `input_variables` -
  List of input variables declared on the blueprint and can be present with
  their values on the unit spec
  Structure is [documented below](#nested_input_variables).

* `name` -
  Identifier. The resource name (full URI of the resource) following the standard naming
  scheme:
  "projects/{project}/locations/{location}/releases/{release}"

* `output_variables` -
  List of output variables declared on the blueprint and can be present with
  their values on the unit status
  Structure is [documented below](#nested_output_variables).

* `uid` -
  The unique identifier of the resource. UID is unique in the time
  and space for this resource within the scope of the service. It is
  typically generated by the server on successful creation of a resource
  and must not be changed. UID is used to uniquely identify resources
  with resource name reuses. This should be a UUID4.

* `update_time` -
  The timestamp when the resource was last updated. Any
  change to the resource made by users must refresh this value.
  Changes to a resource made by the service should refresh this value.

* `effective_annotations` -
  All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


<a name="nested_input_variables"></a>The `input_variables` block contains:

* `type` -
  (Optional)
  Name of a supported variable type. Supported types are STRING, INT, BOOL.
  Possible values are: `TYPE_UNSPECIFIED`, `STRING`, `INT`, `BOOL`.

* `value` -
  (Optional)
  String encoded value for the variable.

* `variable` -
  (Required)
  Name of the variable from actuation configs.

<a name="nested_output_variables"></a>The `output_variables` block contains:

* `type` -
  (Optional)
  Name of a supported variable type. Supported types are STRING, INT, BOOL.
  Possible values are: `TYPE_UNSPECIFIED`, `STRING`, `INT`, `BOOL`.

* `value` -
  (Optional)
  String encoded value for the variable.

* `variable` -
  (Required)
  Name of the variable from actuation configs.

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Release can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/releases/{{release_id}}`
* `{{project}}/{{location}}/{{release_id}}`
* `{{location}}/{{release_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Release using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/releases/{{release_id}}"
  to = google_saas_runtime_release.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Release can be imported using one of the formats above. For example:

```
$ terraform import google_saas_runtime_release.default projects/{{project}}/locations/{{location}}/releases/{{release_id}}
$ terraform import google_saas_runtime_release.default {{project}}/{{location}}/{{release_id}}
$ terraform import google_saas_runtime_release.default {{location}}/{{release_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
