---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Dataproc on GDC"
description: |-
  A service instance is an instance of the Dataproc operator running on a GDC cluster.
---

# google_dataproc_gdc_service_instance

A service instance is an instance of the Dataproc operator running on a GDC cluster.


To get more information about ServiceInstance, see:

* [API documentation](https://cloud.google.com/dataproc-gdc/docs/reference/rest/v1/projects.locations.serviceInstances)
* How-to Guides
    * [Dataproc Intro](https://cloud.google.com/dataproc/)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=dataprocgdc_serviceinstance&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Dataprocgdc Serviceinstance


```hcl
resource "google_dataproc_gdc_service_instance" "service-instance" {
  service_instance_id = "tf-e2e-service-instance"
  project         = "my-project"
  location        = "us-west2"
  gdce_cluster {
      gdce_cluster = "projects/gdce-cluster-monitoring/locations/us-west2/clusters/gdce-prism-prober-ord106"
  }
  display_name = "A service instance"
  labels = {
    "test-label": "label-value"
  }
  service_account = "dataprocgdc-cep-workflows@gdce-cluster-monitoring.iam.gserviceaccount.com"
}
```

## Argument Reference

The following arguments are supported:


* `location` -
  (Required)
  Location of the resource.

* `service_instance_id` -
  (Required)
  Id of the service instance.


- - -


* `gdce_cluster` -
  (Optional)
  Gdce cluster information.
  Structure is [documented below](#nested_gdce_cluster).

* `display_name` -
  (Optional)
  User-provided human-readable name to be used in user interfaces.

* `labels` -
  (Optional)
  The labels to associate with this service instance. Labels may be used for filtering and billing tracking. 
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `spark_service_instance_config` -
  (Optional)
  Spark-specific service instance configuration.

* `service_account` -
  (Optional)
  Requested service account to associate with ServiceInstance.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_gdce_cluster"></a>The `gdce_cluster` block supports:

* `gdce_cluster` -
  (Required)
  Gdce cluster resource id.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/serviceInstances/{{service_instance_id}}`

* `name` -
  Identifier. The name of the service instance.

* `uid` -
  System generated unique identifier for this service instance, formatted as UUID4.

* `create_time` -
  The timestamp when the resource was created.

* `update_time` -
  The timestamp when the resource was most recently updated.

* `requested_state` -
  The intended state to which the service instance is reconciling. Possible values:
  * `CREATING`
  * `ACTIVE`
  * `DISCONNECTED`
  * `DELETING`
  * `STOPPING`
  * `STOPPED`
  * `STARTING`
  * `UPDATING`
  * `FAILED`

* `state` -
  The current state. Possible values:
  * `CREATING`
  * `ACTIVE`
  * `DISCONNECTED`
  * `DELETING`
  * `STOPPING`
  * `STOPPED`
  * `STARTING`
  * `UPDATING`
  * `FAILED`

* `reconciling` -
  Whether the service instance is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.

* `state_message` -
  A message explaining the current state.

* `effective_service_account` -
  Effective service account associated with ServiceInstance. This will be the service_account if specified. Otherwise, it will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings applied.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


ServiceInstance can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/serviceInstances/{{service_instance_id}}`
* `{{project}}/{{location}}/{{service_instance_id}}`
* `{{location}}/{{service_instance_id}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ServiceInstance using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/serviceInstances/{{service_instance_id}}"
  to = google_dataproc_gdc_service_instance.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), ServiceInstance can be imported using one of the formats above. For example:

```
$ terraform import google_dataproc_gdc_service_instance.default projects/{{project}}/locations/{{location}}/serviceInstances/{{service_instance_id}}
$ terraform import google_dataproc_gdc_service_instance.default {{project}}/{{location}}/{{service_instance_id}}
$ terraform import google_dataproc_gdc_service_instance.default {{location}}/{{service_instance_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
