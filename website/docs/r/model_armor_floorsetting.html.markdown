---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/modelarmorglobal/Floorsetting.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Model Armor"
description: |-
  Model Armor floor settings define rules that dictate minimum requirements for all Model Armor templates created at a specific point in the Google Cloud resource hierarchy (that is, at an organization, folder, or project level).
---

# google_model_armor_floorsetting

Model Armor floor settings define rules that dictate minimum requirements for all Model Armor templates created at a specific point in the Google Cloud resource hierarchy (that is, at an organization, folder, or project level). If there are
multiple floor settings that conflict with each other, the settings lower in the resource hierarchy take precedence
For more information, checkout https://cloud.google.com/security-command-center/docs/model_armor_floor_settings



## Example Usage - Modelarmor Floorsetting Basic


```hcl
resource "google_model_armor_floorsetting" "floorsetting-basic" {
  parent      = "projects/my-project-name"
  location    = "global"

  filter_config {

  }
}
```
## Example Usage - Modelarmor Floorsetting Filter Config


```hcl
resource "google_model_armor_floorsetting" "floorsetting-filter-config" {
  location    = "global"
  parent      = "project/my-project-name"

  filter_config {
    rai_settings {
      rai_filters {
        filter_type      = "DANGEROUS"
        confidence_level = "MEDIUM_AND_ABOVE"
      }
    }
    sdp_settings {
      basic_config {
          filter_enforcement = "ENABLED"
      }
    }
    pi_and_jailbreak_filter_settings {
      filter_enforcement = "ENABLED"
      confidence_level   = "HIGH"
    }
    malicious_uri_filter_settings {
      filter_enforcement = "ENABLED"
    }
  }

  enable_floor_setting_enforcement = true
}
```
## Example Usage - Modelarmor Floorsetting Ai Platform Metadata


```hcl
resource "google_model_armor_floorsetting" "floorsetting-integrated-metadata" {
  location    = "global"
  parent      = "projects/my-project-name"

  filter_config {

  }

  enable_floor_setting_enforcement = false

  ai_platform_floor_setting {
    inspect_only            = true
    enable_cloud_logging    = true
  }

  floor_setting_metadata {
    multi_language_detection {
      enable_multi_language_detection = false
    }
  }
}
```

## Argument Reference

The following arguments are supported:


* `filter_config` -
  (Required)
  Filters configuration.
  Structure is [documented below](#nested_filter_config).

* `location` -
  (Required)
  Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.

* `parent` -
  (Required)
  Will be any one of these:
  * `projects/{project}`
  * `folders/{folder}`
  * `organizations/{organizationId}`


* `enable_floor_setting_enforcement` -
  (Optional)
  Floor Settings enforcement status.

* `integrated_services` -
  (Optional)
  List of integrated services for which the floor setting is applicable.

* `ai_platform_floor_setting` -
  (Optional)
  AI Platform floor setting.
  Structure is [documented below](#nested_ai_platform_floor_setting).

* `floor_setting_metadata` -
  (Optional)
  Metadata to enable multi language detection via floor setting.
  Structure is [documented below](#nested_floor_setting_metadata).



<a name="nested_filter_config"></a>The `filter_config` block supports:

* `malicious_uri_filter_settings` -
  (Optional)
  Malicious URI filter settings.
  Structure is [documented below](#nested_filter_config_malicious_uri_filter_settings).

* `rai_settings` -
  (Optional)
  Responsible AI Filter settings.
  Structure is [documented below](#nested_filter_config_rai_settings).

* `sdp_settings` -
  (Optional)
  Sensitive Data Protection settings.
  Structure is [documented below](#nested_filter_config_sdp_settings).

* `pi_and_jailbreak_filter_settings` -
  (Optional)
  Prompt injection and Jailbreak Filter settings.
  Structure is [documented below](#nested_filter_config_pi_and_jailbreak_filter_settings).


<a name="nested_filter_config_malicious_uri_filter_settings"></a>The `malicious_uri_filter_settings` block supports:

* `filter_enforcement` -
  (Optional)
  Tells whether the Malicious URI filter is enabled or disabled.
  Possible values:
  ENABLED
  DISABLED

<a name="nested_filter_config_rai_settings"></a>The `rai_settings` block supports:

* `rai_filters` -
  (Required)
  List of Responsible AI filters enabled for template.
  Structure is [documented below](#nested_filter_config_rai_settings_rai_filters).


<a name="nested_filter_config_rai_settings_rai_filters"></a>The `rai_filters` block supports:

* `filter_type` -
  (Required)
  Possible values:
  SEXUALLY_EXPLICIT
  HATE_SPEECH
  HARASSMENT
  DANGEROUS

* `confidence_level` -
  (Optional)
  Possible values:
  LOW_AND_ABOVE
  MEDIUM_AND_ABOVE
  HIGH

<a name="nested_filter_config_sdp_settings"></a>The `sdp_settings` block supports:

* `advanced_config` -
  (Optional)
  Sensitive Data Protection Advanced configuration.
  Structure is [documented below](#nested_filter_config_sdp_settings_advanced_config).

* `basic_config` -
  (Optional)
  Sensitive Data Protection basic configuration.
  Structure is [documented below](#nested_filter_config_sdp_settings_basic_config).


<a name="nested_filter_config_sdp_settings_advanced_config"></a>The `advanced_config` block supports:

* `inspect_template` -
  (Optional)
  Sensitive Data Protection inspect template resource name
  If only inspect template is provided (de-identify template not provided),
  then Sensitive Data Protection InspectContent action is performed during
  Sanitization. All Sensitive Data Protection findings identified during
  inspection will be returned as SdpFinding in SdpInsepctionResult.
  e.g:-
  `projects/{project}/locations/{location}/inspectTemplates/{inspect_template}`

* `deidentify_template` -
  (Optional)
  Optional Sensitive Data Protection Deidentify template resource name.
  If provided then DeidentifyContent action is performed during Sanitization
  using this template and inspect template. The De-identified data will
  be returned in SdpDeidentifyResult.
  Note that all info-types present in the deidentify template must be present
  in inspect template.
  e.g.
  `projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}`

<a name="nested_filter_config_sdp_settings_basic_config"></a>The `basic_config` block supports:

* `filter_enforcement` -
  (Optional)
  Tells whether the Sensitive Data Protection basic config is enabled or
  disabled.
  Possible values:
  ENABLED
  DISABLED

<a name="nested_filter_config_pi_and_jailbreak_filter_settings"></a>The `pi_and_jailbreak_filter_settings` block supports:

* `filter_enforcement` -
  (Optional)
  Tells whether Prompt injection and Jailbreak filter is enabled or
  disabled.
  Possible values:
  ENABLED
  DISABLED

* `confidence_level` -
  (Optional)
  Possible values:
  LOW_AND_ABOVE
  MEDIUM_AND_ABOVE
  HIGH

<a name="nested_ai_platform_floor_setting"></a>The `ai_platform_floor_setting` block supports:

* `inspect_only` -
  (Optional)
  If true, Model Armor filters will be run in inspect only mode. No action
  will be taken on the request.

* `inspect_and_block` -
  (Optional)
  If true, Model Armor filters will be run in inspect and block mode.
  Requests that trip Model Armor filters will be blocked.

* `enable_cloud_logging` -
  (Optional)
  If true, log Model Armor filter results to Cloud Logging.

<a name="nested_floor_setting_metadata"></a>The `floor_setting_metadata` block supports:

* `multi_language_detection` -
  (Optional)
  Metadata for multi language detection.
  Structure is [documented below](#nested_floor_setting_metadata_multi_language_detection).


<a name="nested_floor_setting_metadata_multi_language_detection"></a>The `multi_language_detection` block supports:

* `enable_multi_language_detection` -
  (Required)
  If true, multi language detection will be enabled.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `{{parent}}/locations/{{location}}/floorSetting`

* `name` -
  Identifier. The resource name.

* `create_time` -
  [Output only] Create timestamp

* `update_time` -
  [Output only] Update timestamp


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Floorsetting can be imported using any of these accepted formats:

* `{{parent}}/locations/{{location}}/floorSetting`
* `{{parent}}/{{location}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Floorsetting using one of the formats above. For example:

```tf
import {
  id = "{{parent}}/locations/{{location}}/floorSetting"
  to = google_model_armor_floorsetting.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Floorsetting can be imported using one of the formats above. For example:

```
$ terraform import google_model_armor_floorsetting.default {{parent}}/locations/{{location}}/floorSetting
$ terraform import google_model_armor_floorsetting.default {{parent}}/{{location}}
```
