---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networksecurity/BackendAuthenticationConfig.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Network Security"
description: |-
  BackendAuthenticationConfig groups the TrustConfig together with other settings that control how the load balancer authenticates, and expresses its identity to the backend.
---

# google_network_security_backend_authentication_config

BackendAuthenticationConfig groups the TrustConfig together with other settings that control how the load balancer authenticates, and expresses its identity to the backend.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.

To get more information about BackendAuthenticationConfig, see:
* How-to Guides
    * [Backend mTLS](https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#backend-authentication-config)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=network_security_backend_authentication_config_basic&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Network Security Backend Authentication Config Basic


```hcl
resource "google_network_security_backend_authentication_config" "default" {
  provider = google-beta
  name             = "my-backend-authentication-config"
  labels           = {
    foo = "bar"
  }
  description      = "my description"
  well_known_roots = "PUBLIC_ROOTS"
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=network_security_backend_authentication_config_full&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Network Security Backend Authentication Config Full


```hcl
resource "google_certificate_manager_certificate" "certificate" {
  provider = google-beta
  name     = "my-certificate"
  labels   = {
    foo = "bar"
  }
  location    = "global"
  self_managed {
    pem_certificate = file("test-fixtures/cert.pem")
    pem_private_key = file("test-fixtures/key.pem")
  }
  scope       = "CLIENT_AUTH"
}

resource "google_certificate_manager_trust_config" "trust_config" {
  provider    = google-beta
  name        = "my-trust-config"
  description = "sample description for the trust config"
  location    = "global"

  trust_stores {
    trust_anchors { 
      pem_certificate = file("test-fixtures/cert.pem")
    }
    intermediate_cas { 
      pem_certificate = file("test-fixtures/cert.pem")
    }
  }

  labels = {
    foo = "bar"
  }
}

resource "google_network_security_backend_authentication_config" "default" {
  provider = google-beta
  name     = "my-backend-authentication-config"
  labels   = {
    bar = "foo"
  }
  location           = "global"
  description        = "my description"
  well_known_roots   = "PUBLIC_ROOTS"
  client_certificate = google_certificate_manager_certificate.certificate.id
  trust_config       = google_certificate_manager_trust_config.trust_config.id
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md&cloudshell_working_dir=backend_service_tls_settings&open_in_editor=main.tf" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Backend Service Tls Settings


```hcl
resource "google_compute_backend_service" "default" {
  provider = google-beta
  name          = "backend-service"
  health_checks = [google_compute_health_check.default.id]
  load_balancing_scheme = "EXTERNAL_MANAGED"
  protocol = "HTTPS"
  tls_settings {
    sni = "example.com"
    subject_alt_names {
        dns_name = "example.com"
    }
    subject_alt_names {
        uniform_resource_identifier = "https://example.com"
    }
    authentication_config = "//networksecurity.googleapis.com/${google_network_security_backend_authentication_config.default.id}"
  }
}

resource "google_compute_health_check" "default" {
  provider = google-beta
  name = "health-check"
  http_health_check {
    port = 80
  }
}

resource "google_network_security_backend_authentication_config" "default" {
  provider = google-beta
  name             = "authentication"
  well_known_roots = "PUBLIC_ROOTS"
}
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  Name of the BackendAuthenticationConfig resource.


- - -


* `labels` -
  (Optional)
  Set of label tags associated with the BackendAuthenticationConfig resource.
  **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
  Please refer to the field `effective_labels` for all of the labels present on the resource.

* `description` -
  (Optional)
  A free-text description of the resource. Max length 1024 characters.

* `client_certificate` -
  (Optional)
  Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
  Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.

* `trust_config` -
  (Optional)
  Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
  A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.

* `well_known_roots` -
  (Optional)
  Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
  If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
  Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
  Possible values are: `NONE`, `PUBLIC_ROOTS`.

* `location` -
  (Optional)
  The location of the backend authentication config.
  The default value is `global`.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}`

* `create_time` -
  Time the BackendAuthenticationConfig was created in UTC.

* `update_time` -
  Time the BackendAuthenticationConfig was updated in UTC.

* `terraform_labels` -
  The combination of labels configured directly on the resource
   and default labels configured on the provider.

* `effective_labels` -
  All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


BackendAuthenticationConfig can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}`
* `{{project}}/{{location}}/{{name}}`
* `{{location}}/{{name}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import BackendAuthenticationConfig using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}"
  to = google_network_security_backend_authentication_config.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), BackendAuthenticationConfig can be imported using one of the formats above. For example:

```
$ terraform import google_network_security_backend_authentication_config.default projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}
$ terraform import google_network_security_backend_authentication_config.default {{project}}/{{location}}/{{name}}
$ terraform import google_network_security_backend_authentication_config.default {{location}}/{{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
