// ----------------------------------------------------------------------------
//
//	***     AUTO GENERATED CODE    ***    Type: Handwritten     ***
//
// ----------------------------------------------------------------------------
//
//	This code is generated by Magic Modules using the following:
//
//	Source file: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/third_party/terraform/scripts/teamcitytestscripts/teamcity.go
//
//	DO NOT EDIT this file directly. Any changes made to this file will be
//	overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------
package main

import (
	"bytes"
	"fmt"
	"regexp"
	"strings"
	"time"
)

const (
	TeamCityTimestampFormat = "2006-01-02T15:04:05.000"
	TeamCityTestStarted     = "##teamcity[testStarted timestamp='%s' name='%s']\n"
	TeamCityTestFailed      = "##teamcity[testFailed timestamp='%s' name='%s']\n"
	TeamCityTestFinished    = "##teamcity[testFinished timestamp='%s' name='%s']\n"
	TeamCityTestFailedRace  = "##teamcity[testFailed timestamp='%s' name='%s' message='Race detected!']\n"
	TeamCityTestIgnored     = "##teamcity[testIgnored timestamp='%s' name='%s']\n"
	TeamCityTestFailedPanic = "##teamcity[testFailed timestamp='%s' name='%s' message='Test ended in panic.']\n"
	TeamCityTestDiffFailed  = "##teamcity[testDiffFailed timestamp='%s' name='%s']\n"
	TeamCityTestStdOut      = "##teamcity[testStdOut name='%s' out='%s']\n"
	TeamCityTestStdErr      = "##teamcity[testStdErr name='%s' out='%s']\n"
)

var (
	// Looks for the final status line, accommodating both simple and full summaries.
	end     = regexp.MustCompile(`\n(PASS|SKIP|FAIL)(?:[\t\s]+(.*)\s+([0-9\.]+[a-z]+))?\s*$`)
	diff    = regexp.MustCompile(`\[Diff\] (.*)`)
	paniced = regexp.MustCompile(`panic:\s+(.*)\s+\[recovered\]\n`)
	//suite   = regexp.MustCompile("^(ok|FAIL)\\s+([^\\s]+)\\s+([\\.\\d]+)s")
	race = regexp.MustCompile("^WARNING: DATA RACE")
)

type TeamCityTest struct {
	Name, Output, ErrOutput, Duration string
	Race, Fail, Skip, Pass, Diff      bool
	Started                           time.Time
}

func NewTeamCityTest(testName string) *TeamCityTest {
	return &TeamCityTest{
		Name: testName,
	}
}

func (test *TeamCityTest) ParseTestRunnerOutput(testOutput string, errOutput string) {
	hasDataRace := race.MatchString(testOutput)
	test.Race = hasDataRace

	resultDiff := diff.FindStringSubmatch(testOutput)
	if resultDiff != nil {
		test.Diff = true
	} else {
		resultLines := end.FindStringSubmatch(testOutput)
		if resultLines != nil {
			switch resultLines[1] {
			case "PASS":
				test.Pass = true
			case "SKIP":
				test.Skip = true
			case "FAIL":
				test.Fail = true
			}
			test.Duration = resultLines[3]
		}
	}
	test.Output = testOutput
	test.ErrOutput = errOutput
}

func (test *TeamCityTest) FormatTestOutput() string {
	now := time.Now().Format(TeamCityTimestampFormat)

	var output bytes.Buffer

	output.WriteString(fmt.Sprintf(TeamCityTestStarted, test.Started.Format(TeamCityTimestampFormat), test.Name))

	output.WriteString(fmt.Sprintf(TeamCityTestStdOut, test.Name, escapeOutput(test.Output)))
	output.WriteString(fmt.Sprintf(TeamCityTestStdErr, test.Name, escapeOutput(test.ErrOutput)))

	if test.Diff {
		output.WriteString(fmt.Sprintf(TeamCityTestDiffFailed, now, test.Name))
		// have to fail so that teamcity catches failure correctly
		output.WriteString(fmt.Sprintf(TeamCityTestFailedPanic, now, test.Name))
		output.WriteString(fmt.Sprintf(TeamCityTestFinished, now, test.Name))
		return output.String()

	}

	if test.Fail {
		// skip failures for diff tests
		output.WriteString(fmt.Sprintf(TeamCityTestIgnored, now, test.Name))
		output.WriteString(fmt.Sprintf(TeamCityTestFinished, now, test.Name))
		return output.String()
	}

	if test.Race {
		output.WriteString(fmt.Sprintf(TeamCityTestFailedRace, now, test.Name))
		output.WriteString(fmt.Sprintf(TeamCityTestFinished, now, test.Name))
		return output.String()
	}

	if test.Skip {
		output.WriteString(fmt.Sprintf(TeamCityTestIgnored, now, test.Name))
		return output.String()
	}

	if test.Pass {
		output.WriteString(fmt.Sprintf(TeamCityTestFinished, now, test.Name))
		return output.String()
	}

	// instead of failing when something unexpected happens, we skip the test now
	output.WriteString(fmt.Sprintf(TeamCityTestIgnored, now, test.Name))

	return output.String()
}

func escapeOutput(outputLines string) string {
	newOutput := strings.Replace(outputLines, "|", "||", -1)
	newOutput = strings.Replace(newOutput, "\n", "|n", -1)
	newOutput = strings.Replace(newOutput, "'", "|'", -1)
	newOutput = strings.Replace(newOutput, "]", "|]", -1)
	newOutput = strings.Replace(newOutput, "[", "|[", -1)
	return newOutput
}
